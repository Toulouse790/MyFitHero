#!/bin/bash

# üîç SCRIPT DE VALIDATION FINALE - MyFitHero Production
# V√©rifie tous les aspects critiques avant d√©ploiement

echo "üöÄ VALIDATION FINALE MYFITHEORP - AUDIT DE PRODUCTION"
echo "==================================================="

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo ""
echo "üì¶ √âtape 1/6: Compilation TypeScript"
echo "===================================="

echo "üîß V√©rification de la compilation..."

# Test de compilation TypeScript
if npm run build > build.log 2>&1; then
    echo -e "${GREEN}‚úÖ Compilation r√©ussie${NC}"
    COMPILE_SUCCESS=true
else
    echo -e "${RED}‚ùå Erreurs de compilation d√©tect√©es${NC}"
    echo "üìã Logs de compilation:"
    tail -20 build.log
    COMPILE_SUCCESS=false
fi

echo ""
echo "üîç √âtape 2/6: Validation des Imports"
echo "===================================="

# V√©rifier les imports @/lib/utils
echo "üìù V√©rification des imports @/lib/utils..."
if grep -r "@/lib/utils" src/ --include="*.tsx" --include="*.ts" | head -5; then
    if [ -f "src/lib/utils.ts" ]; then
        echo -e "${GREEN}‚úÖ Fichier utils.ts pr√©sent${NC}"
        UTILS_OK=true
    else
        echo -e "${RED}‚ùå Fichier utils.ts manquant${NC}"
        UTILS_OK=false
    fi
else
    echo -e "${YELLOW}‚ö†Ô∏è Aucun import @/lib/utils trouv√©${NC}"
    UTILS_OK=true
fi

# V√©rifier les imports relatifs probl√©matiques
echo "üîó V√©rification des chemins d'import..."
BROKEN_IMPORTS=$(grep -r "import.*from.*'\.\./\.\./\.\./\.\./\.\." src/ --include="*.tsx" --include="*.ts" | wc -l)
if [ $BROKEN_IMPORTS -gt 0 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è ${BROKEN_IMPORTS} imports avec chemins tr√®s longs d√©tect√©s${NC}"
    IMPORTS_OK=false
else
    echo -e "${GREEN}‚úÖ Imports relatifs corrects${NC}"
    IMPORTS_OK=true
fi

echo ""
echo "üéØ √âtape 3/6: Validation des Lazy Routes"
echo "========================================"

echo "üîç V√©rification des composants lazy-loaded..."

# V√©rifier que tous les fichiers lazy-loaded existent
LAZY_FILES=(
    "src/features/auth/pages/ProfileComplete.tsx"
    "src/features/dashboard/pages/Dashboard.tsx" 
    "src/pages/NotFound.tsx"
    "src/components/LoadingScreen.tsx"
    "src/components/ErrorFallback.tsx"
)

LAZY_OK=true
for file in "${LAZY_FILES[@]}"; do
    if [ -f "$file" ]; then
        echo -e "${GREEN}‚úÖ $file${NC}"
    else
        echo -e "${RED}‚ùå $file MANQUANT${NC}"
        LAZY_OK=false
    fi
done

echo ""
echo "üé® √âtape 4/6: Validation des Composants UI"
echo "=========================================="

# V√©rifier la coh√©rence des hauteurs dans les composants UI
echo "üìè V√©rification des hauteurs standardis√©es..."

BUTTON_HEIGHT=$(grep -o "h-[0-9]\+" src/components/ui/button.tsx | head -1)
INPUT_HEIGHT=$(grep -o "h-[0-9]\+" src/components/ui/input.tsx | head -1)
SELECT_HEIGHT=$(grep -o "h-[0-9]\+" src/components/ui/select.tsx | head -1)

echo "Button hauteur: $BUTTON_HEIGHT"
echo "Input hauteur: $INPUT_HEIGHT"  
echo "Select hauteur: $SELECT_HEIGHT"

if [ "$BUTTON_HEIGHT" = "$INPUT_HEIGHT" ] && [ "$INPUT_HEIGHT" = "$SELECT_HEIGHT" ]; then
    echo -e "${GREEN}‚úÖ Hauteurs coh√©rentes entre composants UI${NC}"
    UI_CONSISTENT=true
else
    echo -e "${YELLOW}‚ö†Ô∏è Hauteurs incoh√©rentes entre composants UI${NC}"
    UI_CONSISTENT=false
fi

# V√©rifier les CSS custom properties
echo "üé® V√©rification des CSS custom properties..."
if grep -q "ring-offset-background" src/index.css; then
    echo -e "${GREEN}‚úÖ CSS custom properties d√©finies${NC}"
    CSS_OK=true
else
    echo -e "${RED}‚ùå CSS custom properties manquantes${NC}"
    CSS_OK=false
fi

echo ""
echo "üîê √âtape 5/6: Validation du Flux d'Authentification"
echo "=================================================="

# V√©rifier la coh√©rence du flux auth
echo "üîç V√©rification de useAuth.ts..."

if grep -q "from('user_profiles')" src/features/auth/hooks/useAuth.ts; then
    echo -e "${GREEN}‚úÖ Table 'user_profiles' utilis√©e correctement${NC}"
    AUTH_TABLE_OK=true
else
    echo -e "${RED}‚ùå Table d'auth incorrecte - devrait utiliser 'user_profiles'${NC}"
    AUTH_TABLE_OK=false
fi

if grep -q "onboarding_completed" src/features/auth/hooks/useAuth.ts; then
    echo -e "${GREEN}‚úÖ Champ onboarding_completed pr√©sent${NC}"
    ONBOARDING_OK=true
else
    echo -e "${RED}‚ùå Champ onboarding_completed manquant${NC}"
    ONBOARDING_OK=false
fi

echo ""
echo "‚ö° √âtape 6/6: Tests Rapides de Performance"
echo "========================================"

# V√©rifier la taille du bundle
if [ -d "dist" ]; then
    BUNDLE_SIZE=$(du -sh dist/ | cut -f1)
    echo "üì¶ Taille du bundle: $BUNDLE_SIZE"
    
    if [ -f "dist/assets/index-*.js" ]; then
        JS_SIZE=$(du -sh dist/assets/index-*.js | cut -f1)
        echo "üìÑ Taille JS principal: $JS_SIZE"
    fi
    
    echo -e "${GREEN}‚úÖ Bundle g√©n√©r√© avec succ√®s${NC}"
    BUNDLE_OK=true
else
    echo -e "${YELLOW}‚ö†Ô∏è Dossier dist/ non trouv√© - Ex√©cutez npm run build${NC}"
    BUNDLE_OK=false
fi

echo ""
echo "üìä R√âSUM√â DE L'AUDIT FINAL"
echo "========================="

# Calcul du score global
SCORE=0
TOTAL=8

[ "$COMPILE_SUCCESS" = true ] && ((SCORE++)) || echo "‚ùå Compilation"
[ "$UTILS_OK" = true ] && ((SCORE++)) || echo "‚ùå Utils imports" 
[ "$IMPORTS_OK" = true ] && ((SCORE++)) || echo "‚ùå Import paths"
[ "$LAZY_OK" = true ] && ((SCORE++)) || echo "‚ùå Lazy routes"
[ "$UI_CONSISTENT" = true ] && ((SCORE++)) || echo "‚ùå UI consistency"
[ "$CSS_OK" = true ] && ((SCORE++)) || echo "‚ùå CSS variables"
[ "$AUTH_TABLE_OK" = true ] && ((SCORE++)) || echo "‚ùå Auth table"
[ "$ONBOARDING_OK" = true ] && ((SCORE++)) || echo "‚ùå Onboarding flow"

PERCENTAGE=$(( SCORE * 100 / TOTAL ))

echo ""
echo "üéØ SCORE GLOBAL: $SCORE/$TOTAL ($PERCENTAGE%)"

if [ $SCORE -eq $TOTAL ]; then
    echo -e "${GREEN}üéâ PARFAIT! MyFitHero est pr√™t pour la production!${NC}"
    echo -e "${GREEN}‚úÖ Tous les crit√®res sont valid√©s${NC}"
    EXIT_CODE=0
elif [ $SCORE -ge 6 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è PRESQUE PR√äT! Quelques am√©liorations mineures restantes${NC}"
    echo -e "${YELLOW}üìã Corrigez les points marqu√©s ‚ùå ci-dessus${NC}"
    EXIT_CODE=1
else
    echo -e "${RED}‚ùå CORRECTION N√âCESSAIRE! Plusieurs probl√®mes critiques d√©tect√©s${NC}"
    echo -e "${RED}üîß Corrigez les probl√®mes avant d√©ploiement${NC}"
    EXIT_CODE=2
fi

echo ""
echo "üõ†Ô∏è COMMANDES UTILES:"
echo "‚Ä¢ npm run build    - Recompiler le projet"
echo "‚Ä¢ npm run dev      - Lancer en d√©veloppement"  
echo "‚Ä¢ npm run preview  - Pr√©visualiser la build"

echo ""
echo -e "${BLUE}üöÄ MyFitHero - Fitness App Ready for Production!${NC}"

exit $EXIT_CODE