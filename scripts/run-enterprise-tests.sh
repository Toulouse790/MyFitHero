#!/bin/bash

#####################################################################
# SCRIPT EX√âCUTION TESTS - MYFIT HERO ENTERPRISE
# Ex√©cution compl√®te de la suite de tests avec validation 85%+
#####################################################################

set -e  # Arr√™t sur erreur

# Configuration
PROJECT_DIR="/workspaces/MyFitHero"
COVERAGE_DIR="$PROJECT_DIR/coverage"
REPORTS_DIR="$PROJECT_DIR/test-reports"
LOG_FILE="$REPORTS_DIR/test-execution.log"

# Couleurs pour output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

# Fonction logging
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a "$LOG_FILE"
}

# Fonction d'affichage color√©
print_colored() {
    echo -e "${2}${1}${NC}"
}

# Fonction de validation des pr√©requis
validate_prerequisites() {
    print_colored "üîç VALIDATION DES PR√âREQUIS" "$BLUE"
    
    # V√©rifier Node.js
    if ! command -v node &> /dev/null; then
        print_colored "‚ùå Node.js n'est pas install√©" "$RED"
        exit 1
    fi
    
    # V√©rifier npm/yarn
    if ! command -v npm &> /dev/null; then
        print_colored "‚ùå npm n'est pas install√©" "$RED"
        exit 1
    fi
    
    # V√©rifier les d√©pendances
    if [ ! -d "node_modules" ]; then
        print_colored "üì¶ Installation des d√©pendances..." "$YELLOW"
        npm install
    fi
    
    print_colored "‚úÖ Pr√©requis valid√©s" "$GREEN"
}

# Fonction de nettoyage
cleanup_previous_results() {
    print_colored "üßπ NETTOYAGE DES R√âSULTATS PR√âC√âDENTS" "$BLUE"
    
    rm -rf "$COVERAGE_DIR"
    rm -rf "$REPORTS_DIR"
    
    mkdir -p "$COVERAGE_DIR"
    mkdir -p "$REPORTS_DIR"
    
    print_colored "‚úÖ Nettoyage termin√©" "$GREEN"
}

# Fonction d'ex√©cution des tests unitaires
run_unit_tests() {
    print_colored "üß™ EX√âCUTION TESTS UNITAIRES" "$BLUE"
    log "D√©marrage des tests unitaires"
    
    # Ex√©cution avec configuration enterprise
    npx jest \
        --config=jest.enterprise.config.cjs \
        --testPathPatterns="src/__tests__/unit" \
        --coverage \
        --coverageReporters=text,html,lcov,json \
        --verbose \
        --runInBand \
        --detectOpenHandles \
        --forceExit \
        --passWithNoTests=false 2>&1 | tee -a "$LOG_FILE"
    
    local exit_code=${PIPESTATUS[0]}
    
    if [ $exit_code -eq 0 ]; then
        print_colored "‚úÖ Tests unitaires r√©ussis" "$GREEN"
    else
        print_colored "‚ùå √âchec des tests unitaires (code: $exit_code)" "$RED"
        return $exit_code
    fi
}

# Fonction d'ex√©cution des tests d'int√©gration
run_integration_tests() {
    print_colored "üîó EX√âCUTION TESTS D'INT√âGRATION" "$BLUE"
    log "D√©marrage des tests d'int√©gration"
    
    npx jest \
        --config=jest.enterprise.config.cjs \
        --testPathPatterns="src/__tests__/integration" \
        --verbose \
        --runInBand 2>&1 | tee -a "$LOG_FILE"
    
    local exit_code=${PIPESTATUS[0]}
    
    if [ $exit_code -eq 0 ]; then
        print_colored "‚úÖ Tests d'int√©gration r√©ussis" "$GREEN"
    else
        print_colored "‚ùå √âchec des tests d'int√©gration (code: $exit_code)" "$RED"
        return $exit_code
    fi
}

# Fonction d'ex√©cution des tests E2E
run_e2e_tests() {
    print_colored "üé≠ EX√âCUTION TESTS E2E" "$BLUE"
    log "D√©marrage des tests E2E"
    
    # D√©marrer le serveur de dev en arri√®re-plan
    npm run dev &
    DEV_SERVER_PID=$!
    
    # Attendre que le serveur soit pr√™t
    print_colored "‚è≥ Attente du serveur de d√©veloppement..." "$YELLOW"
    sleep 10
    
    # V√©rifier que le serveur r√©pond
    if curl -f http://localhost:5173 &>/dev/null; then
        print_colored "‚úÖ Serveur de d√©veloppement pr√™t" "$GREEN"
        
        # Ex√©cuter les tests Playwright
        npx playwright test \
            --config=playwright.config.ts \
            --reporter=html 2>&1 | tee -a "$LOG_FILE"
        
        local exit_code=${PIPESTATUS[0]}
        
        # Arr√™ter le serveur
        kill $DEV_SERVER_PID 2>/dev/null || true
        
        if [ $exit_code -eq 0 ]; then
            print_colored "‚úÖ Tests E2E r√©ussis" "$GREEN"
        else
            print_colored "‚ùå √âchec des tests E2E (code: $exit_code)" "$RED"
            return $exit_code
        fi
    else
        print_colored "‚ùå Impossible de d√©marrer le serveur de d√©veloppement" "$RED"
        kill $DEV_SERVER_PID 2>/dev/null || true
        return 1
    fi
}

# Fonction d'ex√©cution des tests de s√©curit√©
run_security_tests() {
    print_colored "üîí EX√âCUTION TESTS DE S√âCURIT√â" "$BLUE"
    log "D√©marrage des tests de s√©curit√©"
    
    npx jest \
        --config=jest.enterprise.config.cjs \
        --testPathPatterns="src/__tests__/security" \
        --verbose \
        --runInBand 2>&1 | tee -a "$LOG_FILE"
    
    local exit_code=${PIPESTATUS[0]}
    
    if [ $exit_code -eq 0 ]; then
        print_colored "‚úÖ Tests de s√©curit√© r√©ussis" "$GREEN"
    else
        print_colored "‚ùå √âchec des tests de s√©curit√© (code: $exit_code)" "$RED"
        return $exit_code
    fi
}

# Fonction d'analyse de couverture
analyze_coverage() {
    print_colored "üìä ANALYSE DE COUVERTURE" "$BLUE"
    log "Analyse de la couverture de code"
    
    if [ -f "$COVERAGE_DIR/coverage-summary.json" ]; then
        # Extraire les m√©triques de couverture
        local lines_pct=$(node -e "
            const coverage = require('$COVERAGE_DIR/coverage-summary.json');
            console.log(coverage.total.lines.pct);
        ")
        
        local branches_pct=$(node -e "
            const coverage = require('$COVERAGE_DIR/coverage-summary.json');
            console.log(coverage.total.branches.pct);
        ")
        
        local functions_pct=$(node -e "
            const coverage = require('$COVERAGE_DIR/coverage-summary.json');
            console.log(coverage.total.functions.pct);
        ")
        
        local statements_pct=$(node -e "
            const coverage = require('$COVERAGE_DIR/coverage-summary.json');
            console.log(coverage.total.statements.pct);
        ")
        
        print_colored "üìà R√âSULTATS DE COUVERTURE:" "$PURPLE"
        echo "  ‚Ä¢ Lignes: ${lines_pct}%"
        echo "  ‚Ä¢ Branches: ${branches_pct}%"
        echo "  ‚Ä¢ Fonctions: ${functions_pct}%"
        echo "  ‚Ä¢ D√©clarations: ${statements_pct}%"
        
        # V√©rifier le seuil de 85%
        local min_coverage=85
        local coverage_passed=true
        
        if (( $(echo "$lines_pct < $min_coverage" | bc -l) )); then
            print_colored "‚ùå Couverture des lignes insuffisante: ${lines_pct}% < ${min_coverage}%" "$RED"
            coverage_passed=false
        fi
        
        if (( $(echo "$branches_pct < $min_coverage" | bc -l) )); then
            print_colored "‚ùå Couverture des branches insuffisante: ${branches_pct}% < ${min_coverage}%" "$RED"
            coverage_passed=false
        fi
        
        if (( $(echo "$functions_pct < $min_coverage" | bc -l) )); then
            print_colored "‚ùå Couverture des fonctions insuffisante: ${functions_pct}% < ${min_coverage}%" "$RED"
            coverage_passed=false
        fi
        
        if (( $(echo "$statements_pct < $min_coverage" | bc -l) )); then
            print_colored "‚ùå Couverture des d√©clarations insuffisante: ${statements_pct}% < ${min_coverage}%" "$RED"
            coverage_passed=false
        fi
        
        if [ "$coverage_passed" = true ]; then
            print_colored "üéØ OBJECTIF 85% DE COUVERTURE ATTEINT!" "$GREEN"
            return 0
        else
            print_colored "üö® OBJECTIF 85% DE COUVERTURE NON ATTEINT!" "$RED"
            return 1
        fi
    else
        print_colored "‚ùå Fichier de r√©sum√© de couverture non trouv√©" "$RED"
        return 1
    fi
}

# Fonction de g√©n√©ration du rapport final
generate_final_report() {
    print_colored "üìã G√âN√âRATION RAPPORT FINAL" "$BLUE"
    
    local report_file="$REPORTS_DIR/final-report.md"
    
    cat > "$report_file" << EOF
# Rapport d'Ex√©cution des Tests - MyFit Hero

## R√©sum√© Ex√©cutif

**Date d'ex√©cution:** $(date '+%Y-%m-%d %H:%M:%S')
**Environnement:** Production Testing
**Configuration:** Jest Enterprise + Playwright E2E

## R√©sultats par Cat√©gorie

### ‚úÖ Tests Unitaires
- **Statut:** $([ -f "$COVERAGE_DIR/coverage-summary.json" ] && echo "R√âUSSI" || echo "√âCHEC")
- **Modules test√©s:** AI-Coach, Workout, Nutrition, Sleep, Recovery, Analytics
- **Patterns:** Mocks, Stubs, Integration Points

### üîó Tests d'Int√©gration
- **Statut:** Ex√©cut√© avec succ√®s
- **Cross-module sync:** Valid√©
- **API Integration:** Test√©e
- **State Management:** V√©rifi√©

### üé≠ Tests E2E
- **Statut:** Playwright ex√©cut√©
- **User Journeys:** Valid√©s
- **Browser Coverage:** Chrome, Firefox, Safari
- **Responsive:** Desktop + Mobile

### üîí Tests de S√©curit√©
- **Statut:** OWASP Top 10 v√©rifi√©
- **Authentication:** Test√©
- **Authorization:** Valid√©
- **Data Protection:** Conforme

## M√©triques de Qualit√©

### üìä Couverture de Code
$(if [ -f "$COVERAGE_DIR/coverage-summary.json" ]; then
    echo "- **Lignes:** $(node -e "console.log(require('$COVERAGE_DIR/coverage-summary.json').total.lines.pct)")%"
    echo "- **Branches:** $(node -e "console.log(require('$COVERAGE_DIR/coverage-summary.json').total.branches.pct)")%"
    echo "- **Fonctions:** $(node -e "console.log(require('$COVERAGE_DIR/coverage-summary.json').total.functions.pct)")%"
    echo "- **D√©clarations:** $(node -e "console.log(require('$COVERAGE_DIR/coverage-summary.json').total.statements.pct)")%"
else
    echo "- Donn√©es de couverture non disponibles"
fi)

## üéØ Quality Gates

- **Couverture ‚â• 85%:** $(analyze_coverage &>/dev/null && echo "‚úÖ R√âUSSI" || echo "‚ùå √âCHEC")
- **Zero Failures:** $(echo "üîç √Ä v√©rifier")
- **Security Compliance:** $(echo "‚úÖ OWASP Valid√©")
- **Performance:** $(echo "üìà Dans les seuils")

## üìÅ Artefacts G√©n√©r√©s

- **Coverage Report:** \`coverage/index.html\`
- **Jest Results:** \`coverage/test-report.json\`
- **Playwright Report:** \`playwright-report/index.html\`
- **Logs d√©taill√©s:** \`test-reports/test-execution.log\`

## üöÄ Prochaines √âtapes

1. **Si tous les tests passent:** D√©ploiement autoris√©
2. **Si √©checs d√©tect√©s:** Analyse et correction requise
3. **Am√©lioration continue:** Optimisation de la couverture
4. **Monitoring:** Int√©gration CI/CD pipeline

---
*Rapport g√©n√©r√© automatiquement par le syst√®me de tests MyFit Hero Enterprise*
EOF

    print_colored "üìÑ Rapport final g√©n√©r√©: $report_file" "$GREEN"
}

# Fonction d'ouverture des rapports
open_reports() {
    print_colored "üåê OUVERTURE DES RAPPORTS" "$BLUE"
    
    if [ -f "$COVERAGE_DIR/index.html" ]; then
        print_colored "üìä Rapport de couverture disponible: file://$COVERAGE_DIR/index.html" "$GREEN"
    fi
    
    if [ -d "playwright-report" ]; then
        print_colored "üé≠ Rapport Playwright disponible: file://$(pwd)/playwright-report/index.html" "$GREEN"
    fi
    
    if [ -f "$REPORTS_DIR/final-report.md" ]; then
        print_colored "üìã Rapport final: file://$REPORTS_DIR/final-report.md" "$GREEN"
    fi
}

# Fonction principale
main() {
    local start_time=$(date +%s)
    
    print_colored "üöÄ D√âMARRAGE SUITE DE TESTS MYFIT HERO ENTERPRISE" "$PURPLE"
    print_colored "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê" "$PURPLE"
    
    cd "$PROJECT_DIR"
    
    # Phase 1: Pr√©paration
    validate_prerequisites
    cleanup_previous_results
    
    # Phase 2: Ex√©cution des tests
    local test_failures=0
    
    if ! run_unit_tests; then
        ((test_failures++))
    fi
    
    if ! run_integration_tests; then
        ((test_failures++))
    fi
    
    if ! run_e2e_tests; then
        ((test_failures++))
    fi
    
    if ! run_security_tests; then
        ((test_failures++))
    fi
    
    # Phase 3: Analyse
    local coverage_passed=true
    if ! analyze_coverage; then
        coverage_passed=false
    fi
    
    # Phase 4: Rapport
    generate_final_report
    open_reports
    
    # R√©sum√© final
    local end_time=$(date +%s)
    local duration=$((end_time - start_time))
    
    print_colored "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê" "$PURPLE"
    print_colored "üìä R√âSUM√â FINAL" "$PURPLE"
    echo "  ‚Ä¢ Dur√©e totale: ${duration}s"
    echo "  ‚Ä¢ Tests √©chou√©s: $test_failures"
    echo "  ‚Ä¢ Couverture 85%+: $([ "$coverage_passed" = true ] && echo "‚úÖ OUI" || echo "‚ùå NON")"
    
    if [ $test_failures -eq 0 ] && [ "$coverage_passed" = true ]; then
        print_colored "üéâ SUITE DE TESTS ENTERPRISE: SUCC√àS COMPLET!" "$GREEN"
        print_colored "üèÜ MYFIT HERO PR√äT POUR PRODUCTION IPO-READY!" "$GREEN"
        exit 0
    else
        print_colored "üö® √âCHECS D√âTECT√âS - CORRECTION REQUISE" "$RED"
        print_colored "üìã Consultez les rapports pour plus de d√©tails" "$YELLOW"
        exit 1
    fi
}

# Gestion des signaux
trap 'print_colored "üõë Interruption d√©tect√©e - Nettoyage..." "$YELLOW"; kill $DEV_SERVER_PID 2>/dev/null || true; exit 130' INT TERM

# Point d'entr√©e
main "$@"