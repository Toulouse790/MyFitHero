9d0c0cc8e8e0ff4780e64b9d257d82f6
"use strict";

/* istanbul ignore next */
function cov_btf4ru1xk() {
  var path = "/workspaces/MyFitHero/src/features/nutrition/hooks/useNutrition.ts";
  var hash = "907a45d5cc071035e1aa8f7d464af605d047ddfe";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/MyFitHero/src/features/nutrition/hooks/useNutrition.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 36
        }
      },
      "2": {
        start: {
          line: 4,
          column: 16
        },
        end: {
          line: 4,
          column: 32
        }
      },
      "3": {
        start: {
          line: 5,
          column: 28
        },
        end: {
          line: 5,
          column: 86
        }
      },
      "4": {
        start: {
          line: 7,
          column: 46
        },
        end: {
          line: 7,
          column: 73
        }
      },
      "5": {
        start: {
          line: 8,
          column: 30
        },
        end: {
          line: 8,
          column: 55
        }
      },
      "6": {
        start: {
          line: 9,
          column: 30
        },
        end: {
          line: 9,
          column: 57
        }
      },
      "7": {
        start: {
          line: 10,
          column: 36
        },
        end: {
          line: 10,
          column: 63
        }
      },
      "8": {
        start: {
          line: 11,
          column: 34
        },
        end: {
          line: 11,
          column: 59
        }
      },
      "9": {
        start: {
          line: 12,
          column: 38
        },
        end: {
          line: 12,
          column: 63
        }
      },
      "10": {
        start: {
          line: 13,
          column: 32
        },
        end: {
          line: 13,
          column: 59
        }
      },
      "11": {
        start: {
          line: 14,
          column: 36
        },
        end: {
          line: 14,
          column: 61
        }
      },
      "12": {
        start: {
          line: 15,
          column: 46
        },
        end: {
          line: 15,
          column: 71
        }
      },
      "13": {
        start: {
          line: 16,
          column: 38
        },
        end: {
          line: 16,
          column: 66
        }
      },
      "14": {
        start: {
          line: 17,
          column: 30
        },
        end: {
          line: 17,
          column: 57
        }
      },
      "15": {
        start: {
          line: 18,
          column: 26
        },
        end: {
          line: 18,
          column: 50
        }
      },
      "16": {
        start: {
          line: 19,
          column: 18
        },
        end: {
          line: 19,
          column: 62
        }
      },
      "17": {
        start: {
          line: 21,
          column: 30
        },
        end: {
          line: 41,
          column: 30
        }
      },
      "18": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 23,
          column: 19
        }
      },
      "19": {
        start: {
          line: 23,
          column: 12
        },
        end: {
          line: 23,
          column: 19
        }
      },
      "20": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 24,
          column: 27
        }
      },
      "21": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 23
        }
      },
      "22": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 40,
          column: 9
        }
      },
      "23": {
        start: {
          line: 27,
          column: 25
        },
        end: {
          line: 27,
          column: 106
        }
      },
      "24": {
        start: {
          line: 28,
          column: 12
        },
        end: {
          line: 28,
          column: 35
        }
      },
      "25": {
        start: {
          line: 29,
          column: 12
        },
        end: {
          line: 29,
          column: 33
        }
      },
      "26": {
        start: {
          line: 30,
          column: 12
        },
        end: {
          line: 30,
          column: 38
        }
      },
      "27": {
        start: {
          line: 33,
          column: 33
        },
        end: {
          line: 35,
          column: 73
        }
      },
      "28": {
        start: {
          line: 36,
          column: 12
        },
        end: {
          line: 36,
          column: 35
        }
      },
      "29": {
        start: {
          line: 39,
          column: 12
        },
        end: {
          line: 39,
          column: 32
        }
      },
      "30": {
        start: {
          line: 43,
          column: 25
        },
        end: {
          line: 55,
          column: 30
        }
      },
      "31": {
        start: {
          line: 44,
          column: 8
        },
        end: {
          line: 45,
          column: 19
        }
      },
      "32": {
        start: {
          line: 45,
          column: 12
        },
        end: {
          line: 45,
          column: 19
        }
      },
      "33": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 54,
          column: 9
        }
      },
      "34": {
        start: {
          line: 47,
          column: 28
        },
        end: {
          line: 47,
          column: 33
        }
      },
      "35": {
        start: {
          line: 48,
          column: 30
        },
        end: {
          line: 48,
          column: 110
        }
      },
      "36": {
        start: {
          line: 49,
          column: 33
        },
        end: {
          line: 49,
          column: 131
        }
      },
      "37": {
        start: {
          line: 50,
          column: 12
        },
        end: {
          line: 50,
          column: 38
        }
      },
      "38": {
        start: {
          line: 53,
          column: 12
        },
        end: {
          line: 53,
          column: 74
        }
      },
      "39": {
        start: {
          line: 57,
          column: 25
        },
        end: {
          line: 67,
          column: 23
        }
      },
      "40": {
        start: {
          line: 58,
          column: 8
        },
        end: {
          line: 59,
          column: 19
        }
      },
      "41": {
        start: {
          line: 59,
          column: 12
        },
        end: {
          line: 59,
          column: 19
        }
      },
      "42": {
        start: {
          line: 60,
          column: 8
        },
        end: {
          line: 66,
          column: 9
        }
      },
      "43": {
        start: {
          line: 61,
          column: 33
        },
        end: {
          line: 61,
          column: 111
        }
      },
      "44": {
        start: {
          line: 62,
          column: 12
        },
        end: {
          line: 62,
          column: 38
        }
      },
      "45": {
        start: {
          line: 65,
          column: 12
        },
        end: {
          line: 65,
          column: 74
        }
      },
      "46": {
        start: {
          line: 69,
          column: 20
        },
        end: {
          line: 90,
          column: 42
        }
      },
      "47": {
        start: {
          line: 70,
          column: 8
        },
        end: {
          line: 71,
          column: 19
        }
      },
      "48": {
        start: {
          line: 71,
          column: 12
        },
        end: {
          line: 71,
          column: 19
        }
      },
      "49": {
        start: {
          line: 72,
          column: 8
        },
        end: {
          line: 72,
          column: 27
        }
      },
      "50": {
        start: {
          line: 73,
          column: 8
        },
        end: {
          line: 73,
          column: 23
        }
      },
      "51": {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 89,
          column: 9
        }
      },
      "52": {
        start: {
          line: 75,
          column: 29
        },
        end: {
          line: 79,
          column: 13
        }
      },
      "53": {
        start: {
          line: 80,
          column: 12
        },
        end: {
          line: 80,
          column: 88
        }
      },
      "54": {
        start: {
          line: 81,
          column: 12
        },
        end: {
          line: 81,
          column: 38
        }
      },
      "55": {
        start: {
          line: 84,
          column: 33
        },
        end: {
          line: 84,
          column: 103
        }
      },
      "56": {
        start: {
          line: 85,
          column: 12
        },
        end: {
          line: 85,
          column: 35
        }
      },
      "57": {
        start: {
          line: 88,
          column: 12
        },
        end: {
          line: 88,
          column: 32
        }
      },
      "58": {
        start: {
          line: 92,
          column: 23
        },
        end: {
          line: 106,
          column: 27
        }
      },
      "59": {
        start: {
          line: 93,
          column: 8
        },
        end: {
          line: 93,
          column: 27
        }
      },
      "60": {
        start: {
          line: 94,
          column: 8
        },
        end: {
          line: 94,
          column: 23
        }
      },
      "61": {
        start: {
          line: 95,
          column: 8
        },
        end: {
          line: 105,
          column: 9
        }
      },
      "62": {
        start: {
          line: 96,
          column: 12
        },
        end: {
          line: 96,
          column: 76
        }
      },
      "63": {
        start: {
          line: 97,
          column: 12
        },
        end: {
          line: 97,
          column: 38
        }
      },
      "64": {
        start: {
          line: 100,
          column: 33
        },
        end: {
          line: 100,
          column: 110
        }
      },
      "65": {
        start: {
          line: 101,
          column: 12
        },
        end: {
          line: 101,
          column: 35
        }
      },
      "66": {
        start: {
          line: 104,
          column: 12
        },
        end: {
          line: 104,
          column: 32
        }
      },
      "67": {
        start: {
          line: 108,
          column: 23
        },
        end: {
          line: 127,
          column: 27
        }
      },
      "68": {
        start: {
          line: 109,
          column: 8
        },
        end: {
          line: 109,
          column: 27
        }
      },
      "69": {
        start: {
          line: 110,
          column: 8
        },
        end: {
          line: 110,
          column: 23
        }
      },
      "70": {
        start: {
          line: 111,
          column: 8
        },
        end: {
          line: 126,
          column: 9
        }
      },
      "71": {
        start: {
          line: 112,
          column: 28
        },
        end: {
          line: 112,
          column: 85
        }
      },
      "72": {
        start: {
          line: 113,
          column: 12
        },
        end: {
          line: 118,
          column: 13
        }
      },
      "73": {
        start: {
          line: 114,
          column: 16
        },
        end: {
          line: 114,
          column: 42
        }
      },
      "74": {
        start: {
          line: 117,
          column: 16
        },
        end: {
          line: 117,
          column: 67
        }
      },
      "75": {
        start: {
          line: 121,
          column: 33
        },
        end: {
          line: 121,
          column: 110
        }
      },
      "76": {
        start: {
          line: 122,
          column: 12
        },
        end: {
          line: 122,
          column: 35
        }
      },
      "77": {
        start: {
          line: 125,
          column: 12
        },
        end: {
          line: 125,
          column: 32
        }
      },
      "78": {
        start: {
          line: 129,
          column: 24
        },
        end: {
          line: 145,
          column: 23
        }
      },
      "79": {
        start: {
          line: 130,
          column: 8
        },
        end: {
          line: 131,
          column: 19
        }
      },
      "80": {
        start: {
          line: 131,
          column: 12
        },
        end: {
          line: 131,
          column: 19
        }
      },
      "81": {
        start: {
          line: 132,
          column: 8
        },
        end: {
          line: 132,
          column: 27
        }
      },
      "82": {
        start: {
          line: 133,
          column: 8
        },
        end: {
          line: 133,
          column: 23
        }
      },
      "83": {
        start: {
          line: 134,
          column: 8
        },
        end: {
          line: 144,
          column: 9
        }
      },
      "84": {
        start: {
          line: 135,
          column: 33
        },
        end: {
          line: 135,
          column: 121
        }
      },
      "85": {
        start: {
          line: 136,
          column: 12
        },
        end: {
          line: 136,
          column: 35
        }
      },
      "86": {
        start: {
          line: 139,
          column: 33
        },
        end: {
          line: 139,
          column: 115
        }
      },
      "87": {
        start: {
          line: 140,
          column: 12
        },
        end: {
          line: 140,
          column: 35
        }
      },
      "88": {
        start: {
          line: 143,
          column: 12
        },
        end: {
          line: 143,
          column: 32
        }
      },
      "89": {
        start: {
          line: 147,
          column: 24
        },
        end: {
          line: 161,
          column: 10
        }
      },
      "90": {
        start: {
          line: 148,
          column: 8
        },
        end: {
          line: 148,
          column: 27
        }
      },
      "91": {
        start: {
          line: 149,
          column: 8
        },
        end: {
          line: 149,
          column: 23
        }
      },
      "92": {
        start: {
          line: 150,
          column: 8
        },
        end: {
          line: 160,
          column: 9
        }
      },
      "93": {
        start: {
          line: 151,
          column: 28
        },
        end: {
          line: 151,
          column: 89
        }
      },
      "94": {
        start: {
          line: 152,
          column: 12
        },
        end: {
          line: 152,
          column: 38
        }
      },
      "95": {
        start: {
          line: 155,
          column: 33
        },
        end: {
          line: 155,
          column: 110
        }
      },
      "96": {
        start: {
          line: 156,
          column: 12
        },
        end: {
          line: 156,
          column: 35
        }
      },
      "97": {
        start: {
          line: 159,
          column: 12
        },
        end: {
          line: 159,
          column: 32
        }
      },
      "98": {
        start: {
          line: 163,
          column: 24
        },
        end: {
          line: 179,
          column: 23
        }
      },
      "99": {
        start: {
          line: 164,
          column: 8
        },
        end: {
          line: 165,
          column: 19
        }
      },
      "100": {
        start: {
          line: 165,
          column: 12
        },
        end: {
          line: 165,
          column: 19
        }
      },
      "101": {
        start: {
          line: 166,
          column: 8
        },
        end: {
          line: 166,
          column: 27
        }
      },
      "102": {
        start: {
          line: 167,
          column: 8
        },
        end: {
          line: 167,
          column: 23
        }
      },
      "103": {
        start: {
          line: 168,
          column: 8
        },
        end: {
          line: 178,
          column: 9
        }
      },
      "104": {
        start: {
          line: 169,
          column: 32
        },
        end: {
          line: 169,
          column: 109
        }
      },
      "105": {
        start: {
          line: 170,
          column: 12
        },
        end: {
          line: 170,
          column: 36
        }
      },
      "106": {
        start: {
          line: 173,
          column: 33
        },
        end: {
          line: 173,
          column: 110
        }
      },
      "107": {
        start: {
          line: 174,
          column: 12
        },
        end: {
          line: 174,
          column: 35
        }
      },
      "108": {
        start: {
          line: 177,
          column: 12
        },
        end: {
          line: 177,
          column: 32
        }
      },
      "109": {
        start: {
          line: 181,
          column: 26
        },
        end: {
          line: 197,
          column: 23
        }
      },
      "110": {
        start: {
          line: 182,
          column: 8
        },
        end: {
          line: 183,
          column: 19
        }
      },
      "111": {
        start: {
          line: 183,
          column: 12
        },
        end: {
          line: 183,
          column: 19
        }
      },
      "112": {
        start: {
          line: 184,
          column: 8
        },
        end: {
          line: 184,
          column: 27
        }
      },
      "113": {
        start: {
          line: 185,
          column: 8
        },
        end: {
          line: 185,
          column: 23
        }
      },
      "114": {
        start: {
          line: 186,
          column: 8
        },
        end: {
          line: 196,
          column: 9
        }
      },
      "115": {
        start: {
          line: 187,
          column: 30
        },
        end: {
          line: 187,
          column: 100
        }
      },
      "116": {
        start: {
          line: 188,
          column: 12
        },
        end: {
          line: 188,
          column: 36
        }
      },
      "117": {
        start: {
          line: 191,
          column: 33
        },
        end: {
          line: 191,
          column: 116
        }
      },
      "118": {
        start: {
          line: 192,
          column: 12
        },
        end: {
          line: 192,
          column: 35
        }
      },
      "119": {
        start: {
          line: 195,
          column: 12
        },
        end: {
          line: 195,
          column: 32
        }
      },
      "120": {
        start: {
          line: 199,
          column: 23
        },
        end: {
          line: 215,
          column: 23
        }
      },
      "121": {
        start: {
          line: 200,
          column: 8
        },
        end: {
          line: 201,
          column: 19
        }
      },
      "122": {
        start: {
          line: 201,
          column: 12
        },
        end: {
          line: 201,
          column: 19
        }
      },
      "123": {
        start: {
          line: 202,
          column: 8
        },
        end: {
          line: 202,
          column: 27
        }
      },
      "124": {
        start: {
          line: 203,
          column: 8
        },
        end: {
          line: 203,
          column: 23
        }
      },
      "125": {
        start: {
          line: 204,
          column: 8
        },
        end: {
          line: 214,
          column: 9
        }
      },
      "126": {
        start: {
          line: 205,
          column: 31
        },
        end: {
          line: 205,
          column: 115
        }
      },
      "127": {
        start: {
          line: 206,
          column: 12
        },
        end: {
          line: 206,
          column: 34
        }
      },
      "128": {
        start: {
          line: 209,
          column: 33
        },
        end: {
          line: 209,
          column: 111
        }
      },
      "129": {
        start: {
          line: 210,
          column: 12
        },
        end: {
          line: 210,
          column: 35
        }
      },
      "130": {
        start: {
          line: 213,
          column: 12
        },
        end: {
          line: 213,
          column: 32
        }
      },
      "131": {
        start: {
          line: 217,
          column: 24
        },
        end: {
          line: 219,
          column: 55
        }
      },
      "132": {
        start: {
          line: 218,
          column: 8
        },
        end: {
          line: 218,
          column: 81
        }
      },
      "133": {
        start: {
          line: 221,
          column: 32
        },
        end: {
          line: 225,
          column: 23
        }
      },
      "134": {
        start: {
          line: 222,
          column: 8
        },
        end: {
          line: 223,
          column: 21
        }
      },
      "135": {
        start: {
          line: 223,
          column: 12
        },
        end: {
          line: 223,
          column: 21
        }
      },
      "136": {
        start: {
          line: 224,
          column: 8
        },
        end: {
          line: 224,
          column: 91
        }
      },
      "137": {
        start: {
          line: 226,
          column: 36
        },
        end: {
          line: 230,
          column: 23
        }
      },
      "138": {
        start: {
          line: 227,
          column: 8
        },
        end: {
          line: 228,
          column: 21
        }
      },
      "139": {
        start: {
          line: 228,
          column: 12
        },
        end: {
          line: 228,
          column: 21
        }
      },
      "140": {
        start: {
          line: 229,
          column: 8
        },
        end: {
          line: 229,
          column: 84
        }
      },
      "141": {
        start: {
          line: 231,
          column: 28
        },
        end: {
          line: 240,
          column: 23
        }
      },
      "142": {
        start: {
          line: 232,
          column: 8
        },
        end: {
          line: 233,
          column: 62
        }
      },
      "143": {
        start: {
          line: 233,
          column: 12
        },
        end: {
          line: 233,
          column: 62
        }
      },
      "144": {
        start: {
          line: 234,
          column: 44
        },
        end: {
          line: 234,
          column: 57
        }
      },
      "145": {
        start: {
          line: 235,
          column: 8
        },
        end: {
          line: 239,
          column: 10
        }
      },
      "146": {
        start: {
          line: 241,
          column: 31
        },
        end: {
          line: 245,
          column: 23
        }
      },
      "147": {
        start: {
          line: 242,
          column: 8
        },
        end: {
          line: 243,
          column: 21
        }
      },
      "148": {
        start: {
          line: 243,
          column: 12
        },
        end: {
          line: 243,
          column: 21
        }
      },
      "149": {
        start: {
          line: 244,
          column: 8
        },
        end: {
          line: 244,
          column: 98
        }
      },
      "150": {
        start: {
          line: 247,
          column: 4
        },
        end: {
          line: 249,
          column: 22
        }
      },
      "151": {
        start: {
          line: 248,
          column: 8
        },
        end: {
          line: 248,
          column: 22
        }
      },
      "152": {
        start: {
          line: 250,
          column: 4
        },
        end: {
          line: 278,
          column: 6
        }
      }
    },
    fnMap: {
      "0": {
        name: "useNutrition",
        decl: {
          start: {
            line: 6,
            column: 9
          },
          end: {
            line: 6,
            column: 21
          }
        },
        loc: {
          start: {
            line: 6,
            column: 30
          },
          end: {
            line: 279,
            column: 1
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 21,
            column: 55
          },
          end: {
            line: 21,
            column: 56
          }
        },
        loc: {
          start: {
            line: 21,
            column: 67
          },
          end: {
            line: 41,
            column: 5
          }
        },
        line: 21
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 43,
            column: 50
          },
          end: {
            line: 43,
            column: 51
          }
        },
        loc: {
          start: {
            line: 43,
            column: 62
          },
          end: {
            line: 55,
            column: 5
          }
        },
        line: 43
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 57,
            column: 50
          },
          end: {
            line: 57,
            column: 51
          }
        },
        loc: {
          start: {
            line: 57,
            column: 62
          },
          end: {
            line: 67,
            column: 5
          }
        },
        line: 57
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 69,
            column: 45
          },
          end: {
            line: 69,
            column: 46
          }
        },
        loc: {
          start: {
            line: 69,
            column: 61
          },
          end: {
            line: 90,
            column: 5
          }
        },
        line: 69
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 92,
            column: 48
          },
          end: {
            line: 92,
            column: 49
          }
        },
        loc: {
          start: {
            line: 92,
            column: 68
          },
          end: {
            line: 106,
            column: 5
          }
        },
        line: 92
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 108,
            column: 48
          },
          end: {
            line: 108,
            column: 49
          }
        },
        loc: {
          start: {
            line: 108,
            column: 62
          },
          end: {
            line: 127,
            column: 5
          }
        },
        line: 108
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 129,
            column: 49
          },
          end: {
            line: 129,
            column: 50
          }
        },
        loc: {
          start: {
            line: 129,
            column: 69
          },
          end: {
            line: 145,
            column: 5
          }
        },
        line: 129
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 147,
            column: 49
          },
          end: {
            line: 147,
            column: 50
          }
        },
        loc: {
          start: {
            line: 147,
            column: 66
          },
          end: {
            line: 161,
            column: 5
          }
        },
        line: 147
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 163,
            column: 49
          },
          end: {
            line: 163,
            column: 50
          }
        },
        loc: {
          start: {
            line: 163,
            column: 68
          },
          end: {
            line: 179,
            column: 5
          }
        },
        line: 163
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 181,
            column: 51
          },
          end: {
            line: 181,
            column: 52
          }
        },
        loc: {
          start: {
            line: 181,
            column: 63
          },
          end: {
            line: 197,
            column: 5
          }
        },
        line: 181
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 199,
            column: 48
          },
          end: {
            line: 199,
            column: 49
          }
        },
        loc: {
          start: {
            line: 199,
            column: 66
          },
          end: {
            line: 215,
            column: 5
          }
        },
        line: 199
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 217,
            column: 49
          },
          end: {
            line: 217,
            column: 50
          }
        },
        loc: {
          start: {
            line: 217,
            column: 61
          },
          end: {
            line: 219,
            column: 5
          }
        },
        line: 217
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 221,
            column: 57
          },
          end: {
            line: 221,
            column: 58
          }
        },
        loc: {
          start: {
            line: 221,
            column: 63
          },
          end: {
            line: 225,
            column: 5
          }
        },
        line: 221
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 226,
            column: 61
          },
          end: {
            line: 226,
            column: 62
          }
        },
        loc: {
          start: {
            line: 226,
            column: 67
          },
          end: {
            line: 230,
            column: 5
          }
        },
        line: 226
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 231,
            column: 53
          },
          end: {
            line: 231,
            column: 54
          }
        },
        loc: {
          start: {
            line: 231,
            column: 59
          },
          end: {
            line: 240,
            column: 5
          }
        },
        line: 231
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 241,
            column: 56
          },
          end: {
            line: 241,
            column: 57
          }
        },
        loc: {
          start: {
            line: 241,
            column: 62
          },
          end: {
            line: 245,
            column: 5
          }
        },
        line: 241
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 247,
            column: 27
          },
          end: {
            line: 247,
            column: 28
          }
        },
        loc: {
          start: {
            line: 247,
            column: 33
          },
          end: {
            line: 249,
            column: 5
          }
        },
        line: 247
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 18,
            column: 26
          },
          end: {
            line: 18,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 18,
            column: 26
          },
          end: {
            line: 18,
            column: 32
          }
        }, {
          start: {
            line: 18,
            column: 36
          },
          end: {
            line: 18,
            column: 50
          }
        }],
        line: 18
      },
      "1": {
        loc: {
          start: {
            line: 19,
            column: 18
          },
          end: {
            line: 19,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 19,
            column: 18
          },
          end: {
            line: 19,
            column: 56
          }
        }, {
          start: {
            line: 19,
            column: 60
          },
          end: {
            line: 19,
            column: 62
          }
        }],
        line: 19
      },
      "2": {
        loc: {
          start: {
            line: 22,
            column: 8
          },
          end: {
            line: 23,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 22,
            column: 8
          },
          end: {
            line: 23,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 22
      },
      "3": {
        loc: {
          start: {
            line: 33,
            column: 33
          },
          end: {
            line: 35,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 34,
            column: 18
          },
          end: {
            line: 34,
            column: 29
          }
        }, {
          start: {
            line: 35,
            column: 18
          },
          end: {
            line: 35,
            column: 73
          }
        }],
        line: 33
      },
      "4": {
        loc: {
          start: {
            line: 44,
            column: 8
          },
          end: {
            line: 45,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 44,
            column: 8
          },
          end: {
            line: 45,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 44
      },
      "5": {
        loc: {
          start: {
            line: 48,
            column: 30
          },
          end: {
            line: 48,
            column: 110
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 48,
            column: 30
          },
          end: {
            line: 48,
            column: 104
          }
        }, {
          start: {
            line: 48,
            column: 108
          },
          end: {
            line: 48,
            column: 110
          }
        }],
        line: 48
      },
      "6": {
        loc: {
          start: {
            line: 58,
            column: 8
          },
          end: {
            line: 59,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 58,
            column: 8
          },
          end: {
            line: 59,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 58
      },
      "7": {
        loc: {
          start: {
            line: 70,
            column: 8
          },
          end: {
            line: 71,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 70,
            column: 8
          },
          end: {
            line: 71,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 70
      },
      "8": {
        loc: {
          start: {
            line: 84,
            column: 33
          },
          end: {
            line: 84,
            column: 103
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 84,
            column: 56
          },
          end: {
            line: 84,
            column: 67
          }
        }, {
          start: {
            line: 84,
            column: 70
          },
          end: {
            line: 84,
            column: 103
          }
        }],
        line: 84
      },
      "9": {
        loc: {
          start: {
            line: 100,
            column: 33
          },
          end: {
            line: 100,
            column: 110
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 100,
            column: 56
          },
          end: {
            line: 100,
            column: 67
          }
        }, {
          start: {
            line: 100,
            column: 70
          },
          end: {
            line: 100,
            column: 110
          }
        }],
        line: 100
      },
      "10": {
        loc: {
          start: {
            line: 113,
            column: 12
          },
          end: {
            line: 118,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 113,
            column: 12
          },
          end: {
            line: 118,
            column: 13
          }
        }, {
          start: {
            line: 116,
            column: 17
          },
          end: {
            line: 118,
            column: 13
          }
        }],
        line: 113
      },
      "11": {
        loc: {
          start: {
            line: 121,
            column: 33
          },
          end: {
            line: 121,
            column: 110
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 121,
            column: 56
          },
          end: {
            line: 121,
            column: 67
          }
        }, {
          start: {
            line: 121,
            column: 70
          },
          end: {
            line: 121,
            column: 110
          }
        }],
        line: 121
      },
      "12": {
        loc: {
          start: {
            line: 130,
            column: 8
          },
          end: {
            line: 131,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 130,
            column: 8
          },
          end: {
            line: 131,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 130
      },
      "13": {
        loc: {
          start: {
            line: 139,
            column: 33
          },
          end: {
            line: 139,
            column: 115
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 139,
            column: 56
          },
          end: {
            line: 139,
            column: 67
          }
        }, {
          start: {
            line: 139,
            column: 70
          },
          end: {
            line: 139,
            column: 115
          }
        }],
        line: 139
      },
      "14": {
        loc: {
          start: {
            line: 155,
            column: 33
          },
          end: {
            line: 155,
            column: 110
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 155,
            column: 56
          },
          end: {
            line: 155,
            column: 67
          }
        }, {
          start: {
            line: 155,
            column: 70
          },
          end: {
            line: 155,
            column: 110
          }
        }],
        line: 155
      },
      "15": {
        loc: {
          start: {
            line: 164,
            column: 8
          },
          end: {
            line: 165,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 164,
            column: 8
          },
          end: {
            line: 165,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 164
      },
      "16": {
        loc: {
          start: {
            line: 173,
            column: 33
          },
          end: {
            line: 173,
            column: 110
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 173,
            column: 56
          },
          end: {
            line: 173,
            column: 67
          }
        }, {
          start: {
            line: 173,
            column: 70
          },
          end: {
            line: 173,
            column: 110
          }
        }],
        line: 173
      },
      "17": {
        loc: {
          start: {
            line: 182,
            column: 8
          },
          end: {
            line: 183,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 182,
            column: 8
          },
          end: {
            line: 183,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 182
      },
      "18": {
        loc: {
          start: {
            line: 191,
            column: 33
          },
          end: {
            line: 191,
            column: 116
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 191,
            column: 56
          },
          end: {
            line: 191,
            column: 67
          }
        }, {
          start: {
            line: 191,
            column: 70
          },
          end: {
            line: 191,
            column: 116
          }
        }],
        line: 191
      },
      "19": {
        loc: {
          start: {
            line: 200,
            column: 8
          },
          end: {
            line: 201,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 200,
            column: 8
          },
          end: {
            line: 201,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 200
      },
      "20": {
        loc: {
          start: {
            line: 209,
            column: 33
          },
          end: {
            line: 209,
            column: 111
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 209,
            column: 56
          },
          end: {
            line: 209,
            column: 67
          }
        }, {
          start: {
            line: 209,
            column: 70
          },
          end: {
            line: 209,
            column: 111
          }
        }],
        line: 209
      },
      "21": {
        loc: {
          start: {
            line: 222,
            column: 8
          },
          end: {
            line: 223,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 222,
            column: 8
          },
          end: {
            line: 223,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 222
      },
      "22": {
        loc: {
          start: {
            line: 227,
            column: 8
          },
          end: {
            line: 228,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 227,
            column: 8
          },
          end: {
            line: 228,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 227
      },
      "23": {
        loc: {
          start: {
            line: 232,
            column: 8
          },
          end: {
            line: 233,
            column: 62
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 232,
            column: 8
          },
          end: {
            line: 233,
            column: 62
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 232
      },
      "24": {
        loc: {
          start: {
            line: 242,
            column: 8
          },
          end: {
            line: 243,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 242,
            column: 8
          },
          end: {
            line: 243,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 242
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0]
    },
    inputSourceMap: {
      file: "/workspaces/MyFitHero/src/features/nutrition/hooks/useNutrition.ts",
      mappings: "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",
      names: [],
      sources: ["/workspaces/MyFitHero/src/features/nutrition/hooks/useNutrition.ts"],
      sourcesContent: ["import { Search, Target } from 'lucide-react';\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { NutritionService } from '@/features/nutrition/services/nutrition.service';\nimport type {\n  NutritionData,\n  Meal,\n  FoodItem,\n  NutritionGoals,\n  NutritionAnalysis,\n  Recipe,\n  MealPlan,\n  NutritionTrend,\n  CreateMealDTO,\n  UpdateNutritionGoalsDTO,\n  FoodSearchQuery,\n  NutritionInsight,\n} from '@/features/nutrition/types/index';\n\ntype NutritionMealInput = {\n  type: 'breakfast' | 'lunch' | 'dinner' | 'snack';\n  name: string;\n  foods: Omit<FoodItem, 'id'>[];\n};\n\nexport interface UseNutritionReturn {\n  // \xC9tat\n  nutritionData: NutritionData | undefined;\n  meals: Meal[];\n  goals: NutritionGoals | undefined;\n  analysis: NutritionAnalysis | undefined;\n  recipes: Recipe[];\n  mealPlans: MealPlan[];\n  trends: NutritionTrend | undefined;\n  insights: NutritionInsight[];\n  searchResults: FoodItem[];\n  isLoading: boolean;\n  error: string | undefined;\n\n  // Actions\n  addMeal: (meal: NutritionMealInput) => Promise<void>;\n  updateMeal: (id: string, meal: Partial<NutritionMealInput>) => Promise<void>;\n  deleteMeal: (id: string) => Promise<void>;\n  updateGoals: (goals: UpdateNutritionGoalsDTO) => Promise<void>;\n  searchFoods: (query: FoodSearchQuery) => Promise<void>;\n  loadRecipes: (filters?: { tags?: string[]; difficulty?: string }) => Promise<void>;\n  loadMealPlans: () => Promise<void>;\n  loadTrends: (period: 'week' | 'month' | 'quarter') => Promise<void>;\n  refreshData: () => Promise<void>;\n\n  // Calculateurs\n  calculateDailyScore: () => number;\n  calculateCalorieBalance: () => number;\n  getMacroBalance: () => { proteins: number; carbohydrates: number; fats: number };\n  getHydrationStatus: () => number;\n}\n\nexport function useNutrition(userId?: string): UseNutritionReturn {\n  const [nutritionData, setNutritionData] = useState<NutritionData | null>(null);\n  const [meals, setMeals] = useState<Meal[]>([]);\n  const [goals, setGoals] = useState<NutritionGoals | null>(null);\n  const [analysis, setAnalysis] = useState<NutritionAnalysis | null>(null);\n  const [recipes, setRecipes] = useState<Recipe[]>([]);\n  const [mealPlans, setMealPlans] = useState<MealPlan[]>([]);\n  const [trends, setTrends] = useState<NutritionTrend | null>(null);\n  const [insights, setInsights] = useState<NutritionInsight[]>([]);\n  const [searchResults, setSearchResults] = useState<FoodItem[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const currentUserId = userId || 'current-user';\n  const today = new Date().toISOString().split('T')[0] || '';\n\n  // Chargement des donn\xE9es initiales\n  const loadNutritionData = useCallback(async () => {\n    if (!currentUserId) return;\n\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const data = await NutritionService.getNutritionData(currentUserId, today);\n      setNutritionData(data);\n      setMeals(data.meals);\n      setGoals(data.dailyGoals);\n    } catch (err) {\n      const errorMessage =\n        err instanceof Error\n          ? err.message\n          : 'Erreur lors du chargement des donn\xE9es nutritionnelles';\n      setError(errorMessage);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [currentUserId, today]);\n\n  // Chargement de l'analyse\n  const loadAnalysis = useCallback(async () => {\n    if (!currentUserId) return;\n\n    try {\n      const endDate = today;\n      const startDate =\n        new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0] || '';\n      const analysisData = await NutritionService.getNutritionAnalysis(\n        currentUserId,\n        startDate,\n        endDate\n      );\n      setAnalysis(analysisData);\n    } catch (err) {\n      console.error(\"Erreur lors du chargement de l'analyse:\", err);\n    }\n  }, [currentUserId, today]);\n\n  // Chargement des insights\n  const loadInsights = useCallback(async () => {\n    if (!currentUserId) return;\n\n    try {\n      const insightsData = await NutritionService.getNutritionInsights(currentUserId);\n      setInsights(insightsData);\n    } catch (err) {\n      console.error('Erreur lors du chargement des insights:', err);\n    }\n  }, [currentUserId]);\n\n  // Ajout d'un repas\n  const addMeal = useCallback(\n    async (meal: NutritionMealInput) => {\n      if (!currentUserId) return;\n\n      setIsLoading(true);\n      setError(null);\n\n      try {\n        const mealData: CreateMealDTO = {\n          type: meal.type,\n          name: meal.name,\n          foods: meal.foods,\n        };\n\n        await NutritionService.addMeal(currentUserId, mealData);\n        await loadNutritionData();\n      } catch (err) {\n        const errorMessage = err instanceof Error ? err.message : \"Erreur lors de l'ajout du repas\";\n        setError(errorMessage);\n      } finally {\n        setIsLoading(false);\n      }\n    },\n    [currentUserId, loadNutritionData]\n  );\n\n  // Mise \xE0 jour d'un repas\n  const updateMeal = useCallback(\n    async (id: string, meal: Partial<NutritionMealInput>) => {\n      setIsLoading(true);\n      setError(null);\n\n      try {\n        await NutritionService.updateMeal(id, meal);\n        await loadNutritionData();\n      } catch (err) {\n        const errorMessage =\n          err instanceof Error ? err.message : 'Erreur lors de la mise \xE0 jour du repas';\n        setError(errorMessage);\n      } finally {\n        setIsLoading(false);\n      }\n    },\n    [loadNutritionData]\n  );\n\n  // Suppression d'un repas\n  const deleteMeal = useCallback(\n    async (id: string) => {\n      setIsLoading(true);\n      setError(null);\n\n      try {\n        const success = await NutritionService.deleteMeal(id);\n        if (success) {\n          await loadNutritionData();\n        } else {\n          setError('Erreur lors de la suppression du repas');\n        }\n      } catch (err) {\n        const errorMessage =\n          err instanceof Error ? err.message : 'Erreur lors de la suppression du repas';\n        setError(errorMessage);\n      } finally {\n        setIsLoading(false);\n      }\n    },\n    [loadNutritionData]\n  );\n\n  // Mise \xE0 jour des objectifs\n  const updateGoals = useCallback(\n    async (newGoals: UpdateNutritionGoalsDTO) => {\n      if (!currentUserId) return;\n\n      setIsLoading(true);\n      setError(null);\n\n      try {\n        const updatedGoals = await NutritionService.updateNutritionGoals(currentUserId, newGoals);\n        setGoals(updatedGoals);\n      } catch (err) {\n        const errorMessage =\n          err instanceof Error ? err.message : 'Erreur lors de la mise \xE0 jour des objectifs';\n        setError(errorMessage);\n      } finally {\n        setIsLoading(false);\n      }\n    },\n    [currentUserId]\n  );\n\n  // Recherche d'aliments\n  const searchFoods = useCallback(async (query: FoodSearchQuery) => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const results = await NutritionService.searchFoods(query);\n      setSearchResults(results);\n    } catch (err) {\n      const errorMessage =\n        err instanceof Error ? err.message : \"Erreur lors de la recherche d'aliments\";\n      setError(errorMessage);\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  // Chargement des recettes\n  const loadRecipes = useCallback(\n    async (filters?: { tags?: string[]; difficulty?: string }) => {\n      if (!currentUserId) return;\n\n      setIsLoading(true);\n      setError(null);\n\n      try {\n        const recipesData = await NutritionService.getRecipes(currentUserId, filters);\n        setRecipes(recipesData);\n      } catch (err) {\n        const errorMessage =\n          err instanceof Error ? err.message : 'Erreur lors du chargement des recettes';\n        setError(errorMessage);\n      } finally {\n        setIsLoading(false);\n      }\n    },\n    [currentUserId]\n  );\n\n  // Chargement des plans de repas\n  const loadMealPlans = useCallback(async () => {\n    if (!currentUserId) return;\n\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const plansData = await NutritionService.getMealPlans(currentUserId);\n      setMealPlans(plansData);\n    } catch (err) {\n      const errorMessage =\n        err instanceof Error ? err.message : 'Erreur lors du chargement des plans de repas';\n      setError(errorMessage);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [currentUserId]);\n\n  // Chargement des tendances\n  const loadTrends = useCallback(\n    async (period: 'week' | 'month' | 'quarter') => {\n      if (!currentUserId) return;\n\n      setIsLoading(true);\n      setError(null);\n\n      try {\n        const trendsData = await NutritionService.getNutritionTrends(currentUserId, period);\n        setTrends(trendsData);\n      } catch (err) {\n        const errorMessage =\n          err instanceof Error ? err.message : 'Erreur lors du chargement des tendances';\n        setError(errorMessage);\n      } finally {\n        setIsLoading(false);\n      }\n    },\n    [currentUserId]\n  );\n\n  // Rafra\xEEchissement des donn\xE9es\n  const refreshData = useCallback(async () => {\n    await Promise.all([loadNutritionData(), loadAnalysis(), loadInsights()]);\n  }, [loadNutritionData, loadAnalysis, loadInsights]);\n\n  // Calculateurs\n  const calculateDailyScore = useCallback((): number => {\n    if (!nutritionData) return 0;\n    return NutritionService.calculateNutritionScore(nutritionData);\n  }, [nutritionData]);\n\n  const calculateCalorieBalance = useCallback((): number => {\n    if (!nutritionData) return 0;\n    return nutritionData.totalCalories - nutritionData.dailyGoals.dailyCalories;\n  }, [nutritionData]);\n\n  const getMacroBalance = useCallback((): {\n    proteins: number;\n    carbohydrates: number;\n    fats: number;\n  } => {\n    if (!nutritionData) return { proteins: 0, carbohydrates: 0, fats: 0 };\n\n    const { totalMacros, dailyGoals } = nutritionData;\n    return {\n      proteins: Math.round((totalMacros.proteins / dailyGoals.macroTargets.proteins) * 100),\n      carbohydrates: Math.round(\n        (totalMacros.carbohydrates / dailyGoals.macroTargets.carbohydrates) * 100\n      ),\n      fats: Math.round((totalMacros.fats / dailyGoals.macroTargets.fats) * 100),\n    };\n  }, [nutritionData]);\n\n  const getHydrationStatus = useCallback((): number => {\n    if (!nutritionData) return 0;\n    return Math.round((nutritionData.waterIntake / nutritionData.dailyGoals.waterGoal) * 100);\n  }, [nutritionData]);\n\n  // Chargement initial\n  useEffect(() => {\n    refreshData();\n  }, [refreshData]);\n\n  return {\n    // \xC9tat\n    nutritionData,\n    meals,\n    goals,\n    analysis,\n    recipes,\n    mealPlans,\n    trends,\n    insights,\n    searchResults,\n    isLoading,\n    error,\n\n    // Actions\n    addMeal,\n    updateMeal,\n    deleteMeal,\n    updateGoals,\n    searchFoods,\n    loadRecipes,\n    loadMealPlans,\n    loadTrends,\n    refreshData,\n\n    // Calculateurs\n    calculateDailyScore,\n    calculateCalorieBalance,\n    getMacroBalance,\n    getHydrationStatus,\n  };\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "907a45d5cc071035e1aa8f7d464af605d047ddfe"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_btf4ru1xk = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_btf4ru1xk();
cov_btf4ru1xk().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_btf4ru1xk().s[1]++;
exports.useNutrition = useNutrition;
const react_1 =
/* istanbul ignore next */
(cov_btf4ru1xk().s[2]++, require("react"));
const nutrition_service_1 =
/* istanbul ignore next */
(cov_btf4ru1xk().s[3]++, require("@/features/nutrition/services/nutrition.service"));
function useNutrition(userId) {
  /* istanbul ignore next */
  cov_btf4ru1xk().f[0]++;
  const [nutritionData, setNutritionData] =
  /* istanbul ignore next */
  (cov_btf4ru1xk().s[4]++, (0, react_1.useState)(null));
  const [meals, setMeals] =
  /* istanbul ignore next */
  (cov_btf4ru1xk().s[5]++, (0, react_1.useState)([]));
  const [goals, setGoals] =
  /* istanbul ignore next */
  (cov_btf4ru1xk().s[6]++, (0, react_1.useState)(null));
  const [analysis, setAnalysis] =
  /* istanbul ignore next */
  (cov_btf4ru1xk().s[7]++, (0, react_1.useState)(null));
  const [recipes, setRecipes] =
  /* istanbul ignore next */
  (cov_btf4ru1xk().s[8]++, (0, react_1.useState)([]));
  const [mealPlans, setMealPlans] =
  /* istanbul ignore next */
  (cov_btf4ru1xk().s[9]++, (0, react_1.useState)([]));
  const [trends, setTrends] =
  /* istanbul ignore next */
  (cov_btf4ru1xk().s[10]++, (0, react_1.useState)(null));
  const [insights, setInsights] =
  /* istanbul ignore next */
  (cov_btf4ru1xk().s[11]++, (0, react_1.useState)([]));
  const [searchResults, setSearchResults] =
  /* istanbul ignore next */
  (cov_btf4ru1xk().s[12]++, (0, react_1.useState)([]));
  const [isLoading, setIsLoading] =
  /* istanbul ignore next */
  (cov_btf4ru1xk().s[13]++, (0, react_1.useState)(false));
  const [error, setError] =
  /* istanbul ignore next */
  (cov_btf4ru1xk().s[14]++, (0, react_1.useState)(null));
  const currentUserId =
  /* istanbul ignore next */
  (cov_btf4ru1xk().s[15]++,
  /* istanbul ignore next */
  (cov_btf4ru1xk().b[0][0]++, userId) ||
  /* istanbul ignore next */
  (cov_btf4ru1xk().b[0][1]++, 'current-user'));
  const today =
  /* istanbul ignore next */
  (cov_btf4ru1xk().s[16]++,
  /* istanbul ignore next */
  (cov_btf4ru1xk().b[1][0]++, new Date().toISOString().split('T')[0]) ||
  /* istanbul ignore next */
  (cov_btf4ru1xk().b[1][1]++, ''));
  // Chargement des données initiales
  const loadNutritionData =
  /* istanbul ignore next */
  (cov_btf4ru1xk().s[17]++, (0, react_1.useCallback)(async () => {
    /* istanbul ignore next */
    cov_btf4ru1xk().f[1]++;
    cov_btf4ru1xk().s[18]++;
    if (!currentUserId) {
      /* istanbul ignore next */
      cov_btf4ru1xk().b[2][0]++;
      cov_btf4ru1xk().s[19]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_btf4ru1xk().b[2][1]++;
    }
    cov_btf4ru1xk().s[20]++;
    setIsLoading(true);
    /* istanbul ignore next */
    cov_btf4ru1xk().s[21]++;
    setError(null);
    /* istanbul ignore next */
    cov_btf4ru1xk().s[22]++;
    try {
      const data =
      /* istanbul ignore next */
      (cov_btf4ru1xk().s[23]++, await nutrition_service_1.NutritionService.getNutritionData(currentUserId, today));
      /* istanbul ignore next */
      cov_btf4ru1xk().s[24]++;
      setNutritionData(data);
      /* istanbul ignore next */
      cov_btf4ru1xk().s[25]++;
      setMeals(data.meals);
      /* istanbul ignore next */
      cov_btf4ru1xk().s[26]++;
      setGoals(data.dailyGoals);
    } catch (err) {
      const errorMessage =
      /* istanbul ignore next */
      (cov_btf4ru1xk().s[27]++, err instanceof Error ?
      /* istanbul ignore next */
      (cov_btf4ru1xk().b[3][0]++, err.message) :
      /* istanbul ignore next */
      (cov_btf4ru1xk().b[3][1]++, 'Erreur lors du chargement des données nutritionnelles'));
      /* istanbul ignore next */
      cov_btf4ru1xk().s[28]++;
      setError(errorMessage);
    } finally {
      /* istanbul ignore next */
      cov_btf4ru1xk().s[29]++;
      setIsLoading(false);
    }
  }, [currentUserId, today]));
  // Chargement de l'analyse
  const loadAnalysis =
  /* istanbul ignore next */
  (cov_btf4ru1xk().s[30]++, (0, react_1.useCallback)(async () => {
    /* istanbul ignore next */
    cov_btf4ru1xk().f[2]++;
    cov_btf4ru1xk().s[31]++;
    if (!currentUserId) {
      /* istanbul ignore next */
      cov_btf4ru1xk().b[4][0]++;
      cov_btf4ru1xk().s[32]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_btf4ru1xk().b[4][1]++;
    }
    cov_btf4ru1xk().s[33]++;
    try {
      const endDate =
      /* istanbul ignore next */
      (cov_btf4ru1xk().s[34]++, today);
      const startDate =
      /* istanbul ignore next */
      (cov_btf4ru1xk().s[35]++,
      /* istanbul ignore next */
      (cov_btf4ru1xk().b[5][0]++, new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0]) ||
      /* istanbul ignore next */
      (cov_btf4ru1xk().b[5][1]++, ''));
      const analysisData =
      /* istanbul ignore next */
      (cov_btf4ru1xk().s[36]++, await nutrition_service_1.NutritionService.getNutritionAnalysis(currentUserId, startDate, endDate));
      /* istanbul ignore next */
      cov_btf4ru1xk().s[37]++;
      setAnalysis(analysisData);
    } catch (err) {
      /* istanbul ignore next */
      cov_btf4ru1xk().s[38]++;
      console.error("Erreur lors du chargement de l'analyse:", err);
    }
  }, [currentUserId, today]));
  // Chargement des insights
  const loadInsights =
  /* istanbul ignore next */
  (cov_btf4ru1xk().s[39]++, (0, react_1.useCallback)(async () => {
    /* istanbul ignore next */
    cov_btf4ru1xk().f[3]++;
    cov_btf4ru1xk().s[40]++;
    if (!currentUserId) {
      /* istanbul ignore next */
      cov_btf4ru1xk().b[6][0]++;
      cov_btf4ru1xk().s[41]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_btf4ru1xk().b[6][1]++;
    }
    cov_btf4ru1xk().s[42]++;
    try {
      const insightsData =
      /* istanbul ignore next */
      (cov_btf4ru1xk().s[43]++, await nutrition_service_1.NutritionService.getNutritionInsights(currentUserId));
      /* istanbul ignore next */
      cov_btf4ru1xk().s[44]++;
      setInsights(insightsData);
    } catch (err) {
      /* istanbul ignore next */
      cov_btf4ru1xk().s[45]++;
      console.error('Erreur lors du chargement des insights:', err);
    }
  }, [currentUserId]));
  // Ajout d'un repas
  const addMeal =
  /* istanbul ignore next */
  (cov_btf4ru1xk().s[46]++, (0, react_1.useCallback)(async meal => {
    /* istanbul ignore next */
    cov_btf4ru1xk().f[4]++;
    cov_btf4ru1xk().s[47]++;
    if (!currentUserId) {
      /* istanbul ignore next */
      cov_btf4ru1xk().b[7][0]++;
      cov_btf4ru1xk().s[48]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_btf4ru1xk().b[7][1]++;
    }
    cov_btf4ru1xk().s[49]++;
    setIsLoading(true);
    /* istanbul ignore next */
    cov_btf4ru1xk().s[50]++;
    setError(null);
    /* istanbul ignore next */
    cov_btf4ru1xk().s[51]++;
    try {
      const mealData =
      /* istanbul ignore next */
      (cov_btf4ru1xk().s[52]++, {
        type: meal.type,
        name: meal.name,
        foods: meal.foods
      });
      /* istanbul ignore next */
      cov_btf4ru1xk().s[53]++;
      await nutrition_service_1.NutritionService.addMeal(currentUserId, mealData);
      /* istanbul ignore next */
      cov_btf4ru1xk().s[54]++;
      await loadNutritionData();
    } catch (err) {
      const errorMessage =
      /* istanbul ignore next */
      (cov_btf4ru1xk().s[55]++, err instanceof Error ?
      /* istanbul ignore next */
      (cov_btf4ru1xk().b[8][0]++, err.message) :
      /* istanbul ignore next */
      (cov_btf4ru1xk().b[8][1]++, "Erreur lors de l'ajout du repas"));
      /* istanbul ignore next */
      cov_btf4ru1xk().s[56]++;
      setError(errorMessage);
    } finally {
      /* istanbul ignore next */
      cov_btf4ru1xk().s[57]++;
      setIsLoading(false);
    }
  }, [currentUserId, loadNutritionData]));
  // Mise à jour d'un repas
  const updateMeal =
  /* istanbul ignore next */
  (cov_btf4ru1xk().s[58]++, (0, react_1.useCallback)(async (id, meal) => {
    /* istanbul ignore next */
    cov_btf4ru1xk().f[5]++;
    cov_btf4ru1xk().s[59]++;
    setIsLoading(true);
    /* istanbul ignore next */
    cov_btf4ru1xk().s[60]++;
    setError(null);
    /* istanbul ignore next */
    cov_btf4ru1xk().s[61]++;
    try {
      /* istanbul ignore next */
      cov_btf4ru1xk().s[62]++;
      await nutrition_service_1.NutritionService.updateMeal(id, meal);
      /* istanbul ignore next */
      cov_btf4ru1xk().s[63]++;
      await loadNutritionData();
    } catch (err) {
      const errorMessage =
      /* istanbul ignore next */
      (cov_btf4ru1xk().s[64]++, err instanceof Error ?
      /* istanbul ignore next */
      (cov_btf4ru1xk().b[9][0]++, err.message) :
      /* istanbul ignore next */
      (cov_btf4ru1xk().b[9][1]++, 'Erreur lors de la mise à jour du repas'));
      /* istanbul ignore next */
      cov_btf4ru1xk().s[65]++;
      setError(errorMessage);
    } finally {
      /* istanbul ignore next */
      cov_btf4ru1xk().s[66]++;
      setIsLoading(false);
    }
  }, [loadNutritionData]));
  // Suppression d'un repas
  const deleteMeal =
  /* istanbul ignore next */
  (cov_btf4ru1xk().s[67]++, (0, react_1.useCallback)(async id => {
    /* istanbul ignore next */
    cov_btf4ru1xk().f[6]++;
    cov_btf4ru1xk().s[68]++;
    setIsLoading(true);
    /* istanbul ignore next */
    cov_btf4ru1xk().s[69]++;
    setError(null);
    /* istanbul ignore next */
    cov_btf4ru1xk().s[70]++;
    try {
      const success =
      /* istanbul ignore next */
      (cov_btf4ru1xk().s[71]++, await nutrition_service_1.NutritionService.deleteMeal(id));
      /* istanbul ignore next */
      cov_btf4ru1xk().s[72]++;
      if (success) {
        /* istanbul ignore next */
        cov_btf4ru1xk().b[10][0]++;
        cov_btf4ru1xk().s[73]++;
        await loadNutritionData();
      } else {
        /* istanbul ignore next */
        cov_btf4ru1xk().b[10][1]++;
        cov_btf4ru1xk().s[74]++;
        setError('Erreur lors de la suppression du repas');
      }
    } catch (err) {
      const errorMessage =
      /* istanbul ignore next */
      (cov_btf4ru1xk().s[75]++, err instanceof Error ?
      /* istanbul ignore next */
      (cov_btf4ru1xk().b[11][0]++, err.message) :
      /* istanbul ignore next */
      (cov_btf4ru1xk().b[11][1]++, 'Erreur lors de la suppression du repas'));
      /* istanbul ignore next */
      cov_btf4ru1xk().s[76]++;
      setError(errorMessage);
    } finally {
      /* istanbul ignore next */
      cov_btf4ru1xk().s[77]++;
      setIsLoading(false);
    }
  }, [loadNutritionData]));
  // Mise à jour des objectifs
  const updateGoals =
  /* istanbul ignore next */
  (cov_btf4ru1xk().s[78]++, (0, react_1.useCallback)(async newGoals => {
    /* istanbul ignore next */
    cov_btf4ru1xk().f[7]++;
    cov_btf4ru1xk().s[79]++;
    if (!currentUserId) {
      /* istanbul ignore next */
      cov_btf4ru1xk().b[12][0]++;
      cov_btf4ru1xk().s[80]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_btf4ru1xk().b[12][1]++;
    }
    cov_btf4ru1xk().s[81]++;
    setIsLoading(true);
    /* istanbul ignore next */
    cov_btf4ru1xk().s[82]++;
    setError(null);
    /* istanbul ignore next */
    cov_btf4ru1xk().s[83]++;
    try {
      const updatedGoals =
      /* istanbul ignore next */
      (cov_btf4ru1xk().s[84]++, await nutrition_service_1.NutritionService.updateNutritionGoals(currentUserId, newGoals));
      /* istanbul ignore next */
      cov_btf4ru1xk().s[85]++;
      setGoals(updatedGoals);
    } catch (err) {
      const errorMessage =
      /* istanbul ignore next */
      (cov_btf4ru1xk().s[86]++, err instanceof Error ?
      /* istanbul ignore next */
      (cov_btf4ru1xk().b[13][0]++, err.message) :
      /* istanbul ignore next */
      (cov_btf4ru1xk().b[13][1]++, 'Erreur lors de la mise à jour des objectifs'));
      /* istanbul ignore next */
      cov_btf4ru1xk().s[87]++;
      setError(errorMessage);
    } finally {
      /* istanbul ignore next */
      cov_btf4ru1xk().s[88]++;
      setIsLoading(false);
    }
  }, [currentUserId]));
  // Recherche d'aliments
  const searchFoods =
  /* istanbul ignore next */
  (cov_btf4ru1xk().s[89]++, (0, react_1.useCallback)(async query => {
    /* istanbul ignore next */
    cov_btf4ru1xk().f[8]++;
    cov_btf4ru1xk().s[90]++;
    setIsLoading(true);
    /* istanbul ignore next */
    cov_btf4ru1xk().s[91]++;
    setError(null);
    /* istanbul ignore next */
    cov_btf4ru1xk().s[92]++;
    try {
      const results =
      /* istanbul ignore next */
      (cov_btf4ru1xk().s[93]++, await nutrition_service_1.NutritionService.searchFoods(query));
      /* istanbul ignore next */
      cov_btf4ru1xk().s[94]++;
      setSearchResults(results);
    } catch (err) {
      const errorMessage =
      /* istanbul ignore next */
      (cov_btf4ru1xk().s[95]++, err instanceof Error ?
      /* istanbul ignore next */
      (cov_btf4ru1xk().b[14][0]++, err.message) :
      /* istanbul ignore next */
      (cov_btf4ru1xk().b[14][1]++, "Erreur lors de la recherche d'aliments"));
      /* istanbul ignore next */
      cov_btf4ru1xk().s[96]++;
      setError(errorMessage);
    } finally {
      /* istanbul ignore next */
      cov_btf4ru1xk().s[97]++;
      setIsLoading(false);
    }
  }, []));
  // Chargement des recettes
  const loadRecipes =
  /* istanbul ignore next */
  (cov_btf4ru1xk().s[98]++, (0, react_1.useCallback)(async filters => {
    /* istanbul ignore next */
    cov_btf4ru1xk().f[9]++;
    cov_btf4ru1xk().s[99]++;
    if (!currentUserId) {
      /* istanbul ignore next */
      cov_btf4ru1xk().b[15][0]++;
      cov_btf4ru1xk().s[100]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_btf4ru1xk().b[15][1]++;
    }
    cov_btf4ru1xk().s[101]++;
    setIsLoading(true);
    /* istanbul ignore next */
    cov_btf4ru1xk().s[102]++;
    setError(null);
    /* istanbul ignore next */
    cov_btf4ru1xk().s[103]++;
    try {
      const recipesData =
      /* istanbul ignore next */
      (cov_btf4ru1xk().s[104]++, await nutrition_service_1.NutritionService.getRecipes(currentUserId, filters));
      /* istanbul ignore next */
      cov_btf4ru1xk().s[105]++;
      setRecipes(recipesData);
    } catch (err) {
      const errorMessage =
      /* istanbul ignore next */
      (cov_btf4ru1xk().s[106]++, err instanceof Error ?
      /* istanbul ignore next */
      (cov_btf4ru1xk().b[16][0]++, err.message) :
      /* istanbul ignore next */
      (cov_btf4ru1xk().b[16][1]++, 'Erreur lors du chargement des recettes'));
      /* istanbul ignore next */
      cov_btf4ru1xk().s[107]++;
      setError(errorMessage);
    } finally {
      /* istanbul ignore next */
      cov_btf4ru1xk().s[108]++;
      setIsLoading(false);
    }
  }, [currentUserId]));
  // Chargement des plans de repas
  const loadMealPlans =
  /* istanbul ignore next */
  (cov_btf4ru1xk().s[109]++, (0, react_1.useCallback)(async () => {
    /* istanbul ignore next */
    cov_btf4ru1xk().f[10]++;
    cov_btf4ru1xk().s[110]++;
    if (!currentUserId) {
      /* istanbul ignore next */
      cov_btf4ru1xk().b[17][0]++;
      cov_btf4ru1xk().s[111]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_btf4ru1xk().b[17][1]++;
    }
    cov_btf4ru1xk().s[112]++;
    setIsLoading(true);
    /* istanbul ignore next */
    cov_btf4ru1xk().s[113]++;
    setError(null);
    /* istanbul ignore next */
    cov_btf4ru1xk().s[114]++;
    try {
      const plansData =
      /* istanbul ignore next */
      (cov_btf4ru1xk().s[115]++, await nutrition_service_1.NutritionService.getMealPlans(currentUserId));
      /* istanbul ignore next */
      cov_btf4ru1xk().s[116]++;
      setMealPlans(plansData);
    } catch (err) {
      const errorMessage =
      /* istanbul ignore next */
      (cov_btf4ru1xk().s[117]++, err instanceof Error ?
      /* istanbul ignore next */
      (cov_btf4ru1xk().b[18][0]++, err.message) :
      /* istanbul ignore next */
      (cov_btf4ru1xk().b[18][1]++, 'Erreur lors du chargement des plans de repas'));
      /* istanbul ignore next */
      cov_btf4ru1xk().s[118]++;
      setError(errorMessage);
    } finally {
      /* istanbul ignore next */
      cov_btf4ru1xk().s[119]++;
      setIsLoading(false);
    }
  }, [currentUserId]));
  // Chargement des tendances
  const loadTrends =
  /* istanbul ignore next */
  (cov_btf4ru1xk().s[120]++, (0, react_1.useCallback)(async period => {
    /* istanbul ignore next */
    cov_btf4ru1xk().f[11]++;
    cov_btf4ru1xk().s[121]++;
    if (!currentUserId) {
      /* istanbul ignore next */
      cov_btf4ru1xk().b[19][0]++;
      cov_btf4ru1xk().s[122]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_btf4ru1xk().b[19][1]++;
    }
    cov_btf4ru1xk().s[123]++;
    setIsLoading(true);
    /* istanbul ignore next */
    cov_btf4ru1xk().s[124]++;
    setError(null);
    /* istanbul ignore next */
    cov_btf4ru1xk().s[125]++;
    try {
      const trendsData =
      /* istanbul ignore next */
      (cov_btf4ru1xk().s[126]++, await nutrition_service_1.NutritionService.getNutritionTrends(currentUserId, period));
      /* istanbul ignore next */
      cov_btf4ru1xk().s[127]++;
      setTrends(trendsData);
    } catch (err) {
      const errorMessage =
      /* istanbul ignore next */
      (cov_btf4ru1xk().s[128]++, err instanceof Error ?
      /* istanbul ignore next */
      (cov_btf4ru1xk().b[20][0]++, err.message) :
      /* istanbul ignore next */
      (cov_btf4ru1xk().b[20][1]++, 'Erreur lors du chargement des tendances'));
      /* istanbul ignore next */
      cov_btf4ru1xk().s[129]++;
      setError(errorMessage);
    } finally {
      /* istanbul ignore next */
      cov_btf4ru1xk().s[130]++;
      setIsLoading(false);
    }
  }, [currentUserId]));
  // Rafraîchissement des données
  const refreshData =
  /* istanbul ignore next */
  (cov_btf4ru1xk().s[131]++, (0, react_1.useCallback)(async () => {
    /* istanbul ignore next */
    cov_btf4ru1xk().f[12]++;
    cov_btf4ru1xk().s[132]++;
    await Promise.all([loadNutritionData(), loadAnalysis(), loadInsights()]);
  }, [loadNutritionData, loadAnalysis, loadInsights]));
  // Calculateurs
  const calculateDailyScore =
  /* istanbul ignore next */
  (cov_btf4ru1xk().s[133]++, (0, react_1.useCallback)(() => {
    /* istanbul ignore next */
    cov_btf4ru1xk().f[13]++;
    cov_btf4ru1xk().s[134]++;
    if (!nutritionData) {
      /* istanbul ignore next */
      cov_btf4ru1xk().b[21][0]++;
      cov_btf4ru1xk().s[135]++;
      return 0;
    } else
    /* istanbul ignore next */
    {
      cov_btf4ru1xk().b[21][1]++;
    }
    cov_btf4ru1xk().s[136]++;
    return nutrition_service_1.NutritionService.calculateNutritionScore(nutritionData);
  }, [nutritionData]));
  const calculateCalorieBalance =
  /* istanbul ignore next */
  (cov_btf4ru1xk().s[137]++, (0, react_1.useCallback)(() => {
    /* istanbul ignore next */
    cov_btf4ru1xk().f[14]++;
    cov_btf4ru1xk().s[138]++;
    if (!nutritionData) {
      /* istanbul ignore next */
      cov_btf4ru1xk().b[22][0]++;
      cov_btf4ru1xk().s[139]++;
      return 0;
    } else
    /* istanbul ignore next */
    {
      cov_btf4ru1xk().b[22][1]++;
    }
    cov_btf4ru1xk().s[140]++;
    return nutritionData.totalCalories - nutritionData.dailyGoals.dailyCalories;
  }, [nutritionData]));
  const getMacroBalance =
  /* istanbul ignore next */
  (cov_btf4ru1xk().s[141]++, (0, react_1.useCallback)(() => {
    /* istanbul ignore next */
    cov_btf4ru1xk().f[15]++;
    cov_btf4ru1xk().s[142]++;
    if (!nutritionData) {
      /* istanbul ignore next */
      cov_btf4ru1xk().b[23][0]++;
      cov_btf4ru1xk().s[143]++;
      return {
        proteins: 0,
        carbohydrates: 0,
        fats: 0
      };
    } else
    /* istanbul ignore next */
    {
      cov_btf4ru1xk().b[23][1]++;
    }
    const {
      totalMacros,
      dailyGoals
    } =
    /* istanbul ignore next */
    (cov_btf4ru1xk().s[144]++, nutritionData);
    /* istanbul ignore next */
    cov_btf4ru1xk().s[145]++;
    return {
      proteins: Math.round(totalMacros.proteins / dailyGoals.macroTargets.proteins * 100),
      carbohydrates: Math.round(totalMacros.carbohydrates / dailyGoals.macroTargets.carbohydrates * 100),
      fats: Math.round(totalMacros.fats / dailyGoals.macroTargets.fats * 100)
    };
  }, [nutritionData]));
  const getHydrationStatus =
  /* istanbul ignore next */
  (cov_btf4ru1xk().s[146]++, (0, react_1.useCallback)(() => {
    /* istanbul ignore next */
    cov_btf4ru1xk().f[16]++;
    cov_btf4ru1xk().s[147]++;
    if (!nutritionData) {
      /* istanbul ignore next */
      cov_btf4ru1xk().b[24][0]++;
      cov_btf4ru1xk().s[148]++;
      return 0;
    } else
    /* istanbul ignore next */
    {
      cov_btf4ru1xk().b[24][1]++;
    }
    cov_btf4ru1xk().s[149]++;
    return Math.round(nutritionData.waterIntake / nutritionData.dailyGoals.waterGoal * 100);
  }, [nutritionData]));
  // Chargement initial
  /* istanbul ignore next */
  cov_btf4ru1xk().s[150]++;
  (0, react_1.useEffect)(() => {
    /* istanbul ignore next */
    cov_btf4ru1xk().f[17]++;
    cov_btf4ru1xk().s[151]++;
    refreshData();
  }, [refreshData]);
  /* istanbul ignore next */
  cov_btf4ru1xk().s[152]++;
  return {
    // État
    nutritionData,
    meals,
    goals,
    analysis,
    recipes,
    mealPlans,
    trends,
    insights,
    searchResults,
    isLoading,
    error,
    // Actions
    addMeal,
    updateMeal,
    deleteMeal,
    updateGoals,
    searchFoods,
    loadRecipes,
    loadMealPlans,
    loadTrends,
    refreshData,
    // Calculateurs
    calculateDailyScore,
    calculateCalorieBalance,
    getMacroBalance,
    getHydrationStatus
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,