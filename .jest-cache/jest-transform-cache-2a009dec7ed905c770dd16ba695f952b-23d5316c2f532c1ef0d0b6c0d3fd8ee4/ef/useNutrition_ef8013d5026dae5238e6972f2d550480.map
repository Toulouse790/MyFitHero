{"version":3,"names":["cov_btf4ru1xk","actualCoverage","s","exports","useNutrition","react_1","require","nutrition_service_1","userId","f","nutritionData","setNutritionData","useState","meals","setMeals","goals","setGoals","analysis","setAnalysis","recipes","setRecipes","mealPlans","setMealPlans","trends","setTrends","insights","setInsights","searchResults","setSearchResults","isLoading","setIsLoading","error","setError","currentUserId","b","today","Date","toISOString","split","loadNutritionData","useCallback","data","NutritionService","getNutritionData","dailyGoals","err","errorMessage","Error","message","loadAnalysis","endDate","startDate","now","analysisData","getNutritionAnalysis","console","loadInsights","insightsData","getNutritionInsights","addMeal","meal","mealData","type","name","foods","updateMeal","id","deleteMeal","success","updateGoals","newGoals","updatedGoals","updateNutritionGoals","searchFoods","query","results","loadRecipes","filters","recipesData","getRecipes","loadMealPlans","plansData","getMealPlans","loadTrends","period","trendsData","getNutritionTrends","refreshData","Promise","all","calculateDailyScore","calculateNutritionScore","calculateCalorieBalance","totalCalories","dailyCalories","getMacroBalance","proteins","carbohydrates","fats","totalMacros","Math","round","macroTargets","getHydrationStatus","waterIntake","waterGoal","useEffect"],"sources":["/workspaces/MyFitHero/src/features/nutrition/hooks/useNutrition.ts"],"sourcesContent":["import { Search, Target } from 'lucide-react';\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { NutritionService } from '@/features/nutrition/services/nutrition.service';\nimport type {\n  NutritionData,\n  Meal,\n  FoodItem,\n  NutritionGoals,\n  NutritionAnalysis,\n  Recipe,\n  MealPlan,\n  NutritionTrend,\n  CreateMealDTO,\n  UpdateNutritionGoalsDTO,\n  FoodSearchQuery,\n  NutritionInsight,\n} from '@/features/nutrition/types/index';\n\ntype NutritionMealInput = {\n  type: 'breakfast' | 'lunch' | 'dinner' | 'snack';\n  name: string;\n  foods: Omit<FoodItem, 'id'>[];\n};\n\nexport interface UseNutritionReturn {\n  // État\n  nutritionData: NutritionData | undefined;\n  meals: Meal[];\n  goals: NutritionGoals | undefined;\n  analysis: NutritionAnalysis | undefined;\n  recipes: Recipe[];\n  mealPlans: MealPlan[];\n  trends: NutritionTrend | undefined;\n  insights: NutritionInsight[];\n  searchResults: FoodItem[];\n  isLoading: boolean;\n  error: string | undefined;\n\n  // Actions\n  addMeal: (meal: NutritionMealInput) => Promise<void>;\n  updateMeal: (id: string, meal: Partial<NutritionMealInput>) => Promise<void>;\n  deleteMeal: (id: string) => Promise<void>;\n  updateGoals: (goals: UpdateNutritionGoalsDTO) => Promise<void>;\n  searchFoods: (query: FoodSearchQuery) => Promise<void>;\n  loadRecipes: (filters?: { tags?: string[]; difficulty?: string }) => Promise<void>;\n  loadMealPlans: () => Promise<void>;\n  loadTrends: (period: 'week' | 'month' | 'quarter') => Promise<void>;\n  refreshData: () => Promise<void>;\n\n  // Calculateurs\n  calculateDailyScore: () => number;\n  calculateCalorieBalance: () => number;\n  getMacroBalance: () => { proteins: number; carbohydrates: number; fats: number };\n  getHydrationStatus: () => number;\n}\n\nexport function useNutrition(userId?: string): UseNutritionReturn {\n  const [nutritionData, setNutritionData] = useState<NutritionData | null>(null);\n  const [meals, setMeals] = useState<Meal[]>([]);\n  const [goals, setGoals] = useState<NutritionGoals | null>(null);\n  const [analysis, setAnalysis] = useState<NutritionAnalysis | null>(null);\n  const [recipes, setRecipes] = useState<Recipe[]>([]);\n  const [mealPlans, setMealPlans] = useState<MealPlan[]>([]);\n  const [trends, setTrends] = useState<NutritionTrend | null>(null);\n  const [insights, setInsights] = useState<NutritionInsight[]>([]);\n  const [searchResults, setSearchResults] = useState<FoodItem[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const currentUserId = userId || 'current-user';\n  const today = new Date().toISOString().split('T')[0] || '';\n\n  // Chargement des données initiales\n  const loadNutritionData = useCallback(async () => {\n    if (!currentUserId) return;\n\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const data = await NutritionService.getNutritionData(currentUserId, today);\n      setNutritionData(data);\n      setMeals(data.meals);\n      setGoals(data.dailyGoals);\n    } catch (err) {\n      const errorMessage =\n        err instanceof Error\n          ? err.message\n          : 'Erreur lors du chargement des données nutritionnelles';\n      setError(errorMessage);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [currentUserId, today]);\n\n  // Chargement de l'analyse\n  const loadAnalysis = useCallback(async () => {\n    if (!currentUserId) return;\n\n    try {\n      const endDate = today;\n      const startDate =\n        new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0] || '';\n      const analysisData = await NutritionService.getNutritionAnalysis(\n        currentUserId,\n        startDate,\n        endDate\n      );\n      setAnalysis(analysisData);\n    } catch (err) {\n      console.error(\"Erreur lors du chargement de l'analyse:\", err);\n    }\n  }, [currentUserId, today]);\n\n  // Chargement des insights\n  const loadInsights = useCallback(async () => {\n    if (!currentUserId) return;\n\n    try {\n      const insightsData = await NutritionService.getNutritionInsights(currentUserId);\n      setInsights(insightsData);\n    } catch (err) {\n      console.error('Erreur lors du chargement des insights:', err);\n    }\n  }, [currentUserId]);\n\n  // Ajout d'un repas\n  const addMeal = useCallback(\n    async (meal: NutritionMealInput) => {\n      if (!currentUserId) return;\n\n      setIsLoading(true);\n      setError(null);\n\n      try {\n        const mealData: CreateMealDTO = {\n          type: meal.type,\n          name: meal.name,\n          foods: meal.foods,\n        };\n\n        await NutritionService.addMeal(currentUserId, mealData);\n        await loadNutritionData();\n      } catch (err) {\n        const errorMessage = err instanceof Error ? err.message : \"Erreur lors de l'ajout du repas\";\n        setError(errorMessage);\n      } finally {\n        setIsLoading(false);\n      }\n    },\n    [currentUserId, loadNutritionData]\n  );\n\n  // Mise à jour d'un repas\n  const updateMeal = useCallback(\n    async (id: string, meal: Partial<NutritionMealInput>) => {\n      setIsLoading(true);\n      setError(null);\n\n      try {\n        await NutritionService.updateMeal(id, meal);\n        await loadNutritionData();\n      } catch (err) {\n        const errorMessage =\n          err instanceof Error ? err.message : 'Erreur lors de la mise à jour du repas';\n        setError(errorMessage);\n      } finally {\n        setIsLoading(false);\n      }\n    },\n    [loadNutritionData]\n  );\n\n  // Suppression d'un repas\n  const deleteMeal = useCallback(\n    async (id: string) => {\n      setIsLoading(true);\n      setError(null);\n\n      try {\n        const success = await NutritionService.deleteMeal(id);\n        if (success) {\n          await loadNutritionData();\n        } else {\n          setError('Erreur lors de la suppression du repas');\n        }\n      } catch (err) {\n        const errorMessage =\n          err instanceof Error ? err.message : 'Erreur lors de la suppression du repas';\n        setError(errorMessage);\n      } finally {\n        setIsLoading(false);\n      }\n    },\n    [loadNutritionData]\n  );\n\n  // Mise à jour des objectifs\n  const updateGoals = useCallback(\n    async (newGoals: UpdateNutritionGoalsDTO) => {\n      if (!currentUserId) return;\n\n      setIsLoading(true);\n      setError(null);\n\n      try {\n        const updatedGoals = await NutritionService.updateNutritionGoals(currentUserId, newGoals);\n        setGoals(updatedGoals);\n      } catch (err) {\n        const errorMessage =\n          err instanceof Error ? err.message : 'Erreur lors de la mise à jour des objectifs';\n        setError(errorMessage);\n      } finally {\n        setIsLoading(false);\n      }\n    },\n    [currentUserId]\n  );\n\n  // Recherche d'aliments\n  const searchFoods = useCallback(async (query: FoodSearchQuery) => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const results = await NutritionService.searchFoods(query);\n      setSearchResults(results);\n    } catch (err) {\n      const errorMessage =\n        err instanceof Error ? err.message : \"Erreur lors de la recherche d'aliments\";\n      setError(errorMessage);\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  // Chargement des recettes\n  const loadRecipes = useCallback(\n    async (filters?: { tags?: string[]; difficulty?: string }) => {\n      if (!currentUserId) return;\n\n      setIsLoading(true);\n      setError(null);\n\n      try {\n        const recipesData = await NutritionService.getRecipes(currentUserId, filters);\n        setRecipes(recipesData);\n      } catch (err) {\n        const errorMessage =\n          err instanceof Error ? err.message : 'Erreur lors du chargement des recettes';\n        setError(errorMessage);\n      } finally {\n        setIsLoading(false);\n      }\n    },\n    [currentUserId]\n  );\n\n  // Chargement des plans de repas\n  const loadMealPlans = useCallback(async () => {\n    if (!currentUserId) return;\n\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const plansData = await NutritionService.getMealPlans(currentUserId);\n      setMealPlans(plansData);\n    } catch (err) {\n      const errorMessage =\n        err instanceof Error ? err.message : 'Erreur lors du chargement des plans de repas';\n      setError(errorMessage);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [currentUserId]);\n\n  // Chargement des tendances\n  const loadTrends = useCallback(\n    async (period: 'week' | 'month' | 'quarter') => {\n      if (!currentUserId) return;\n\n      setIsLoading(true);\n      setError(null);\n\n      try {\n        const trendsData = await NutritionService.getNutritionTrends(currentUserId, period);\n        setTrends(trendsData);\n      } catch (err) {\n        const errorMessage =\n          err instanceof Error ? err.message : 'Erreur lors du chargement des tendances';\n        setError(errorMessage);\n      } finally {\n        setIsLoading(false);\n      }\n    },\n    [currentUserId]\n  );\n\n  // Rafraîchissement des données\n  const refreshData = useCallback(async () => {\n    await Promise.all([loadNutritionData(), loadAnalysis(), loadInsights()]);\n  }, [loadNutritionData, loadAnalysis, loadInsights]);\n\n  // Calculateurs\n  const calculateDailyScore = useCallback((): number => {\n    if (!nutritionData) return 0;\n    return NutritionService.calculateNutritionScore(nutritionData);\n  }, [nutritionData]);\n\n  const calculateCalorieBalance = useCallback((): number => {\n    if (!nutritionData) return 0;\n    return nutritionData.totalCalories - nutritionData.dailyGoals.dailyCalories;\n  }, [nutritionData]);\n\n  const getMacroBalance = useCallback((): {\n    proteins: number;\n    carbohydrates: number;\n    fats: number;\n  } => {\n    if (!nutritionData) return { proteins: 0, carbohydrates: 0, fats: 0 };\n\n    const { totalMacros, dailyGoals } = nutritionData;\n    return {\n      proteins: Math.round((totalMacros.proteins / dailyGoals.macroTargets.proteins) * 100),\n      carbohydrates: Math.round(\n        (totalMacros.carbohydrates / dailyGoals.macroTargets.carbohydrates) * 100\n      ),\n      fats: Math.round((totalMacros.fats / dailyGoals.macroTargets.fats) * 100),\n    };\n  }, [nutritionData]);\n\n  const getHydrationStatus = useCallback((): number => {\n    if (!nutritionData) return 0;\n    return Math.round((nutritionData.waterIntake / nutritionData.dailyGoals.waterGoal) * 100);\n  }, [nutritionData]);\n\n  // Chargement initial\n  useEffect(() => {\n    refreshData();\n  }, [refreshData]);\n\n  return {\n    // État\n    nutritionData,\n    meals,\n    goals,\n    analysis,\n    recipes,\n    mealPlans,\n    trends,\n    insights,\n    searchResults,\n    isLoading,\n    error,\n\n    // Actions\n    addMeal,\n    updateMeal,\n    deleteMeal,\n    updateGoals,\n    searchFoods,\n    loadRecipes,\n    loadMealPlans,\n    loadTrends,\n    refreshData,\n\n    // Calculateurs\n    calculateDailyScore,\n    calculateCalorieBalance,\n    getMacroBalance,\n    getHydrationStatus,\n  };\n}\n"],"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","ignoreList":[]}