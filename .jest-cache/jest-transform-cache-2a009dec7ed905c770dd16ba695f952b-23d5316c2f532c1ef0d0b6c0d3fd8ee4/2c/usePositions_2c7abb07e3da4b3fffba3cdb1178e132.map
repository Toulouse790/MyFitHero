{"version":3,"names":["cov_18q527md6q","actualCoverage","s","exports","usePositions","supabase_1","require","react_query_1","use_toast_1","CACHE_TTL","getPositionsFromLibrary","sportId","f","data","error","supabase","from","select","eq","single","b","console","positions","getPositionsFromDrills","sportName","not","Array","Set","map","r","position","filter","Boolean","qc","useQueryClient","toast","useToast","libraryQuery","useQuery","queryKey","queryFn","staleTime","refetchOnWindowFocus","retry","drillsQuery","enabled","isArray","length","isLoading","refresh","invalidateQueries"],"sources":["/workspaces/MyFitHero/src/features/ai-coach/hooks/usePositions.ts"],"sourcesContent":["// client/src/services/usePositions.ts\nimport { supabase } from '@/lib/supabase';\nimport { useQuery, useQueryClient } from '@tanstack/react-query';\nimport { useToast } from '@/shared/hooks/use-toast';\n\nconst CACHE_TTL = 5 * 60_000; // 5 minutes\n\nasync function getPositionsFromLibrary(sportId: number): Promise<string[]> {\n  const { data, error } = await supabase\n    .from('sports_library')\n    .select('positions')\n    .eq('id', sportId)\n    .single();\n\n  if (error || !data) {\n    console.error('getPositionsFromLibrary:', error);\n    return [];\n  }\n  return data.positions ?? [];\n}\n\nasync function getPositionsFromDrills(sportName: string): Promise<string[]> {\n  const { data, error } = await supabase\n    .from('sport_drills_library')\n    .select('position')\n    .eq('sport', sportName)\n    .not('position', 'is', null);\n\n  if (error || !data) {\n    console.error('getPositionsFromDrills:', error);\n    return [];\n  }\n  return Array.from(new Set(data.map((r: any) => r.position).filter(Boolean)));\n}\n\nexport function usePositions(sportId: number, sportName: string) {\n  const qc = useQueryClient();\n  const { toast } = useToast();\n\n  const libraryQuery = useQuery({\n    queryKey: ['positions', 'library', sportId],\n    queryFn: () => getPositionsFromLibrary(sportId),\n    staleTime: CACHE_TTL,\n    refetchOnWindowFocus: false,\n    retry: 1,\n  });\n\n  const drillsQuery = useQuery({\n    queryKey: ['positions', 'drills', sportName],\n    queryFn: () => getPositionsFromDrills(sportName),\n    enabled: Array.isArray(libraryQuery.data) && libraryQuery.data.length === 0,\n    staleTime: CACHE_TTL,\n    refetchOnWindowFocus: false,\n  });\n\n  const positions = (Array.isArray(libraryQuery.data) && libraryQuery.data.length) \n    ? libraryQuery.data \n    : (Array.isArray(drillsQuery.data) ? drillsQuery.data : []);\n\n  const isLoading =\n    libraryQuery.isLoading || (Array.isArray(libraryQuery.data) && libraryQuery.data.length === 0 && drillsQuery.isLoading);\n\n  return {\n    positions,\n    isLoading,\n    error:\n      libraryQuery.error || drillsQuery.error ? 'Erreur lors du chargement des positions' : null,\n    refresh: () => {\n      qc.invalidateQueries({ queryKey: ['positions'] });\n    },\n  };\n}\n"],"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","ignoreList":[]}