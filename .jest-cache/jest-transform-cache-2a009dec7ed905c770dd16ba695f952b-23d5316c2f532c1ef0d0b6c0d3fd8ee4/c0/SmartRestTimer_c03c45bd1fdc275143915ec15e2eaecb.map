{"version":3,"names":["react_1","cov_16fo882r8v","s","__importStar","require","card_1","button_1","badge_1","progress_1","lucide_react_1","supabase_1","sonner_1","SmartRestTimer","exerciseContext","userId","onRestComplete","onRestSkip","onRestExtend","className","b","f","timerState","setTimerState","useState","isActive","isPaused","timeRemaining","originalDuration","recommendation","adaptiveMode","autoStart","userPreferences","setUserPreferences","preferredRestTimes","strength","cardio","power","endurance","flexibility","adaptiveEnabled","soundEnabled","vibrationEnabled","biometrics","setBiometrics","currentHeartRate","restingHeartRate","maxHeartRate","currentRPE","intervalRef","useRef","audioContext","calculateOptimalRest","useCallback","context","baseTime","type","factors","fatigue","Math","min","setNumber","totalSets","heartRate","previousSetPerformance","reps","targetRPE","max","exerciseIntensity","intensity","timeOfDay","hour","Date","getHours","hydrationLevel","adjustmentFactor","suggestedTime","round","confidence","previousRest","length","reasoning","push","suggested","minimum","maximum","adaptiveFactors","startRestTimer","customDuration","duration","toast","info","description","floor","saveRestSession","suggested_duration","useEffect","current","setInterval","prev","playCompletionSound","success","clearInterval","window","AudioContext","webkitAudioContext","ctx","gainNode","createGain","connect","destination","forEach","delay","index","setTimeout","oscillator","createOscillator","frequency","setValueAtTime","currentTime","gain","exponentialRampToValueAtTime","start","stop","navigator","vibrate","action","data","supabase","from","insert","user_id","timestamp","toISOString","timer_state","error","console","pauseTimer","skipRest","remaining_time","extendRest","additionalSeconds","additional_time","resetTimer","formatTime","seconds","mins","secs","toString","padStart","getTimerColor","progress","progressPercentage","jsx_runtime_1","jsxs","Card","children","jsx","CardHeader","CardTitle","Brain","Badge","variant","CardContent","Progress","value","map","reason","Button","onClick","Timer","size","SkipForward","RotateCcw","Heart","exports","default"],"sources":["/workspaces/MyFitHero/src/features/workout/components/SmartRestTimer.tsx"],"sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Progress } from '@/components/ui/progress';\nimport { Slider } from '@/components/ui/slider';\nimport { \n  Timer, \n  Brain, \n  Zap, \n  Heart, \n  TrendingUp, \n  SkipForward,\n  RotateCcw,\n  Settings,\n  Activity,\n  Target\n} from 'lucide-react';\nimport { supabase } from '@/lib/supabase';\nimport { toast } from 'sonner';\n\n// Types pour le système de repos intelligent\ninterface RestRecommendation {\n  suggested: number; // temps suggéré en secondes\n  minimum: number;\n  maximum: number;\n  confidence: number; // 0-1, confiance de la prédiction\n  reasoning: string[];\n  adaptiveFactors: {\n    fatigue: number; // 0-1\n    heartRate?: number;\n    previousSetPerformance: number; // 0-1\n    exerciseIntensity: number; // 0-1\n    timeOfDay: number; // 0-1\n    hydrationLevel?: number; // 0-1\n  };\n}\n\ninterface ExerciseContext {\n  type: 'strength' | 'cardio' | 'power' | 'endurance' | 'flexibility';\n  muscleGroups: string[];\n  intensity: number; // 1-10\n  setNumber: number;\n  totalSets: number;\n  weight?: number;\n  reps?: number;\n  previousRest?: number[];\n  targetRPE?: number; // Rate of Perceived Exertion\n}\n\ninterface RestTimerState {\n  isActive: boolean;\n  isPaused: boolean;\n  timeRemaining: number;\n  originalDuration: number;\n  recommendation: RestRecommendation | undefined;\n  adaptiveMode: boolean;\n  autoStart: boolean;\n}\n\ninterface SmartRestTimerProps {\n  exerciseContext?: ExerciseContext;\n  userId?: string;\n  onRestComplete?: () => void;\n  onRestSkip?: () => void;\n  onRestExtend?: (additionalTime: number) => void;\n  className?: string;\n}\n\nexport const SmartRestTimer: React.FC<SmartRestTimerProps> = ({\n  exerciseContext,\n  userId,\n  onRestComplete,\n  onRestSkip,\n  onRestExtend,\n  className = ''\n}) => {\n  const [timerState, setTimerState] = useState<RestTimerState>({\n    isActive: false,\n    isPaused: false,\n    timeRemaining: 0,\n    originalDuration: 0,\n    recommendation: null,\n    adaptiveMode: true,\n    autoStart: false\n  });\n\n  const [userPreferences, setUserPreferences] = useState({\n    preferredRestTimes: {\n      strength: 180, // 3 minutes\n      cardio: 60,    // 1 minute\n      power: 300,    // 5 minutes\n      endurance: 45, // 45 secondes\n      flexibility: 30 // 30 secondes\n    },\n    adaptiveEnabled: true,\n    soundEnabled: true,\n    vibrationEnabled: true\n  });\n\n  const [biometrics, setBiometrics] = useState({\n    currentHeartRate: 0,\n    restingHeartRate: 65,\n    maxHeartRate: 190,\n    currentRPE: 5\n  });\n\n  const intervalRef = useRef<NodeJS.Timeout | null>(null);\n  const audioContext = useRef<AudioContext | null>(null);\n\n  // Algorithme d'IA pour prédire le temps de repos optimal\n  const calculateOptimalRest = useCallback((context: ExerciseContext): RestRecommendation => {\n    const baseTime = userPreferences.preferredRestTimes[context.type];\n    \n    // Facteurs adaptatifs\n    const factors = {\n      fatigue: Math.min(context.setNumber / context.totalSets, 1),\n      heartRate: biometrics.currentHeartRate > 0 ? \n        (biometrics.currentHeartRate - biometrics.restingHeartRate) / \n        (biometrics.maxHeartRate - biometrics.restingHeartRate) : 0.5,\n      previousSetPerformance: context.reps && context.targetRPE ? \n        Math.max(0, 1 - (biometrics.currentRPE - context.targetRPE) / 10) : 0.7,\n      exerciseIntensity: context.intensity / 10,\n      timeOfDay: (() => {\n        const hour = new Date().getHours();\n        if (hour >= 6 && hour <= 10) return 0.9; // Matin - énergie élevée\n        if (hour >= 14 && hour <= 18) return 1.0; // Après-midi - pic\n        if (hour >= 19 && hour <= 22) return 0.8; // Soir - déclin\n        return 0.6; // Nuit/très tôt\n      })(),\n      hydrationLevel: 0.8 // Placeholder - à connecter avec hydratation\n    };\n\n    // Modèle de prédiction sophistiqué\n    let adjustmentFactor = 1.0;\n    \n    // Fatigue croissante = plus de repos\n    adjustmentFactor += factors.fatigue * 0.4;\n    \n    // Fréquence cardiaque élevée = plus de repos\n    adjustmentFactor += factors.heartRate * 0.3;\n    \n    // Performance déclinante = plus de repos\n    adjustmentFactor += (1 - factors.previousSetPerformance) * 0.3;\n    \n    // Intensité élevée = plus de repos\n    adjustmentFactor += factors.exerciseIntensity * 0.2;\n    \n    // Moment de la journée\n    adjustmentFactor *= factors.timeOfDay;\n    \n    // Hydratation\n    adjustmentFactor += (1 - factors.hydrationLevel) * 0.1;\n\n    const suggestedTime = Math.round(baseTime * adjustmentFactor);\n    const confidence = Math.min(\n      0.6 + // Base confidence\n      (context.previousRest?.length || 0) * 0.05 + // Plus de données = plus de confiance\n      (biometrics.currentHeartRate > 0 ? 0.2 : 0) + // Données biométriques\n      (factors.previousSetPerformance > 0.5 ? 0.1 : 0), // Performance cohérente\n      1.0\n    );\n\n    const reasoning = [];\n    \n    if (factors.fatigue > 0.7) reasoning.push(\"Fatigue détectée - repos prolongé\");\n    if (factors.heartRate > 0.8) reasoning.push(\"FC élevée - récupération cardio\");\n    if (factors.exerciseIntensity > 0.8) reasoning.push(\"Exercice intensif - repos maximal\");\n    if (factors.previousSetPerformance < 0.5) reasoning.push(\"Performance déclinante\");\n    if (factors.timeOfDay < 0.7) reasoning.push(\"Moment non-optimal - compensation\");\n\n    return {\n      suggested: suggestedTime,\n      minimum: Math.round(suggestedTime * 0.6),\n      maximum: Math.round(suggestedTime * 1.5),\n      confidence,\n      reasoning,\n      adaptiveFactors: factors\n    };\n  }, [userPreferences, biometrics]);\n\n  // Démarrage intelligent du timer\n  const startRestTimer = useCallback((customDuration?: number) => {\n    const recommendation = exerciseContext ? calculateOptimalRest(exerciseContext) : null;\n    const duration = customDuration || recommendation?.suggested || 120;\n\n    setTimerState({\n      isActive: true,\n      isPaused: false,\n      timeRemaining: duration,\n      originalDuration: duration,\n      recommendation,\n      adaptiveMode: true,\n      autoStart: false\n    });\n\n    // Notification de démarrage\n    if (recommendation) {\n      toast.info('Repos intelligent démarré', {\n        description: `${Math.floor(duration / 60)}m ${duration % 60}s suggérés (${Math.round(recommendation.confidence * 100)}% confiance)`\n      });\n    }\n\n    // Sauvegarde du début de repos\n    if (userId && exerciseContext) {\n      saveRestSession('start', {\n        suggested_duration: duration,\n        confidence: recommendation?.confidence || 0,\n        context: exerciseContext,\n        biometrics: biometrics\n      });\n    }\n  }, [exerciseContext, calculateOptimalRest, userId, biometrics]);\n\n  // Timer principal\n  useEffect(() => {\n    if (timerState.isActive && !timerState.isPaused && timerState.timeRemaining > 0) {\n      intervalRef.current = setInterval(() => {\n        setTimerState(prev => {\n          if (prev.timeRemaining <= 1) {\n            // Timer terminé\n            onRestComplete?.();\n            playCompletionSound();\n            \n            toast.success('Repos terminé !', {\n              description: 'Prêt pour la prochaine série'\n            });\n\n            return {\n              ...prev,\n              isActive: false,\n              timeRemaining: 0\n            };\n          }\n          \n          return {\n            ...prev,\n            timeRemaining: prev.timeRemaining - 1\n          };\n        });\n      }, 1000);\n    } else {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n        intervalRef.current = null;\n      }\n    }\n\n    return () => {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n    };\n  }, [timerState.isActive, timerState.isPaused, timerState.timeRemaining, onRestComplete]);\n\n  // Son de fin de repos\n  const playCompletionSound = useCallback(() => {\n    if (!userPreferences.soundEnabled) return;\n\n    // Séquence de bips sophistiquée\n    if (!audioContext.current) {\n      audioContext.current = new (window.AudioContext || (window as any).webkitAudioContext)();\n    }\n\n    const ctx = audioContext.current;\n    const gainNode = ctx.createGain();\n    gainNode.connect(ctx.destination);\n\n    // Triple bip avec harmoniques\n    [0, 0.2, 0.4].forEach((delay, index) => {\n      setTimeout(() => {\n        const oscillator = ctx.createOscillator();\n        oscillator.connect(gainNode);\n        oscillator.frequency.setValueAtTime(800 + index * 200, ctx.currentTime);\n        oscillator.type = 'sine';\n        \n        gainNode.gain.setValueAtTime(0.3, ctx.currentTime);\n        gainNode.gain.exponentialRampToValueAtTime(0.01, ctx.currentTime + 0.15);\n        \n        oscillator.start(ctx.currentTime);\n        oscillator.stop(ctx.currentTime + 0.15);\n      }, delay * 1000);\n    });\n\n    // Vibration si supportée\n    if (userPreferences.vibrationEnabled && navigator.vibrate) {\n      navigator.vibrate([200, 100, 200, 100, 200]);\n    }\n  }, [userPreferences]);\n\n  // Sauvegarde des données de repos\n  const saveRestSession = useCallback(async (\n    action: 'start' | 'complete' | 'skip' | 'extend',\n    data: any\n  ) => {\n    if (!userId) return;\n\n    try {\n      await supabase.from('rest_sessions').insert({\n        user_id: userId,\n        action,\n        timestamp: new Date().toISOString(),\n        data: {\n          ...data,\n          timer_state: timerState\n        }\n      });\n    } catch (error: any) {\n      console.error('Erreur sauvegarde rest session:', error);\n    }\n  }, [userId, timerState]);\n\n  // Actions utilisateur\n  const pauseTimer = () => {\n    setTimerState(prev => ({ ...prev, isPaused: !prev.isPaused }));\n  };\n\n  const skipRest = () => {\n    setTimerState(prev => ({ ...prev, isActive: false, timeRemaining: 0 }));\n    onRestSkip?.();\n    saveRestSession('skip', { remaining_time: timerState.timeRemaining });\n    \n    toast.info('Repos écourté', {\n      description: 'Passage à la série suivante'\n    });\n  };\n\n  const extendRest = (additionalSeconds: number) => {\n    setTimerState(prev => ({\n      ...prev,\n      timeRemaining: prev.timeRemaining + additionalSeconds,\n      originalDuration: prev.originalDuration + additionalSeconds\n    }));\n    \n    onRestExtend?.(additionalSeconds);\n    saveRestSession('extend', { additional_time: additionalSeconds });\n    \n    toast.info(`+${additionalSeconds}s ajoutés`, {\n      description: 'Repos prolongé'\n    });\n  };\n\n  const resetTimer = () => {\n    setTimerState(prev => ({\n      ...prev,\n      timeRemaining: prev.originalDuration,\n      isPaused: false\n    }));\n  };\n\n  // Format temps\n  const formatTime = (seconds: number): string => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  // Couleur progressive du timer\n  const getTimerColor = (): string => {\n    const progress = timerState.timeRemaining / timerState.originalDuration;\n    \n    if (progress > 0.7) return 'from-green-500 to-emerald-600';\n    if (progress > 0.3) return 'from-yellow-500 to-orange-500';\n    return 'from-red-500 to-pink-600';\n  };\n\n  const progressPercentage = timerState.originalDuration > 0 ? \n    ((timerState.originalDuration - timerState.timeRemaining) / timerState.originalDuration) * 100 : 0;\n\n  return (\n    <Card className={`w-full max-w-md mx-auto ${className}`}>\n      <CardHeader className=\"pb-4\">\n        <CardTitle className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-2\">\n            <Brain className=\"w-5 h-5 text-blue-500\" />\n            <span>Repos Intelligent</span>\n          </div>\n          {timerState.recommendation && (\n            <Badge variant=\"outline\" className=\"text-xs\">\n              {Math.round(timerState.recommendation.confidence * 100)}% confiance\n            </Badge>\n          )}\n        </CardTitle>\n      </CardHeader>\n\n      <CardContent className=\"space-y-6\">\n        {/* Timer principal */}\n        <div className=\"text-center space-y-4\">\n          <div className={`text-6xl font-bold font-mono bg-gradient-to-r ${getTimerColor()} bg-clip-text text-transparent`}>\n            {formatTime(timerState.timeRemaining)}\n          </div>\n          \n          <Progress \n            value={progressPercentage} \n            className=\"h-3\"\n          />\n\n          <div className=\"text-sm text-gray-500\">\n            {timerState.isActive ? \n              `${formatTime(timerState.originalDuration)} suggérés` : \n              'Timer en attente'\n            }\n          </div>\n        </div>\n\n        {/* Recommandation IA */}\n        {timerState.recommendation && (\n          <div className=\"bg-blue-50 dark:bg-blue-950 rounded-lg p-4 space-y-2\">\n            <div className=\"flex items-center gap-2 text-sm font-medium text-blue-700 dark:text-blue-300\">\n              <Brain className=\"w-4 h-4\" />\n              Analyse IA\n            </div>\n            <div className=\"text-xs text-blue-600 dark:text-blue-400 space-y-1\">\n              {timerState.recommendation.reasoning.map((reason, index) => (\n                <div key={index}>• {reason}</div>\n              ))}\n            </div>\n            \n            {/* Facteurs adaptatifs */}\n            <div className=\"grid grid-cols-2 gap-2 text-xs\">\n              <div className=\"flex justify-between\">\n                <span>Fatigue:</span>\n                <span className=\"font-medium\">\n                  {Math.round(timerState.recommendation.adaptiveFactors.fatigue * 100)}%\n                </span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span>Intensité:</span>\n                <span className=\"font-medium\">\n                  {Math.round(timerState.recommendation.adaptiveFactors.exerciseIntensity * 100)}%\n                </span>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Contrôles */}\n        <div className=\"space-y-3\">\n          {!timerState.isActive ? (\n            <div className=\"space-y-2\">\n              <Button \n                onClick={() => startRestTimer()}\n                className=\"w-full bg-gradient-to-r from-blue-500 to-purple-600\"\n              >\n                <Timer className=\"w-4 h-4 mr-2\" />\n                Démarrer Repos Intelligent\n              </Button>\n              \n              {/* Sélecteur manuel */}\n              <div className=\"space-y-2\">\n                <div className=\"text-sm text-gray-600\">Ou durée personnalisée:</div>\n                <div className=\"flex gap-2\">\n                  {[60, 90, 120, 180, 240, 300].map((duration, index) => (\n                    <Button\n                      key={duration}\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => startRestTimer(duration)}\n                      className=\"flex-1 text-xs\"\n                    >\n                      {Math.floor(duration / 60)}m\n                    </Button>\n                  ))}\n                </div>\n              </div>\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-2 gap-2\">\n              <Button \n                onClick={pauseTimer}\n                variant=\"outline\"\n                size=\"sm\"\n              >\n                {timerState.isPaused ? 'Reprendre' : 'Pause'}\n              </Button>\n              \n              <Button \n                onClick={skipRest}\n                variant=\"outline\"\n                size=\"sm\"\n              >\n                <SkipForward className=\"w-4 h-4 mr-1\" />\n                Passer\n              </Button>\n              \n              <Button \n                onClick={() => extendRest(30)}\n                variant=\"outline\"\n                size=\"sm\"\n              >\n                +30s\n              </Button>\n              \n              <Button \n                onClick={resetTimer}\n                variant=\"outline\"\n                size=\"sm\"\n              >\n                <RotateCcw className=\"w-4 h-4 mr-1\" />\n                Reset\n              </Button>\n            </div>\n          )}\n        </div>\n\n        {/* Biométriques si disponibles */}\n        {biometrics.currentHeartRate > 0 && (\n          <div className=\"bg-gray-50 dark:bg-gray-900 rounded-lg p-3 space-y-2\">\n            <div className=\"flex items-center justify-between text-sm\">\n              <div className=\"flex items-center gap-2\">\n                <Heart className=\"w-4 h-4 text-red-500\" />\n                <span>Fréquence cardiaque</span>\n              </div>\n              <span className=\"font-bold text-red-500\">\n                {biometrics.currentHeartRate} bpm\n              </span>\n            </div>\n            \n            <div className=\"text-xs text-gray-500\">\n              Zone: {biometrics.currentHeartRate > biometrics.maxHeartRate * 0.8 ? \n                'Anaérobie' : biometrics.currentHeartRate > biometrics.maxHeartRate * 0.7 ? \n                'Aérobie' : 'Récupération'\n              }\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default SmartRestTimer;"],"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","ignoreList":[]}