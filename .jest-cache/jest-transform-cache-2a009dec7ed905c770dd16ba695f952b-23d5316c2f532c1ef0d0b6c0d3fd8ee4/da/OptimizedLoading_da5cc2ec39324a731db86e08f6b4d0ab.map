{"version":3,"names":["cov_etgsm0rnp","actualCoverage","react_1","s","__importDefault","require","performanceOptimizations_1","Skeleton","width","b","height","rounded","className","f","styles","LayoutStabilizer","createSkeleton","borderRadius","jsx_runtime_1","jsx","style","exports","CardSkeleton","children","jsxs","ListSkeleton","items","Array","from","length","map","_","index","DashboardSkeleton","stableContainer","WorkoutSkeleton","NutritionSkeleton","useOptimizedLoading","isLoading","minLoadingTime","showSkeleton","setShowSkeleton","default","useState","useEffect","timer","setTimeout","clearTimeout","OptimizedLoadingWrapper","skeleton","SkeletonComponent","PAGE_SKELETONS","dashboard","workout","nutrition"],"sources":["/workspaces/MyFitHero/src/core/utils/OptimizedLoading.tsx"],"sourcesContent":["import React from 'react';\nimport { LayoutStabilizer } from './performanceOptimizations';\n\n// Types pour les skeletons\ninterface SkeletonProps {\n  width?: string | number;\n  height?: string | number;\n  rounded?: boolean;\n  className?: string;\n}\n\n// Composant skeleton de base\nexport const Skeleton: React.FC<SkeletonProps> = ({\n  width = '100%',\n  height = '20px',\n  rounded = false,\n  className = ''\n}) => {\n  const styles = {\n    ...LayoutStabilizer.createSkeleton(width, height),\n    borderRadius: rounded ? '50%' : '4px',\n  };\n\n  return (\n    <div \n      className={`animate-pulse bg-gray-200 ${className}`}\n      style={styles}\n      aria-label=\"Contenu en cours de chargement\"\n    />\n  );\n};\n\n// Skeleton pour les cartes\nexport const CardSkeleton: React.FC<{ className?: string }> = ({ className }) => (\n  <div className={`p-4 border rounded-lg bg-white ${className || ''}`}>\n    <div className=\"space-y-3\">\n      <Skeleton height=\"24px\" width=\"60%\" />\n      <Skeleton height=\"16px\" width=\"100%\" />\n      <Skeleton height=\"16px\" width=\"80%\" />\n      <div className=\"flex space-x-2 mt-4\">\n        <Skeleton height=\"32px\" width=\"80px\" />\n        <Skeleton height=\"32px\" width=\"100px\" />\n      </div>\n    </div>\n  </div>\n);\n\n// Skeleton pour les listes\nexport const ListSkeleton: React.FC<{ \n  items?: number; \n  className?: string;\n}> = ({ items = 5, className }) => (\n  <div className={`space-y-2 ${className || ''}`}>\n    {Array.from({ length: items }).map((_, index) => (\n      <div key={index} className=\"flex items-center space-x-3 p-3 border rounded\">\n        <Skeleton width=\"48px\" height=\"48px\" rounded />\n        <div className=\"flex-1 space-y-2\">\n          <Skeleton height=\"16px\" width=\"70%\" />\n          <Skeleton height=\"14px\" width=\"50%\" />\n        </div>\n        <Skeleton height=\"24px\" width=\"60px\" />\n      </div>\n    ))}\n  </div>\n);\n\n// Skeleton pour le dashboard\nexport const DashboardSkeleton: React.FC = () => (\n  <div style={LayoutStabilizer.stableContainer()} className=\"p-6 space-y-6\">\n    {/* Header */}\n    <div className=\"flex justify-between items-center\">\n      <div className=\"space-y-2\">\n        <Skeleton height=\"32px\" width=\"200px\" />\n        <Skeleton height=\"16px\" width=\"150px\" />\n      </div>\n      <Skeleton height=\"40px\" width=\"120px\" />\n    </div>\n\n    {/* Stats Cards */}\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n      {Array.from({ length: 4 }).map((_, index) => (\n        <CardSkeleton key={index} />\n      ))}\n    </div>\n\n    {/* Content Areas */}\n    <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n      <div className=\"space-y-4\">\n        <Skeleton height=\"24px\" width=\"180px\" />\n        <CardSkeleton />\n      </div>\n      <div className=\"space-y-4\">\n        <Skeleton height=\"24px\" width=\"160px\" />\n        <ListSkeleton items={3} />\n      </div>\n    </div>\n  </div>\n);\n\n// Skeleton pour les workouts\nexport const WorkoutSkeleton: React.FC = () => (\n  <div style={LayoutStabilizer.stableContainer()} className=\"p-6 space-y-6\">\n    <div className=\"space-y-4\">\n      <Skeleton height=\"28px\" width=\"240px\" />\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n        {Array.from({ length: 6 }).map((_, index) => (\n          <div key={index} className=\"border rounded-lg p-4 space-y-3\">\n            <Skeleton height=\"120px\" width=\"100%\" />\n            <Skeleton height=\"20px\" width=\"80%\" />\n            <Skeleton height=\"16px\" width=\"60%\" />\n            <div className=\"flex justify-between items-center\">\n              <Skeleton height=\"14px\" width=\"40%\" />\n              <Skeleton height=\"32px\" width=\"80px\" />\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  </div>\n);\n\n// Skeleton pour la nutrition\nexport const NutritionSkeleton: React.FC = () => (\n  <div style={LayoutStabilizer.stableContainer()} className=\"p-6 space-y-6\">\n    {/* Food Scanner */}\n    <div className=\"bg-white border rounded-lg p-6\">\n      <Skeleton height=\"24px\" width=\"200px\" className=\"mb-4\" />\n      <div className=\"border-2 border-dashed border-gray-300 rounded-lg p-8 text-center\">\n        <Skeleton height=\"64px\" width=\"64px\" rounded className=\"mx-auto mb-4\" />\n        <Skeleton height=\"20px\" width=\"250px\" className=\"mx-auto mb-2\" />\n        <Skeleton height=\"16px\" width=\"180px\" className=\"mx-auto\" />\n      </div>\n    </div>\n\n    {/* Nutrition Stats */}\n    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n      {Array.from({ length: 3 }).map((_, index) => (\n        <div key={index} className=\"bg-white border rounded-lg p-4 text-center\">\n          <Skeleton height=\"48px\" width=\"48px\" rounded className=\"mx-auto mb-3\" />\n          <Skeleton height=\"24px\" width=\"60px\" className=\"mx-auto mb-2\" />\n          <Skeleton height=\"16px\" width=\"80px\" className=\"mx-auto\" />\n        </div>\n      ))}\n    </div>\n\n    {/* Recent Foods */}\n    <div className=\"bg-white border rounded-lg p-6\">\n      <Skeleton height=\"24px\" width=\"180px\" className=\"mb-4\" />\n      <ListSkeleton items={4} />\n    </div>\n  </div>\n);\n\n// Hook pour gérer les skeletons basés sur l'état de chargement\nexport const useOptimizedLoading = (isLoading: boolean, minLoadingTime: number = 300): boolean => {\n  const [showSkeleton, setShowSkeleton] = React.useState(isLoading);\n\n  React.useEffect(() => {\n    if (isLoading) {\n      setShowSkeleton(true);\n      return; // Explicit return for this branch\n    } else {\n      // Maintenir le skeleton pour éviter les CLS\n      const timer = setTimeout(() => {\n        setShowSkeleton(false);\n      }, minLoadingTime);\n      \n      return () => clearTimeout(timer);\n    }\n  }, [isLoading, minLoadingTime]);\n\n  return showSkeleton;\n};\n\n// Composant wrapper pour les pages avec skeleton automatique\nexport const OptimizedLoadingWrapper: React.FC<{\n  isLoading: boolean;\n  skeleton: React.ComponentType;\n  children: React.ReactNode;\n  className?: string;\n}> = ({ isLoading, skeleton: SkeletonComponent, children, className }) => {\n  const showSkeleton = useOptimizedLoading(isLoading);\n\n  return (\n    <div className={className} style={LayoutStabilizer.stableContainer()}>\n      {showSkeleton ? <SkeletonComponent /> : children}\n    </div>\n  );\n};\n\n// Export des skeletons prédéfinis\nexport const PAGE_SKELETONS = {\n  dashboard: DashboardSkeleton,\n  workout: WorkoutSkeleton,\n  nutrition: NutritionSkeleton,\n} as const;\n\nexport default Skeleton;"],"mappingswBI;IAAAA,aAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,aAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAxBJ,MAAAE,OAAA;AAAA;AAAA,CAAAF,aAAA,GAAAG,CAAA,OAAAC,eAAA,CAAAC,OAAA;AACA,MAAAC,0BAAA;AAAA;AAAA,CAAAN,aAAA,GAAAG,CAAA,OAAAE,OAAA;AAUA;AAAA;AAAAL,aAAA,GAAAG,CAAA;AACO,MAAMI,QAAQ,GAA4BA,CAAC;EAChDC,KAAK;EAAA;EAAA,CAAAR,aAAA,GAAAS,CAAA,UAAG,MAAM;EACdC,MAAM;EAAA;EAAA,CAAAV,aAAA,GAAAS,CAAA,UAAG,MAAM;EACfE,OAAO;EAAA;EAAA,CAAAX,aAAA,GAAAS,CAAA,UAAG,KAAK;EACfG,SAAS;EAAA;EAAA,CAAAZ,aAAA,GAAAS,CAAA,UAAG,EAAE;AAAA,CACf,KAAI;EAAA;EAAAT,aAAA,GAAAa,CAAA;EACH,MAAMC,MAAM;EAAA;EAAA,CAAAd,aAAA,GAAAG,CAAA,OAAG;IACb,GAAGG,0BAAA,CAAAS,gBAAgB,CAACC,cAAc,CAACR,KAAK,EAAEE,MAAM,CAAC;IACjDO,YAAY,EAAEN,OAAO;IAAA;IAAA,CAAAX,aAAA,GAAAS,CAAA,UAAG,KAAK;IAAA;IAAA,CAAAT,aAAA,GAAAS,CAAA,UAAG,KAAK;GACtC;EAAC;EAAAT,aAAA,GAAAG,CAAA;EAEF,OACE,IAAAe,aAAA,CAAAC,GAAA;IACEP,SAAS,EAAE,6BAA6BA,SAAS,EAAE;IACnDQ,KAAK,EAAEN,MAAM;IAAA,cACF;EAAgC,EAC3C;AAEN,CAAC;AAAC;AAAAd,aAAA,GAAAG,CAAA;AAlBWkB,OAAA,CAAAd,QAAQ,GAAAA,QAAA;AAoBrB;AAAA;AAAAP,aAAA,GAAAG,CAAA;AACO,MAAMmB,YAAY,GAAqCA,CAAC;EAAEV;AAAS,CAAE,KAC1E;EAAA;EAAAZ,aAAA,GAAAa,CAAA;EAAAb,aAAA,GAAAG,CAAA;EAAA,WAAAe,aAAA,CAAAC,GAAA;IAAKP,SAAS,EAAE;IAAkC;IAAA,CAAAZ,aAAA,GAAAS,CAAA,UAAAG,SAAS;IAAA;IAAA,CAAAZ,aAAA,GAAAS,CAAA,UAAI,EAAE,GAAE;IAAAc,QAAA,EACjE,IAAAL,aAAA,CAAAM,IAAA;MAAKZ,SAAS,EAAC,WAAW;MAAAW,QAAA,GACxB,IAAAL,aAAA,CAAAC,GAAA,EAACE,OAAA,CAAAd,QAAQ;QAACG,MAAM,EAAC,MAAM;QAACF,KAAK,EAAC;MAAK,EAAG,EACtC,IAAAU,aAAA,CAAAC,GAAA,EAACE,OAAA,CAAAd,QAAQ;QAACG,MAAM,EAAC,MAAM;QAACF,KAAK,EAAC;MAAM,EAAG,EACvC,IAAAU,aAAA,CAAAC,GAAA,EAACE,OAAA,CAAAd,QAAQ;QAACG,MAAM,EAAC,MAAM;QAACF,KAAK,EAAC;MAAK,EAAG,EACtC,IAAAU,aAAA,CAAAM,IAAA;QAAKZ,SAAS,EAAC,qBAAqB;QAAAW,QAAA,GAClC,IAAAL,aAAA,CAAAC,GAAA,EAACE,OAAA,CAAAd,QAAQ;UAACG,MAAM,EAAC,MAAM;UAACF,KAAK,EAAC;QAAM,EAAG,EACvC,IAAAU,aAAA,CAAAC,GAAA,EAACE,OAAA,CAAAd,QAAQ;UAACG,MAAM,EAAC,MAAM;UAACF,KAAK,EAAC;QAAO,EAAG;MAAA,EACpC;IAAA;EACF,EACF;AADE,CAET;AAAC;AAAAR,aAAA,GAAAG,CAAA;AAZWkB,OAAA,CAAAC,YAAY,GAAAA,YAAA;AAczB;AAAA;AAAAtB,aAAA,GAAAG,CAAA;AACO,MAAMsB,YAAY,GAGpBA,CAAC;EAAEC,KAAK;EAAA;EAAA,CAAA1B,aAAA,GAAAS,CAAA,UAAG,CAAC;EAAEG;AAAS,CAAE,KAC5B;EAAA;EAAAZ,aAAA,GAAAa,CAAA;EAAAb,aAAA,GAAAG,CAAA;EAAA,WAAAe,aAAA,CAAAC,GAAA;IAAKP,SAAS,EAAE;IAAa;IAAA,CAAAZ,aAAA,GAAAS,CAAA,WAAAG,SAAS;IAAA;IAAA,CAAAZ,aAAA,GAAAS,CAAA,WAAI,EAAE,GAAE;IAAAc,QAAA,EAC3CI,KAAK,CAACC,IAAI,CAAC;MAAEC,MAAM,EAAEH;IAAK,CAAE,CAAC,CAACI,GAAG,CAAC,CAACC,CAAC,EAAEC,KAAK,KAC1C;MAAA;MAAAhC,aAAA,GAAAa,CAAA;MAAAb,aAAA,GAAAG,CAAA;MAAA,WAAAe,aAAA,CAAAM,IAAA;QAAiBZ,SAAS,EAAC,gDAAgD;QAAAW,QAAA,GACzE,IAAAL,aAAA,CAAAC,GAAA,EAACE,OAAA,CAAAd,QAAQ;UAACC,KAAK,EAAC,MAAM;UAACE,MAAM,EAAC,MAAM;UAACC,OAAO;QAAA,EAAG,EAC/C,IAAAO,aAAA,CAAAM,IAAA;UAAKZ,SAAS,EAAC,kBAAkB;UAAAW,QAAA,GAC/B,IAAAL,aAAA,CAAAC,GAAA,EAACE,OAAA,CAAAd,QAAQ;YAACG,MAAM,EAAC,MAAM;YAACF,KAAK,EAAC;UAAK,EAAG,EACtC,IAAAU,aAAA,CAAAC,GAAA,EAACE,OAAA,CAAAd,QAAQ;YAACG,MAAM,EAAC,MAAM;YAACF,KAAK,EAAC;UAAK,EAAG;QAAA,EAClC,EACN,IAAAU,aAAA,CAAAC,GAAA,EAACE,OAAA,CAAAd,QAAQ;UAACG,MAAM,EAAC,MAAM;UAACF,KAAK,EAAC;QAAM,EAAG;MAAA,GAN/BwB,KAAK,CAOT;IAPS,CAQhB;EAAC,EACE;AADF,CAEL;AAAC;AAAAhC,aAAA,GAAAG,CAAA;AAhBWkB,OAAA,CAAAI,YAAY,GAAAA,YAAA;AAkBzB;AAAA;AAAAzB,aAAA,GAAAG,CAAA;AACO,MAAM8B,iBAAiB,GAAaA,CAAA,KACzC;EAAA;EAAAjC,aAAA,GAAAa,CAAA;EAAAb,aAAA,GAAAG,CAAA;EAAA,WAAAe,aAAA,CAAAM,IAAA;IAAKJ,KAAK,EAAEd,0BAAA,CAAAS,gBAAgB,CAACmB,eAAe,EAAE;IAAEtB,SAAS,EAAC,eAAe;IAAAW,QAAA,GAEvE,IAAAL,aAAA,CAAAM,IAAA;MAAKZ,SAAS,EAAC,mCAAmC;MAAAW,QAAA,GAChD,IAAAL,aAAA,CAAAM,IAAA;QAAKZ,SAAS,EAAC,WAAW;QAAAW,QAAA,GACxB,IAAAL,aAAA,CAAAC,GAAA,EAACE,OAAA,CAAAd,QAAQ;UAACG,MAAM,EAAC,MAAM;UAACF,KAAK,EAAC;QAAO,EAAG,EACxC,IAAAU,aAAA,CAAAC,GAAA,EAACE,OAAA,CAAAd,QAAQ;UAACG,MAAM,EAAC,MAAM;UAACF,KAAK,EAAC;QAAO,EAAG;MAAA,EACpC,EACN,IAAAU,aAAA,CAAAC,GAAA,EAACE,OAAA,CAAAd,QAAQ;QAACG,MAAM,EAAC,MAAM;QAACF,KAAK,EAAC;MAAO,EAAG;IAAA,EACpC,EAGN,IAAAU,aAAA,CAAAC,GAAA;MAAKP,SAAS,EAAC,sDAAsD;MAAAW,QAAA,EAClEI,KAAK,CAACC,IAAI,CAAC;QAAEC,MAAM,EAAE;MAAC,CAAE,CAAC,CAACC,GAAG,CAAC,CAACC,CAAC,EAAEC,KAAK,KACtC;QAAA;QAAAhC,aAAA,GAAAa,CAAA;QAAAb,aAAA,GAAAG,CAAA;QAAA,WAAAe,aAAA,CAAAC,GAAA,EAACE,OAAA,CAAAC,YAAY,MAAMU,KAAK,CAAI;MAAJ,CACzB;IAAC,EACE,EAGN,IAAAd,aAAA,CAAAM,IAAA;MAAKZ,SAAS,EAAC,uCAAuC;MAAAW,QAAA,GACpD,IAAAL,aAAA,CAAAM,IAAA;QAAKZ,SAAS,EAAC,WAAW;QAAAW,QAAA,GACxB,IAAAL,aAAA,CAAAC,GAAA,EAACE,OAAA,CAAAd,QAAQ;UAACG,MAAM,EAAC,MAAM;UAACF,KAAK,EAAC;QAAO,EAAG,EACxC,IAAAU,aAAA,CAAAC,GAAA,EAACE,OAAA,CAAAC,YAAY,KAAG;MAAA,EACZ,EACN,IAAAJ,aAAA,CAAAM,IAAA;QAAKZ,SAAS,EAAC,WAAW;QAAAW,QAAA,GACxB,IAAAL,aAAA,CAAAC,GAAA,EAACE,OAAA,CAAAd,QAAQ;UAACG,MAAM,EAAC,MAAM;UAACF,KAAK,EAAC;QAAO,EAAG,EACxC,IAAAU,aAAA,CAAAC,GAAA,EAACE,OAAA,CAAAI,YAAY;UAACC,KAAK,EAAE;QAAC,EAAI;MAAA,EACtB;IAAA,EACF;EAAA,EACF;AADE,CAET;AAAC;AAAA1B,aAAA,GAAAG,CAAA;AA9BWkB,OAAA,CAAAY,iBAAiB,GAAAA,iBAAA;AAgC9B;AAAA;AAAAjC,aAAA,GAAAG,CAAA;AACO,MAAMgC,eAAe,GAAaA,CAAA,KACvC;EAAA;EAAAnC,aAAA,GAAAa,CAAA;EAAAb,aAAA,GAAAG,CAAA;EAAA,WAAAe,aAAA,CAAAC,GAAA;IAAKC,KAAK,EAAEd,0BAAA,CAAAS,gBAAgB,CAACmB,eAAe,EAAE;IAAEtB,SAAS,EAAC,eAAe;IAAAW,QAAA,EACvE,IAAAL,aAAA,CAAAM,IAAA;MAAKZ,SAAS,EAAC,WAAW;MAAAW,QAAA,GACxB,IAAAL,aAAA,CAAAC,GAAA,EAACE,OAAA,CAAAd,QAAQ;QAACG,MAAM,EAAC,MAAM;QAACF,KAAK,EAAC;MAAO,EAAG,EACxC,IAAAU,aAAA,CAAAC,GAAA;QAAKP,SAAS,EAAC,sDAAsD;QAAAW,QAAA,EAClEI,KAAK,CAACC,IAAI,CAAC;UAAEC,MAAM,EAAE;QAAC,CAAE,CAAC,CAACC,GAAG,CAAC,CAACC,CAAC,EAAEC,KAAK,KACtC;UAAA;UAAAhC,aAAA,GAAAa,CAAA;UAAAb,aAAA,GAAAG,CAAA;UAAA,WAAAe,aAAA,CAAAM,IAAA;YAAiBZ,SAAS,EAAC,iCAAiC;YAAAW,QAAA,GAC1D,IAAAL,aAAA,CAAAC,GAAA,EAACE,OAAA,CAAAd,QAAQ;cAACG,MAAM,EAAC,OAAO;cAACF,KAAK,EAAC;YAAM,EAAG,EACxC,IAAAU,aAAA,CAAAC,GAAA,EAACE,OAAA,CAAAd,QAAQ;cAACG,MAAM,EAAC,MAAM;cAACF,KAAK,EAAC;YAAK,EAAG,EACtC,IAAAU,aAAA,CAAAC,GAAA,EAACE,OAAA,CAAAd,QAAQ;cAACG,MAAM,EAAC,MAAM;cAACF,KAAK,EAAC;YAAK,EAAG,EACtC,IAAAU,aAAA,CAAAM,IAAA;cAAKZ,SAAS,EAAC,mCAAmC;cAAAW,QAAA,GAChD,IAAAL,aAAA,CAAAC,GAAA,EAACE,OAAA,CAAAd,QAAQ;gBAACG,MAAM,EAAC,MAAM;gBAACF,KAAK,EAAC;cAAK,EAAG,EACtC,IAAAU,aAAA,CAAAC,GAAA,EAACE,OAAA,CAAAd,QAAQ;gBAACG,MAAM,EAAC,MAAM;gBAACF,KAAK,EAAC;cAAM,EAAG;YAAA,EACnC;UAAA,GAPEwB,KAAK,CAQT;QARS,CAShB;MAAC,EACE;IAAA;EACF,EACF;AADE,CAET;AAAC;AAAAhC,aAAA,GAAAG,CAAA;AAnBWkB,OAAA,CAAAc,eAAe,GAAAA,eAAA;AAqB5B;AAAA;AAAAnC,aAAA,GAAAG,CAAA;AACO,MAAMiC,iBAAiB,GAAaA,CAAA,KACzC;EAAA;EAAApC,aAAA,GAAAa,CAAA;EAAAb,aAAA,GAAAG,CAAA;EAAA,WAAAe,aAAA,CAAAM,IAAA;IAAKJ,KAAK,EAAEd,0BAAA,CAAAS,gBAAgB,CAACmB,eAAe,EAAE;IAAEtB,SAAS,EAAC,eAAe;IAAAW,QAAA,GAEvE,IAAAL,aAAA,CAAAM,IAAA;MAAKZ,SAAS,EAAC,gCAAgC;MAAAW,QAAA,GAC7C,IAAAL,aAAA,CAAAC,GAAA,EAACE,OAAA,CAAAd,QAAQ;QAACG,MAAM,EAAC,MAAM;QAACF,KAAK,EAAC,OAAO;QAACI,SAAS,EAAC;MAAM,EAAG,EACzD,IAAAM,aAAA,CAAAM,IAAA;QAAKZ,SAAS,EAAC,mEAAmE;QAAAW,QAAA,GAChF,IAAAL,aAAA,CAAAC,GAAA,EAACE,OAAA,CAAAd,QAAQ;UAACG,MAAM,EAAC,MAAM;UAACF,KAAK,EAAC,MAAM;UAACG,OAAO;UAACC,SAAS,EAAC;QAAc,EAAG,EACxE,IAAAM,aAAA,CAAAC,GAAA,EAACE,OAAA,CAAAd,QAAQ;UAACG,MAAM,EAAC,MAAM;UAACF,KAAK,EAAC,OAAO;UAACI,SAAS,EAAC;QAAc,EAAG,EACjE,IAAAM,aAAA,CAAAC,GAAA,EAACE,OAAA,CAAAd,QAAQ;UAACG,MAAM,EAAC,MAAM;UAACF,KAAK,EAAC,OAAO;UAACI,SAAS,EAAC;QAAS,EAAG;MAAA,EACxD;IAAA,EACF,EAGN,IAAAM,aAAA,CAAAC,GAAA;MAAKP,SAAS,EAAC,uCAAuC;MAAAW,QAAA,EACnDI,KAAK,CAACC,IAAI,CAAC;QAAEC,MAAM,EAAE;MAAC,CAAE,CAAC,CAACC,GAAG,CAAC,CAACC,CAAC,EAAEC,KAAK,KACtC;QAAA;QAAAhC,aAAA,GAAAa,CAAA;QAAAb,aAAA,GAAAG,CAAA;QAAA,WAAAe,aAAA,CAAAM,IAAA;UAAiBZ,SAAS,EAAC,4CAA4C;UAAAW,QAAA,GACrE,IAAAL,aAAA,CAAAC,GAAA,EAACE,OAAA,CAAAd,QAAQ;YAACG,MAAM,EAAC,MAAM;YAACF,KAAK,EAAC,MAAM;YAACG,OAAO;YAACC,SAAS,EAAC;UAAc,EAAG,EACxE,IAAAM,aAAA,CAAAC,GAAA,EAACE,OAAA,CAAAd,QAAQ;YAACG,MAAM,EAAC,MAAM;YAACF,KAAK,EAAC,MAAM;YAACI,SAAS,EAAC;UAAc,EAAG,EAChE,IAAAM,aAAA,CAAAC,GAAA,EAACE,OAAA,CAAAd,QAAQ;YAACG,MAAM,EAAC,MAAM;YAACF,KAAK,EAAC,MAAM;YAACI,SAAS,EAAC;UAAS,EAAG;QAAA,GAHnDoB,KAAK,CAIT;MAJS,CAKhB;IAAC,EACE,EAGN,IAAAd,aAAA,CAAAM,IAAA;MAAKZ,SAAS,EAAC,gCAAgC;MAAAW,QAAA,GAC7C,IAAAL,aAAA,CAAAC,GAAA,EAACE,OAAA,CAAAd,QAAQ;QAACG,MAAM,EAAC,MAAM;QAACF,KAAK,EAAC,OAAO;QAACI,SAAS,EAAC;MAAM,EAAG,EACzD,IAAAM,aAAA,CAAAC,GAAA,EAACE,OAAA,CAAAI,YAAY;QAACC,KAAK,EAAE;MAAC,EAAI;IAAA,EACtB;EAAA,EACF;AADE,CAET;AAAC;AAAA1B,aAAA,GAAAG,CAAA;AA7BWkB,OAAA,CAAAe,iBAAiB,GAAAA,iBAAA;AA+B9B;AAAA;AAAApC,aAAA,GAAAG,CAAA;AACO,MAAMkC,mBAAmB,GAAGA,CAACC,SAAkB,EAAEC,cAAA;AAAA;AAAA,CAAAvC,aAAA,GAAAS,CAAA,WAAyB,GAAG,MAAa;EAAA;EAAAT,aAAA,GAAAa,CAAA;EAC/F,MAAM,CAAC2B,YAAY,EAAEC,eAAe,CAAC;EAAA;EAAA,CAAAzC,aAAA,GAAAG,CAAA,QAAGD,OAAA,CAAAwC,OAAK,CAACC,QAAQ,CAACL,SAAS,CAAC;EAAC;EAAAtC,aAAA,GAAAG,CAAA;EAElED,OAAA,CAAAwC,OAAK,CAACE,SAAS,CAAC,MAAK;IAAA;IAAA5C,aAAA,GAAAa,CAAA;IAAAb,aAAA,GAAAG,CAAA;IACnB,IAAImC,SAAS,EAAE;MAAA;MAAAtC,aAAA,GAAAS,CAAA;MAAAT,aAAA,GAAAG,CAAA;MACbsC,eAAe,CAAC,IAAI,CAAC;MAAC;MAAAzC,aAAA,GAAAG,CAAA;MACtB,OAAO,CAAC;IACV,CAAC,MAAM;MAAA;MAAAH,aAAA,GAAAS,CAAA;MACL;MACA,MAAMoC,KAAK;MAAA;MAAA,CAAA7C,aAAA,GAAAG,CAAA,QAAG2C,UAAU,CAAC,MAAK;QAAA;QAAA9C,aAAA,GAAAa,CAAA;QAAAb,aAAA,GAAAG,CAAA;QAC5BsC,eAAe,CAAC,KAAK,CAAC;MACxB,CAAC,EAAEF,cAAc,CAAC;MAAC;MAAAvC,aAAA,GAAAG,CAAA;MAEnB,OAAO,MAAM;QAAA;QAAAH,aAAA,GAAAa,CAAA;QAAAb,aAAA,GAAAG,CAAA;QAAA,OAAA4C,YAAY,CAACF,KAAK,CAAC;MAAD,CAAC;IAClC;EACF,CAAC,EAAE,CAACP,SAAS,EAAEC,cAAc,CAAC,CAAC;EAAC;EAAAvC,aAAA,GAAAG,CAAA;EAEhC,OAAOqC,YAAY;AACrB,CAAC;AAAC;AAAAxC,aAAA,GAAAG,CAAA;AAlBWkB,OAAA,CAAAgB,mBAAmB,GAAAA,mBAAA;AAoBhC;AAAA;AAAArC,aAAA,GAAAG,CAAA;AACO,MAAM6C,uBAAuB,GAK/BA,CAAC;EAAEV,SAAS;EAAEW,QAAQ,EAAEC,iBAAiB;EAAE3B,QAAQ;EAAEX;AAAS,CAAE,KAAI;EAAA;EAAAZ,aAAA,GAAAa,CAAA;EACvE,MAAM2B,YAAY;EAAA;EAAA,CAAAxC,aAAA,GAAAG,CAAA,QAAG,IAAAkB,OAAA,CAAAgB,mBAAmB,EAACC,SAAS,CAAC;EAAC;EAAAtC,aAAA,GAAAG,CAAA;EAEpD,OACE,IAAAe,aAAA,CAAAC,GAAA;IAAKP,SAAS,EAAEA,SAAS;IAAEQ,KAAK,EAAEd,0BAAA,CAAAS,gBAAgB,CAACmB,eAAe,EAAE;IAAAX,QAAA,EACjEiB,YAAY;IAAA;IAAA,CAAAxC,aAAA,GAAAS,CAAA,WAAG,IAAAS,aAAA,CAAAC,GAAA,EAAC+B,iBAAiB,KAAG;IAAA;IAAA,CAAAlD,aAAA,GAAAS,CAAA,WAAGc,QAAQ;EAAA,EAC5C;AAEV,CAAC;AAAC;AAAAvB,aAAA,GAAAG,CAAA;AAbWkB,OAAA,CAAA2B,uBAAuB,GAAAA,uBAAA;AAepC;AAAA;AAAAhD,aAAA,GAAAG,CAAA;AACakB,OAAA,CAAA8B,cAAc,GAAG;EAC5BC,SAAS,EAAE/B,OAAA,CAAAY,iBAAiB;EAC5BoB,OAAO,EAAEhC,OAAA,CAAAc,eAAe;EACxBmB,SAAS,EAAEjC,OAAA,CAAAe;CACH;AAAC;AAAApC,aAAA,GAAAG,CAAA;AAEXkB,OAAA,CAAAqB,OAAA,GAAerB,OAAA,CAAAd,QAAQ","ignoreList":[]}