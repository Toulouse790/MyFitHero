210fc514e51936ebd3c2bb8fb6b18906
"use strict";

/* istanbul ignore next */
function cov_g03yr2ctj() {
  var path = "/workspaces/MyFitHero/src/core/api/claude.client.ts";
  var hash = "0c6d9a36d9eef5d90adf3407c9de10337dcfa66a";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/MyFitHero/src/core/api/claude.client.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 30
        }
      },
      "2": {
        start: {
          line: 7,
          column: 8
        },
        end: {
          line: 12,
          column: 11
        }
      },
      "3": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 58
        }
      },
      "4": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 68
        }
      },
      "5": {
        start: {
          line: 23,
          column: 0
        },
        end: {
          line: 23,
          column: 36
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 6,
            column: 4
          },
          end: {
            line: 6,
            column: 5
          }
        },
        loc: {
          start: {
            line: 6,
            column: 24
          },
          end: {
            line: 13,
            column: 5
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 14,
            column: 4
          },
          end: {
            line: 14,
            column: 5
          }
        },
        loc: {
          start: {
            line: 14,
            column: 25
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 14
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 18,
            column: 4
          },
          end: {
            line: 18,
            column: 5
          }
        },
        loc: {
          start: {
            line: 18,
            column: 27
          },
          end: {
            line: 21,
            column: 5
          }
        },
        line: 18
      }
    },
    branchMap: {},
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    b: {},
    inputSourceMap: {
      file: "/workspaces/MyFitHero/src/core/api/claude.client.ts",
      mappings: ";;;AAAA,iCAAiC;AACjC,MAAa,YAAY;IACvB,YAAoB,MAAe;QAAvB;;;;mBAAQ,MAAM;WAAS;IAAG,CAAC;IAEvC,KAAK,CAAC,IAAI,CAAC,QAAe;QACxB,6BAA6B;QAC7B,OAAO,EAAE,OAAO,EAAE,6BAA6B,EAAE,CAAC;IACpD,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,QAAe;QAC1B,6BAA6B;QAC7B,OAAO,EAAE,OAAO,EAAE,uCAAuC,EAAE,CAAC;IAC9D,CAAC;CACF;AAZD,oCAYC",
      names: [],
      sources: ["/workspaces/MyFitHero/src/core/api/claude.client.ts"],
      sourcesContent: ["// Placeholder pour Claude client\nexport class ClaudeClient {\n  constructor(private apiKey?: string) {}\n\n  async chat(messages: any[]): Promise<any> {\n    // Implementation placeholder\n    return { content: 'Claude response placeholder' };\n  }\n\n  async stream(messages: any[]): Promise<any> {\n    // Implementation placeholder\n    return { content: 'Claude streaming response placeholder' };\n  }\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "0c6d9a36d9eef5d90adf3407c9de10337dcfa66a"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_g03yr2ctj = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_g03yr2ctj();
cov_g03yr2ctj().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_g03yr2ctj().s[1]++;
exports.ClaudeClient = void 0;
// Placeholder pour Claude client
class ClaudeClient {
  constructor(apiKey) {
    /* istanbul ignore next */
    cov_g03yr2ctj().f[0]++;
    cov_g03yr2ctj().s[2]++;
    Object.defineProperty(this, "apiKey", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: apiKey
    });
  }
  async chat(messages) {
    /* istanbul ignore next */
    cov_g03yr2ctj().f[1]++;
    cov_g03yr2ctj().s[3]++;
    // Implementation placeholder
    return {
      content: 'Claude response placeholder'
    };
  }
  async stream(messages) {
    /* istanbul ignore next */
    cov_g03yr2ctj().f[2]++;
    cov_g03yr2ctj().s[4]++;
    // Implementation placeholder
    return {
      content: 'Claude streaming response placeholder'
    };
  }
}
/* istanbul ignore next */
cov_g03yr2ctj().s[5]++;
exports.ClaudeClient = ClaudeClient;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfZzAzeXIyY3RqIiwiYWN0dWFsQ292ZXJhZ2UiLCJzIiwiQ2xhdWRlQ2xpZW50IiwiY29uc3RydWN0b3IiLCJhcGlLZXkiLCJmIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJjaGF0IiwibWVzc2FnZXMiLCJjb250ZW50Iiwic3RyZWFtIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL015Rml0SGVyby9zcmMvY29yZS9hcGkvY2xhdWRlLmNsaWVudC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBQbGFjZWhvbGRlciBwb3VyIENsYXVkZSBjbGllbnRcbmV4cG9ydCBjbGFzcyBDbGF1ZGVDbGllbnQge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGFwaUtleT86IHN0cmluZykge31cblxuICBhc3luYyBjaGF0KG1lc3NhZ2VzOiBhbnlbXSk6IFByb21pc2U8YW55PiB7XG4gICAgLy8gSW1wbGVtZW50YXRpb24gcGxhY2Vob2xkZXJcbiAgICByZXR1cm4geyBjb250ZW50OiAnQ2xhdWRlIHJlc3BvbnNlIHBsYWNlaG9sZGVyJyB9O1xuICB9XG5cbiAgYXN5bmMgc3RyZWFtKG1lc3NhZ2VzOiBhbnlbXSk6IFByb21pc2U8YW55PiB7XG4gICAgLy8gSW1wbGVtZW50YXRpb24gcGxhY2Vob2xkZXJcbiAgICByZXR1cm4geyBjb250ZW50OiAnQ2xhdWRlIHN0cmVhbWluZyByZXNwb25zZSBwbGFjZWhvbGRlcicgfTtcbiAgfVxufSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQU1JO0lBQUFBLGFBQUEsWUFBQUEsQ0FBQTtNQUFBLE9BQUFDLGNBQUE7SUFBQTtFQUFBO0VBQUEsT0FBQUEsY0FBQTtBQUFBO0FBQUFELGFBQUE7QUFBQUEsYUFBQSxHQUFBRSxDQUFBOzs7Ozs7O0FBTko7QUFDQSxNQUFhQyxZQUFZO0VBQ3ZCQyxZQUFvQkMsTUFBZTtJQUFBO0lBQUFMLGFBQUEsR0FBQU0sQ0FBQTtJQUFBTixhQUFBLEdBQUFFLENBQUE7SUFBdkJLLE1BQUEsQ0FBQUMsY0FBQTs7OzthQUFRSDs7RUFBa0I7RUFFdEMsTUFBTUksSUFBSUEsQ0FBQ0MsUUFBZTtJQUFBO0lBQUFWLGFBQUEsR0FBQU0sQ0FBQTtJQUFBTixhQUFBLEdBQUFFLENBQUE7SUFDeEI7SUFDQSxPQUFPO01BQUVTLE9BQU8sRUFBRTtJQUE2QixDQUFFO0VBQ25EO0VBRUEsTUFBTUMsTUFBTUEsQ0FBQ0YsUUFBZTtJQUFBO0lBQUFWLGFBQUEsR0FBQU0sQ0FBQTtJQUFBTixhQUFBLEdBQUFFLENBQUE7SUFDMUI7SUFDQSxPQUFPO01BQUVTLE9BQU8sRUFBRTtJQUF1QyxDQUFFO0VBQzdEOztBQUNEO0FBQUFYLGFBQUEsR0FBQUUsQ0FBQTtBQVpEVyxPQUFBLENBQUFWLFlBQUEsR0FBQUEsWUFBQSIsImlnbm9yZUxpc3QiOltdfQ==