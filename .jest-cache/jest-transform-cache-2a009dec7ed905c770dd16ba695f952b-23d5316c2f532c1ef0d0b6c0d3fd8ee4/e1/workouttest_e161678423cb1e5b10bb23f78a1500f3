bacef1cebd7931333bad42040577545a
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
jest.mock('../../../features/workout/services/WorkoutService');
/**
 * TESTS UNITAIRES EXHAUSTIFS - MODULE WORKOUT
 * Tests pour tous les composants critiques workout
 */
const react_1 = require("@testing-library/react");
const WorkoutService_1 = require("../../../features/workout/services/WorkoutService");
describe('ðŸ’ª WORKOUT MODULE - Tests Unitaires Exhaustifs', () => {
    describe('WorkoutSession Component', () => {
        const mockWorkout = {
            id: 'workout-123',
            name: 'Push Day - Upper Body',
            exercises: [
                {
                    id: 'ex-1',
                    name: 'Bench Press',
                    sets: 4,
                    reps: [8, 8, 6, 6],
                    weight: [80, 80, 85, 85],
                    rest_time: 120,
                    muscle_groups: ['chest', 'triceps', 'shoulders']
                },
                {
                    id: 'ex-2',
                    name: 'Overhead Press',
                    sets: 3,
                    reps: [10, 8, 8],
                    weight: [50, 52.5, 52.5],
                    rest_time: 90,
                    muscle_groups: ['shoulders', 'triceps']
                }
            ],
            estimated_duration: 75,
            difficulty: 'intermediate',
            target_muscles: ['chest', 'shoulders', 'triceps']
        };
        beforeEach(() => {
            jest.clearAllMocks();
            useWorkout.mockReturnValue({
                currentWorkout: mockWorkout,
                isActive: false,
                startWorkout: jest.fn(),
                completeSet: jest.fn(),
                isLoading: false
            });
        });
        it('affiche correctement les dÃ©tails du workout', () => {
            (0, react_1.render)((0, jsx_runtime_1.jsx)(WorkoutSession, { workout: mockWorkout }));
            expect(react_1.screen.getByText('Push Day - Upper Body')).toBeInTheDocument();
            expect(react_1.screen.getByText('75 min')).toBeInTheDocument();
            expect(react_1.screen.getByText('IntermÃ©diaire')).toBeInTheDocument();
            expect(react_1.screen.getByText('Bench Press')).toBeInTheDocument();
            expect(react_1.screen.getByText('Overhead Press')).toBeInTheDocument();
        });
        it('dÃ©marre une session de workout correctement', async () => {
            const mockStartWorkout = jest.fn();
            useWorkout.mockReturnValue({
                currentWorkout: mockWorkout,
                isActive: false,
                startWorkout: mockStartWorkout,
                completeSet: jest.fn(),
                isLoading: false
            });
            (0, react_1.render)((0, jsx_runtime_1.jsx)(WorkoutSession, { workout: mockWorkout }));
            const startButton = react_1.screen.getByTestId('start-workout-button');
            react_1.fireEvent.click(startButton);
            expect(mockStartWorkout).toHaveBeenCalledWith(mockWorkout.id);
        });
        it('track les sÃ©ries et rÃ©pÃ©titions en temps rÃ©el', async () => {
            const mockCompleteSet = jest.fn();
            useWorkout.mockReturnValue({
                currentWorkout: mockWorkout,
                isActive: true,
                startWorkout: jest.fn(),
                completeSet: mockCompleteSet,
                isLoading: false
            });
            (0, react_1.render)((0, jsx_runtime_1.jsx)(WorkoutSession, { workout: mockWorkout }));
            // ComplÃ©ter la premiÃ¨re sÃ©rie du bench press
            const completeSetButton = react_1.screen.getByTestId('complete-set-ex-1-0');
            react_1.fireEvent.click(completeSetButton);
            expect(mockCompleteSet).toHaveBeenCalledWith('ex-1', 0, {
                reps: 8,
                weight: 80
            });
        });
        it('calcule et affiche la progression en temps rÃ©el', () => {
            (0, react_1.render)((0, jsx_runtime_1.jsx)(WorkoutSession, { workout: mockWorkout }));
            // VÃ©rifier l'affichage des mÃ©triques de progression
            expect(react_1.screen.getByTestId('workout-progress')).toBeInTheDocument();
            expect(react_1.screen.getByTestId('volume-tracker')).toBeInTheDocument();
            expect(react_1.screen.getByTestId('time-elapsed')).toBeInTheDocument();
        });
        it('gÃ¨re le timer de repos entre les sÃ©ries', async () => {
            useWorkout.mockReturnValue({
                currentWorkout: mockWorkout,
                isActive: true,
                startWorkout: jest.fn(),
                completeSet: jest.fn(),
                isLoading: false,
                restTimer: { timeLeft: 120, isActive: true }
            });
            (0, react_1.render)((0, jsx_runtime_1.jsx)(WorkoutSession, { workout: mockWorkout }));
            expect(react_1.screen.getByTestId('rest-timer')).toBeInTheDocument();
            expect(react_1.screen.getByText('2:00')).toBeInTheDocument();
        });
        it('affiche les conseils de forme et technique', () => {
            (0, react_1.render)((0, jsx_runtime_1.jsx)(WorkoutSession, { workout: mockWorkout }));
            const benchPressCard = react_1.screen.getByTestId('exercise-card-ex-1');
            react_1.fireEvent.click(benchPressCard);
            expect(react_1.screen.getByTestId('exercise-tips')).toBeInTheDocument();
            expect(react_1.screen.getByText(/technique/i)).toBeInTheDocument();
        });
        describe('Gestion des erreurs et edge cases', () => {
            it('gÃ¨re un workout sans exercices', () => {
                const emptyWorkout = { ...mockWorkout, exercises: [] };
                (0, react_1.render)((0, jsx_runtime_1.jsx)(WorkoutSession, { workout: emptyWorkout }));
                expect(react_1.screen.getByText(/aucun exercice/i)).toBeInTheDocument();
            });
            it('gÃ¨re l\'interruption d\'une session', async () => {
                useWorkout.mockReturnValue({
                    currentWorkout: mockWorkout,
                    isActive: true,
                    startWorkout: jest.fn(),
                    pauseWorkout: jest.fn(),
                    completeSet: jest.fn(),
                    isLoading: false
                });
                (0, react_1.render)((0, jsx_runtime_1.jsx)(WorkoutSession, { workout: mockWorkout }));
                const pauseButton = react_1.screen.getByTestId('pause-workout');
                react_1.fireEvent.click(pauseButton);
                expect(react_1.screen.getByTestId('pause-confirmation')).toBeInTheDocument();
            });
            it('sauvegarde automatiquement la progression', async () => {
                const mockSaveProgress = jest.fn();
                WorkoutService_1.WorkoutService.saveWorkoutProgress.mockImplementation(mockSaveProgress);
                (0, react_1.render)((0, jsx_runtime_1.jsx)(WorkoutSession, { workout: mockWorkout }));
                // Simuler complÃ©tion d'une sÃ©rie
                const completeSetButton = react_1.screen.getByTestId('complete-set-ex-1-0');
                react_1.fireEvent.click(completeSetButton);
                await (0, react_1.waitFor)(() => {
                    expect(mockSaveProgress).toHaveBeenCalled();
                });
            });
        });
    });
    describe('WorkoutService', () => {
        it('calcule correctement le volume total d\'entraÃ®nement', () => {
            const workoutData = {
                exercises: [
                    { sets: 4, reps: [8, 8, 6, 6], weight: [80, 80, 85, 85] },
                    { sets: 3, reps: [10, 8, 8], weight: [50, 52.5, 52.5] }
                ]
            };
            const totalVolume = WorkoutService_1.WorkoutService.calculateTotalVolume(workoutData);
            // Bench: (8*80 + 8*80 + 6*85 + 6*85) = 2300
            // OHP: (10*50 + 8*52.5 + 8*52.5) = 1340  
            // Total: 3640
            expect(totalVolume).toBe(3640);
        });
        it('dÃ©tecte automatiquement la progression de force', () => {
            const previousSession = {
                'bench-press': { best_set: { weight: 80, reps: 8 } }
            };
            const currentSession = {
                'bench-press': { best_set: { weight: 85, reps: 8 } }
            };
            const progression = WorkoutService_1.WorkoutService.analyzeProgression(previousSession, currentSession);
            expect(progression['bench-press'].type).toBe('strength');
            expect(progression['bench-press'].improvement).toBe(6.25); // +6.25%
        });
        it('recommande des ajustements de charge basÃ©s sur la performance', () => {
            const performanceData = {
                exerciseId: 'bench-press',
                target_reps: 8,
                completed_reps: [10, 9, 8, 7],
                rpe_scores: [6, 7, 8, 9], // Rate of Perceived Exertion
                weight: 80
            };
            const recommendation = WorkoutService_1.WorkoutService.recommendLoadAdjustment(performanceData);
            // Si l'utilisateur fait plus de reps que prÃ©vu avec RPE faible, augmenter la charge
            expect(recommendation.action).toBe('increase');
            expect(recommendation.new_weight).toBeGreaterThan(80);
        });
        it('calcule le temps de rÃ©cupÃ©ration optimal basÃ© sur l\'intensitÃ©', () => {
            const highIntensitySet = { weight: 100, reps: 3, intensity: 95 }; // 95% 1RM
            const moderateIntensitySet = { weight: 75, reps: 10, intensity: 75 }; // 75% 1RM
            const highRestTime = WorkoutService_1.WorkoutService.calculateOptimalRest(highIntensitySet);
            const moderateRestTime = WorkoutService_1.WorkoutService.calculateOptimalRest(moderateIntensitySet);
            expect(highRestTime).toBeGreaterThanOrEqual(180); // 3+ minutes pour haute intensitÃ©
            expect(moderateRestTime).toBeLessThanOrEqual(90); // â‰¤90s pour intensitÃ© modÃ©rÃ©e
        });
    });
    describe('Smart Features', () => {
        it('dÃ©tecte automatiquement les plateaux de progression', () => {
            // Simulation 4 semaines sans progression
            const workoutHistory = Array(4).fill(null).map((_, week) => ({
                week: week + 1,
                bench_press_max: 80, // Pas d'amÃ©lioration
                total_volume: 3500
            }));
            const plateauAnalysis = WorkoutService_1.WorkoutService.detectPlateau(workoutHistory);
            expect(plateauAnalysis.detected).toBe(true);
            expect(plateauAnalysis.exercise).toBe('bench_press');
            expect(plateauAnalysis.recommendations).toContain('deload');
        });
        it('gÃ©nÃ¨re des workouts personnalisÃ©s basÃ©s sur l\'historique', () => {
            const userProfile = {
                experience: 'intermediate',
                goals: ['strength', 'hypertrophy'],
                available_time: 60,
                equipment: ['barbell', 'dumbbells', 'rack'],
                weak_points: ['triceps', 'rear-delts']
            };
            const previousWorkouts = [
                { focus: 'chest', frequency: 'twice-weekly', response: 'good' },
                { focus: 'legs', frequency: 'once-weekly', response: 'poor' }
            ];
            const generatedWorkout = WorkoutService_1.WorkoutService.generatePersonalizedWorkout(userProfile, previousWorkouts);
            expect(generatedWorkout.exercises).toEqual(expect.arrayContaining([
                expect.objectContaining({ target_muscle: 'triceps' }),
                expect.objectContaining({ target_muscle: 'rear-delts' })
            ]));
            expect(generatedWorkout.estimated_duration).toBeLessThanOrEqual(60);
        });
        it('ajuste automatiquement la difficultÃ© basÃ©e sur la rÃ©cupÃ©ration', () => {
            const recoveryMetrics = {
                hrv_score: 35, // Faible (fatigue Ã©levÃ©e)
                sleep_quality: 6, // Mauvaise rÃ©cupÃ©ration
                muscle_soreness: 8, // TrÃ¨s douloureux
                stress_level: 7 // Ã‰levÃ©
            };
            const adjustment = WorkoutService_1.WorkoutService.adjustWorkoutDifficulty(mockWorkout, recoveryMetrics);
            expect(adjustment.intensity_modifier).toBeLessThan(1.0); // RÃ©duction d'intensitÃ©
            expect(adjustment.recommended_change).toBe('deload');
            expect(adjustment.volume_reduction).toBeGreaterThan(0.2); // Au moins 20% de rÃ©duction
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,