{"version":3,"names":["react_1","cov_st3e9uqxy","s","require","supabase_1","USDA_API_KEY","import","meta","env","VITE_USDA_API_KEY","USDA_BASE_URL","NutritionCache","constructor","f","Object","defineProperty","init","Promise","resolve","reject","request","indexedDB","open","dbName","version","onerror","error","onsuccess","db","result","onupgradeneeded","event","target","objectStoreNames","contains","b","foodStore","createObjectStore","keyPath","createIndex","unique","searchStore","get","key","transaction","store","objectStore","set","value","put","fdcId","searchCache","query","toLowerCase","Date","now","timestamp","foods","cacheSearch","fuzzyMatch","includes","words","split","targetWords","matches","word","targetWord","length","useNutritionDatabase","cache","useState","isLoading","setIsLoading","setError","useEffect","catch","console","searchUSDA","useCallback","options","maxResults","includeGeneric","includeBranded","cacheFirst","cached","dataTypes","push","params","URLSearchParams","api_key","pageSize","toString","dataType","join","response","fetch","ok","Error","status","data","json","err","errorMessage","message","smartSearch","localFoods","supabase","from","select","ilike","limit","usdaFoods","convertedUSDA","map","food","index","convertUSDAToFoodItem","allFoods","scoredFoods","relevanceScore","name","filter","sort","a","slice","usdaFood","nutrients","foodNutrients","getNutrient","id","nutrient","find","n","nutrientId","description","brand","brandOwner","brandName","calories_per_100g","Math","round","protein_per_100g","carbs_per_100g","fat_per_100g","fiber_per_100g","sugar_per_100g","sodium_per_100g","user_submitted","verified","usda_id","saveFoodItem","foodItem","insert","single","saveScan","scan","getScanHistory","userId","eq","order","ascending","clearCache","clear","exports"],"sources":["/workspaces/MyFitHero/src/features/nutrition/hooks/useNutritionDatabase.ts"],"sourcesContent":["import { useState, useCallback, useEffect } from 'react';\nimport { supabase } from '@/lib/supabase';\n\n// Types pour la base de données USDA\ninterface USDAFoodItem {\n  fdcId: number;\n  description: string;\n  brandOwner?: string;\n  brandName?: string;\n  dataType: string;\n  foodNutrients: USDANutrient[];\n  servingSize?: number;\n  servingSizeUnit?: string;\n}\n\ninterface USDANutrient {\n  nutrientId: number;\n  nutrientName: string;\n  value: number;\n  unitName: string;\n}\n\ninterface FoodItem {\n  id: string;\n  name: string;\n  brand?: string;\n  barcode?: string;\n  calories_per_100g: number;\n  protein_per_100g: number;\n  carbs_per_100g: number;\n  fat_per_100g: number;\n  fiber_per_100g?: number;\n  sugar_per_100g?: number;\n  sodium_per_100g?: number;\n  user_submitted: boolean;\n  verified: boolean;\n  usda_id?: number;\n  created_at?: string;\n}\n\ninterface NutritionScan {\n  id: string;\n  user_id: string;\n  image_url?: string;\n  detected_food: string;\n  confidence: number;\n  calories: number;\n  protein?: number;\n  carbs?: number;\n  fat?: number;\n  created_at: string;\n}\n\ninterface SearchOptions {\n  maxResults?: number;\n  includeGeneric?: boolean;\n  includeBranded?: boolean;\n  requireAllNutrients?: boolean;\n  cacheFirst?: boolean;\n}\n\n// Configuration USDA API\nconst USDA_API_KEY = import.meta.env.VITE_USDA_API_KEY;\nconst USDA_BASE_URL = 'https://api.nal.usda.gov/fdc/v1';\n\n// Cache IndexedDB\nclass NutritionCache {\n  private dbName = 'MyFitHero_NutritionCache';\n  private version = 1;\n  private db: IDBDatabase | undefined = null;\n\n  async init(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      const request = indexedDB.open(this.dbName, this.version);\n      \n      request.onerror = () => reject(request.error);\n      request.onsuccess = () => {\n        this.db = request.result;\n        resolve();\n      };\n      \n      request.onupgradeneeded = (event) => {\n        const db = (event.target as IDBOpenDBRequest).result;\n        \n        // Store pour les aliments USDA\n        if (!db.objectStoreNames.contains('foods')) {\n          const foodStore = db.createObjectStore('foods', { keyPath: 'fdcId' });\n          foodStore.createIndex('description', 'description', { unique: false });\n          foodStore.createIndex('brandOwner', 'brandOwner', { unique: false });\n        }\n        \n        // Store pour les recherches\n        if (!db.objectStoreNames.contains('searches')) {\n          const searchStore = db.createObjectStore('searches', { keyPath: 'query' });\n          searchStore.createIndex('timestamp', 'timestamp', { unique: false });\n        }\n      };\n    });\n  }\n\n  async get(key: string): Promise<any> {\n    if (!this.db) return null;\n    \n    return new Promise((resolve, reject) => {\n      const transaction = this.db!.transaction(['foods'], 'readonly');\n      const store = transaction.objectStore('foods');\n      const request = store.get(key);\n      \n      request.onerror = () => reject(request.error);\n      request.onsuccess = () => resolve(request.result);\n    });\n  }\n\n  async set(key: string, value: any): Promise<void> {\n    if (!this.db) return;\n    \n    return new Promise((resolve, reject) => {\n      const transaction = this.db!.transaction(['foods'], 'readwrite');\n      const store = transaction.objectStore('foods');\n      const request = store.put({ ...value, fdcId: key });\n      \n      request.onerror = () => reject(request.error);\n      request.onsuccess = () => resolve();\n    });\n  }\n\n  async searchCache(query: string): Promise<USDAFoodItem[]> {\n    if (!this.db) return [];\n    \n    return new Promise((resolve, reject) => {\n      const transaction = this.db!.transaction(['searches'], 'readonly');\n      const store = transaction.objectStore('searches');\n      const request = store.get(query.toLowerCase());\n      \n      request.onerror = () => reject(request.error);\n      request.onsuccess = () => {\n        const result = request.result;\n        if (result && Date.now() - result.timestamp < 24 * 60 * 60 * 1000) { // 24h cache\n          resolve(result.foods);\n        } else {\n          resolve([]);\n        }\n      };\n    });\n  }\n\n  async cacheSearch(query: string, foods: USDAFoodItem[]): Promise<void> {\n    if (!this.db) return;\n    \n    return new Promise((resolve, reject) => {\n      const transaction = this.db!.transaction(['searches'], 'readwrite');\n      const store = transaction.objectStore('searches');\n      const request = store.put({\n        query: query.toLowerCase(),\n        foods,\n        timestamp: Date.now()\n      });\n      \n      request.onerror = () => reject(request.error);\n      request.onsuccess = () => resolve();\n    });\n  }\n}\n\n// Recherche fuzzy\nfunction fuzzyMatch(query: string, target: string): number {\n  query = query.toLowerCase();\n  target = target.toLowerCase();\n  \n  // Correspondance exacte\n  if (target.includes(query)) {\n    return 1.0;\n  }\n  \n  // Distance de Levenshtein simplifiée\n  const words = query.split(' ');\n  const targetWords = target.split(' ');\n  \n  let matches = 0;\n  for (const word of words) {\n    for (const targetWord of targetWords) {\n      if (targetWord.includes(word) || word.includes(targetWord)) {\n        matches++;\n        break;\n      }\n    }\n  }\n  \n  return matches / words.length;\n}\n\n// Hook principal\nexport const useNutritionDatabase = () => {\n  const [cache] = useState(() => new NutritionCache());\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    cache.init().catch(console.error);\n  }, [cache]);\n\n  // Recherche dans l'API USDA\n  const searchUSDA = useCallback(async (\n    query: string, \n    options: SearchOptions = {}\n  ): Promise<USDAFoodItem[]> => {\n    const {\n      maxResults = 50,\n      includeGeneric = true,\n      includeBranded = true,\n      cacheFirst = true\n    } = options;\n\n    setError(null);\n\n    // Vérifier le cache d'abord\n    if (cacheFirst) {\n      const cached = await cache.searchCache(query);\n      if (cached.length > 0) {\n        return cached;\n      }\n    }\n\n    if (!USDA_API_KEY) {\n      setError('USDA API key not configured');\n      return [];\n    }\n\n    try {\n      setIsLoading(true);\n\n      // Types de données USDA\n      const dataTypes = [];\n      if (includeGeneric) dataTypes.push('Foundation', 'SR Legacy');\n      if (includeBranded) dataTypes.push('Branded');\n\n      const params = new URLSearchParams({\n        api_key: USDA_API_KEY,\n        query,\n        pageSize: maxResults.toString(),\n        dataType: dataTypes.join(',')\n      });\n\n      const response = await fetch(`${USDA_BASE_URL}/foods/search?${params}`);\n      \n      if (!response.ok) {\n        throw new Error(`USDA API error: ${response.status}`);\n      }\n\n      const data = await response.json();\n      const foods = data.foods || [];\n\n      // Mise en cache\n      await cache.cacheSearch(query, foods);\n\n      return foods;\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Unknown error';\n      setError(errorMessage);\n      return [];\n    } finally {\n      setIsLoading(false);\n    }\n  }, [cache]);\n\n  // Recherche intelligente avec fuzzy matching\n  const smartSearch = useCallback(async (\n    query: string,\n    options: SearchOptions = {}\n  ): Promise<FoodItem[]> => {\n    // 1. Recherche dans notre base Supabase d'abord\n    const { data: localFoods } = await supabase\n      .from('food_items')\n      .select('*')\n      .ilike('name', `%${query}%`)\n      .limit(10);\n\n    // 2. Recherche USDA\n    const usdaFoods = await searchUSDA(query, options);\n\n    // 3. Convertir et fusionner les résultats\n    const convertedUSDA = usdaFoods.map((food, index) => convertUSDAToFoodItem(food));\n    const allFoods = [...(localFoods || []), ...convertedUSDA];\n\n    // 4. Scoring et tri par pertinence\n    const scoredFoods = allFoods.map((food, index) => ({\n      ...food,\n      relevanceScore: fuzzyMatch(query, food.name)\n    })).filter(food => food.relevanceScore > 0.3)\n      .sort((a, b) => b.relevanceScore - a.relevanceScore);\n\n    return scoredFoods.slice(0, options.maxResults || 20);\n  }, [searchUSDA]);\n\n  // Conversion USDA vers notre format\n  const convertUSDAToFoodItem = useCallback((usdaFood: USDAFoodItem): FoodItem => {\n    const nutrients = usdaFood.foodNutrients;\n    \n    // Mapping des nutriments USDA\n    const getNutrient = (id: number) => {\n      const nutrient = nutrients.find(n => n.nutrientId === id);\n      return nutrient ? nutrient.value : 0;\n    };\n\n    return {\n      id: `usda_${usdaFood.fdcId}`,\n      name: usdaFood.description,\n      brand: usdaFood.brandOwner || usdaFood.brandName,\n      calories_per_100g: Math.round(getNutrient(1008)), // Energy (kcal)\n      protein_per_100g: getNutrient(1003), // Protein\n      carbs_per_100g: getNutrient(1005), // Carbohydrate\n      fat_per_100g: getNutrient(1004), // Total lipid (fat)\n      fiber_per_100g: getNutrient(1079), // Fiber\n      sugar_per_100g: getNutrient(2000), // Total sugars\n      sodium_per_100g: getNutrient(1093), // Sodium\n      user_submitted: false,\n      verified: true,\n      usda_id: usdaFood.fdcId\n    };\n  }, []);\n\n  // Sauvegarder un aliment dans notre base\n  const saveFoodItem = useCallback(async (foodItem: Omit<FoodItem, 'id' | 'created_at'>): Promise<FoodItem | null> => {\n    try {\n      const { data, error }: any = await supabase\n        .from('food_items')\n        .insert([foodItem])\n        .select()\n        .single();\n\n      if (error) throw error;\n      return data;\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to save food item');\n      return null;\n    }\n  }, []);\n\n  // Sauvegarder un scan nutrition\n  const saveScan = useCallback(async (scan: Omit<NutritionScan, 'id' | 'created_at'>): Promise<NutritionScan | null> => {\n    try {\n      const { data, error }: any = await supabase\n        .from('nutrition_scans')\n        .insert([scan])\n        .select()\n        .single();\n\n      if (error) throw error;\n      return data;\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to save scan');\n      return null;\n    }\n  }, []);\n\n  // Obtenir l'historique des scans\n  const getScanHistory = useCallback(async (userId: string, limit = 50): Promise<NutritionScan[]> => {\n    try {\n      const { data, error }: any = await supabase\n        .from('nutrition_scans')\n        .select('*')\n        .eq('user_id', userId)\n        .order('created_at', { ascending: false })\n        .limit(limit);\n\n      if (error) throw error;\n      return data || [];\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to fetch scan history');\n      return [];\n    }\n  }, []);\n\n  // Nettoyer le cache (pour les tests ou maintenance)\n  const clearCache = useCallback(async (): Promise<void> => {\n    try {\n      await cache.init();\n      if (cache['db']) {\n        const transaction = cache['db'].transaction(['foods', 'searches'], 'readwrite');\n        transaction.objectStore('foods').clear();\n        transaction.objectStore('searches').clear();\n      }\n    } catch (err) {\n      console.error('Failed to clear cache:', err);\n    }\n  }, [cache]);\n\n  return {\n    // Méthodes principales\n    searchUSDA,\n    smartSearch,\n    saveFoodItem,\n    saveScan,\n    getScanHistory,\n    \n    // Utilitaires\n    convertUSDAToFoodItem,\n    clearCache,\n    \n    // État\n    isLoading,\n    error,\n    \n    // Cache\n    cache\n  };\n};"],"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","ignoreList":[]}