{"version":3,"names":["cov_12pmbgxr8v","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","getSportCategoryForHydration","sport","sportMappings","basketball","tennis","volleyball","badminton","american_football","rugby","hockey","football","running","cycling","swimming","triathlon","musculation","powerlifting","crossfit","weightlifting","toLowerCase","exports","getSportCategoryForNutrition","getSportCategoryForSleep","boxing","mma","handball","golf","snooker","archery","esports"],"sources":["/workspaces/MyFitHero/src/shared/utils/sportMapping.ts"],"sourcesContent":["// src/shared/utils/sportMapping.ts\n\nexport type HydrationSportCategory = 'endurance' | 'contact' | 'court' | 'strength';\nexport type NutritionSport = 'basketball' | 'tennis' | 'american_football' | 'football' | 'endurance' | 'strength';\nexport type SleepSportCategory = 'contact' | 'team' | 'precision' | 'endurance';\n\n// Mapping pour HydrationPage\nexport const getSportCategoryForHydration = (sport: string | undefined | undefined): HydrationSportCategory => {\n  const sportMappings: Record<string, HydrationSportCategory> = {\n    basketball: 'court',\n    tennis: 'court',\n    volleyball: 'court',\n    badminton: 'court',\n    american_football: 'contact',\n    rugby: 'contact',\n    hockey: 'contact',\n    football: 'endurance',\n    running: 'endurance',\n    cycling: 'endurance',\n    swimming: 'endurance',\n    triathlon: 'endurance',\n    'course à pied': 'endurance',\n    musculation: 'strength',\n    powerlifting: 'strength',\n    crossfit: 'strength',\n    weightlifting: 'strength',\n  };\n\n  return sportMappings[sport?.toLowerCase() || ''] || 'strength';\n};\n\n// Mapping pour NutritionPage\nexport const getSportCategoryForNutrition = (sport: string): NutritionSport => {\n  const mappings: Record<string, NutritionSport> = {\n    basketball: 'basketball',\n    tennis: 'tennis',\n    american_football: 'american_football',\n    football: 'football',\n    running: 'endurance',\n    cycling: 'endurance',\n    swimming: 'endurance',\n    'course à pied': 'endurance',\n    musculation: 'strength',\n    powerlifting: 'strength',\n    crossfit: 'strength',\n    weightlifting: 'strength',\n  };\n  return mappings[sport?.toLowerCase()] || 'strength';\n};\n\n// Mapping pour SleepPage\nexport const getSportCategoryForSleep = (sport: string): SleepSportCategory => {\n  const mappings: Record<string, SleepSportCategory> = {\n    american_football: 'contact',\n    rugby: 'contact',\n    hockey: 'contact',\n    boxing: 'contact',\n    mma: 'contact',\n    basketball: 'team',\n    football: 'team',\n    volleyball: 'team',\n    handball: 'team',\n    tennis: 'precision',\n    golf: 'precision',\n    snooker: 'precision',\n    archery: 'precision',\n    esports: 'precision',\n    running: 'endurance',\n    cycling: 'endurance',\n    swimming: 'endurance',\n    triathlon: 'endurance',\n    'course à pied': 'endurance',\n  };\n  return mappings[sport?.toLowerCase()] || 'team';\n};"],"mappings":"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","ignoreList":[]}