{"version":3,"names":["cov_1s7kzgaomf","actualCoverage","s","exports","useProfile","react_1","require","profile_service_1","userId","f","profile","setProfile","useState","stats","setStats","achievements","setAchievements","goals","setGoals","isLoading","setIsLoading","error","setError","currentUserId","b","loadProfile","useCallback","profileData","ProfileService","getProfile","err","errorMessage","Error","message","loadStats","statsData","getProfileStats","console","loadAchievements","achievementsData","getAchievements","loadGoals","goalsData","getGoals","updateProfile","data","updatedProfile","uploadAvatar","file","avatarUrl","avatar","createGoal","goal","newGoal","prev","updateGoal","goalId","updatedGoal","map","index","id","deleteGoal","filter","refreshProfile","Promise","all","getCompletionRate","length","completedGoals","progress","Math","round","getActiveGoalsCount","isActive","useEffect"],"sources":["/workspaces/MyFitHero/src/features/profile/hooks/useProfile.ts"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport { ProfileService } from '@/features/profile/services/profile.service';\nimport type {\n  UserProfile,\n  UpdateProfileData,\n  ProfileStats,\n  AchievementData,\n  GoalData,\n  CreateGoalData,\n  UpdateGoalData,\n} from '@/features/profile/types/index';\n\nexport interface UseProfileReturn {\n  // État\n  profile: UserProfile | undefined;\n  stats: ProfileStats | undefined;\n  achievements: AchievementData[];\n  goals: GoalData[];\n  isLoading: boolean;\n  error: string | undefined;\n\n  // Actions\n  updateProfile: (data: UpdateProfileData) => Promise<void>;\n  uploadAvatar: (file: File) => Promise<void>;\n  createGoal: (goal: CreateGoalData) => Promise<void>;\n  updateGoal: (goalId: string, data: UpdateGoalData) => Promise<void>;\n  deleteGoal: (goalId: string) => Promise<void>;\n  refreshProfile: () => Promise<void>;\n\n  // Calculateurs\n  getCompletionRate: () => number;\n  getActiveGoalsCount: () => number;\n}\n\nexport function useProfile(userId?: string): UseProfileReturn {\n  const [profile, setProfile] = useState<UserProfile | null>(null);\n  const [stats, setStats] = useState<ProfileStats | null>(null);\n  const [achievements, setAchievements] = useState<AchievementData[]>([]);\n  const [goals, setGoals] = useState<GoalData[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const currentUserId = userId || 'current-user';\n\n  // Chargement des données du profil\n  const loadProfile = useCallback(async () => {\n    if (!currentUserId) return;\n\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const profileData = await ProfileService.getProfile(currentUserId);\n      setProfile(profileData);\n    } catch (err) {\n      const errorMessage =\n        err instanceof Error ? err.message : 'Erreur lors du chargement du profil';\n      setError(errorMessage);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [currentUserId]);\n\n  // Chargement des statistiques\n  const loadStats = useCallback(async () => {\n    if (!currentUserId) return;\n\n    try {\n      const statsData = await ProfileService.getProfileStats(currentUserId);\n      setStats(statsData);\n    } catch (err) {\n      console.error('Erreur lors du chargement des statistiques:', err);\n    }\n  }, [currentUserId]);\n\n  // Chargement des achievements\n  const loadAchievements = useCallback(async () => {\n    if (!currentUserId) return;\n\n    try {\n      const achievementsData = await ProfileService.getAchievements(currentUserId);\n      setAchievements(achievementsData);\n    } catch (err) {\n      console.error('Erreur lors du chargement des achievements:', err);\n    }\n  }, [currentUserId]);\n\n  // Chargement des objectifs\n  const loadGoals = useCallback(async () => {\n    if (!currentUserId) return;\n\n    try {\n      const goalsData = await ProfileService.getGoals(currentUserId);\n      setGoals(goalsData);\n    } catch (err) {\n      console.error('Erreur lors du chargement des objectifs:', err);\n    }\n  }, [currentUserId]);\n\n  // Mise à jour du profil\n  const updateProfile = useCallback(\n    async (data: UpdateProfileData) => {\n      if (!currentUserId) return;\n\n      setIsLoading(true);\n      setError(null);\n\n      try {\n        const updatedProfile = await ProfileService.updateProfile(currentUserId, data);\n        setProfile(updatedProfile);\n      } catch (err) {\n        const errorMessage =\n          err instanceof Error ? err.message : 'Erreur lors de la mise à jour du profil';\n        setError(errorMessage);\n      } finally {\n        setIsLoading(false);\n      }\n    },\n    [currentUserId]\n  );\n\n  // Upload d'avatar\n  const uploadAvatar = useCallback(\n    async (file: File) => {\n      if (!currentUserId) return;\n\n      setIsLoading(true);\n      setError(null);\n\n      try {\n        const avatarUrl = await ProfileService.uploadAvatar(currentUserId, file);\n        if (profile) {\n          setProfile({ ...profile, avatar: avatarUrl });\n        }\n      } catch (err) {\n        const errorMessage =\n          err instanceof Error ? err.message : \"Erreur lors de l'upload de l'avatar\";\n        setError(errorMessage);\n      } finally {\n        setIsLoading(false);\n      }\n    },\n    [currentUserId, profile]\n  );\n\n  // Création d'objectif\n  const createGoal = useCallback(\n    async (goal: CreateGoalData) => {\n      if (!currentUserId) return;\n\n      setIsLoading(true);\n      setError(null);\n\n      try {\n        const newGoal = await ProfileService.createGoal(currentUserId, goal);\n        setGoals(prev => [...prev, newGoal]);\n      } catch (err) {\n        const errorMessage =\n          err instanceof Error ? err.message : \"Erreur lors de la création de l'objectif\";\n        setError(errorMessage);\n      } finally {\n        setIsLoading(false);\n      }\n    },\n    [currentUserId]\n  );\n\n  // Mise à jour d'objectif\n  const updateGoal = useCallback(async (goalId: string, data: UpdateGoalData) => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const updatedGoal = await ProfileService.updateGoal(goalId, data);\n      setGoals(prev => prev.map((goal, index) => (goal.id === goalId ? updatedGoal : goal)));\n    } catch (err) {\n      const errorMessage =\n        err instanceof Error ? err.message : \"Erreur lors de la mise à jour de l'objectif\";\n      setError(errorMessage);\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  // Suppression d'objectif\n  const deleteGoal = useCallback(async (goalId: string) => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      await ProfileService.deleteGoal(goalId);\n      setGoals(prev => prev.filter(goal => goal.id !== goalId));\n    } catch (err) {\n      const errorMessage =\n        err instanceof Error ? err.message : \"Erreur lors de la suppression de l'objectif\";\n      setError(errorMessage);\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  // Rafraîchissement complet\n  const refreshProfile = useCallback(async () => {\n    await Promise.all([loadProfile(), loadStats(), loadAchievements(), loadGoals()]);\n  }, [loadProfile, loadStats, loadAchievements, loadGoals]);\n\n  // Calculateurs\n  const getCompletionRate = useCallback((): number => {\n    if (!goals.length) return 0;\n    const completedGoals = goals.filter(goal => goal.progress >= 100);\n    return Math.round((completedGoals.length / goals.length) * 100);\n  }, [goals]);\n\n  const getActiveGoalsCount = useCallback((): number => {\n    return goals.filter(goal => goal.isActive && goal.progress < 100).length;\n  }, [goals]);\n\n  // Chargement initial\n  useEffect(() => {\n    refreshProfile();\n  }, [refreshProfile]);\n\n  return {\n    profile,\n    stats,\n    achievements,\n    goals,\n    isLoading,\n    error,\n    updateProfile,\n    uploadAvatar,\n    createGoal,\n    updateGoal,\n    deleteGoal,\n    refreshProfile,\n    getCompletionRate,\n    getActiveGoalsCount,\n  };\n}\n"],"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","ignoreList":[]}