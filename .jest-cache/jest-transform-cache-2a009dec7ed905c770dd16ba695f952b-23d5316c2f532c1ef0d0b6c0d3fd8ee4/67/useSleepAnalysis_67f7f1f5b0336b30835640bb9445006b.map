{"version":3,"names":["exports","useSleepAnalysis","react_1","cov_137puyh2x7","s","require","supabase_1","appStore_1","use_toast_1","f","appStoreUser","appStore","success","error","toastError","useToast","showToast","message","type","b","sleepEntries","setSleepEntries","useState","sleepGoals","setSleepGoals","isLoading","setIsLoading","selectedPeriod","setSelectedPeriod","calculateSleepDuration","useCallback","bedtime","wakeTime","bedHour","bedMin","split","map","Number","wakeHour","wakeMin","bedMinutes","wakeMinutes","formatDuration","minutes","hours","Math","floor","mins","toString","padStart","sleepStats","useMemo","length","average_duration","average_quality","average_bedtime","average_wake_time","sleep_debt_hours","consistency_score","trend_direction","weekly_average","best_sleep_day","worst_sleep_day","recentEntries","slice","avgDuration","reduce","sum","entry","sleep_duration_minutes","avgQuality","sleep_quality","bedtimes","index","hour","min","waketimes","wake_time","avgBedtimeMinutes","time","avgWaketimeMinutes","avgBedtime","avgWaketime","targetDuration","target_duration_hours","sleepDebt","debt","max","bedtimeVariance","pow","waketimeVariance","consistencyScore","sqrt","firstHalf","secondHalf","firstHalfAvg","secondHalfAvg","trendDirection","sortedByQuality","sort","a","bestDay","sleep_date","worstDay","weeklyEntries","weeklyAverage","sleepRecommendations","recommendations","stats","push","title","description","priority","actionable_tip","target_bedtime","targetHour","targetMin","avgHour","avgMin","targetMinutes","avgMinutes","abs","priorityOrder","high","medium","low","addSleepEntry","id","duration","newEntry","user_id","data","_data","_error","supabase","from","insert","select","single","prev","console","updateSleepEntry","entryId","updates","find","e","Error","updatedEntry","update","eq","deleteSleepEntry","delete","filter","updateSleepGoals","newGoals","updatedGoals","upsert","useEffect","loadSleepData","daysToLoad","startDate","Date","setDate","getDate","entriesResult","goalsResult","Promise","all","gte","toISOString","order","ascending","defaultGoals","target_wake_time","min_sleep_quality","default"],"sources":["/workspaces/MyFitHero/src/features/sleep/hooks/useSleepAnalysis.ts"],"sourcesContent":["import { Star } from 'lucide-react';\nimport React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport { supabase } from '@/lib/supabase';\nimport { appStore } from '@/store/appStore';\nimport { useToast } from '@/shared/hooks/use-toast';\n\ninterface SleepEntry {\n  id: string;\n  user_id: string;\n  sleep_date: string; // YYYY-MM-DD\n  bedtime: string; // HH:MM\n  wake_time: string; // HH:MM\n  sleep_duration_minutes: number;\n  sleep_quality: 1 | 2 | 3 | 4 | 5; // 1 = très mauvais, 5 = excellent\n  deep_sleep_minutes?: number;\n  light_sleep_minutes?: number;\n  rem_sleep_minutes?: number;\n  awakenings_count: number;\n  sleep_latency_minutes: number; // Temps pour s'endormir\n  notes?: string;\n  mood_on_waking: 1 | 2 | 3 | 4 | 5; // 1 = très mauvais, 5 = excellent\n  created_at: string;\n}\n\ninterface SleepGoals {\n  target_duration_hours: number;\n  target_bedtime: string; // HH:MM\n  target_wake_time: string; // HH:MM\n  min_sleep_quality: number;\n}\n\ninterface SleepStats {\n  average_duration: number;\n  average_quality: number;\n  average_bedtime: string;\n  average_wake_time: string;\n  sleep_debt_hours: number;\n  consistency_score: number; // 0-100\n  trend_direction: 'improving' | 'declining' | 'stable';\n  weekly_average: number;\n  best_sleep_day: string;\n  worst_sleep_day: string;\n}\n\ninterface SleepRecommendation {\n  type: 'bedtime' | 'duration' | 'quality' | 'consistency';\n  title: string;\n  description: string;\n  priority: 'low' | 'medium' | 'high';\n  actionable_tip: string;\n}\n\nexport function useSleepAnalysis() {\n  const { appStoreUser } = appStore();\n  const { success, error: toastError } = useToast();\n\n  // Helper pour les toasts\n  const showToast = (message: string, type: 'success' | 'error') => {\n    if (type === 'success') {\n      success(message);\n    } else {\n      toastError(message);\n    }\n  };\n\n  const [sleepEntries, setSleepEntries] = useState<SleepEntry[]>([]);\n  const [sleepGoals, setSleepGoals] = useState<SleepGoals | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [selectedPeriod, setSelectedPeriod] = useState<'week' | 'month' | '3months'>('week');\n\n  // Calculer la durée de sommeil entre deux heures\n  const calculateSleepDuration = useCallback((bedtime: string, wakeTime: string): number => {\n    const [bedHour, bedMin] = bedtime.split(':').map(Number);\n    const [wakeHour, wakeMin] = wakeTime.split(':').map(Number);\n\n    let bedMinutes = bedHour * 60 + bedMin;\n    let wakeMinutes = wakeHour * 60 + wakeMin;\n\n    // Si l'heure de réveil est plus petite, c'est le lendemain\n    if (wakeMinutes < bedMinutes) {\n      wakeMinutes += 24 * 60;\n    }\n\n    return wakeMinutes - bedMinutes;\n  }, []);\n\n  // Convertir les minutes en format lisible\n  const formatDuration = useCallback((minutes: number): string => {\n    const hours = Math.floor(minutes / 60);\n    const mins = minutes % 60;\n    return `${hours}h${mins.toString().padStart(2, '0')}`;\n  }, []);\n\n  // Calculer les statistiques de sommeil\n  const sleepStats = useMemo((): SleepStats => {\n    if (sleepEntries.length === 0) {\n      return {\n        average_duration: 0,\n        average_quality: 0,\n        average_bedtime: '00:00',\n        average_wake_time: '00:00',\n        sleep_debt_hours: 0,\n        consistency_score: 0,\n        trend_direction: 'stable',\n        weekly_average: 0,\n        best_sleep_day: '',\n        worst_sleep_day: '',\n      };\n    }\n\n    const recentEntries = sleepEntries.slice(0, 30); // 30 derniers jours\n\n    // Moyennes\n    const avgDuration =\n      recentEntries.reduce((sum, entry) => sum + entry.sleep_duration_minutes, 0) /\n      recentEntries.length;\n    const avgQuality =\n      recentEntries.reduce((sum, entry) => sum + entry.sleep_quality, 0) / recentEntries.length;\n\n    // Calcul des heures moyennes de coucher et réveil\n    const bedtimes = recentEntries.map((entry, index) => {\n      const [hour, min] = entry.bedtime.split(':').map(Number);\n      return hour * 60 + min;\n    });\n    const waketimes = recentEntries.map((entry, index) => {\n      const [hour, min] = entry.wake_time.split(':').map(Number);\n      return hour * 60 + min;\n    });\n\n    const avgBedtimeMinutes = bedtimes.reduce((sum, time) => sum + time, 0) / bedtimes.length;\n    const avgWaketimeMinutes = waketimes.reduce((sum, time) => sum + time, 0) / waketimes.length;\n\n    const avgBedtime = `${Math.floor(avgBedtimeMinutes / 60)\n      .toString()\n      .padStart(2, '0')}:${Math.floor(avgBedtimeMinutes % 60)\n      .toString()\n      .padStart(2, '0')}`;\n    const avgWaketime = `${Math.floor(avgWaketimeMinutes / 60)\n      .toString()\n      .padStart(2, '0')}:${Math.floor(avgWaketimeMinutes % 60)\n      .toString()\n      .padStart(2, '0')}`;\n\n    // Dette de sommeil\n    const targetDuration = (sleepGoals?.target_duration_hours || 8) * 60;\n    const sleepDebt =\n      recentEntries.reduce((debt, entry) => {\n        return debt + Math.max(0, targetDuration - entry.sleep_duration_minutes);\n      }, 0) / 60; // en heures\n\n    // Score de consistance (basé sur la régularité des heures de coucher/réveil)\n    const bedtimeVariance =\n      bedtimes.reduce((sum, time) => sum + Math.pow(time - avgBedtimeMinutes, 2), 0) /\n      bedtimes.length;\n    const waketimeVariance =\n      waketimes.reduce((sum, time) => sum + Math.pow(time - avgWaketimeMinutes, 2), 0) /\n      waketimes.length;\n    const consistencyScore = Math.max(0, 100 - Math.sqrt(bedtimeVariance + waketimeVariance) / 10);\n\n    // Tendance (comparaison première moitié vs deuxième moitié)\n    const firstHalf = recentEntries.slice(Math.floor(recentEntries.length / 2));\n    const secondHalf = recentEntries.slice(0, Math.floor(recentEntries.length / 2));\n\n    const firstHalfAvg =\n      firstHalf.reduce((sum, entry) => sum + entry.sleep_quality, 0) / firstHalf.length;\n    const secondHalfAvg =\n      secondHalf.reduce((sum, entry) => sum + entry.sleep_quality, 0) / secondHalf.length;\n\n    let trendDirection: 'improving' | 'declining' | 'stable' = 'stable';\n    if (secondHalfAvg > firstHalfAvg + 0.3) trendDirection = 'improving';\n    else if (secondHalfAvg < firstHalfAvg - 0.3) trendDirection = 'declining';\n\n    // Meilleur et pire jour\n    const sortedByQuality = [...recentEntries].sort((a, b) => b.sleep_quality - a.sleep_quality);\n    const bestDay = sortedByQuality[0]?.sleep_date || '';\n    const worstDay = sortedByQuality[sortedByQuality.length - 1]?.sleep_date || '';\n\n    // Moyenne hebdomadaire\n    const weeklyEntries = recentEntries.slice(0, 7);\n    const weeklyAverage =\n      weeklyEntries.reduce((sum, entry) => sum + entry.sleep_duration_minutes, 0) /\n      weeklyEntries.length;\n\n    return {\n      average_duration: avgDuration,\n      average_quality: avgQuality,\n      average_bedtime: avgBedtime,\n      average_wake_time: avgWaketime,\n      sleep_debt_hours: sleepDebt,\n      consistency_score: consistencyScore,\n      trend_direction: trendDirection,\n      weekly_average: weeklyAverage,\n      best_sleep_day: bestDay,\n      worst_sleep_day: worstDay,\n    };\n  }, [sleepEntries, sleepGoals]);\n\n  // Générer des recommandations personnalisées\n  const sleepRecommendations = useMemo((): SleepRecommendation[] => {\n    const recommendations: SleepRecommendation[] = [];\n    const stats = sleepStats;\n\n    // Recommandation sur la durée\n    if (stats.average_duration < (sleepGoals?.target_duration_hours || 8) * 60 - 30) {\n      recommendations.push({\n        type: 'duration',\n        title: 'Augmentez votre temps de sommeil',\n        description: `Vous dormez en moyenne ${formatDuration(stats.average_duration)}, soit moins que votre objectif.`,\n        priority: 'high',\n        actionable_tip: 'Essayez de vous coucher 15-30 minutes plus tôt chaque soir.',\n      });\n    }\n\n    // Recommandation sur la qualité\n    if (stats.average_quality < 3.5) {\n      recommendations.push({\n        type: 'quality',\n        title: 'Améliorez la qualité de votre sommeil',\n        description: \"Votre qualité de sommeil moyenne est en dessous de l'optimal.\",\n        priority: 'high',\n        actionable_tip:\n          'Évitez les écrans 1h avant le coucher et maintenez une température fraîche dans la chambre.',\n      });\n    }\n\n    // Recommandation sur la consistance\n    if (stats.consistency_score < 70) {\n      recommendations.push({\n        type: 'consistency',\n        title: 'Régularisez vos horaires de sommeil',\n        description: 'Vos heures de coucher et réveil varient beaucoup.',\n        priority: 'medium',\n        actionable_tip: 'Essayez de vous coucher et vous lever à la même heure, même le week-end.',\n      });\n    }\n\n    // Recommandation sur l'heure de coucher\n    if (sleepGoals?.target_bedtime) {\n      const [targetHour, targetMin] = sleepGoals.target_bedtime.split(':').map(Number);\n      const [avgHour, avgMin] = stats.average_bedtime.split(':').map(Number);\n      const targetMinutes = targetHour * 60 + targetMin;\n      const avgMinutes = avgHour * 60 + avgMin;\n\n      if (Math.abs(avgMinutes - targetMinutes) > 30) {\n        recommendations.push({\n          type: 'bedtime',\n          title: 'Ajustez votre heure de coucher',\n          description: `Vous vous couchez en moyenne à ${stats.average_bedtime}, votre objectif est ${sleepGoals.target_bedtime}.`,\n          priority: 'medium',\n          actionable_tip: 'Créez une routine de coucher relaxante pour vous préparer au sommeil.',\n        });\n      }\n    }\n\n    return recommendations.sort((a, b) => {\n      const priorityOrder = { high: 3, medium: 2, low: 1 };\n      return priorityOrder[b.priority] - priorityOrder[a.priority];\n    });\n  }, [sleepStats, sleepGoals, formatDuration]);\n\n  // Ajouter une entrée de sommeil\n  const addSleepEntry = useCallback(\n    async (entry: Omit<SleepEntry, 'id' | 'user_id' | 'created_at' | 'sleep_duration_minutes'>) => {\n      if (!appStoreUser?.id) {\n        toastError('Erreur: Utilisateur non connecté');\n        return false;\n      }\n\n      setIsLoading(true);\n      try {\n        const duration = calculateSleepDuration(entry.bedtime, entry.wake_time);\n\n        const newEntry: Omit<SleepEntry, 'id' | 'created_at'> = {\n          ...entry,\n          user_id: appStoreUser.id,\n          sleep_duration_minutes: duration,\n        };\n\n        const { data: _data, error: _error } = await supabase\n          .from('sleep_entries')\n          .insert(newEntry)\n          .select()\n          .single();\n\n        if (_error) throw _error;\n\n        setSleepEntries(prev => [_data, ...prev]);\n        success(`Sommeil enregistré: ${formatDuration(duration)}`);\n        return true;\n      } catch (error: any) {\n      // Erreur silencieuse\n        console.error(\"Erreur lors de l'ajout:\", error);\n        toastError(\"Erreur lors de l'enregistrement\");\n        return false;\n      } finally {\n        setIsLoading(false);\n      }\n    },\n    [appStoreUser?.id, calculateSleepDuration, formatDuration, showToast]\n  );\n\n  // Mettre à jour une entrée existante\n  const updateSleepEntry = useCallback(\n    async (entryId: string, updates: Partial<SleepEntry>) => {\n      setIsLoading(true);\n      try {\n        // Recalculer la durée si bedtime ou wake_time changent\n        const entry = sleepEntries.find(e => e.id === entryId);\n        if (!entry) throw new Error('Entrée non trouvée');\n\n        const updatedEntry = { ...entry, ...updates };\n        if (updates.bedtime || updates.wake_time) {\n          updatedEntry.sleep_duration_minutes = calculateSleepDuration(\n            updatedEntry.bedtime,\n            updatedEntry.wake_time\n          );\n        }\n\n        const { data: _data, error: _error } = await supabase\n          .from('sleep_entries')\n          .update(updatedEntry)\n          .eq('id', entryId)\n          .select()\n          .single();\n\n        if (_error) throw _error;\n\n        setSleepEntries(prev => prev.map((entry, index) => (entry.id === entryId ? _data : entry)));\n        success('Entrée mise à jour');\n        return true;\n      } catch (error: any) {\n      // Erreur silencieuse\n        console.error('Erreur lors de la mise à jour:', error);\n        showToast('Erreur lors de la mise à jour', 'error');\n        return false;\n      } finally {\n        setIsLoading(false);\n      }\n    },\n    [sleepEntries, calculateSleepDuration, showToast]\n  );\n\n  // Supprimer une entrée\n  const deleteSleepEntry = useCallback(\n    async (entryId: string) => {\n      setIsLoading(true);\n      try {\n        const { error: _error } = await supabase.from('sleep_entries').delete().eq('id', entryId);\n\n        if (_error) throw _error;\n\n        setSleepEntries(prev => prev.filter(entry => entry.id !== entryId));\n        showToast('Entrée supprimée', 'success');\n        return true;\n      } catch (error: any) {\n      // Erreur silencieuse\n        console.error('Erreur lors de la suppression:', error);\n        showToast('Erreur lors de la suppression', 'error');\n        return false;\n      } finally {\n        setIsLoading(false);\n      }\n    },\n    [showToast]\n  );\n\n  // Mettre à jour les objectifs de sommeil\n  const updateSleepGoals = useCallback(\n    async (newGoals: Partial<SleepGoals>) => {\n      if (!appStoreUser?.id) return false;\n\n      setIsLoading(true);\n      try {\n        const updatedGoals = { ...sleepGoals, ...newGoals };\n\n        const { data: _data, error: _error } = await supabase\n          .from('user_sleep_goals')\n          .upsert({\n            user_id: appStoreUser.id,\n            ...updatedGoals,\n          })\n          .select()\n          .single();\n\n        if (_error) throw _error;\n\n        setSleepGoals(_data);\n        showToast('Objectifs de sommeil mis à jour', 'success');\n        return true;\n      } catch (error: any) {\n      // Erreur silencieuse\n        console.error('Erreur lors de la mise à jour:', error);\n        showToast('Erreur lors de la mise à jour', 'error');\n        return false;\n      } finally {\n        setIsLoading(false);\n      }\n    },\n    [appStoreUser?.id, sleepGoals, showToast]\n  );\n\n  // Charger les données initiales\n  useEffect(() => {\n    const loadSleepData = async () => {\n      if (!appStoreUser?.id) return;\n\n      setIsLoading(true);\n      try {\n        // Déterminer la période à charger\n        const daysToLoad = selectedPeriod === 'week' ? 7 : selectedPeriod === 'month' ? 30 : 90;\n        const startDate = new Date();\n        startDate.setDate(startDate.getDate() - daysToLoad);\n\n        const [entriesResult, goalsResult] = await Promise.all([\n          supabase\n            .from('sleep_entries')\n            .select('*')\n            .eq('user_id', appStoreUser.id)\n            .gte('sleep_date', startDate.toISOString().split('T')[0])\n            .order('sleep_date', { ascending: false }),\n\n          supabase.from('user_sleep_goals').select('*').eq('user_id', appStoreUser.id).single(),\n        ]);\n\n        if (entriesResult.data) {\n          setSleepEntries(entriesResult.data);\n        }\n\n        if (goalsResult.data) {\n          setSleepGoals(goalsResult.data);\n        } else {\n          // Créer des objectifs par défaut\n          const defaultGoals: SleepGoals = {\n            target_duration_hours: 8,\n            target_bedtime: '23:00',\n            target_wake_time: '07:00',\n            min_sleep_quality: 4,\n          };\n          setSleepGoals(defaultGoals);\n        }\n      } catch (error: any) {\n      // Erreur silencieuse\n        console.error('Erreur lors du chargement:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    loadSleepData();\n  }, [appStoreUser?.id, selectedPeriod]);\n\n  return {\n    // État\n    sleepEntries,\n    sleepGoals,\n    isLoading,\n    selectedPeriod,\n    setSelectedPeriod,\n\n    // Statistiques et analyses\n    sleepStats,\n    sleepRecommendations,\n\n    // Actions\n    addSleepEntry,\n    updateSleepEntry,\n    deleteSleepEntry,\n    updateSleepGoals,\n\n    // Utilitaires\n    calculateSleepDuration,\n    formatDuration,\n  };\n}\n\nexport default useSleepAnalysis;\n"],"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","ignoreList":[]}