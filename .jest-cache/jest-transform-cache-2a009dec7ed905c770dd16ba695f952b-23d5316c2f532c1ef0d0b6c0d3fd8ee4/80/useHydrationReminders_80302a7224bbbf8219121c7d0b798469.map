{"version":3,"names":["cov_1cja1e466u","actualCoverage","s","exports","useHydrationReminders","react_1","require","supabase_1","appStore_1","use_toast_1","f","appStoreUser","appStore","success","error","showError","useToast","hydrationEntries","setHydrationEntries","useState","hydrationGoal","setHydrationGoal","isLoading","setIsLoading","reminderPermission","setReminderPermission","reminderIntervalRef","useRef","lastReminderRef","requestNotificationPermission","useCallback","window","b","permission","Notification","requestPermission","sendHydrationReminder","remainingMl","now","Date","timeSinceLastReminder","current","messages","Math","round","randomMessage","floor","random","length","body","icon","badge","tag","requireInteraction","silent","hydrationStats","today","toISOString","split","todayEntries","filter","entry","timestamp","startsWith","todayConsumed","reduce","sum","amount_ml","target","daily_target_ml","completionPercentage","min","remaining","max","startOfDay","getFullYear","getMonth","getDate","hoursElapsed","getTime","averagePerHour","estimatedCompletionTime","hoursToComplete","completionDate","toLocaleTimeString","hour","minute","streakDays","today_consumed","today_target","completion_percentage","average_per_hour","remaining_ml","estimated_completion_time","streak_days","addHydrationEntry","amount","drinkType","temperature","id","newEntry","user_id","drink_type","data","_data","_error","supabase","from","insert","select","single","prev","stats","console","addQuickAmount","deleteHydrationEntry","entryId","delete","eq","updateHydrationGoal","newGoal","updatedGoal","upsert","setupReminders","enabled","reminder_interval_minutes","clearInterval","intervalMs","setInterval","currentTime","toTimeString","slice","start_time","end_time","useEffect","loadHydrationData","sevenDaysAgo","setDate","entriesResult","goalResult","Promise","all","gte","order","ascending","defaultGoal","weight","addGlass","addBottle","addLargeBottle","addCup","default"],"sources":["/workspaces/MyFitHero/src/features/hydration/hooks/useHydrationReminders.ts"],"sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from 'react';\nimport { supabase } from '@/lib/supabase';\nimport { appStore } from '@/store/appStore';\nimport { useToast } from '@/shared/hooks/use-toast';\n\ninterface HydrationEntry {\n  id: string;\n  user_id: string;\n  amount_ml: number;\n  timestamp: string;\n  drink_type: 'water' | 'tea' | 'coffee' | 'juice' | 'sports_drink' | 'other';\n  temperature: 'cold' | 'room' | 'warm' | 'hot';\n}\n\ninterface HydrationGoal {\n  daily_target_ml: number;\n  reminder_interval_minutes: number;\n  start_time: string; // \"07:00\"\n  end_time: string; // \"22:00\"\n  enabled: boolean;\n}\n\ninterface HydrationStats {\n  today_consumed: number;\n  today_target: number;\n  completion_percentage: number;\n  average_per_hour: number;\n  remaining_ml: number;\n  estimated_completion_time: string | undefined;\n  streak_days: number;\n}\n\nexport function useHydrationReminders() {\n  const { appStoreUser } = appStore();\n  const { success, error: showError } = useToast();\n\n  const [hydrationEntries, setHydrationEntries] = useState<HydrationEntry[]>([]);\n  const [hydrationGoal, setHydrationGoal] = useState<HydrationGoal | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [reminderPermission, setReminderPermission] = useState<NotificationPermission>('default');\n\n  const reminderIntervalRef = useRef<NodeJS.Timeout>();\n  const lastReminderRef = useRef<number>(0);\n\n  // Demander la permission pour les notifications\n  const requestNotificationPermission = useCallback(async () => {\n    if ('Notification' in window) {\n      const permission = await Notification.requestPermission();\n      setReminderPermission(permission);\n      return permission === 'granted';\n    }\n    return false;\n  }, []);\n\n  // Envoyer une notification de rappel\n  const sendHydrationReminder = useCallback(\n    (remainingMl: number) => {\n      if (reminderPermission !== 'granted') return;\n\n      const now = Date.now();\n      const timeSinceLastReminder = now - lastReminderRef.current;\n\n      // √âviter les notifications trop fr√©quentes (minimum 30 minutes)\n      if (timeSinceLastReminder < 30 * 60 * 1000) return;\n\n      const messages = [\n        `üíß Il est temps de boire ! Il vous reste ${Math.round(remainingMl)}ml √† boire aujourd'hui.`,\n        `üö∞ N'oubliez pas de vous hydrater ! Objectif restant: ${Math.round(remainingMl)}ml`,\n        `üí¶ Votre corps a besoin d'eau ! Plus que ${Math.round(remainingMl)}ml pour atteindre votre objectif.`,\n        `üåä Pause hydratation ! Buvez un verre d'eau maintenant.`,\n      ];\n\n      const randomMessage = messages[Math.floor(Math.random() * messages.length)];\n\n      new Notification('MyFitHero - Rappel Hydratation', {\n        body: randomMessage,\n        icon: '/icons/water-drop.png',\n        badge: '/icons/badge.png',\n        tag: 'hydration-reminder',\n        requireInteraction: false,\n        silent: false,\n      });\n\n      lastReminderRef.current = now;\n    },\n    [reminderPermission]\n  );\n\n  // Calculer les statistiques d'hydratation\n  const hydrationStats = useCallback((): HydrationStats => {\n    const today = new Date().toISOString().split('T')[0];\n    const todayEntries = hydrationEntries.filter(entry => entry.timestamp.startsWith(today));\n\n    const todayConsumed = todayEntries.reduce((sum, entry) => sum + entry.amount_ml, 0);\n    const target = hydrationGoal?.daily_target_ml || 2000;\n    const completionPercentage = Math.min((todayConsumed / target) * 100, 100);\n    const remaining = Math.max(target - todayConsumed, 0);\n\n    // Calculer la moyenne par heure\n    const now = new Date();\n    const startOfDay = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 7, 0, 0);\n    const hoursElapsed = Math.max((now.getTime() - startOfDay.getTime()) / (1000 * 60 * 60), 1);\n    const averagePerHour = todayConsumed / hoursElapsed;\n\n    // Estimer l'heure de completion\n    let estimatedCompletionTime: string | undefined = null;\n    if (remaining > 0 && averagePerHour > 0) {\n      const hoursToComplete = remaining / averagePerHour;\n      const completionDate = new Date(now.getTime() + hoursToComplete * 60 * 60 * 1000);\n      estimatedCompletionTime = completionDate.toLocaleTimeString('fr-FR', {\n        hour: '2-digit',\n        minute: '2-digit',\n      });\n    }\n\n    // Calculer la streak (jours cons√©cutifs d'objectif atteint)\n    // Simplifi√© pour l'exemple\n    const streakDays = 0; // √Ä impl√©menter avec l'historique\n\n    return {\n      today_consumed: todayConsumed,\n      today_target: target,\n      completion_percentage: Math.round(completionPercentage),\n      average_per_hour: Math.round(averagePerHour),\n      remaining_ml: remaining,\n      estimated_completion_time: estimatedCompletionTime,\n      streak_days: streakDays,\n    };\n  }, [hydrationEntries, hydrationGoal]);\n\n  // Ajouter une entr√©e d'hydratation\n  const addHydrationEntry = useCallback(\n    async (\n      amount: number,\n      drinkType: HydrationEntry['drink_type'] = 'water',\n      temperature: HydrationEntry['temperature'] = 'room'\n    ) => {\n      if (!appStoreUser?.id) {\n        showError('Erreur: Utilisateur non connect√©');\n        return false;\n      }\n\n      setIsLoading(true);\n      try {\n        const newEntry: Omit<HydrationEntry, 'id'> = {\n          user_id: appStoreUser.id,\n          amount_ml: amount,\n          timestamp: new Date().toISOString(),\n          drink_type: drinkType,\n          temperature,\n        };\n\n        const { data: _data, error: _error } = await supabase\n          .from('hydration_entries')\n          .insert(newEntry)\n          .select()\n          .single();\n\n        if (_error) throw _error;\n\n        setHydrationEntries(prev => [...prev, _data]);\n\n        // Feedback positif\n        const stats = hydrationStats();\n        if (stats.completion_percentage >= 100) {\n          success(\"üéâ Objectif d'hydratation atteint !\");\n        } else {\n          success(\n            `üíß +${amount}ml ajout√© ! (${stats.completion_percentage}% de l'objectif)`\n          );\n        }\n\n        return true;\n      } catch (error: any) {\n      // Erreur silencieuse\n        console.error(\"Erreur lors de l'ajout:\", error);\n        showError(\"Erreur lors de l'ajout\");\n        return false;\n      } finally {\n        setIsLoading(false);\n      }\n    },\n    [appStoreUser?.id, success, showError, hydrationStats]\n  );\n\n  // Raccourcis pour les quantit√©s courantes\n  const addQuickAmount = useCallback(\n    (amount: number) => {\n      return addHydrationEntry(amount);\n    },\n    [addHydrationEntry]\n  );\n\n  // Supprimer une entr√©e\n  const deleteHydrationEntry = useCallback(\n    async (entryId: string) => {\n      setIsLoading(true);\n      try {\n        const { error: _error } = await supabase.from('hydration_entries').delete().eq('id', entryId);\n\n        if (_error) throw _error;\n\n        setHydrationEntries(prev => prev.filter(entry => entry.id !== entryId));\n        success('Entr√©e supprim√©e');\n        return true;\n      } catch (error: any) {\n      // Erreur silencieuse\n        console.error('Erreur lors de la suppression:', error);\n        showError('Erreur lors de la suppression');\n        return false;\n      } finally {\n        setIsLoading(false);\n      }\n    },\n    [showError, success]\n  );\n\n  // Mettre √† jour les objectifs d'hydratation\n  const updateHydrationGoal = useCallback(\n    async (newGoal: Partial<HydrationGoal>) => {\n      if (!appStoreUser?.id) return false;\n\n      setIsLoading(true);\n      try {\n        const updatedGoal = { ...hydrationGoal, ...newGoal };\n\n        const { data: _data, error: _error } = await supabase\n          .from('user_hydration_goals')\n          .upsert({\n            user_id: appStoreUser.id,\n            ...updatedGoal,\n          })\n          .select()\n          .single();\n\n        if (_error) throw _error;\n\n        setHydrationGoal(_data);\n        success('Objectifs mis √† jour');\n        return true;\n      } catch (error: any) {\n      // Erreur silencieuse\n        console.error('Erreur lors de la mise √† jour:', error);\n        showError('Erreur lors de la mise √† jour');\n        return false;\n      } finally {\n        setIsLoading(false);\n      }\n    },\n    [appStoreUser?.id, hydrationGoal, success, showError]\n  );\n\n  // Configurer les rappels automatiques\n  const setupReminders = useCallback(() => {\n    if (!hydrationGoal?.enabled || !hydrationGoal.reminder_interval_minutes) return;\n\n    // Nettoyer l'ancien interval\n    if (reminderIntervalRef.current) {\n      clearInterval(reminderIntervalRef.current);\n    }\n\n    const intervalMs = hydrationGoal.reminder_interval_minutes * 60 * 1000;\n\n    reminderIntervalRef.current = setInterval(() => {\n      const now = new Date();\n      const currentTime = now.toTimeString().slice(0, 5); // \"HH:MM\"\n\n      // V√©rifier si on est dans la plage horaire\n      if (currentTime >= hydrationGoal.start_time && currentTime <= hydrationGoal.end_time) {\n        const stats = hydrationStats();\n        if (stats.remaining_ml > 0) {\n          sendHydrationReminder(stats.remaining_ml);\n        }\n      }\n    }, intervalMs);\n  }, [hydrationGoal, hydrationStats, sendHydrationReminder]);\n\n  // Charger les donn√©es initiales\n  useEffect(() => {\n    const loadHydrationData = async () => {\n      if (!appStoreUser?.id) return;\n\n      setIsLoading(true);\n      try {\n        // Charger les entr√©es des 7 derniers jours\n        const sevenDaysAgo = new Date();\n        sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);\n\n        const [entriesResult, goalResult] = await Promise.all([\n          supabase\n            .from('hydration_entries')\n            .select('*')\n            .eq('user_id', appStoreUser.id)\n            .gte('timestamp', sevenDaysAgo.toISOString())\n            .order('timestamp', { ascending: false }),\n\n          supabase.from('user_hydration_goals').select('*').eq('user_id', appStoreUser.id).single(),\n        ]);\n\n        if (entriesResult.data) {\n          setHydrationEntries(entriesResult.data);\n        }\n\n        if (goalResult.data) {\n          setHydrationGoal(goalResult.data);\n        } else {\n          // Cr√©er des objectifs par d√©faut\n          const defaultGoal: HydrationGoal = {\n            daily_target_ml: Math.max(2000, (appStoreUser.weight || 70) * 35),\n            reminder_interval_minutes: 60,\n            start_time: '07:00',\n            end_time: '22:00',\n            enabled: true,\n          };\n          setHydrationGoal(defaultGoal);\n        }\n      } catch (error: any) {\n      // Erreur silencieuse\n        console.error('Erreur lors du chargement:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    loadHydrationData();\n  }, [appStoreUser?.id]);\n\n  // Configurer les rappels quand les objectifs changent\n  useEffect(() => {\n    setupReminders();\n    return () => {\n      if (reminderIntervalRef.current) {\n        clearInterval(reminderIntervalRef.current);\n      }\n    };\n  }, [setupReminders]);\n\n  // V√©rifier les permissions de notification au montage\n  useEffect(() => {\n    if ('Notification' in window) {\n      setReminderPermission(Notification.permission);\n    }\n  }, []);\n\n  return {\n    // √âtat\n    hydrationEntries,\n    hydrationGoal,\n    isLoading,\n    reminderPermission,\n\n    // Statistiques\n    stats: hydrationStats(),\n\n    // Actions\n    addHydrationEntry,\n    addQuickAmount,\n    deleteHydrationEntry,\n    updateHydrationGoal,\n    requestNotificationPermission,\n\n    // Raccourcis\n    addGlass: () => addQuickAmount(250),\n    addBottle: () => addQuickAmount(500),\n    addLargeBottle: () => addQuickAmount(750),\n    addCup: () => addQuickAmount(200),\n  };\n}\n\nexport default useHydrationReminders;\n"],"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","ignoreList":[]}