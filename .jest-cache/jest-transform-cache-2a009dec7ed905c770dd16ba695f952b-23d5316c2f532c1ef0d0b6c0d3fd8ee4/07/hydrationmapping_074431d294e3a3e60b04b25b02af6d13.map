{"version":3,"names":["cov_2441tdm9wq","actualCoverage","s","exports","dbToHydrationData","hydrationDataToDb","dbToHydrationAnalysis","hydrationAnalysisToDb","calculateHydrationScores","generateHydrationAIInsights","calculateDehydrationRisk","dbData","f","id","userId","user_id","hydrationDate","hydration_date","dailyGoal","daily_goal_ml","totalIntake","total_intake_ml","waterIntake","water_intake_ml","otherFluids","b","other_fluids_ml","coffee","tea","juice","alcohol","sportsDrinks","sodas","hydrationTimestamps","hydration_timestamps","physicalActivity","physical_activity","exerciseDuration","exerciseIntensity","sweatRate","environmentalTemp","humidity","bodyMetrics","body_metrics","weight","bodyFatPercentage","undefined","urineColor","urineFrequency","symptoms","thirst","headache","fatigue","dizziness","drymouth","darkUrine","constipation","mood","mood_data","energyLevel","concentration","overallMood","notes","hydration_ai_analysis","createdAt","Date","created_at","updatedAt","updated_at","hydrationData","hydration_score","calculateOverallHydrationScore","quality_score","calculateQualityScore","efficiency_score","calculateEfficiencyScore","analysisVersion","timestamp","toISOString","dbAnalysis","aiAnalysis","hydrationDataId","hydration_data_id","analysisDate","analysis_date","hydrationScores","overallHydration","overall_hydration_score","hydrationEfficiency","hydration_efficiency_score","qualityScore","timingOptimization","timing_optimization_score","recoveryHydration","recovery_hydration_score","balanceScore","balance_score","fluidBalance","optimalIntake","actualIntake","deficit","surplus","absorptionRate","retentionScore","performanceImpact","cognitiveFunction","physicalPerformance","recoveryRate","metabolicEfficiency","dehydrationRisk","currentLevel","dehydration_risk_level","riskFactors","urgencyLevel","timeToOptimal","aiInsights","primaryIssues","improvementSuggestions","optimizationStrategies","hydrationTiming","fluidRecommendations","predictiveMetrics","nextHourNeed","endOfDayProjection","performanceImpactTomorrow","optimalNextIntake","now","toTimeString","slice","environmentalFactors","temperatureImpact","humidityImpact","altitudeAdjustment","seasonalFactors","personalizedTargets","baselineNeed","exerciseAdjustment","environmentalAdjustment","finalTarget","analysis","goalAchievement","Math","min","calculateTimingScore","calculateRecoveryHydrationScore","calculateElectrolyteBalance","max","scores","insights","push","riskScore","achievementRate","symptomsScore","calculateSymptomsScore","biomarkersScore","calculateBiomarkersScore","round","timingScore","absorptionScore","calculateAbsorptionScore","calculateRetentionScore","waterRatio","totalFluids","length","timestamps","map","t","index","hours","minutes","time","split","Number","intervals","i","optimalIntervals","filter","interval","intensityMultiplier","low","moderate","high","extreme","baseNeed","exerciseNeed","recoveryNeed","coverage","diureticRatio","urineColorPenalty","urineFreq","forEach","intake","temperature","fluidType"],"sources":["/workspaces/MyFitHero/src/features/hydration/utils/hydration-mapping.ts"],"sourcesContent":["import { HydrationData, HydrationAnalysis, DbHydrationData, DbHydrationAnalysis } from '@/features/hydration/types';\n\n/**\n * Conversion des données Hydration de snake_case (DB) vers camelCase (App)\n */\nexport function dbToHydrationData(dbData: DbHydrationData): HydrationData {\n  return {\n    id: dbData.id,\n    userId: dbData.user_id,\n    hydrationDate: dbData.hydration_date,\n    dailyGoal: dbData.daily_goal_ml,\n    totalIntake: dbData.total_intake_ml,\n    waterIntake: dbData.water_intake_ml,\n    otherFluids: dbData.other_fluids_ml || {\n      coffee: 0,\n      tea: 0,\n      juice: 0,\n      alcohol: 0,\n      sportsDrinks: 0,\n      sodas: 0,\n    },\n    hydrationTimestamps: dbData.hydration_timestamps || [],\n    physicalActivity: dbData.physical_activity || {\n      exerciseDuration: 0,\n      exerciseIntensity: 'low',\n      sweatRate: 500,\n      environmentalTemp: 20,\n      humidity: 50,\n    },\n    bodyMetrics: dbData.body_metrics || {\n      weight: 70,\n      bodyFatPercentage: undefined,\n      urineColor: 3,\n      urineFrequency: 6,\n    },\n    symptoms: dbData.symptoms || {\n      thirst: 'none',\n      headache: false,\n      fatigue: false,\n      dizziness: false,\n      drymouth: false,\n      darkUrine: false,\n      constipation: false,\n    },\n    mood: dbData.mood_data || {\n      energyLevel: 7,\n      concentration: 7,\n      overallMood: 'good',\n    },\n    notes: dbData.hydration_ai_analysis?.notes,\n    createdAt: new Date(dbData.created_at),\n    updatedAt: new Date(dbData.updated_at),\n  };\n}\n\n/**\n * Conversion des données Hydration de camelCase (App) vers snake_case (DB)\n */\nexport function hydrationDataToDb(hydrationData: HydrationData): Partial<DbHydrationData> {\n  return {\n    id: hydrationData.id,\n    user_id: hydrationData.userId,\n    hydration_date: hydrationData.hydrationDate,\n    daily_goal_ml: hydrationData.dailyGoal,\n    total_intake_ml: hydrationData.totalIntake,\n    water_intake_ml: hydrationData.waterIntake,\n    other_fluids_ml: hydrationData.otherFluids,\n    hydration_timestamps: hydrationData.hydrationTimestamps,\n    physical_activity: hydrationData.physicalActivity,\n    body_metrics: hydrationData.bodyMetrics,\n    symptoms: hydrationData.symptoms,\n    mood_data: hydrationData.mood,\n    hydration_score: calculateOverallHydrationScore(hydrationData),\n    quality_score: calculateQualityScore(hydrationData),\n    efficiency_score: calculateEfficiencyScore(hydrationData),\n    hydration_ai_analysis: {\n      notes: hydrationData.notes,\n      analysisVersion: '1.0',\n      timestamp: new Date().toISOString(),\n    },\n    updated_at: new Date().toISOString(),\n  };\n}\n\n/**\n * Conversion des analyses Hydration de snake_case (DB) vers camelCase (App)\n */\nexport function dbToHydrationAnalysis(dbAnalysis: DbHydrationAnalysis): HydrationAnalysis {\n  const aiAnalysis = dbAnalysis.hydration_ai_analysis || {};\n  \n  return {\n    id: dbAnalysis.id,\n    userId: dbAnalysis.user_id,\n    hydrationDataId: dbAnalysis.hydration_data_id,\n    analysisDate: new Date(dbAnalysis.analysis_date),\n    hydrationScores: {\n      overallHydration: dbAnalysis.overall_hydration_score,\n      hydrationEfficiency: dbAnalysis.hydration_efficiency_score,\n      qualityScore: dbAnalysis.quality_score,\n      timingOptimization: dbAnalysis.timing_optimization_score,\n      recoveryHydration: dbAnalysis.recovery_hydration_score,\n      balanceScore: dbAnalysis.balance_score,\n    },\n    fluidBalance: aiAnalysis.fluidBalance || {\n      optimalIntake: 2500,\n      actualIntake: 2000,\n      deficit: 500,\n      surplus: 0,\n      absorptionRate: 85,\n      retentionScore: 75,\n    },\n    performanceImpact: aiAnalysis.performanceImpact || {\n      cognitiveFunction: 80,\n      physicalPerformance: 85,\n      recoveryRate: 75,\n      metabolicEfficiency: 80,\n    },\n    dehydrationRisk: aiAnalysis.dehydrationRisk || {\n      currentLevel: dbAnalysis.dehydration_risk_level as any || 'optimal',\n      riskFactors: [],\n      urgencyLevel: 'low',\n      timeToOptimal: 60,\n    },\n    aiInsights: aiAnalysis.aiInsights || {\n      primaryIssues: [],\n      improvementSuggestions: [],\n      optimizationStrategies: [],\n      hydrationTiming: [],\n      fluidRecommendations: [],\n    },\n    predictiveMetrics: aiAnalysis.predictiveMetrics || {\n      nextHourNeed: 250,\n      endOfDayProjection: 2200,\n      performanceImpactTomorrow: 'neutral',\n      optimalNextIntake: new Date(Date.now() + 60 * 60 * 1000).toTimeString().slice(0, 5),\n    },\n    environmentalFactors: aiAnalysis.environmentalFactors || {\n      temperatureImpact: 50,\n      humidityImpact: 50,\n      altitudeAdjustment: 0,\n      seasonalFactors: [],\n    },\n    personalizedTargets: aiAnalysis.personalizedTargets || {\n      baselineNeed: 2000,\n      exerciseAdjustment: 500,\n      environmentalAdjustment: 200,\n      finalTarget: 2700,\n    },\n    createdAt: new Date(dbAnalysis.created_at),\n    updatedAt: new Date(dbAnalysis.updated_at),\n  };\n}\n\n/**\n * Conversion des analyses Hydration de camelCase (App) vers snake_case (DB)\n */\nexport function hydrationAnalysisToDb(analysis: HydrationAnalysis): Partial<DbHydrationAnalysis> {\n  return {\n    id: analysis.id,\n    user_id: analysis.userId,\n    hydration_data_id: analysis.hydrationDataId,\n    analysis_date: analysis.analysisDate.toISOString(),\n    overall_hydration_score: analysis.hydrationScores.overallHydration,\n    hydration_efficiency_score: analysis.hydrationScores.hydrationEfficiency,\n    quality_score: analysis.hydrationScores.qualityScore,\n    timing_optimization_score: analysis.hydrationScores.timingOptimization,\n    recovery_hydration_score: analysis.hydrationScores.recoveryHydration,\n    balance_score: analysis.hydrationScores.balanceScore,\n    dehydration_risk_level: analysis.dehydrationRisk.currentLevel,\n    hydration_ai_analysis: {\n      fluidBalance: analysis.fluidBalance,\n      performanceImpact: analysis.performanceImpact,\n      dehydrationRisk: analysis.dehydrationRisk,\n      aiInsights: analysis.aiInsights,\n      predictiveMetrics: analysis.predictiveMetrics,\n      environmentalFactors: analysis.environmentalFactors,\n      personalizedTargets: analysis.personalizedTargets,\n    },\n    updated_at: new Date().toISOString(),\n  };\n}\n\n/**\n * Calcul des scores d'hydratation avancés avec IA\n */\nexport function calculateHydrationScores(hydrationData: HydrationData): HydrationAnalysis['hydrationScores'] {\n  // Score hydratation globale (0-100)\n  const goalAchievement = Math.min(100, (hydrationData.totalIntake / hydrationData.dailyGoal) * 100);\n  const overallHydration = calculateOverallHydrationScore(hydrationData);\n  \n  // Score efficacité basé sur absorption et rétention\n  const hydrationEfficiency = calculateEfficiencyScore(hydrationData);\n  \n  // Score qualité basé sur le type de fluides\n  const qualityScore = calculateQualityScore(hydrationData);\n  \n  // Score timing basé sur la répartition dans la journée\n  const timingOptimization = calculateTimingScore(hydrationData);\n  \n  // Score récupération basé sur l'activité physique\n  const recoveryHydration = calculateRecoveryHydrationScore(hydrationData);\n  \n  // Score équilibre électrolytique\n  const balanceScore = calculateElectrolyteBalance(hydrationData);\n\n  return {\n    overallHydration: Math.min(100, Math.max(0, overallHydration)),\n    hydrationEfficiency: Math.min(100, Math.max(0, hydrationEfficiency)),\n    qualityScore: Math.min(100, Math.max(0, qualityScore)),\n    timingOptimization: Math.min(100, Math.max(0, timingOptimization)),\n    recoveryHydration: Math.min(100, Math.max(0, recoveryHydration)),\n    balanceScore: Math.min(100, Math.max(0, balanceScore)),\n  };\n}\n\n/**\n * Analyse intelligente de l'hydratation avec recommandations IA\n */\nexport function generateHydrationAIInsights(hydrationData: HydrationData, scores: HydrationAnalysis['hydrationScores']): HydrationAnalysis['aiInsights'] {\n  const insights = {\n    primaryIssues: [] as string[],\n    improvementSuggestions: [] as string[],\n    optimizationStrategies: [] as string[],\n    hydrationTiming: [] as string[],\n    fluidRecommendations: [] as string[],\n  };\n\n  // Analyse des problèmes principaux\n  if (scores.overallHydration < 70) {\n    insights.primaryIssues.push('Hydratation insuffisante pour vos besoins');\n  }\n  if (hydrationData.symptoms.thirst !== 'none') {\n    insights.primaryIssues.push('Symptômes de déshydratation détectés');\n  }\n  if (hydrationData.bodyMetrics.urineColor >= 5) {\n    insights.primaryIssues.push('Couleur d\\'urine indiquant une déshydratation');\n  }\n  if (scores.qualityScore < 60) {\n    insights.primaryIssues.push('Qualité des fluides consommés à améliorer');\n  }\n\n  // Suggestions d'amélioration\n  if (hydrationData.totalIntake < hydrationData.dailyGoal) {\n    const deficit = hydrationData.dailyGoal - hydrationData.totalIntake;\n    insights.improvementSuggestions.push(`Augmentez votre consommation de ${deficit}ml pour atteindre votre objectif`);\n  }\n  \n  if (hydrationData.otherFluids.coffee > 400) {\n    insights.improvementSuggestions.push('Réduisez la consommation de caféine (>400ml/jour détecté)');\n  }\n  \n  if (hydrationData.waterIntake / hydrationData.totalIntake < 0.7) {\n    insights.improvementSuggestions.push('Privilégiez l\\'eau pure (70% minimum recommandé)');\n  }\n\n  // Stratégies d'optimisation\n  insights.optimizationStrategies.push('Répartissez votre consommation sur toute la journée');\n  insights.optimizationStrategies.push('Hydratez-vous avant, pendant et après l\\'exercice');\n  insights.optimizationStrategies.push('Surveillez la couleur de votre urine comme indicateur');\n  \n  if (hydrationData.physicalActivity.exerciseDuration > 60) {\n    insights.optimizationStrategies.push('Ajoutez des électrolytes pour les exercices prolongés');\n  }\n\n  // Timing optimal\n  insights.hydrationTiming.push('Buvez 500ml au réveil pour compenser la nuit');\n  insights.hydrationTiming.push('Hydratez-vous 2h avant l\\'exercice (500ml)');\n  insights.hydrationTiming.push('Limitez les fluides 2h avant le coucher');\n  \n  if (hydrationData.physicalActivity.exerciseIntensity !== 'low') {\n    insights.hydrationTiming.push('150-250ml toutes les 15-20min pendant l\\'exercice');\n  }\n\n  // Recommandations de fluides\n  insights.fluidRecommendations.push('Eau pure: base de votre hydratation');\n  \n  if (hydrationData.physicalActivity.exerciseDuration > 90) {\n    insights.fluidRecommendations.push('Boisson électrolytique pour exercices >90min');\n  }\n  \n  if (hydrationData.physicalActivity.environmentalTemp > 25) {\n    insights.fluidRecommendations.push('Eau fraîche pour améliorer l\\'absorption par temps chaud');\n  }\n  \n  insights.fluidRecommendations.push('Thé vert: hydratation + antioxydants');\n\n  return insights;\n}\n\n/**\n * Calcul du risque de déshydratation\n */\nexport function calculateDehydrationRisk(hydrationData: HydrationData): HydrationAnalysis['dehydrationRisk'] {\n  const riskFactors = [];\n  let riskScore = 0;\n\n  // Analyse des symptômes\n  if (hydrationData.symptoms.thirst !== 'none') riskScore += 20;\n  if (hydrationData.symptoms.headache) riskScore += 15;\n  if (hydrationData.symptoms.fatigue) riskScore += 10;\n  if (hydrationData.symptoms.dizziness) riskScore += 25;\n  if (hydrationData.symptoms.drymouth) riskScore += 15;\n  if (hydrationData.symptoms.darkUrine) riskScore += 20;\n\n  // Analyse urine\n  if (hydrationData.bodyMetrics.urineColor >= 6) {\n    riskScore += 30;\n    riskFactors.push('Couleur d\\'urine foncée');\n  }\n  if (hydrationData.bodyMetrics.urineFrequency < 4) {\n    riskScore += 20;\n    riskFactors.push('Fréquence urinaire faible');\n  }\n\n  // Analyse consommation vs objectif\n  const achievementRate = hydrationData.totalIntake / hydrationData.dailyGoal;\n  if (achievementRate < 0.5) {\n    riskScore += 40;\n    riskFactors.push('Consommation très insuffisante');\n  } else if (achievementRate < 0.7) {\n    riskScore += 25;\n    riskFactors.push('Consommation insuffisante');\n  }\n\n  // Facteurs environnementaux\n  if (hydrationData.physicalActivity.environmentalTemp > 28) {\n    riskScore += 15;\n    riskFactors.push('Température élevée');\n  }\n  if (hydrationData.physicalActivity.humidity < 30) {\n    riskScore += 10;\n    riskFactors.push('Air sec');\n  }\n\n  // Activité physique\n  if (hydrationData.physicalActivity.exerciseIntensity === 'high' || hydrationData.physicalActivity.exerciseIntensity === 'extreme') {\n    riskScore += 20;\n    riskFactors.push('Exercice intense');\n  }\n\n  // Détermination du niveau de risque\n  let currentLevel: HydrationAnalysis['dehydrationRisk']['currentLevel'];\n  let urgencyLevel: HydrationAnalysis['dehydrationRisk']['urgencyLevel'];\n  let timeToOptimal: number;\n\n  if (riskScore <= 20) {\n    currentLevel = 'optimal';\n    urgencyLevel = 'low';\n    timeToOptimal = 0;\n  } else if (riskScore <= 50) {\n    currentLevel = 'mild';\n    urgencyLevel = 'medium';\n    timeToOptimal = 30;\n  } else if (riskScore <= 80) {\n    currentLevel = 'moderate';\n    urgencyLevel = 'high';\n    timeToOptimal = 60;\n  } else {\n    currentLevel = 'severe';\n    urgencyLevel = 'critical';\n    timeToOptimal = 120;\n  }\n\n  return {\n    currentLevel,\n    riskFactors,\n    urgencyLevel,\n    timeToOptimal,\n  };\n}\n\n// Fonctions utilitaires de calcul\nfunction calculateOverallHydrationScore(hydrationData: HydrationData): number {\n  const goalAchievement = Math.min(100, (hydrationData.totalIntake / hydrationData.dailyGoal) * 100);\n  const qualityScore = calculateQualityScore(hydrationData);\n  const symptomsScore = calculateSymptomsScore(hydrationData);\n  const biomarkersScore = calculateBiomarkersScore(hydrationData);\n  \n  return Math.round(\n    (goalAchievement * 0.3) +\n    (qualityScore * 0.25) +\n    (symptomsScore * 0.25) +\n    (biomarkersScore * 0.2)\n  );\n}\n\nfunction calculateEfficiencyScore(hydrationData: HydrationData): number {\n  // Efficacité basée sur la répartition temporelle et le type de fluides\n  const timingScore = calculateTimingScore(hydrationData);\n  const absorptionScore = calculateAbsorptionScore(hydrationData);\n  const retentionScore = calculateRetentionScore(hydrationData);\n  \n  return Math.round((timingScore + absorptionScore + retentionScore) / 3);\n}\n\nfunction calculateQualityScore(hydrationData: HydrationData): number {\n  const waterRatio = hydrationData.waterIntake / hydrationData.totalIntake;\n  let qualityScore = waterRatio * 100;\n  \n  // Pénalités pour fluides problématiques\n  const totalFluids = hydrationData.totalIntake;\n  if (hydrationData.otherFluids.alcohol > 0) {\n    qualityScore -= (hydrationData.otherFluids.alcohol / totalFluids) * 30;\n  }\n  if (hydrationData.otherFluids.sodas > 0) {\n    qualityScore -= (hydrationData.otherFluids.sodas / totalFluids) * 20;\n  }\n  if (hydrationData.otherFluids.coffee > 400) {\n    qualityScore -= 15; // Trop de caféine\n  }\n  \n  // Bonus pour thé et jus naturels (modération)\n  if (hydrationData.otherFluids.tea > 0 && hydrationData.otherFluids.tea <= 500) {\n    qualityScore += 5;\n  }\n  \n  return Math.max(0, Math.min(100, qualityScore));\n}\n\nfunction calculateTimingScore(hydrationData: HydrationData): number {\n  if (hydrationData.hydrationTimestamps.length === 0) return 50;\n  \n  // Analyse de la répartition temporelle\n  const timestamps = hydrationData.hydrationTimestamps.map((t, index) => {\n    const [hours, minutes] = t.time.split(':').map(Number);\n    return hours + minutes / 60;\n  });\n  \n  // Score basé sur la régularité de la consommation\n  const intervals = [];\n  for (let i = 1; i < timestamps.length; i++) {\n    intervals.push(timestamps[i] - timestamps[i-1]);\n  }\n  \n  // Intervalle optimal: 1-3 heures\n  const optimalIntervals = intervals.filter(interval => interval >= 1 && interval <= 3).length;\n  const timingScore = (optimalIntervals / intervals.length) * 100;\n  \n  return Math.round(timingScore);\n}\n\nfunction calculateRecoveryHydrationScore(hydrationData: HydrationData): number {\n  const exerciseDuration = hydrationData.physicalActivity.exerciseDuration;\n  const exerciseIntensity = hydrationData.physicalActivity.exerciseIntensity;\n  \n  if (exerciseDuration === 0) return 100; // Pas d'exercice = pas de besoins spéciaux\n  \n  // Calcul des besoins selon l'intensité\n  const intensityMultiplier = {\n    low: 1.2,\n    moderate: 1.5,\n    high: 2.0,\n    extreme: 2.5\n  };\n  \n  const baseNeed = 500; // ml/heure d'exercice\n  const exerciseNeed = exerciseDuration * (baseNeed / 60) * intensityMultiplier[exerciseIntensity];\n  const recoveryNeed = exerciseNeed * 1.5; // 150% pour récupération\n  \n  // Vérification si les besoins sont couverts\n  const coverage = hydrationData.totalIntake / (hydrationData.dailyGoal + recoveryNeed);\n  return Math.min(100, coverage * 100);\n}\n\nfunction calculateElectrolyteBalance(hydrationData: HydrationData): number {\n  // Score basé sur la diversité des fluides et les besoins électrolytiques\n  let balanceScore = 70; // Score de base\n  \n  // Bonus pour boissons sportives si exercice intense\n  if (hydrationData.physicalActivity.exerciseIntensity === 'high' || hydrationData.physicalActivity.exerciseIntensity === 'extreme') {\n    if (hydrationData.otherFluids.sportsDrinks > 0) {\n      balanceScore += 20;\n    } else {\n      balanceScore -= 15; // Manque d'électrolytes\n    }\n  }\n  \n  // Pénalité si trop de fluides diurétiques\n  const diureticRatio = (hydrationData.otherFluids.coffee + hydrationData.otherFluids.alcohol) / hydrationData.totalIntake;\n  if (diureticRatio > 0.3) {\n    balanceScore -= 20;\n  }\n  \n  return Math.max(0, Math.min(100, balanceScore));\n}\n\nfunction calculateSymptomsScore(hydrationData: HydrationData): number {\n  let symptomsScore = 100;\n  \n  const symptoms = hydrationData.symptoms;\n  if (symptoms.thirst === 'mild') symptomsScore -= 10;\n  if (symptoms.thirst === 'moderate') symptomsScore -= 20;\n  if (symptoms.thirst === 'severe') symptomsScore -= 40;\n  \n  if (symptoms.headache) symptomsScore -= 15;\n  if (symptoms.fatigue) symptomsScore -= 10;\n  if (symptoms.dizziness) symptomsScore -= 25;\n  if (symptoms.drymouth) symptomsScore -= 15;\n  if (symptoms.darkUrine) symptomsScore -= 20;\n  if (symptoms.constipation) symptomsScore -= 10;\n  \n  return Math.max(0, symptomsScore);\n}\n\nfunction calculateBiomarkersScore(hydrationData: HydrationData): number {\n  let biomarkersScore = 100;\n  \n  // Score basé sur la couleur d'urine (1=optimal, 8=très déshydraté)\n  const urineColorPenalty = (hydrationData.bodyMetrics.urineColor - 1) * 12.5;\n  biomarkersScore -= urineColorPenalty;\n  \n  // Score basé sur la fréquence urinaire (6-8 optimal)\n  const urineFreq = hydrationData.bodyMetrics.urineFrequency;\n  if (urineFreq < 4) biomarkersScore -= 30;\n  else if (urineFreq < 6) biomarkersScore -= 15;\n  else if (urineFreq > 10) biomarkersScore -= 10;\n  \n  return Math.max(0, biomarkersScore);\n}\n\nfunction calculateAbsorptionScore(hydrationData: HydrationData): number {\n  // Score d'absorption basé sur le type et la température des fluides\n  let absorptionScore = 80;\n  \n  hydrationData.hydrationTimestamps.forEach(intake => {\n    if (intake.temperature === 'cold') absorptionScore += 2; // Absorption plus rapide\n    if (intake.temperature === 'hot' && intake.fluidType === 'water') absorptionScore -= 1;\n    \n    if (intake.fluidType === 'water') absorptionScore += 1;\n    if (intake.fluidType === 'sports') absorptionScore += 1.5; // Électrolytes aident\n  });\n  \n  return Math.min(100, absorptionScore);\n}\n\nfunction calculateRetentionScore(hydrationData: HydrationData): number {\n  // Score de rétention basé sur les facteurs qui affectent la perte d'eau\n  let retentionScore = 85;\n  \n  // Facteurs qui réduisent la rétention\n  if (hydrationData.otherFluids.alcohol > 0) {\n    retentionScore -= (hydrationData.otherFluids.alcohol / hydrationData.totalIntake) * 40;\n  }\n  if (hydrationData.otherFluids.coffee > 200) {\n    retentionScore -= 10; // Effet diurétique de la caféine\n  }\n  \n  // Facteurs environnementaux\n  if (hydrationData.physicalActivity.environmentalTemp > 25) {\n    retentionScore -= 5;\n  }\n  if (hydrationData.physicalActivity.humidity < 40) {\n    retentionScore -= 5;\n  }\n  \n  return Math.max(0, retentionScore);\n}"],"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","ignoreList":[]}