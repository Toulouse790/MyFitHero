{"version":3,"names":["cov_1wmf5q8wpz","actualCoverage","s","zustand_1","require","middleware_1","exports","useSocialStore","create","persist","set","get","f","profile","friends","friendRequests","posts","userPosts","challenges","userChallenges","notifications","unreadCount","leaderboards","loading","errors","updateProfile","updates","state","b","loadFriends","setTimeout","sendFriendRequest","userId","acceptFriendRequest","requestId","declineFriendRequest","removeFriend","friendId","createPost","postData","loadPosts","filter","likePost","postId","commentPost","content","sharePost","createChallenge","challengeData","joinChallenge","challengeId","updateChallengeProgress","progress","markNotificationAsRead","notificationId","map","notif","index","id","read","Math","max","markAllNotificationsAsRead","getLeaderboard","category","period","initializeRealTime","searchUsers","query","filters","name","partialize"],"sources":["/workspaces/MyFitHero/src/features/social/hooks/useSocialStore.ts"],"sourcesContent":["import { Activity, Search, Users } from 'lucide-react';\nimport { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\n\n// Types simplifi√©s pour le store social\ninterface SocialProfile {\n  id: string;\n  userId: string;\n  username: string;\n  displayName: string;\n  avatar?: string;\n  sport: string;\n  level: number;\n  stats: SocialStats;\n  badges: Badge[];\n  privacy: PrivacySettings;\n  created_at: string;\n  updated_at: string;\n}\n\ninterface SocialStats {\n  totalWorkouts: number;\n  totalDuration: number;\n  streakDays: number;\n  achievements: number;\n  ranking: number;\n  points: number;\n}\n\ninterface Badge {\n  id: string;\n  name: string;\n  description: string;\n  icon: string;\n  category: 'workout' | 'social' | 'achievement' | 'special';\n  rarity: 'common' | 'uncommon' | 'rare' | 'epic' | 'legendary';\n  unlockedAt?: string;\n}\n\ninterface PrivacySettings {\n  profileVisibility: 'public' | 'friends' | 'private';\n  workoutVisibility: 'public' | 'friends' | 'private';\n  friendsVisibility: 'public' | 'friends' | 'private';\n  allowMessages: boolean;\n  allowFriendRequests: boolean;\n}\n\ninterface Friend {\n  id: string;\n  userId: string;\n  friendId: string;\n  status: 'pending' | 'accepted' | 'blocked';\n  connectedAt: string;\n  friend: SocialProfile;\n}\n\ninterface ActivityPost {\n  id: string;\n  userId: string;\n  title: string;\n  description?: string;\n  type: 'workout' | 'achievement' | 'challenge' | 'milestone';\n  data: any;\n  media?: MediaFile[];\n  visibility: 'public' | 'friends' | 'private';\n  likes: number;\n  shares: number;\n  comments: Comment[];\n  created_at: string;\n  updated_at: string;\n}\n\ninterface MediaFile {\n  url: string;\n  type: 'image' | 'video';\n  thumbnail?: string;\n}\n\ninterface Comment {\n  id: string;\n  userId: string;\n  content: string;\n  likes: number;\n  created_at: string;\n}\n\ninterface Challenge {\n  id: string;\n  title: string;\n  description: string;\n  type: 'distance' | 'duration' | 'frequency' | 'custom';\n  target: number;\n  unit: string;\n  duration: number;\n  visibility: 'public' | 'friends' | 'invite-only';\n  maxParticipants?: number;\n  participants: ChallengeParticipant[];\n  prizes: string[];\n  rules: string[];\n  creatorId: string;\n  status: string;\n  created_at: string;\n}\n\ninterface ChallengeParticipant {\n  id: string;\n  challengeId: string;\n  userId: string;\n  progress: number;\n  rank: number;\n  completed: boolean;\n  joinedAt: string;\n}\n\ninterface SocialNotification {\n  id: string;\n  userId: string;\n  type: 'friend_request' | 'post_like' | 'comment' | 'challenge_invite';\n  title: string;\n  message: string;\n  read: boolean;\n  created_at: string;\n}\n\ninterface LeaderboardEntry {\n  userId: string;\n  username: string;\n  avatar?: string;\n  value: number;\n  rank: number;\n}\n\ninterface SocialStore {\n  // State\n  profile: SocialProfile | undefined;\n  friends: Friend[];\n  friendRequests: Friend[];\n  posts: ActivityPost[];\n  userPosts: ActivityPost[];\n  challenges: Challenge[];\n  userChallenges: Challenge[];\n  notifications: SocialNotification[];\n  unreadCount: number;\n  leaderboards: Record<string, LeaderboardEntry[]>;\n\n  loading: {\n    profile: boolean;\n    friends: boolean;\n    posts: boolean;\n    challenges: boolean;\n    notifications: boolean;\n  };\n\n  errors: Record<string, string | null>;\n\n  // Actions\n  updateProfile: (updates: Partial<SocialProfile>) => Promise<void>;\n  loadFriends: () => Promise<void>;\n  sendFriendRequest: (userId: string) => Promise<void>;\n  acceptFriendRequest: (requestId: string) => Promise<void>;\n  declineFriendRequest: (requestId: string) => Promise<void>;\n  removeFriend: (friendId: string) => Promise<void>;\n\n  createPost: (postData: any) => Promise<void>;\n  loadPosts: (filter?: any) => Promise<void>;\n  likePost: (postId: string) => Promise<void>;\n  commentPost: (postId: string, content: string) => Promise<void>;\n  sharePost: (postId: string) => Promise<void>;\n\n  createChallenge: (challengeData: any) => Promise<void>;\n  joinChallenge: (challengeId: string) => Promise<void>;\n  updateChallengeProgress: (challengeId: string, progress: number) => Promise<void>;\n\n  markNotificationAsRead: (notificationId: string) => Promise<void>;\n  markAllNotificationsAsRead: () => Promise<void>;\n\n  getLeaderboard: (category: string, period: string) => Promise<void>;\n\n  initializeRealTime: () => void;\n  searchUsers: (query: string, filters?: any) => Promise<void>;\n}\n\nexport const useSocialStore = create<SocialStore>()(\n  persist(\n    (set, get) => ({\n      // Initial state\n      profile: null,\n      friends: [],\n      friendRequests: [],\n      posts: [],\n      userPosts: [],\n      challenges: [],\n      userChallenges: [],\n      notifications: [],\n      unreadCount: 0,\n      leaderboards: {},\n\n      loading: {\n        profile: false,\n        friends: false,\n        posts: false,\n        challenges: false,\n        notifications: false,\n      },\n\n      errors: {},\n\n      // Actions - Placeholder implementations\n      updateProfile: async (updates: Partial<SocialProfile>) => {\n        set(state => ({\n          profile: state.profile ? { ...state.profile, ...updates } : null,\n        }));\n        // TODO: Implement real API call\n      },\n\n      loadFriends: async () => {\n        set(state => ({\n          loading: { ...state.loading, friends: true },\n        }));\n\n        // TODO: Implement real API call\n        // For now, just clear loading state\n        setTimeout(() => {\n          set(state => ({\n            loading: { ...state.loading, friends: false },\n          }));\n        }, 100);\n      },\n\n      sendFriendRequest: async (userId: string) => {\n        // TODO: Implement real API call\n      },\n\n      acceptFriendRequest: async (requestId: string) => {\n        // TODO: Implement real API call\n      },\n\n      declineFriendRequest: async (requestId: string) => {\n        // TODO: Implement real API call\n      },\n\n      removeFriend: async (friendId: string) => {\n        // TODO: Implement real API call\n      },\n\n      createPost: async (postData: any) => {\n        // TODO: Implement real API call\n      },\n\n      loadPosts: async (filter?: any) => {\n        set(state => ({\n          loading: { ...state.loading, posts: true },\n        }));\n\n        // TODO: Implement real API call\n        setTimeout(() => {\n          set(state => ({\n            loading: { ...state.loading, posts: false },\n          }));\n        }, 100);\n      },\n\n      likePost: async (postId: string) => {\n        // TODO: Implement real API call\n      },\n\n      commentPost: async (postId: string, content: string) => {\n        // TODO: Implement real API call\n      },\n\n      sharePost: async (postId: string) => {\n        // TODO: Implement real API call\n      },\n\n      createChallenge: async (challengeData: any) => {\n        // TODO: Implement real API call\n      },\n\n      joinChallenge: async (challengeId: string) => {\n        // TODO: Implement real API call\n      },\n\n      updateChallengeProgress: async (challengeId: string, progress: number) => {\n        // TODO: Implement real API call\n      },\n\n      markNotificationAsRead: async (notificationId: string) => {\n        set(state => ({\n          notifications: state.notifications.map((notif, index) =>\n            notif.id === notificationId ? { ...notif, read: true } : notif\n          ),\n          unreadCount: Math.max(0, state.unreadCount - 1),\n        }));\n      },\n\n      markAllNotificationsAsRead: async () => {\n        set(state => ({\n          notifications: state.notifications.map((notif, index) => ({ ...notif, read: true })),\n          unreadCount: 0,\n        }));\n      },\n\n      getLeaderboard: async (category: string, period: string) => {\n        // TODO: Implement real API call\n      },\n\n      initializeRealTime: () => {\n        // TODO: Implement real-time subscriptions\n      },\n\n      searchUsers: async (query: string, filters?: any) => {\n        // TODO: Implement real API call\n      },\n    }),\n    {\n      name: 'social-store',\n      partialize: state => ({\n        profile: state.profile,\n        friends: state.friends,\n        // Don't persist loading states or errors\n      }),\n    }\n  )\n);\n"],"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","ignoreList":[]}