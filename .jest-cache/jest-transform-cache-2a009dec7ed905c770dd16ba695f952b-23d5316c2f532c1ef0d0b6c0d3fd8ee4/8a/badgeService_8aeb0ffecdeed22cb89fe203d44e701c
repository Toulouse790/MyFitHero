32623a0b971d852581eaa7c0b70131f1
"use strict";

/* istanbul ignore next */
function cov_2l223orr2k() {
  var path = "/workspaces/MyFitHero/src/lib/services/badgeService.ts";
  var hash = "606cafe9efb9efb01c932eb789919606cc577a60";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/MyFitHero/src/lib/services/badgeService.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 30
        }
      },
      "2": {
        start: {
          line: 5,
          column: 19
        },
        end: {
          line: 5,
          column: 44
        }
      },
      "3": {
        start: {
          line: 11,
          column: 8
        },
        end: {
          line: 27,
          column: 9
        }
      },
      "4": {
        start: {
          line: 12,
          column: 36
        },
        end: {
          line: 16,
          column: 55
        }
      },
      "5": {
        start: {
          line: 17,
          column: 12
        },
        end: {
          line: 20,
          column: 13
        }
      },
      "6": {
        start: {
          line: 18,
          column: 16
        },
        end: {
          line: 18,
          column: 83
        }
      },
      "7": {
        start: {
          line: 19,
          column: 16
        },
        end: {
          line: 19,
          column: 26
        }
      },
      "8": {
        start: {
          line: 21,
          column: 12
        },
        end: {
          line: 21,
          column: 30
        }
      },
      "9": {
        start: {
          line: 25,
          column: 12
        },
        end: {
          line: 25,
          column: 84
        }
      },
      "10": {
        start: {
          line: 26,
          column: 12
        },
        end: {
          line: 26,
          column: 22
        }
      },
      "11": {
        start: {
          line: 33,
          column: 8
        },
        end: {
          line: 52,
          column: 9
        }
      },
      "12": {
        start: {
          line: 34,
          column: 36
        },
        end: {
          line: 41,
          column: 57
        }
      },
      "13": {
        start: {
          line: 42,
          column: 12
        },
        end: {
          line: 45,
          column: 13
        }
      },
      "14": {
        start: {
          line: 43,
          column: 16
        },
        end: {
          line: 43,
          column: 95
        }
      },
      "15": {
        start: {
          line: 44,
          column: 16
        },
        end: {
          line: 44,
          column: 26
        }
      },
      "16": {
        start: {
          line: 46,
          column: 12
        },
        end: {
          line: 46,
          column: 30
        }
      },
      "17": {
        start: {
          line: 50,
          column: 12
        },
        end: {
          line: 50,
          column: 96
        }
      },
      "18": {
        start: {
          line: 51,
          column: 12
        },
        end: {
          line: 51,
          column: 22
        }
      },
      "19": {
        start: {
          line: 58,
          column: 8
        },
        end: {
          line: 79,
          column: 9
        }
      },
      "20": {
        start: {
          line: 59,
          column: 44
        },
        end: {
          line: 62,
          column: 14
        }
      },
      "21": {
        start: {
          line: 63,
          column: 33
        },
        end: {
          line: 63,
          column: 90
        }
      },
      "22": {
        start: {
          line: 63,
          column: 71
        },
        end: {
          line: 63,
          column: 88
        }
      },
      "23": {
        start: {
          line: 64,
          column: 29
        },
        end: {
          line: 72,
          column: 14
        }
      },
      "24": {
        start: {
          line: 65,
          column: 34
        },
        end: {
          line: 65,
          column: 60
        }
      },
      "25": {
        start: {
          line: 66,
          column: 16
        },
        end: {
          line: 71,
          column: 18
        }
      },
      "26": {
        start: {
          line: 73,
          column: 12
        },
        end: {
          line: 73,
          column: 28
        }
      },
      "27": {
        start: {
          line: 77,
          column: 12
        },
        end: {
          line: 77,
          column: 96
        }
      },
      "28": {
        start: {
          line: 78,
          column: 12
        },
        end: {
          line: 78,
          column: 22
        }
      },
      "29": {
        start: {
          line: 85,
          column: 8
        },
        end: {
          line: 144,
          column: 9
        }
      },
      "30": {
        start: {
          line: 86,
          column: 40
        },
        end: {
          line: 90,
          column: 25
        }
      },
      "31": {
        start: {
          line: 91,
          column: 12
        },
        end: {
          line: 94,
          column: 13
        }
      },
      "32": {
        start: {
          line: 92,
          column: 16
        },
        end: {
          line: 92,
          column: 71
        }
      },
      "33": {
        start: {
          line: 93,
          column: 16
        },
        end: {
          line: 93,
          column: 26
        }
      },
      "34": {
        start: {
          line: 95,
          column: 43
        },
        end: {
          line: 99,
          column: 52
        }
      },
      "35": {
        start: {
          line: 100,
          column: 30
        },
        end: {
          line: 100,
          column: 55
        }
      },
      "36": {
        start: {
          line: 101,
          column: 31
        },
        end: {
          line: 101,
          column: 63
        }
      },
      "37": {
        start: {
          line: 102,
          column: 35
        },
        end: {
          line: 102,
          column: 86
        }
      },
      "38": {
        start: {
          line: 102,
          column: 73
        },
        end: {
          line: 102,
          column: 84
        }
      },
      "39": {
        start: {
          line: 103,
          column: 30
        },
        end: {
          line: 103,
          column: 32
        }
      },
      "40": {
        start: {
          line: 104,
          column: 12
        },
        end: {
          line: 137,
          column: 13
        }
      },
      "41": {
        start: {
          line: 105,
          column: 16
        },
        end: {
          line: 106,
          column: 29
        }
      },
      "42": {
        start: {
          line: 106,
          column: 20
        },
        end: {
          line: 106,
          column: 29
        }
      },
      "43": {
        start: {
          line: 107,
          column: 33
        },
        end: {
          line: 107,
          column: 98
        }
      },
      "44": {
        start: {
          line: 108,
          column: 16
        },
        end: {
          line: 136,
          column: 17
        }
      },
      "45": {
        start: {
          line: 110,
          column: 54
        },
        end: {
          line: 126,
          column: 33
        }
      },
      "46": {
        start: {
          line: 127,
          column: 20
        },
        end: {
          line: 131,
          column: 21
        }
      },
      "47": {
        start: {
          line: 128,
          column: 24
        },
        end: {
          line: 128,
          column: 49
        }
      },
      "48": {
        start: {
          line: 130,
          column: 24
        },
        end: {
          line: 130,
          column: 85
        }
      },
      "49": {
        start: {
          line: 135,
          column: 20
        },
        end: {
          line: 135,
          column: 79
        }
      },
      "50": {
        start: {
          line: 138,
          column: 12
        },
        end: {
          line: 138,
          column: 29
        }
      },
      "51": {
        start: {
          line: 142,
          column: 12
        },
        end: {
          line: 142,
          column: 84
        }
      },
      "52": {
        start: {
          line: 143,
          column: 12
        },
        end: {
          line: 143,
          column: 22
        }
      },
      "53": {
        start: {
          line: 150,
          column: 8
        },
        end: {
          line: 161,
          column: 9
        }
      },
      "54": {
        start: {
          line: 152,
          column: 16
        },
        end: {
          line: 152,
          column: 69
        }
      },
      "55": {
        start: {
          line: 154,
          column: 16
        },
        end: {
          line: 154,
          column: 53
        }
      },
      "56": {
        start: {
          line: 156,
          column: 16
        },
        end: {
          line: 156,
          column: 44
        }
      },
      "57": {
        start: {
          line: 158,
          column: 16
        },
        end: {
          line: 158,
          column: 85
        }
      },
      "58": {
        start: {
          line: 160,
          column: 16
        },
        end: {
          line: 160,
          column: 25
        }
      },
      "59": {
        start: {
          line: 167,
          column: 8
        },
        end: {
          line: 178,
          column: 9
        }
      },
      "60": {
        start: {
          line: 169,
          column: 16
        },
        end: {
          line: 169,
          column: 53
        }
      },
      "61": {
        start: {
          line: 171,
          column: 16
        },
        end: {
          line: 171,
          column: 59
        }
      },
      "62": {
        start: {
          line: 173,
          column: 16
        },
        end: {
          line: 173,
          column: 68
        }
      },
      "63": {
        start: {
          line: 175,
          column: 16
        },
        end: {
          line: 175,
          column: 59
        }
      },
      "64": {
        start: {
          line: 177,
          column: 16
        },
        end: {
          line: 177,
          column: 25
        }
      },
      "65": {
        start: {
          line: 185,
          column: 8
        },
        end: {
          line: 201,
          column: 9
        }
      },
      "66": {
        start: {
          line: 188,
          column: 16
        },
        end: {
          line: 191,
          column: 53
        }
      },
      "67": {
        start: {
          line: 188,
          column: 56
        },
        end: {
          line: 191,
          column: 44
        }
      },
      "68": {
        start: {
          line: 194,
          column: 16
        },
        end: {
          line: 195,
          column: 28
        }
      },
      "69": {
        start: {
          line: 194,
          column: 56
        },
        end: {
          line: 194,
          column: 106
        }
      },
      "70": {
        start: {
          line: 198,
          column: 16
        },
        end: {
          line: 198,
          column: 53
        }
      },
      "71": {
        start: {
          line: 200,
          column: 16
        },
        end: {
          line: 200,
          column: 25
        }
      },
      "72": {
        start: {
          line: 207,
          column: 8
        },
        end: {
          line: 219,
          column: 9
        }
      },
      "73": {
        start: {
          line: 208,
          column: 12
        },
        end: {
          line: 214,
          column: 15
        }
      },
      "74": {
        start: {
          line: 218,
          column: 12
        },
        end: {
          line: 218,
          column: 92
        }
      },
      "75": {
        start: {
          line: 225,
          column: 8
        },
        end: {
          line: 247,
          column: 9
        }
      },
      "76": {
        start: {
          line: 226,
          column: 40
        },
        end: {
          line: 230,
          column: 25
        }
      },
      "77": {
        start: {
          line: 231,
          column: 12
        },
        end: {
          line: 232,
          column: 23
        }
      },
      "78": {
        start: {
          line: 232,
          column: 16
        },
        end: {
          line: 232,
          column: 23
        }
      },
      "79": {
        start: {
          line: 233,
          column: 34
        },
        end: {
          line: 233,
          column: 77
        }
      },
      "80": {
        start: {
          line: 234,
          column: 29
        },
        end: {
          line: 234,
          column: 65
        }
      },
      "81": {
        start: {
          line: 235,
          column: 12
        },
        end: {
          line: 242,
          column: 39
        }
      },
      "82": {
        start: {
          line: 246,
          column: 12
        },
        end: {
          line: 246,
          column: 88
        }
      },
      "83": {
        start: {
          line: 253,
          column: 8
        },
        end: {
          line: 263,
          column: 9
        }
      },
      "84": {
        start: {
          line: 254,
          column: 12
        },
        end: {
          line: 258,
          column: 42
        }
      },
      "85": {
        start: {
          line: 262,
          column: 12
        },
        end: {
          line: 262,
          column: 90
        }
      },
      "86": {
        start: {
          line: 269,
          column: 8
        },
        end: {
          line: 289,
          column: 9
        }
      },
      "87": {
        start: {
          line: 270,
          column: 36
        },
        end: {
          line: 278,
          column: 57
        }
      },
      "88": {
        start: {
          line: 279,
          column: 12
        },
        end: {
          line: 282,
          column: 13
        }
      },
      "89": {
        start: {
          line: 280,
          column: 16
        },
        end: {
          line: 280,
          column: 96
        }
      },
      "90": {
        start: {
          line: 281,
          column: 16
        },
        end: {
          line: 281,
          column: 26
        }
      },
      "91": {
        start: {
          line: 283,
          column: 12
        },
        end: {
          line: 283,
          column: 30
        }
      },
      "92": {
        start: {
          line: 287,
          column: 12
        },
        end: {
          line: 287,
          column: 97
        }
      },
      "93": {
        start: {
          line: 288,
          column: 12
        },
        end: {
          line: 288,
          column: 22
        }
      },
      "94": {
        start: {
          line: 295,
          column: 8
        },
        end: {
          line: 312,
          column: 9
        }
      },
      "95": {
        start: {
          line: 296,
          column: 36
        },
        end: {
          line: 301,
          column: 62
        }
      },
      "96": {
        start: {
          line: 302,
          column: 12
        },
        end: {
          line: 305,
          column: 13
        }
      },
      "97": {
        start: {
          line: 303,
          column: 16
        },
        end: {
          line: 303,
          column: 97
        }
      },
      "98": {
        start: {
          line: 304,
          column: 16
        },
        end: {
          line: 304,
          column: 26
        }
      },
      "99": {
        start: {
          line: 306,
          column: 12
        },
        end: {
          line: 306,
          column: 30
        }
      },
      "100": {
        start: {
          line: 310,
          column: 12
        },
        end: {
          line: 310,
          column: 98
        }
      },
      "101": {
        start: {
          line: 311,
          column: 12
        },
        end: {
          line: 311,
          column: 22
        }
      },
      "102": {
        start: {
          line: 318,
          column: 8
        },
        end: {
          line: 352,
          column: 9
        }
      },
      "103": {
        start: {
          line: 319,
          column: 44
        },
        end: {
          line: 322,
          column: 14
        }
      },
      "104": {
        start: {
          line: 323,
          column: 33
        },
        end: {
          line: 323,
          column: 66
        }
      },
      "105": {
        start: {
          line: 323,
          column: 57
        },
        end: {
          line: 323,
          column: 65
        }
      },
      "106": {
        start: {
          line: 324,
          column: 32
        },
        end: {
          line: 324,
          column: 105
        }
      },
      "107": {
        start: {
          line: 324,
          column: 65
        },
        end: {
          line: 324,
          column: 101
        }
      },
      "108": {
        start: {
          line: 325,
          column: 32
        },
        end: {
          line: 329,
          column: 18
        }
      },
      "109": {
        start: {
          line: 326,
          column: 31
        },
        end: {
          line: 326,
          column: 59
        }
      },
      "110": {
        start: {
          line: 327,
          column: 16
        },
        end: {
          line: 327,
          column: 53
        }
      },
      "111": {
        start: {
          line: 328,
          column: 16
        },
        end: {
          line: 328,
          column: 27
        }
      },
      "112": {
        start: {
          line: 330,
          column: 12
        },
        end: {
          line: 338,
          column: 14
        }
      },
      "113": {
        start: {
          line: 342,
          column: 12
        },
        end: {
          line: 342,
          column: 101
        }
      },
      "114": {
        start: {
          line: 343,
          column: 12
        },
        end: {
          line: 351,
          column: 14
        }
      },
      "115": {
        start: {
          line: 355,
          column: 0
        },
        end: {
          line: 355,
          column: 36
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 10,
            column: 5
          }
        },
        loc: {
          start: {
            line: 10,
            column: 32
          },
          end: {
            line: 28,
            column: 5
          }
        },
        line: 10
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 32,
            column: 4
          },
          end: {
            line: 32,
            column: 5
          }
        },
        loc: {
          start: {
            line: 32,
            column: 39
          },
          end: {
            line: 53,
            column: 5
          }
        },
        line: 32
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 57,
            column: 4
          },
          end: {
            line: 57,
            column: 5
          }
        },
        loc: {
          start: {
            line: 57,
            column: 42
          },
          end: {
            line: 80,
            column: 5
          }
        },
        line: 57
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 63,
            column: 56
          },
          end: {
            line: 63,
            column: 57
          }
        },
        loc: {
          start: {
            line: 63,
            column: 71
          },
          end: {
            line: 63,
            column: 88
          }
        },
        line: 63
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 64,
            column: 43
          },
          end: {
            line: 64,
            column: 44
          }
        },
        loc: {
          start: {
            line: 64,
            column: 61
          },
          end: {
            line: 72,
            column: 13
          }
        },
        line: 64
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 84,
            column: 4
          },
          end: {
            line: 84,
            column: 5
          }
        },
        loc: {
          start: {
            line: 84,
            column: 45
          },
          end: {
            line: 145,
            column: 5
          }
        },
        line: 84
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 102,
            column: 58
          },
          end: {
            line: 102,
            column: 59
          }
        },
        loc: {
          start: {
            line: 102,
            column: 73
          },
          end: {
            line: 102,
            column: 84
          }
        },
        line: 102
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 149,
            column: 4
          },
          end: {
            line: 149,
            column: 5
          }
        },
        loc: {
          start: {
            line: 149,
            column: 66
          },
          end: {
            line: 162,
            column: 5
          }
        },
        line: 149
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 166,
            column: 4
          },
          end: {
            line: 166,
            column: 5
          }
        },
        loc: {
          start: {
            line: 166,
            column: 52
          },
          end: {
            line: 179,
            column: 5
          }
        },
        line: 166
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 183,
            column: 4
          },
          end: {
            line: 183,
            column: 5
          }
        },
        loc: {
          start: {
            line: 183,
            column: 68
          },
          end: {
            line: 202,
            column: 5
          }
        },
        line: 183
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 188,
            column: 43
          },
          end: {
            line: 188,
            column: 44
          }
        },
        loc: {
          start: {
            line: 188,
            column: 56
          },
          end: {
            line: 191,
            column: 44
          }
        },
        line: 188
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 194,
            column: 43
          },
          end: {
            line: 194,
            column: 44
          }
        },
        loc: {
          start: {
            line: 194,
            column: 56
          },
          end: {
            line: 194,
            column: 106
          }
        },
        line: 194
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 206,
            column: 4
          },
          end: {
            line: 206,
            column: 5
          }
        },
        loc: {
          start: {
            line: 206,
            column: 64
          },
          end: {
            line: 220,
            column: 5
          }
        },
        line: 206
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 224,
            column: 4
          },
          end: {
            line: 224,
            column: 5
          }
        },
        loc: {
          start: {
            line: 224,
            column: 54
          },
          end: {
            line: 248,
            column: 5
          }
        },
        line: 224
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 252,
            column: 4
          },
          end: {
            line: 252,
            column: 5
          }
        },
        loc: {
          start: {
            line: 252,
            column: 64
          },
          end: {
            line: 264,
            column: 5
          }
        },
        line: 252
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 268,
            column: 4
          },
          end: {
            line: 268,
            column: 5
          }
        },
        loc: {
          start: {
            line: 268,
            column: 45
          },
          end: {
            line: 290,
            column: 5
          }
        },
        line: 268
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 294,
            column: 4
          },
          end: {
            line: 294,
            column: 5
          }
        },
        loc: {
          start: {
            line: 294,
            column: 47
          },
          end: {
            line: 313,
            column: 5
          }
        },
        line: 294
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 317,
            column: 4
          },
          end: {
            line: 317,
            column: 5
          }
        },
        loc: {
          start: {
            line: 317,
            column: 39
          },
          end: {
            line: 353,
            column: 5
          }
        },
        line: 317
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 323,
            column: 51
          },
          end: {
            line: 323,
            column: 52
          }
        },
        loc: {
          start: {
            line: 323,
            column: 57
          },
          end: {
            line: 323,
            column: 65
          }
        },
        line: 323
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 324,
            column: 52
          },
          end: {
            line: 324,
            column: 53
          }
        },
        loc: {
          start: {
            line: 324,
            column: 65
          },
          end: {
            line: 324,
            column: 101
          }
        },
        line: 324
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 325,
            column: 52
          },
          end: {
            line: 325,
            column: 53
          }
        },
        loc: {
          start: {
            line: 325,
            column: 65
          },
          end: {
            line: 329,
            column: 13
          }
        },
        line: 325
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 17,
            column: 12
          },
          end: {
            line: 20,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 17,
            column: 12
          },
          end: {
            line: 20,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 17
      },
      "1": {
        loc: {
          start: {
            line: 21,
            column: 19
          },
          end: {
            line: 21,
            column: 29
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 21,
            column: 19
          },
          end: {
            line: 21,
            column: 23
          }
        }, {
          start: {
            line: 21,
            column: 27
          },
          end: {
            line: 21,
            column: 29
          }
        }],
        line: 21
      },
      "2": {
        loc: {
          start: {
            line: 42,
            column: 12
          },
          end: {
            line: 45,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 42,
            column: 12
          },
          end: {
            line: 45,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 42
      },
      "3": {
        loc: {
          start: {
            line: 46,
            column: 19
          },
          end: {
            line: 46,
            column: 29
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 46,
            column: 19
          },
          end: {
            line: 46,
            column: 23
          }
        }, {
          start: {
            line: 46,
            column: 27
          },
          end: {
            line: 46,
            column: 29
          }
        }],
        line: 46
      },
      "4": {
        loc: {
          start: {
            line: 68,
            column: 30
          },
          end: {
            line: 68,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 68,
            column: 30
          },
          end: {
            line: 68,
            column: 49
          }
        }, {
          start: {
            line: 68,
            column: 53
          },
          end: {
            line: 68,
            column: 54
          }
        }],
        line: 68
      },
      "5": {
        loc: {
          start: {
            line: 91,
            column: 12
          },
          end: {
            line: 94,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 91,
            column: 12
          },
          end: {
            line: 94,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 91
      },
      "6": {
        loc: {
          start: {
            line: 105,
            column: 16
          },
          end: {
            line: 106,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 105,
            column: 16
          },
          end: {
            line: 106,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 105
      },
      "7": {
        loc: {
          start: {
            line: 107,
            column: 79
          },
          end: {
            line: 107,
            column: 97
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 107,
            column: 79
          },
          end: {
            line: 107,
            column: 91
          }
        }, {
          start: {
            line: 107,
            column: 95
          },
          end: {
            line: 107,
            column: 97
          }
        }],
        line: 107
      },
      "8": {
        loc: {
          start: {
            line: 108,
            column: 16
          },
          end: {
            line: 136,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 108,
            column: 16
          },
          end: {
            line: 136,
            column: 17
          }
        }, {
          start: {
            line: 133,
            column: 21
          },
          end: {
            line: 136,
            column: 17
          }
        }],
        line: 108
      },
      "9": {
        loc: {
          start: {
            line: 127,
            column: 20
          },
          end: {
            line: 131,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 127,
            column: 20
          },
          end: {
            line: 131,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 127
      },
      "10": {
        loc: {
          start: {
            line: 127,
            column: 24
          },
          end: {
            line: 127,
            column: 42
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 127,
            column: 24
          },
          end: {
            line: 127,
            column: 30
          }
        }, {
          start: {
            line: 127,
            column: 34
          },
          end: {
            line: 127,
            column: 42
          }
        }],
        line: 127
      },
      "11": {
        loc: {
          start: {
            line: 150,
            column: 8
          },
          end: {
            line: 161,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 151,
            column: 12
          },
          end: {
            line: 152,
            column: 69
          }
        }, {
          start: {
            line: 153,
            column: 12
          },
          end: {
            line: 154,
            column: 53
          }
        }, {
          start: {
            line: 155,
            column: 12
          },
          end: {
            line: 156,
            column: 44
          }
        }, {
          start: {
            line: 157,
            column: 12
          },
          end: {
            line: 158,
            column: 85
          }
        }, {
          start: {
            line: 159,
            column: 12
          },
          end: {
            line: 160,
            column: 25
          }
        }],
        line: 150
      },
      "12": {
        loc: {
          start: {
            line: 154,
            column: 23
          },
          end: {
            line: 154,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 154,
            column: 23
          },
          end: {
            line: 154,
            column: 47
          }
        }, {
          start: {
            line: 154,
            column: 51
          },
          end: {
            line: 154,
            column: 52
          }
        }],
        line: 154
      },
      "13": {
        loc: {
          start: {
            line: 156,
            column: 23
          },
          end: {
            line: 156,
            column: 43
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 156,
            column: 23
          },
          end: {
            line: 156,
            column: 38
          }
        }, {
          start: {
            line: 156,
            column: 42
          },
          end: {
            line: 156,
            column: 43
          }
        }],
        line: 156
      },
      "14": {
        loc: {
          start: {
            line: 167,
            column: 8
          },
          end: {
            line: 178,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 168,
            column: 12
          },
          end: {
            line: 169,
            column: 53
          }
        }, {
          start: {
            line: 170,
            column: 12
          },
          end: {
            line: 171,
            column: 59
          }
        }, {
          start: {
            line: 172,
            column: 12
          },
          end: {
            line: 173,
            column: 68
          }
        }, {
          start: {
            line: 174,
            column: 12
          },
          end: {
            line: 175,
            column: 59
          }
        }, {
          start: {
            line: 176,
            column: 12
          },
          end: {
            line: 177,
            column: 25
          }
        }],
        line: 167
      },
      "15": {
        loc: {
          start: {
            line: 169,
            column: 23
          },
          end: {
            line: 169,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 169,
            column: 23
          },
          end: {
            line: 169,
            column: 47
          }
        }, {
          start: {
            line: 169,
            column: 51
          },
          end: {
            line: 169,
            column: 52
          }
        }],
        line: 169
      },
      "16": {
        loc: {
          start: {
            line: 171,
            column: 23
          },
          end: {
            line: 171,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 171,
            column: 23
          },
          end: {
            line: 171,
            column: 53
          }
        }, {
          start: {
            line: 171,
            column: 57
          },
          end: {
            line: 171,
            column: 58
          }
        }],
        line: 171
      },
      "17": {
        loc: {
          start: {
            line: 173,
            column: 34
          },
          end: {
            line: 173,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 173,
            column: 34
          },
          end: {
            line: 173,
            column: 61
          }
        }, {
          start: {
            line: 173,
            column: 65
          },
          end: {
            line: 173,
            column: 66
          }
        }],
        line: 173
      },
      "18": {
        loc: {
          start: {
            line: 175,
            column: 23
          },
          end: {
            line: 175,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 175,
            column: 23
          },
          end: {
            line: 175,
            column: 53
          }
        }, {
          start: {
            line: 175,
            column: 57
          },
          end: {
            line: 175,
            column: 58
          }
        }],
        line: 175
      },
      "19": {
        loc: {
          start: {
            line: 185,
            column: 8
          },
          end: {
            line: 201,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 186,
            column: 12
          },
          end: {
            line: 191,
            column: 53
          }
        }, {
          start: {
            line: 192,
            column: 12
          },
          end: {
            line: 195,
            column: 28
          }
        }, {
          start: {
            line: 196,
            column: 12
          },
          end: {
            line: 198,
            column: 53
          }
        }, {
          start: {
            line: 199,
            column: 12
          },
          end: {
            line: 200,
            column: 25
          }
        }],
        line: 185
      },
      "20": {
        loc: {
          start: {
            line: 188,
            column: 56
          },
          end: {
            line: 191,
            column: 44
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 188,
            column: 56
          },
          end: {
            line: 188,
            column: 81
          }
        }, {
          start: {
            line: 189,
            column: 20
          },
          end: {
            line: 189,
            column: 44
          }
        }, {
          start: {
            line: 190,
            column: 20
          },
          end: {
            line: 190,
            column: 41
          }
        }, {
          start: {
            line: 191,
            column: 20
          },
          end: {
            line: 191,
            column: 44
          }
        }],
        line: 188
      },
      "21": {
        loc: {
          start: {
            line: 194,
            column: 56
          },
          end: {
            line: 194,
            column: 106
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 194,
            column: 56
          },
          end: {
            line: 194,
            column: 77
          }
        }, {
          start: {
            line: 194,
            column: 81
          },
          end: {
            line: 194,
            column: 106
          }
        }],
        line: 194
      },
      "22": {
        loc: {
          start: {
            line: 198,
            column: 23
          },
          end: {
            line: 198,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 198,
            column: 23
          },
          end: {
            line: 198,
            column: 47
          }
        }, {
          start: {
            line: 198,
            column: 51
          },
          end: {
            line: 198,
            column: 52
          }
        }],
        line: 198
      },
      "23": {
        loc: {
          start: {
            line: 231,
            column: 12
          },
          end: {
            line: 232,
            column: 23
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 231,
            column: 12
          },
          end: {
            line: 232,
            column: 23
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 231
      },
      "24": {
        loc: {
          start: {
            line: 233,
            column: 35
          },
          end: {
            line: 233,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 233,
            column: 35
          },
          end: {
            line: 233,
            column: 62
          }
        }, {
          start: {
            line: 233,
            column: 66
          },
          end: {
            line: 233,
            column: 67
          }
        }],
        line: 233
      },
      "25": {
        loc: {
          start: {
            line: 279,
            column: 12
          },
          end: {
            line: 282,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 279,
            column: 12
          },
          end: {
            line: 282,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 279
      },
      "26": {
        loc: {
          start: {
            line: 283,
            column: 19
          },
          end: {
            line: 283,
            column: 29
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 283,
            column: 19
          },
          end: {
            line: 283,
            column: 23
          }
        }, {
          start: {
            line: 283,
            column: 27
          },
          end: {
            line: 283,
            column: 29
          }
        }],
        line: 283
      },
      "27": {
        loc: {
          start: {
            line: 302,
            column: 12
          },
          end: {
            line: 305,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 302,
            column: 12
          },
          end: {
            line: 305,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 302
      },
      "28": {
        loc: {
          start: {
            line: 306,
            column: 19
          },
          end: {
            line: 306,
            column: 29
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 306,
            column: 19
          },
          end: {
            line: 306,
            column: 23
          }
        }, {
          start: {
            line: 306,
            column: 27
          },
          end: {
            line: 306,
            column: 29
          }
        }],
        line: 306
      },
      "29": {
        loc: {
          start: {
            line: 324,
            column: 72
          },
          end: {
            line: 324,
            column: 100
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 324,
            column: 72
          },
          end: {
            line: 324,
            column: 95
          }
        }, {
          start: {
            line: 324,
            column: 99
          },
          end: {
            line: 324,
            column: 100
          }
        }],
        line: 324
      },
      "30": {
        loc: {
          start: {
            line: 326,
            column: 31
          },
          end: {
            line: 326,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 326,
            column: 31
          },
          end: {
            line: 326,
            column: 47
          }
        }, {
          start: {
            line: 326,
            column: 51
          },
          end: {
            line: 326,
            column: 59
          }
        }],
        line: 326
      },
      "31": {
        loc: {
          start: {
            line: 327,
            column: 31
          },
          end: {
            line: 327,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 327,
            column: 31
          },
          end: {
            line: 327,
            column: 42
          }
        }, {
          start: {
            line: 327,
            column: 46
          },
          end: {
            line: 327,
            column: 47
          }
        }],
        line: 327
      },
      "32": {
        loc: {
          start: {
            line: 333,
            column: 30
          },
          end: {
            line: 333,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 333,
            column: 30
          },
          end: {
            line: 333,
            column: 48
          }
        }, {
          start: {
            line: 333,
            column: 52
          },
          end: {
            line: 333,
            column: 53
          }
        }],
        line: 333
      },
      "33": {
        loc: {
          start: {
            line: 334,
            column: 28
          },
          end: {
            line: 334,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 334,
            column: 28
          },
          end: {
            line: 334,
            column: 44
          }
        }, {
          start: {
            line: 334,
            column: 48
          },
          end: {
            line: 334,
            column: 49
          }
        }],
        line: 334
      },
      "34": {
        loc: {
          start: {
            line: 335,
            column: 28
          },
          end: {
            line: 335,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 335,
            column: 28
          },
          end: {
            line: 335,
            column: 44
          }
        }, {
          start: {
            line: 335,
            column: 48
          },
          end: {
            line: 335,
            column: 49
          }
        }],
        line: 335
      },
      "35": {
        loc: {
          start: {
            line: 336,
            column: 33
          },
          end: {
            line: 336,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 336,
            column: 33
          },
          end: {
            line: 336,
            column: 54
          }
        }, {
          start: {
            line: 336,
            column: 58
          },
          end: {
            line: 336,
            column: 59
          }
        }],
        line: 336
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0, 0, 0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0, 0, 0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0, 0, 0],
      "20": [0, 0, 0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0]
    },
    inputSourceMap: {
      file: "/workspaces/MyFitHero/src/lib/services/badgeService.ts",
      mappings: "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",
      names: [],
      sources: ["/workspaces/MyFitHero/src/lib/services/badgeService.ts"],
      sourcesContent: ["// client/src/services/badgeService.ts\nimport { supabase } from '@/lib/supabase';\n\nexport interface Badge {\n  id: string;\n  name: string;\n  description: string;\n  icon: string;\n  category: 'workout' | 'nutrition' | 'sleep' | 'hydration' | 'social' | 'special';\n  condition_type: 'count' | 'streak' | 'level' | 'special';\n  condition_value: number;\n  rarity: 'common' | 'rare' | 'epic' | 'legendary';\n  points_reward: number;\n  is_active: boolean;\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface UserBadge {\n  id: string;\n  user_id: string;\n  badge_id: string;\n  earned_at: string;\n  progress: number;\n  is_notified: boolean;\n  created_at: string;\n  badge?: Badge;\n}\n\nexport interface BadgeProgress {\n  badge: Badge;\n  progress: number;\n  isEarned: boolean;\n  earnedAt?: string;\n}\n\nexport class BadgeService {\n  /**\n   * R\xE9cup\xE8re tous les badges disponibles\n   */\n  static async getAllBadges(): Promise<Badge[]> {\n    try {\n      const { data, error }: any = await supabase\n        .from('badges')\n        .select('*')\n        .eq('is_active', true)\n        .order('category', { ascending: true });\n\n      if (error) {\n        console.error('Erreur lors de la r\xE9cup\xE9ration des badges:', error);\n        return [];\n      }\n\n      return data || [];\n    } catch (catchError) {\n      // Erreur silencieuse\n      console.error('Erreur lors de la r\xE9cup\xE9ration des badges:', catchError);\n      return [];\n    }\n  }\n\n  /**\n   * R\xE9cup\xE8re les badges d'un utilisateur\n   */\n  static async getUserBadges(userId: string): Promise<UserBadge[]> {\n    try {\n      const { data, error }: any = await supabase\n        .from('user_badges')\n        .select(\n          `\n          *,\n          badge:badges(*)\n        `\n        )\n        .eq('user_id', userId)\n        .order('earned_at', { ascending: false });\n\n      if (error) {\n        console.error('Erreur lors de la r\xE9cup\xE9ration des badges utilisateur:', error);\n        return [];\n      }\n\n      return data || [];\n    } catch (catchError) {\n      // Erreur silencieuse\n      console.error('Erreur lors de la r\xE9cup\xE9ration des badges utilisateur:', catchError);\n      return [];\n    }\n  }\n\n  /**\n   * R\xE9cup\xE8re les progr\xE8s des badges pour un utilisateur\n   */\n  static async getBadgeProgress(userId: string): Promise<BadgeProgress[]> {\n    try {\n      const [allBadges, userBadges] = await Promise.all([\n        this.getAllBadges(),\n        this.getUserBadges(userId),\n      ]);\n\n      const userBadgeMap = new Map(userBadges.map((ub, index) => [ub.badge_id, ub]));\n\n      const progress: BadgeProgress[] = allBadges.map((badge, index) => {\n        const userBadge = userBadgeMap.get(badge.id);\n\n        return {\n          badge,\n          progress: userBadge?.progress || 0,\n          isEarned: !!userBadge,\n          earnedAt: userBadge?.earned_at,\n        };\n      });\n\n      return progress;\n    } catch (catchError) {\n      // Erreur silencieuse\n      console.error('Erreur lors de la r\xE9cup\xE9ration des progr\xE8s des badges:', catchError);\n      return [];\n    }\n  }\n\n  /**\n   * V\xE9rifie et attribue les badges m\xE9rit\xE9s\n   */\n  static async checkAndAwardBadges(userId: string): Promise<UserBadge[]> {\n    try {\n      const { data: userStats } = await supabase\n        .from('user_stats')\n        .select('*')\n        .eq('user_id', userId)\n        .single();\n\n      if (!userStats) {\n        console.error('Statistiques utilisateur non trouv\xE9es');\n        return [];\n      }\n\n      const { data: userCheckins } = await supabase\n        .from('daily_checkins')\n        .select('*')\n        .eq('user_id', userId)\n        .order('date', { ascending: false });\n\n      const allBadges = await this.getAllBadges();\n      const userBadges = await this.getUserBadges(userId);\n      const earnedBadgeIds = new Set(userBadges.map((ub, index) => ub.badge_id));\n\n      const newBadges: UserBadge[] = [];\n\n      for (const badge of allBadges) {\n        if (earnedBadgeIds.has(badge.id)) continue;\n\n        const progress = this.calculateBadgeProgress(badge, userStats, userCheckins || []);\n\n        if (progress >= badge.condition_value) {\n          // Attribuer le badge\n          const { data: newBadge, error } = await supabase\n            .from('user_badges')\n            .insert([\n              {\n                user_id: userId,\n                badge_id: badge.id,\n                earned_at: new Date().toISOString(),\n                progress: progress,\n                is_notified: false,\n                created_at: new Date().toISOString(),\n              },\n            ])\n            .select(\n              `\n              *,\n              badge:badges(*)\n            `\n            )\n            .single();\n\n          if (!error && newBadge) {\n            newBadges.push(newBadge);\n\n            // Mettre \xE0 jour les points d'exp\xE9rience\n            await this.updateUserExperience(userId, badge.points_reward);\n          }\n        } else {\n          // Mettre \xE0 jour le progr\xE8s\n          await this.updateBadgeProgress(userId, badge.id, progress);\n        }\n      }\n\n      return newBadges;\n    } catch (catchError) {\n      // Erreur silencieuse\n      console.error('Erreur lors de la v\xE9rification des badges:', catchError);\n      return [];\n    }\n  }\n\n  /**\n   * Calcule le progr\xE8s d'un badge\n   */\n  private static calculateBadgeProgress(badge: Badge, userStats: any, userCheckins: unknown[]): number {\n    switch (badge.condition_type) {\n      case 'count':\n        return this.calculateCountProgress(badge, userStats);\n      case 'streak':\n        return userStats.current_streak || 0;\n      case 'level':\n        return userStats.level || 0;\n      case 'special':\n        return this.calculateSpecialProgress(badge, userStats, userCheckins);\n      default:\n        return 0;\n    }\n  }\n\n  /**\n   * Calcule le progr\xE8s bas\xE9 sur le nombre\n   */\n  private static calculateCountProgress(badge: Badge, userStats: any): number {\n    switch (badge.category) {\n      case 'workout':\n        return userStats.total_workouts || 0;\n      case 'nutrition':\n        return userStats.total_nutrition_logs || 0;\n      case 'sleep':\n        return Math.floor(userStats.total_sleep_hours || 0);\n      case 'hydration':\n        return userStats.total_hydration_logs || 0;\n      default:\n        return 0;\n    }\n  }\n\n  /**\n   * Calcule le progr\xE8s sp\xE9cial\n   */\n  private static calculateSpecialProgress(\n    badge: Badge,\n    userStats: any,\n    userCheckins: any[]\n  ): number {\n    // Logique sp\xE9cifique pour chaque badge sp\xE9cial\n    switch (badge.name) {\n      case 'Perfectionniste':\n        // Compter les check-ins parfaits (tous les piliers compl\xE9t\xE9s)\n        return userCheckins.filter(\n          (checkin: any) =>\n            checkin.workout_completed &&\n            checkin.nutrition_logged &&\n            checkin.sleep_tracked &&\n            checkin.hydration_logged\n        ).length;\n      case 'L\xE8ve-t\xF4t':\n        // Compter les check-ins avec un bon score de sommeil\n        return userCheckins.filter((checkin: any) => checkin.sleep_tracked && checkin.energy_level >= 8)\n          .length;\n      case 'Warrior':\n        // Compter les workouts intenses\n        return userStats.total_workouts || 0;\n      default:\n        return 0;\n    }\n  }\n\n  /**\n   * Met \xE0 jour le progr\xE8s d'un badge pour un utilisateur\n   */\n  private static async updateBadgeProgress(\n    userId: string,\n    badgeId: string,\n    progress: number\n  ): Promise<void> {\n    try {\n      await supabase.from('user_badges').upsert({\n        user_id: userId,\n        badge_id: badgeId,\n        progress: progress,\n        is_notified: false,\n        created_at: new Date().toISOString(),\n      });\n    } catch (catchError) {\n      // Erreur silencieuse\n      console.error('Erreur lors de la mise \xE0 jour du progr\xE8s du badge:', catchError);\n    }\n  }\n\n  /**\n   * Met \xE0 jour l'exp\xE9rience d'un utilisateur\n   */\n  private static async updateUserExperience(userId: string, points: number): Promise<void> {\n    try {\n      const { data: userStats } = await supabase\n        .from('user_stats')\n        .select('experience_points, level')\n        .eq('user_id', userId)\n        .single();\n\n      if (!userStats) return;\n\n      const newExperience = (userStats.experience_points || 0) + points;\n      const newLevel = Math.floor(newExperience / 1000) + 1;\n\n      await supabase\n        .from('user_stats')\n        .update({\n          experience_points: newExperience,\n          level: newLevel,\n          updated_at: new Date().toISOString(),\n        })\n        .eq('user_id', userId);\n    } catch (catchError) {\n      // Erreur silencieuse\n      console.error(\"Erreur lors de la mise \xE0 jour de l'exp\xE9rience:\", catchError);\n    }\n  }\n\n  /**\n   * Marque les notifications de badges comme lues\n   */\n  static async markBadgeNotificationsAsRead(userId: string, badgeIds: string[]): Promise<void> {\n    try {\n      await supabase\n        .from('user_badges')\n        .update({ is_notified: true })\n        .eq('user_id', userId)\n        .in('badge_id', badgeIds);\n    } catch (catchError) {\n      // Erreur silencieuse\n      console.error('Erreur lors de la mise \xE0 jour des notifications:', catchError);\n    }\n  }\n\n  /**\n   * R\xE9cup\xE8re les badges r\xE9cemment gagn\xE9s non notifi\xE9s\n   */\n  static async getUnnotifiedBadges(userId: string): Promise<UserBadge[]> {\n    try {\n      const { data, error }: any = await supabase\n        .from('user_badges')\n        .select(\n          `\n          *,\n          badge:badges(*)\n        `\n        )\n        .eq('user_id', userId)\n        .eq('is_notified', false)\n        .order('earned_at', { ascending: false });\n\n      if (error) {\n        console.error('Erreur lors de la r\xE9cup\xE9ration des badges non notifi\xE9s:', error);\n        return [];\n      }\n\n      return data || [];\n    } catch (catchError) {\n      // Erreur silencieuse\n      console.error('Erreur lors de la r\xE9cup\xE9ration des badges non notifi\xE9s:', catchError);\n      return [];\n    }\n  }\n\n  /**\n   * R\xE9cup\xE8re les badges par cat\xE9gorie\n   */\n  static async getBadgesByCategory(category: string): Promise<Badge[]> {\n    try {\n      const { data, error }: any = await supabase\n        .from('badges')\n        .select('*')\n        .eq('category', category)\n        .eq('is_active', true)\n        .order('condition_value', { ascending: true });\n\n      if (error) {\n        console.error('Erreur lors de la r\xE9cup\xE9ration des badges par cat\xE9gorie:', error);\n        return [];\n      }\n\n      return data || [];\n    } catch (catchError) {\n      // Erreur silencieuse\n      console.error('Erreur lors de la r\xE9cup\xE9ration des badges par cat\xE9gorie:', catchError);\n      return [];\n    }\n  }\n\n  /**\n   * R\xE9cup\xE8re les statistiques des badges pour un utilisateur\n   */\n  static async getBadgeStats(userId: string): Promise<{\n    totalBadges: number;\n    earnedBadges: number;\n    commonBadges: number;\n    rareBadges: number;\n    epicBadges: number;\n    legendaryBadges: number;\n    totalPoints: number;\n  }> {\n    try {\n      const [allBadges, userBadges] = await Promise.all([\n        this.getAllBadges(),\n        this.getUserBadges(userId),\n      ]);\n\n      const earnedBadges = userBadges.filter(ub => ub.badge);\n      const totalPoints = earnedBadges.reduce((sum, ub) => sum + (ub.badge?.points_reward || 0), 0);\n\n      const rarityCount = earnedBadges.reduce(\n        (acc, ub) => {\n          const rarity = ub.badge?.rarity || 'common';\n          acc[rarity] = (acc[rarity] || 0) + 1;\n          return acc;\n        },\n        {} as Record<string, number>\n      );\n\n      return {\n        totalBadges: allBadges.length,\n        earnedBadges: earnedBadges.length,\n        commonBadges: rarityCount.common || 0,\n        rareBadges: rarityCount.rare || 0,\n        epicBadges: rarityCount.epic || 0,\n        legendaryBadges: rarityCount.legendary || 0,\n        totalPoints,\n      };\n    } catch (catchError) {\n      // Erreur silencieuse\n      console.error('Erreur lors de la r\xE9cup\xE9ration des statistiques des badges:', catchError);\n      return {\n        totalBadges: 0,\n        earnedBadges: 0,\n        commonBadges: 0,\n        rareBadges: 0,\n        epicBadges: 0,\n        legendaryBadges: 0,\n        totalPoints: 0,\n      };\n    }\n  }\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "606cafe9efb9efb01c932eb789919606cc577a60"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2l223orr2k = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2l223orr2k();
cov_2l223orr2k().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2l223orr2k().s[1]++;
exports.BadgeService = void 0;
// client/src/services/badgeService.ts
const supabase_1 =
/* istanbul ignore next */
(cov_2l223orr2k().s[2]++, require("@/lib/supabase"));
class BadgeService {
  /**
   * Récupère tous les badges disponibles
   */
  static async getAllBadges() {
    /* istanbul ignore next */
    cov_2l223orr2k().f[0]++;
    cov_2l223orr2k().s[3]++;
    try {
      const {
        data,
        error
      } =
      /* istanbul ignore next */
      (cov_2l223orr2k().s[4]++, await supabase_1.supabase.from('badges').select('*').eq('is_active', true).order('category', {
        ascending: true
      }));
      /* istanbul ignore next */
      cov_2l223orr2k().s[5]++;
      if (error) {
        /* istanbul ignore next */
        cov_2l223orr2k().b[0][0]++;
        cov_2l223orr2k().s[6]++;
        console.error('Erreur lors de la récupération des badges:', error);
        /* istanbul ignore next */
        cov_2l223orr2k().s[7]++;
        return [];
      } else
      /* istanbul ignore next */
      {
        cov_2l223orr2k().b[0][1]++;
      }
      cov_2l223orr2k().s[8]++;
      return /* istanbul ignore next */(cov_2l223orr2k().b[1][0]++, data) ||
      /* istanbul ignore next */
      (cov_2l223orr2k().b[1][1]++, []);
    } catch (catchError) {
      /* istanbul ignore next */
      cov_2l223orr2k().s[9]++;
      // Erreur silencieuse
      console.error('Erreur lors de la récupération des badges:', catchError);
      /* istanbul ignore next */
      cov_2l223orr2k().s[10]++;
      return [];
    }
  }
  /**
   * Récupère les badges d'un utilisateur
   */
  static async getUserBadges(userId) {
    /* istanbul ignore next */
    cov_2l223orr2k().f[1]++;
    cov_2l223orr2k().s[11]++;
    try {
      const {
        data,
        error
      } =
      /* istanbul ignore next */
      (cov_2l223orr2k().s[12]++, await supabase_1.supabase.from('user_badges').select(`
          *,
          badge:badges(*)
        `).eq('user_id', userId).order('earned_at', {
        ascending: false
      }));
      /* istanbul ignore next */
      cov_2l223orr2k().s[13]++;
      if (error) {
        /* istanbul ignore next */
        cov_2l223orr2k().b[2][0]++;
        cov_2l223orr2k().s[14]++;
        console.error('Erreur lors de la récupération des badges utilisateur:', error);
        /* istanbul ignore next */
        cov_2l223orr2k().s[15]++;
        return [];
      } else
      /* istanbul ignore next */
      {
        cov_2l223orr2k().b[2][1]++;
      }
      cov_2l223orr2k().s[16]++;
      return /* istanbul ignore next */(cov_2l223orr2k().b[3][0]++, data) ||
      /* istanbul ignore next */
      (cov_2l223orr2k().b[3][1]++, []);
    } catch (catchError) {
      /* istanbul ignore next */
      cov_2l223orr2k().s[17]++;
      // Erreur silencieuse
      console.error('Erreur lors de la récupération des badges utilisateur:', catchError);
      /* istanbul ignore next */
      cov_2l223orr2k().s[18]++;
      return [];
    }
  }
  /**
   * Récupère les progrès des badges pour un utilisateur
   */
  static async getBadgeProgress(userId) {
    /* istanbul ignore next */
    cov_2l223orr2k().f[2]++;
    cov_2l223orr2k().s[19]++;
    try {
      const [allBadges, userBadges] =
      /* istanbul ignore next */
      (cov_2l223orr2k().s[20]++, await Promise.all([this.getAllBadges(), this.getUserBadges(userId)]));
      const userBadgeMap =
      /* istanbul ignore next */
      (cov_2l223orr2k().s[21]++, new Map(userBadges.map((ub, index) => {
        /* istanbul ignore next */
        cov_2l223orr2k().f[3]++;
        cov_2l223orr2k().s[22]++;
        return [ub.badge_id, ub];
      })));
      const progress =
      /* istanbul ignore next */
      (cov_2l223orr2k().s[23]++, allBadges.map((badge, index) => {
        /* istanbul ignore next */
        cov_2l223orr2k().f[4]++;
        const userBadge =
        /* istanbul ignore next */
        (cov_2l223orr2k().s[24]++, userBadgeMap.get(badge.id));
        /* istanbul ignore next */
        cov_2l223orr2k().s[25]++;
        return {
          badge,
          progress:
          /* istanbul ignore next */
          (cov_2l223orr2k().b[4][0]++, userBadge?.progress) ||
          /* istanbul ignore next */
          (cov_2l223orr2k().b[4][1]++, 0),
          isEarned: !!userBadge,
          earnedAt: userBadge?.earned_at
        };
      }));
      /* istanbul ignore next */
      cov_2l223orr2k().s[26]++;
      return progress;
    } catch (catchError) {
      /* istanbul ignore next */
      cov_2l223orr2k().s[27]++;
      // Erreur silencieuse
      console.error('Erreur lors de la récupération des progrès des badges:', catchError);
      /* istanbul ignore next */
      cov_2l223orr2k().s[28]++;
      return [];
    }
  }
  /**
   * Vérifie et attribue les badges mérités
   */
  static async checkAndAwardBadges(userId) {
    /* istanbul ignore next */
    cov_2l223orr2k().f[5]++;
    cov_2l223orr2k().s[29]++;
    try {
      const {
        data: userStats
      } =
      /* istanbul ignore next */
      (cov_2l223orr2k().s[30]++, await supabase_1.supabase.from('user_stats').select('*').eq('user_id', userId).single());
      /* istanbul ignore next */
      cov_2l223orr2k().s[31]++;
      if (!userStats) {
        /* istanbul ignore next */
        cov_2l223orr2k().b[5][0]++;
        cov_2l223orr2k().s[32]++;
        console.error('Statistiques utilisateur non trouvées');
        /* istanbul ignore next */
        cov_2l223orr2k().s[33]++;
        return [];
      } else
      /* istanbul ignore next */
      {
        cov_2l223orr2k().b[5][1]++;
      }
      const {
        data: userCheckins
      } =
      /* istanbul ignore next */
      (cov_2l223orr2k().s[34]++, await supabase_1.supabase.from('daily_checkins').select('*').eq('user_id', userId).order('date', {
        ascending: false
      }));
      const allBadges =
      /* istanbul ignore next */
      (cov_2l223orr2k().s[35]++, await this.getAllBadges());
      const userBadges =
      /* istanbul ignore next */
      (cov_2l223orr2k().s[36]++, await this.getUserBadges(userId));
      const earnedBadgeIds =
      /* istanbul ignore next */
      (cov_2l223orr2k().s[37]++, new Set(userBadges.map((ub, index) => {
        /* istanbul ignore next */
        cov_2l223orr2k().f[6]++;
        cov_2l223orr2k().s[38]++;
        return ub.badge_id;
      })));
      const newBadges =
      /* istanbul ignore next */
      (cov_2l223orr2k().s[39]++, []);
      /* istanbul ignore next */
      cov_2l223orr2k().s[40]++;
      for (const badge of allBadges) {
        /* istanbul ignore next */
        cov_2l223orr2k().s[41]++;
        if (earnedBadgeIds.has(badge.id)) {
          /* istanbul ignore next */
          cov_2l223orr2k().b[6][0]++;
          cov_2l223orr2k().s[42]++;
          continue;
        } else
        /* istanbul ignore next */
        {
          cov_2l223orr2k().b[6][1]++;
        }
        const progress =
        /* istanbul ignore next */
        (cov_2l223orr2k().s[43]++, this.calculateBadgeProgress(badge, userStats,
        /* istanbul ignore next */
        (cov_2l223orr2k().b[7][0]++, userCheckins) ||
        /* istanbul ignore next */
        (cov_2l223orr2k().b[7][1]++, [])));
        /* istanbul ignore next */
        cov_2l223orr2k().s[44]++;
        if (progress >= badge.condition_value) {
          /* istanbul ignore next */
          cov_2l223orr2k().b[8][0]++;
          // Attribuer le badge
          const {
            data: newBadge,
            error
          } =
          /* istanbul ignore next */
          (cov_2l223orr2k().s[45]++, await supabase_1.supabase.from('user_badges').insert([{
            user_id: userId,
            badge_id: badge.id,
            earned_at: new Date().toISOString(),
            progress: progress,
            is_notified: false,
            created_at: new Date().toISOString()
          }]).select(`
              *,
              badge:badges(*)
            `).single());
          /* istanbul ignore next */
          cov_2l223orr2k().s[46]++;
          if (
          /* istanbul ignore next */
          (cov_2l223orr2k().b[10][0]++, !error) &&
          /* istanbul ignore next */
          (cov_2l223orr2k().b[10][1]++, newBadge)) {
            /* istanbul ignore next */
            cov_2l223orr2k().b[9][0]++;
            cov_2l223orr2k().s[47]++;
            newBadges.push(newBadge);
            // Mettre à jour les points d'expérience
            /* istanbul ignore next */
            cov_2l223orr2k().s[48]++;
            await this.updateUserExperience(userId, badge.points_reward);
          } else
          /* istanbul ignore next */
          {
            cov_2l223orr2k().b[9][1]++;
          }
        } else {
          /* istanbul ignore next */
          cov_2l223orr2k().b[8][1]++;
          cov_2l223orr2k().s[49]++;
          // Mettre à jour le progrès
          await this.updateBadgeProgress(userId, badge.id, progress);
        }
      }
      /* istanbul ignore next */
      cov_2l223orr2k().s[50]++;
      return newBadges;
    } catch (catchError) {
      /* istanbul ignore next */
      cov_2l223orr2k().s[51]++;
      // Erreur silencieuse
      console.error('Erreur lors de la vérification des badges:', catchError);
      /* istanbul ignore next */
      cov_2l223orr2k().s[52]++;
      return [];
    }
  }
  /**
   * Calcule le progrès d'un badge
   */
  static calculateBadgeProgress(badge, userStats, userCheckins) {
    /* istanbul ignore next */
    cov_2l223orr2k().f[7]++;
    cov_2l223orr2k().s[53]++;
    switch (badge.condition_type) {
      case 'count':
        /* istanbul ignore next */
        cov_2l223orr2k().b[11][0]++;
        cov_2l223orr2k().s[54]++;
        return this.calculateCountProgress(badge, userStats);
      case 'streak':
        /* istanbul ignore next */
        cov_2l223orr2k().b[11][1]++;
        cov_2l223orr2k().s[55]++;
        return /* istanbul ignore next */(cov_2l223orr2k().b[12][0]++, userStats.current_streak) ||
        /* istanbul ignore next */
        (cov_2l223orr2k().b[12][1]++, 0);
      case 'level':
        /* istanbul ignore next */
        cov_2l223orr2k().b[11][2]++;
        cov_2l223orr2k().s[56]++;
        return /* istanbul ignore next */(cov_2l223orr2k().b[13][0]++, userStats.level) ||
        /* istanbul ignore next */
        (cov_2l223orr2k().b[13][1]++, 0);
      case 'special':
        /* istanbul ignore next */
        cov_2l223orr2k().b[11][3]++;
        cov_2l223orr2k().s[57]++;
        return this.calculateSpecialProgress(badge, userStats, userCheckins);
      default:
        /* istanbul ignore next */
        cov_2l223orr2k().b[11][4]++;
        cov_2l223orr2k().s[58]++;
        return 0;
    }
  }
  /**
   * Calcule le progrès basé sur le nombre
   */
  static calculateCountProgress(badge, userStats) {
    /* istanbul ignore next */
    cov_2l223orr2k().f[8]++;
    cov_2l223orr2k().s[59]++;
    switch (badge.category) {
      case 'workout':
        /* istanbul ignore next */
        cov_2l223orr2k().b[14][0]++;
        cov_2l223orr2k().s[60]++;
        return /* istanbul ignore next */(cov_2l223orr2k().b[15][0]++, userStats.total_workouts) ||
        /* istanbul ignore next */
        (cov_2l223orr2k().b[15][1]++, 0);
      case 'nutrition':
        /* istanbul ignore next */
        cov_2l223orr2k().b[14][1]++;
        cov_2l223orr2k().s[61]++;
        return /* istanbul ignore next */(cov_2l223orr2k().b[16][0]++, userStats.total_nutrition_logs) ||
        /* istanbul ignore next */
        (cov_2l223orr2k().b[16][1]++, 0);
      case 'sleep':
        /* istanbul ignore next */
        cov_2l223orr2k().b[14][2]++;
        cov_2l223orr2k().s[62]++;
        return Math.floor(
        /* istanbul ignore next */
        (cov_2l223orr2k().b[17][0]++, userStats.total_sleep_hours) ||
        /* istanbul ignore next */
        (cov_2l223orr2k().b[17][1]++, 0));
      case 'hydration':
        /* istanbul ignore next */
        cov_2l223orr2k().b[14][3]++;
        cov_2l223orr2k().s[63]++;
        return /* istanbul ignore next */(cov_2l223orr2k().b[18][0]++, userStats.total_hydration_logs) ||
        /* istanbul ignore next */
        (cov_2l223orr2k().b[18][1]++, 0);
      default:
        /* istanbul ignore next */
        cov_2l223orr2k().b[14][4]++;
        cov_2l223orr2k().s[64]++;
        return 0;
    }
  }
  /**
   * Calcule le progrès spécial
   */
  static calculateSpecialProgress(badge, userStats, userCheckins) {
    /* istanbul ignore next */
    cov_2l223orr2k().f[9]++;
    cov_2l223orr2k().s[65]++;
    // Logique spécifique pour chaque badge spécial
    switch (badge.name) {
      case 'Perfectionniste':
        /* istanbul ignore next */
        cov_2l223orr2k().b[19][0]++;
        cov_2l223orr2k().s[66]++;
        // Compter les check-ins parfaits (tous les piliers complétés)
        return userCheckins.filter(checkin => {
          /* istanbul ignore next */
          cov_2l223orr2k().f[10]++;
          cov_2l223orr2k().s[67]++;
          return /* istanbul ignore next */(cov_2l223orr2k().b[20][0]++, checkin.workout_completed) &&
          /* istanbul ignore next */
          (cov_2l223orr2k().b[20][1]++, checkin.nutrition_logged) &&
          /* istanbul ignore next */
          (cov_2l223orr2k().b[20][2]++, checkin.sleep_tracked) &&
          /* istanbul ignore next */
          (cov_2l223orr2k().b[20][3]++, checkin.hydration_logged);
        }).length;
      case 'Lève-tôt':
        /* istanbul ignore next */
        cov_2l223orr2k().b[19][1]++;
        cov_2l223orr2k().s[68]++;
        // Compter les check-ins avec un bon score de sommeil
        return userCheckins.filter(checkin => {
          /* istanbul ignore next */
          cov_2l223orr2k().f[11]++;
          cov_2l223orr2k().s[69]++;
          return /* istanbul ignore next */(cov_2l223orr2k().b[21][0]++, checkin.sleep_tracked) &&
          /* istanbul ignore next */
          (cov_2l223orr2k().b[21][1]++, checkin.energy_level >= 8);
        }).length;
      case 'Warrior':
        /* istanbul ignore next */
        cov_2l223orr2k().b[19][2]++;
        cov_2l223orr2k().s[70]++;
        // Compter les workouts intenses
        return /* istanbul ignore next */(cov_2l223orr2k().b[22][0]++, userStats.total_workouts) ||
        /* istanbul ignore next */
        (cov_2l223orr2k().b[22][1]++, 0);
      default:
        /* istanbul ignore next */
        cov_2l223orr2k().b[19][3]++;
        cov_2l223orr2k().s[71]++;
        return 0;
    }
  }
  /**
   * Met à jour le progrès d'un badge pour un utilisateur
   */
  static async updateBadgeProgress(userId, badgeId, progress) {
    /* istanbul ignore next */
    cov_2l223orr2k().f[12]++;
    cov_2l223orr2k().s[72]++;
    try {
      /* istanbul ignore next */
      cov_2l223orr2k().s[73]++;
      await supabase_1.supabase.from('user_badges').upsert({
        user_id: userId,
        badge_id: badgeId,
        progress: progress,
        is_notified: false,
        created_at: new Date().toISOString()
      });
    } catch (catchError) {
      /* istanbul ignore next */
      cov_2l223orr2k().s[74]++;
      // Erreur silencieuse
      console.error('Erreur lors de la mise à jour du progrès du badge:', catchError);
    }
  }
  /**
   * Met à jour l'expérience d'un utilisateur
   */
  static async updateUserExperience(userId, points) {
    /* istanbul ignore next */
    cov_2l223orr2k().f[13]++;
    cov_2l223orr2k().s[75]++;
    try {
      const {
        data: userStats
      } =
      /* istanbul ignore next */
      (cov_2l223orr2k().s[76]++, await supabase_1.supabase.from('user_stats').select('experience_points, level').eq('user_id', userId).single());
      /* istanbul ignore next */
      cov_2l223orr2k().s[77]++;
      if (!userStats) {
        /* istanbul ignore next */
        cov_2l223orr2k().b[23][0]++;
        cov_2l223orr2k().s[78]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_2l223orr2k().b[23][1]++;
      }
      const newExperience =
      /* istanbul ignore next */
      (cov_2l223orr2k().s[79]++, (
      /* istanbul ignore next */
      (cov_2l223orr2k().b[24][0]++, userStats.experience_points) ||
      /* istanbul ignore next */
      (cov_2l223orr2k().b[24][1]++, 0)) + points);
      const newLevel =
      /* istanbul ignore next */
      (cov_2l223orr2k().s[80]++, Math.floor(newExperience / 1000) + 1);
      /* istanbul ignore next */
      cov_2l223orr2k().s[81]++;
      await supabase_1.supabase.from('user_stats').update({
        experience_points: newExperience,
        level: newLevel,
        updated_at: new Date().toISOString()
      }).eq('user_id', userId);
    } catch (catchError) {
      /* istanbul ignore next */
      cov_2l223orr2k().s[82]++;
      // Erreur silencieuse
      console.error("Erreur lors de la mise à jour de l'expérience:", catchError);
    }
  }
  /**
   * Marque les notifications de badges comme lues
   */
  static async markBadgeNotificationsAsRead(userId, badgeIds) {
    /* istanbul ignore next */
    cov_2l223orr2k().f[14]++;
    cov_2l223orr2k().s[83]++;
    try {
      /* istanbul ignore next */
      cov_2l223orr2k().s[84]++;
      await supabase_1.supabase.from('user_badges').update({
        is_notified: true
      }).eq('user_id', userId).in('badge_id', badgeIds);
    } catch (catchError) {
      /* istanbul ignore next */
      cov_2l223orr2k().s[85]++;
      // Erreur silencieuse
      console.error('Erreur lors de la mise à jour des notifications:', catchError);
    }
  }
  /**
   * Récupère les badges récemment gagnés non notifiés
   */
  static async getUnnotifiedBadges(userId) {
    /* istanbul ignore next */
    cov_2l223orr2k().f[15]++;
    cov_2l223orr2k().s[86]++;
    try {
      const {
        data,
        error
      } =
      /* istanbul ignore next */
      (cov_2l223orr2k().s[87]++, await supabase_1.supabase.from('user_badges').select(`
          *,
          badge:badges(*)
        `).eq('user_id', userId).eq('is_notified', false).order('earned_at', {
        ascending: false
      }));
      /* istanbul ignore next */
      cov_2l223orr2k().s[88]++;
      if (error) {
        /* istanbul ignore next */
        cov_2l223orr2k().b[25][0]++;
        cov_2l223orr2k().s[89]++;
        console.error('Erreur lors de la récupération des badges non notifiés:', error);
        /* istanbul ignore next */
        cov_2l223orr2k().s[90]++;
        return [];
      } else
      /* istanbul ignore next */
      {
        cov_2l223orr2k().b[25][1]++;
      }
      cov_2l223orr2k().s[91]++;
      return /* istanbul ignore next */(cov_2l223orr2k().b[26][0]++, data) ||
      /* istanbul ignore next */
      (cov_2l223orr2k().b[26][1]++, []);
    } catch (catchError) {
      /* istanbul ignore next */
      cov_2l223orr2k().s[92]++;
      // Erreur silencieuse
      console.error('Erreur lors de la récupération des badges non notifiés:', catchError);
      /* istanbul ignore next */
      cov_2l223orr2k().s[93]++;
      return [];
    }
  }
  /**
   * Récupère les badges par catégorie
   */
  static async getBadgesByCategory(category) {
    /* istanbul ignore next */
    cov_2l223orr2k().f[16]++;
    cov_2l223orr2k().s[94]++;
    try {
      const {
        data,
        error
      } =
      /* istanbul ignore next */
      (cov_2l223orr2k().s[95]++, await supabase_1.supabase.from('badges').select('*').eq('category', category).eq('is_active', true).order('condition_value', {
        ascending: true
      }));
      /* istanbul ignore next */
      cov_2l223orr2k().s[96]++;
      if (error) {
        /* istanbul ignore next */
        cov_2l223orr2k().b[27][0]++;
        cov_2l223orr2k().s[97]++;
        console.error('Erreur lors de la récupération des badges par catégorie:', error);
        /* istanbul ignore next */
        cov_2l223orr2k().s[98]++;
        return [];
      } else
      /* istanbul ignore next */
      {
        cov_2l223orr2k().b[27][1]++;
      }
      cov_2l223orr2k().s[99]++;
      return /* istanbul ignore next */(cov_2l223orr2k().b[28][0]++, data) ||
      /* istanbul ignore next */
      (cov_2l223orr2k().b[28][1]++, []);
    } catch (catchError) {
      /* istanbul ignore next */
      cov_2l223orr2k().s[100]++;
      // Erreur silencieuse
      console.error('Erreur lors de la récupération des badges par catégorie:', catchError);
      /* istanbul ignore next */
      cov_2l223orr2k().s[101]++;
      return [];
    }
  }
  /**
   * Récupère les statistiques des badges pour un utilisateur
   */
  static async getBadgeStats(userId) {
    /* istanbul ignore next */
    cov_2l223orr2k().f[17]++;
    cov_2l223orr2k().s[102]++;
    try {
      const [allBadges, userBadges] =
      /* istanbul ignore next */
      (cov_2l223orr2k().s[103]++, await Promise.all([this.getAllBadges(), this.getUserBadges(userId)]));
      const earnedBadges =
      /* istanbul ignore next */
      (cov_2l223orr2k().s[104]++, userBadges.filter(ub => {
        /* istanbul ignore next */
        cov_2l223orr2k().f[18]++;
        cov_2l223orr2k().s[105]++;
        return ub.badge;
      }));
      const totalPoints =
      /* istanbul ignore next */
      (cov_2l223orr2k().s[106]++, earnedBadges.reduce((sum, ub) => {
        /* istanbul ignore next */
        cov_2l223orr2k().f[19]++;
        cov_2l223orr2k().s[107]++;
        return sum + (
        /* istanbul ignore next */
        (cov_2l223orr2k().b[29][0]++, ub.badge?.points_reward) ||
        /* istanbul ignore next */
        (cov_2l223orr2k().b[29][1]++, 0));
      }, 0));
      const rarityCount =
      /* istanbul ignore next */
      (cov_2l223orr2k().s[108]++, earnedBadges.reduce((acc, ub) => {
        /* istanbul ignore next */
        cov_2l223orr2k().f[20]++;
        const rarity =
        /* istanbul ignore next */
        (cov_2l223orr2k().s[109]++,
        /* istanbul ignore next */
        (cov_2l223orr2k().b[30][0]++, ub.badge?.rarity) ||
        /* istanbul ignore next */
        (cov_2l223orr2k().b[30][1]++, 'common'));
        /* istanbul ignore next */
        cov_2l223orr2k().s[110]++;
        acc[rarity] = (
        /* istanbul ignore next */
        (cov_2l223orr2k().b[31][0]++, acc[rarity]) ||
        /* istanbul ignore next */
        (cov_2l223orr2k().b[31][1]++, 0)) + 1;
        /* istanbul ignore next */
        cov_2l223orr2k().s[111]++;
        return acc;
      }, {}));
      /* istanbul ignore next */
      cov_2l223orr2k().s[112]++;
      return {
        totalBadges: allBadges.length,
        earnedBadges: earnedBadges.length,
        commonBadges:
        /* istanbul ignore next */
        (cov_2l223orr2k().b[32][0]++, rarityCount.common) ||
        /* istanbul ignore next */
        (cov_2l223orr2k().b[32][1]++, 0),
        rareBadges:
        /* istanbul ignore next */
        (cov_2l223orr2k().b[33][0]++, rarityCount.rare) ||
        /* istanbul ignore next */
        (cov_2l223orr2k().b[33][1]++, 0),
        epicBadges:
        /* istanbul ignore next */
        (cov_2l223orr2k().b[34][0]++, rarityCount.epic) ||
        /* istanbul ignore next */
        (cov_2l223orr2k().b[34][1]++, 0),
        legendaryBadges:
        /* istanbul ignore next */
        (cov_2l223orr2k().b[35][0]++, rarityCount.legendary) ||
        /* istanbul ignore next */
        (cov_2l223orr2k().b[35][1]++, 0),
        totalPoints
      };
    } catch (catchError) {
      /* istanbul ignore next */
      cov_2l223orr2k().s[113]++;
      // Erreur silencieuse
      console.error('Erreur lors de la récupération des statistiques des badges:', catchError);
      /* istanbul ignore next */
      cov_2l223orr2k().s[114]++;
      return {
        totalBadges: 0,
        earnedBadges: 0,
        commonBadges: 0,
        rareBadges: 0,
        epicBadges: 0,
        legendaryBadges: 0,
        totalPoints: 0
      };
    }
  }
}
/* istanbul ignore next */
cov_2l223orr2k().s[115]++;
exports.BadgeService = BadgeService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,