{"version":3,"names":["supabase_1","cov_2l223orr2k","s","require","BadgeService","getAllBadges","f","data","error","supabase","from","select","eq","order","ascending","b","console","catchError","getUserBadges","userId","getBadgeProgress","allBadges","userBadges","Promise","all","userBadgeMap","Map","map","ub","index","badge_id","progress","badge","userBadge","get","id","isEarned","earnedAt","earned_at","checkAndAwardBadges","userStats","single","userCheckins","earnedBadgeIds","Set","newBadges","has","calculateBadgeProgress","condition_value","newBadge","insert","user_id","Date","toISOString","is_notified","created_at","push","updateUserExperience","points_reward","updateBadgeProgress","condition_type","calculateCountProgress","current_streak","level","calculateSpecialProgress","category","total_workouts","total_nutrition_logs","Math","floor","total_sleep_hours","total_hydration_logs","name","filter","checkin","workout_completed","nutrition_logged","sleep_tracked","hydration_logged","length","energy_level","badgeId","upsert","points","newExperience","experience_points","newLevel","update","updated_at","markBadgeNotificationsAsRead","badgeIds","in","getUnnotifiedBadges","getBadgesByCategory","getBadgeStats","earnedBadges","totalPoints","reduce","sum","rarityCount","acc","rarity","totalBadges","commonBadges","common","rareBadges","rare","epicBadges","epic","legendaryBadges","legendary","exports"],"sources":["/workspaces/MyFitHero/src/lib/services/badgeService.ts"],"sourcesContent":["// client/src/services/badgeService.ts\nimport { supabase } from '@/lib/supabase';\n\nexport interface Badge {\n  id: string;\n  name: string;\n  description: string;\n  icon: string;\n  category: 'workout' | 'nutrition' | 'sleep' | 'hydration' | 'social' | 'special';\n  condition_type: 'count' | 'streak' | 'level' | 'special';\n  condition_value: number;\n  rarity: 'common' | 'rare' | 'epic' | 'legendary';\n  points_reward: number;\n  is_active: boolean;\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface UserBadge {\n  id: string;\n  user_id: string;\n  badge_id: string;\n  earned_at: string;\n  progress: number;\n  is_notified: boolean;\n  created_at: string;\n  badge?: Badge;\n}\n\nexport interface BadgeProgress {\n  badge: Badge;\n  progress: number;\n  isEarned: boolean;\n  earnedAt?: string;\n}\n\nexport class BadgeService {\n  /**\n   * Récupère tous les badges disponibles\n   */\n  static async getAllBadges(): Promise<Badge[]> {\n    try {\n      const { data, error }: any = await supabase\n        .from('badges')\n        .select('*')\n        .eq('is_active', true)\n        .order('category', { ascending: true });\n\n      if (error) {\n        console.error('Erreur lors de la récupération des badges:', error);\n        return [];\n      }\n\n      return data || [];\n    } catch (catchError) {\n      // Erreur silencieuse\n      console.error('Erreur lors de la récupération des badges:', catchError);\n      return [];\n    }\n  }\n\n  /**\n   * Récupère les badges d'un utilisateur\n   */\n  static async getUserBadges(userId: string): Promise<UserBadge[]> {\n    try {\n      const { data, error }: any = await supabase\n        .from('user_badges')\n        .select(\n          `\n          *,\n          badge:badges(*)\n        `\n        )\n        .eq('user_id', userId)\n        .order('earned_at', { ascending: false });\n\n      if (error) {\n        console.error('Erreur lors de la récupération des badges utilisateur:', error);\n        return [];\n      }\n\n      return data || [];\n    } catch (catchError) {\n      // Erreur silencieuse\n      console.error('Erreur lors de la récupération des badges utilisateur:', catchError);\n      return [];\n    }\n  }\n\n  /**\n   * Récupère les progrès des badges pour un utilisateur\n   */\n  static async getBadgeProgress(userId: string): Promise<BadgeProgress[]> {\n    try {\n      const [allBadges, userBadges] = await Promise.all([\n        this.getAllBadges(),\n        this.getUserBadges(userId),\n      ]);\n\n      const userBadgeMap = new Map(userBadges.map((ub, index) => [ub.badge_id, ub]));\n\n      const progress: BadgeProgress[] = allBadges.map((badge, index) => {\n        const userBadge = userBadgeMap.get(badge.id);\n\n        return {\n          badge,\n          progress: userBadge?.progress || 0,\n          isEarned: !!userBadge,\n          earnedAt: userBadge?.earned_at,\n        };\n      });\n\n      return progress;\n    } catch (catchError) {\n      // Erreur silencieuse\n      console.error('Erreur lors de la récupération des progrès des badges:', catchError);\n      return [];\n    }\n  }\n\n  /**\n   * Vérifie et attribue les badges mérités\n   */\n  static async checkAndAwardBadges(userId: string): Promise<UserBadge[]> {\n    try {\n      const { data: userStats } = await supabase\n        .from('user_stats')\n        .select('*')\n        .eq('user_id', userId)\n        .single();\n\n      if (!userStats) {\n        console.error('Statistiques utilisateur non trouvées');\n        return [];\n      }\n\n      const { data: userCheckins } = await supabase\n        .from('daily_checkins')\n        .select('*')\n        .eq('user_id', userId)\n        .order('date', { ascending: false });\n\n      const allBadges = await this.getAllBadges();\n      const userBadges = await this.getUserBadges(userId);\n      const earnedBadgeIds = new Set(userBadges.map((ub, index) => ub.badge_id));\n\n      const newBadges: UserBadge[] = [];\n\n      for (const badge of allBadges) {\n        if (earnedBadgeIds.has(badge.id)) continue;\n\n        const progress = this.calculateBadgeProgress(badge, userStats, userCheckins || []);\n\n        if (progress >= badge.condition_value) {\n          // Attribuer le badge\n          const { data: newBadge, error } = await supabase\n            .from('user_badges')\n            .insert([\n              {\n                user_id: userId,\n                badge_id: badge.id,\n                earned_at: new Date().toISOString(),\n                progress: progress,\n                is_notified: false,\n                created_at: new Date().toISOString(),\n              },\n            ])\n            .select(\n              `\n              *,\n              badge:badges(*)\n            `\n            )\n            .single();\n\n          if (!error && newBadge) {\n            newBadges.push(newBadge);\n\n            // Mettre à jour les points d'expérience\n            await this.updateUserExperience(userId, badge.points_reward);\n          }\n        } else {\n          // Mettre à jour le progrès\n          await this.updateBadgeProgress(userId, badge.id, progress);\n        }\n      }\n\n      return newBadges;\n    } catch (catchError) {\n      // Erreur silencieuse\n      console.error('Erreur lors de la vérification des badges:', catchError);\n      return [];\n    }\n  }\n\n  /**\n   * Calcule le progrès d'un badge\n   */\n  private static calculateBadgeProgress(badge: Badge, userStats: any, userCheckins: unknown[]): number {\n    switch (badge.condition_type) {\n      case 'count':\n        return this.calculateCountProgress(badge, userStats);\n      case 'streak':\n        return userStats.current_streak || 0;\n      case 'level':\n        return userStats.level || 0;\n      case 'special':\n        return this.calculateSpecialProgress(badge, userStats, userCheckins);\n      default:\n        return 0;\n    }\n  }\n\n  /**\n   * Calcule le progrès basé sur le nombre\n   */\n  private static calculateCountProgress(badge: Badge, userStats: any): number {\n    switch (badge.category) {\n      case 'workout':\n        return userStats.total_workouts || 0;\n      case 'nutrition':\n        return userStats.total_nutrition_logs || 0;\n      case 'sleep':\n        return Math.floor(userStats.total_sleep_hours || 0);\n      case 'hydration':\n        return userStats.total_hydration_logs || 0;\n      default:\n        return 0;\n    }\n  }\n\n  /**\n   * Calcule le progrès spécial\n   */\n  private static calculateSpecialProgress(\n    badge: Badge,\n    userStats: any,\n    userCheckins: any[]\n  ): number {\n    // Logique spécifique pour chaque badge spécial\n    switch (badge.name) {\n      case 'Perfectionniste':\n        // Compter les check-ins parfaits (tous les piliers complétés)\n        return userCheckins.filter(\n          (checkin: any) =>\n            checkin.workout_completed &&\n            checkin.nutrition_logged &&\n            checkin.sleep_tracked &&\n            checkin.hydration_logged\n        ).length;\n      case 'Lève-tôt':\n        // Compter les check-ins avec un bon score de sommeil\n        return userCheckins.filter((checkin: any) => checkin.sleep_tracked && checkin.energy_level >= 8)\n          .length;\n      case 'Warrior':\n        // Compter les workouts intenses\n        return userStats.total_workouts || 0;\n      default:\n        return 0;\n    }\n  }\n\n  /**\n   * Met à jour le progrès d'un badge pour un utilisateur\n   */\n  private static async updateBadgeProgress(\n    userId: string,\n    badgeId: string,\n    progress: number\n  ): Promise<void> {\n    try {\n      await supabase.from('user_badges').upsert({\n        user_id: userId,\n        badge_id: badgeId,\n        progress: progress,\n        is_notified: false,\n        created_at: new Date().toISOString(),\n      });\n    } catch (catchError) {\n      // Erreur silencieuse\n      console.error('Erreur lors de la mise à jour du progrès du badge:', catchError);\n    }\n  }\n\n  /**\n   * Met à jour l'expérience d'un utilisateur\n   */\n  private static async updateUserExperience(userId: string, points: number): Promise<void> {\n    try {\n      const { data: userStats } = await supabase\n        .from('user_stats')\n        .select('experience_points, level')\n        .eq('user_id', userId)\n        .single();\n\n      if (!userStats) return;\n\n      const newExperience = (userStats.experience_points || 0) + points;\n      const newLevel = Math.floor(newExperience / 1000) + 1;\n\n      await supabase\n        .from('user_stats')\n        .update({\n          experience_points: newExperience,\n          level: newLevel,\n          updated_at: new Date().toISOString(),\n        })\n        .eq('user_id', userId);\n    } catch (catchError) {\n      // Erreur silencieuse\n      console.error(\"Erreur lors de la mise à jour de l'expérience:\", catchError);\n    }\n  }\n\n  /**\n   * Marque les notifications de badges comme lues\n   */\n  static async markBadgeNotificationsAsRead(userId: string, badgeIds: string[]): Promise<void> {\n    try {\n      await supabase\n        .from('user_badges')\n        .update({ is_notified: true })\n        .eq('user_id', userId)\n        .in('badge_id', badgeIds);\n    } catch (catchError) {\n      // Erreur silencieuse\n      console.error('Erreur lors de la mise à jour des notifications:', catchError);\n    }\n  }\n\n  /**\n   * Récupère les badges récemment gagnés non notifiés\n   */\n  static async getUnnotifiedBadges(userId: string): Promise<UserBadge[]> {\n    try {\n      const { data, error }: any = await supabase\n        .from('user_badges')\n        .select(\n          `\n          *,\n          badge:badges(*)\n        `\n        )\n        .eq('user_id', userId)\n        .eq('is_notified', false)\n        .order('earned_at', { ascending: false });\n\n      if (error) {\n        console.error('Erreur lors de la récupération des badges non notifiés:', error);\n        return [];\n      }\n\n      return data || [];\n    } catch (catchError) {\n      // Erreur silencieuse\n      console.error('Erreur lors de la récupération des badges non notifiés:', catchError);\n      return [];\n    }\n  }\n\n  /**\n   * Récupère les badges par catégorie\n   */\n  static async getBadgesByCategory(category: string): Promise<Badge[]> {\n    try {\n      const { data, error }: any = await supabase\n        .from('badges')\n        .select('*')\n        .eq('category', category)\n        .eq('is_active', true)\n        .order('condition_value', { ascending: true });\n\n      if (error) {\n        console.error('Erreur lors de la récupération des badges par catégorie:', error);\n        return [];\n      }\n\n      return data || [];\n    } catch (catchError) {\n      // Erreur silencieuse\n      console.error('Erreur lors de la récupération des badges par catégorie:', catchError);\n      return [];\n    }\n  }\n\n  /**\n   * Récupère les statistiques des badges pour un utilisateur\n   */\n  static async getBadgeStats(userId: string): Promise<{\n    totalBadges: number;\n    earnedBadges: number;\n    commonBadges: number;\n    rareBadges: number;\n    epicBadges: number;\n    legendaryBadges: number;\n    totalPoints: number;\n  }> {\n    try {\n      const [allBadges, userBadges] = await Promise.all([\n        this.getAllBadges(),\n        this.getUserBadges(userId),\n      ]);\n\n      const earnedBadges = userBadges.filter(ub => ub.badge);\n      const totalPoints = earnedBadges.reduce((sum, ub) => sum + (ub.badge?.points_reward || 0), 0);\n\n      const rarityCount = earnedBadges.reduce(\n        (acc, ub) => {\n          const rarity = ub.badge?.rarity || 'common';\n          acc[rarity] = (acc[rarity] || 0) + 1;\n          return acc;\n        },\n        {} as Record<string, number>\n      );\n\n      return {\n        totalBadges: allBadges.length,\n        earnedBadges: earnedBadges.length,\n        commonBadges: rarityCount.common || 0,\n        rareBadges: rarityCount.rare || 0,\n        epicBadges: rarityCount.epic || 0,\n        legendaryBadges: rarityCount.legendary || 0,\n        totalPoints,\n      };\n    } catch (catchError) {\n      // Erreur silencieuse\n      console.error('Erreur lors de la récupération des statistiques des badges:', catchError);\n      return {\n        totalBadges: 0,\n        earnedBadges: 0,\n        commonBadges: 0,\n        rareBadges: 0,\n        epicBadges: 0,\n        legendaryBadges: 0,\n        totalPoints: 0,\n      };\n    }\n  }\n}\n"],"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","ignoreList":[]}