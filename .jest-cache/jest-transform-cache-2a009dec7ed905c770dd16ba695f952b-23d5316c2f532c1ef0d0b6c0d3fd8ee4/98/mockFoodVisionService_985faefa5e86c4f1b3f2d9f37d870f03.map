{"version":3,"names":["cov_11z9tiu507","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","MOCK_FOOD_DATABASE","keywords","nutrition","calories","protein","carbs","fat","fiber","sugar","sodium","portion_size","weight_grams","source","verified","confidence","MockFoodVisionService","simulateAnalysis","imageBase64","delay","Math","random","randomFood","floor","length","confidenceVariation","adjustedConfidence","max","min","foodName","details","estimated_portion","preparation_method","getRandomPreparation","additional_items","getRandomAdditionalItems","cuisine_type","processing_time_ms","simulateUSDASearch","bestMatch","findBestMatch","Error","simulateError","errorType","simulateConfidenceScenario","scenario","result","getDemoFoods","map","food","index","generateMockHistory","count","history","now","Date","i","scanDate","getTime","push","analysis_id","scanned_at","toISOString","ms","Promise","resolve","setTimeout","searchTerm","search","toLowerCase","find","some","keyword","includes","preparations","items","shuffled","sort","slice","exports","useMockFoodScanner","simulateScan","error","default"],"sources":["/workspaces/MyFitHero/src/features/nutrition/services/mockFoodVisionService.ts"],"sourcesContent":["/**\n * Service de simulation pour tester le Food Scanner en développement\n * Simule les réponses des APIs OpenAI Vision et USDA\n */\n\nimport { FoodAnalysisResponse, NutritionDataResponse } from './foodVisionService';\n\n// Base de données de simulation d'aliments populaires américains\nconst MOCK_FOOD_DATABASE = [\n  {\n    name: 'Grilled Chicken Breast',\n    keywords: ['chicken', 'breast', 'grilled', 'poultry'],\n    nutrition: {\n      calories: 165,\n      protein: 31,\n      carbs: 0,\n      fat: 3.6,\n      fiber: 0,\n      sugar: 0,\n      sodium: 74,\n      portion_size: '100g',\n      weight_grams: 100,\n      source: 'USDA Simulation',\n      verified: true\n    },\n    confidence: 0.95\n  },\n  {\n    name: 'Avocado Toast',\n    keywords: ['avocado', 'toast', 'bread', 'green'],\n    nutrition: {\n      calories: 234,\n      protein: 6,\n      carbs: 16,\n      fat: 18,\n      fiber: 7,\n      sugar: 2,\n      sodium: 156,\n      portion_size: '1 slice',\n      weight_grams: 85,\n      source: 'USDA Simulation',\n      verified: true\n    },\n    confidence: 0.89\n  },\n  {\n    name: 'Greek Yogurt Bowl',\n    keywords: ['yogurt', 'greek', 'bowl', 'white', 'dairy'],\n    nutrition: {\n      calories: 150,\n      protein: 20,\n      carbs: 8,\n      fat: 4,\n      fiber: 0,\n      sugar: 6,\n      sodium: 65,\n      portion_size: '1 cup',\n      weight_grams: 170,\n      source: 'USDA Simulation',\n      verified: true\n    },\n    confidence: 0.92\n  },\n  {\n    name: 'Caesar Salad',\n    keywords: ['salad', 'caesar', 'lettuce', 'green', 'dressing'],\n    nutrition: {\n      calories: 187,\n      protein: 7,\n      carbs: 8,\n      fat: 15,\n      fiber: 3,\n      sugar: 3,\n      sodium: 470,\n      portion_size: '1 serving',\n      weight_grams: 120,\n      source: 'USDA Simulation',\n      verified: true\n    },\n    confidence: 0.85\n  },\n  {\n    name: 'Hamburger',\n    keywords: ['burger', 'hamburger', 'beef', 'bun', 'meat'],\n    nutrition: {\n      calories: 540,\n      protein: 25,\n      carbs: 40,\n      fat: 31,\n      fiber: 3,\n      sugar: 4,\n      sodium: 1040,\n      portion_size: '1 burger',\n      weight_grams: 150,\n      source: 'USDA Simulation',\n      verified: true\n    },\n    confidence: 0.93\n  },\n  {\n    name: 'Banana',\n    keywords: ['banana', 'fruit', 'yellow', 'curved'],\n    nutrition: {\n      calories: 89,\n      protein: 1.1,\n      carbs: 23,\n      fat: 0.3,\n      fiber: 2.6,\n      sugar: 12,\n      sodium: 1,\n      portion_size: '1 medium',\n      weight_grams: 100,\n      source: 'USDA Simulation',\n      verified: true\n    },\n    confidence: 0.97\n  },\n  {\n    name: 'Salmon Fillet',\n    keywords: ['salmon', 'fish', 'pink', 'fillet', 'seafood'],\n    nutrition: {\n      calories: 208,\n      protein: 22,\n      carbs: 0,\n      fat: 12,\n      fiber: 0,\n      sugar: 0,\n      sodium: 59,\n      portion_size: '100g',\n      weight_grams: 100,\n      source: 'USDA Simulation',\n      verified: true\n    },\n    confidence: 0.91\n  },\n  {\n    name: 'Pizza Slice',\n    keywords: ['pizza', 'slice', 'cheese', 'tomato', 'dough'],\n    nutrition: {\n      calories: 285,\n      protein: 12,\n      carbs: 36,\n      fat: 10,\n      fiber: 2,\n      sugar: 4,\n      sodium: 640,\n      portion_size: '1 slice',\n      weight_grams: 107,\n      source: 'USDA Simulation',\n      verified: true\n    },\n    confidence: 0.88\n  },\n  {\n    name: 'Apple',\n    keywords: ['apple', 'fruit', 'red', 'round'],\n    nutrition: {\n      calories: 52,\n      protein: 0.3,\n      carbs: 14,\n      fat: 0.2,\n      fiber: 2.4,\n      sugar: 10,\n      sodium: 1,\n      portion_size: '1 medium',\n      weight_grams: 100,\n      source: 'USDA Simulation',\n      verified: true\n    },\n    confidence: 0.96\n  },\n  {\n    name: 'Protein Smoothie',\n    keywords: ['smoothie', 'protein', 'drink', 'shake', 'liquid'],\n    nutrition: {\n      calories: 320,\n      protein: 25,\n      carbs: 35,\n      fat: 8,\n      fiber: 4,\n      sugar: 28,\n      sodium: 180,\n      portion_size: '1 cup',\n      weight_grams: 240,\n      source: 'USDA Simulation',\n      verified: true\n    },\n    confidence: 0.82\n  }\n];\n\n/**\n * Service de simulation pour le développement et les tests\n */\nexport class MockFoodVisionService {\n  /**\n   * Simuler l'analyse d'image avec IA\n   */\n  static async simulateAnalysis(imageBase64?: string): Promise<FoodAnalysisResponse & NutritionDataResponse> {\n    // Simuler un délai de traitement réaliste\n    await this.delay(1500 + Math.random() * 1000);\n\n    // Sélectionner un aliment aléatoire ou basé sur l'image (simulation)\n    const randomFood = MOCK_FOOD_DATABASE[Math.floor(Math.random() * MOCK_FOOD_DATABASE.length)];\n    \n    // Ajouter une légère variation dans la confiance\n    const confidenceVariation = (Math.random() - 0.5) * 0.1;\n    const adjustedConfidence = Math.max(0.6, Math.min(1.0, randomFood.confidence + confidenceVariation));\n\n    return {\n      foodName: randomFood.name,\n      confidence: adjustedConfidence,\n      details: {\n        estimated_portion: randomFood.nutrition.portion_size,\n        preparation_method: this.getRandomPreparation(),\n        additional_items: this.getRandomAdditionalItems(),\n        cuisine_type: 'American'\n      },\n      processing_time_ms: 1200 + Math.random() * 800,\n      ...randomFood.nutrition\n    };\n  }\n\n  /**\n   * Simuler une recherche USDA\n   */\n  static async simulateUSDASearch(foodName: string): Promise<NutritionDataResponse> {\n    await this.delay(800 + Math.random() * 400);\n\n    // Trouver la meilleure correspondance\n    const bestMatch = this.findBestMatch(foodName);\n    \n    if (!bestMatch) {\n      throw new Error(`Aucune donnée nutritionnelle trouvée pour: ${foodName}`);\n    }\n\n    return bestMatch.nutrition;\n  }\n\n  /**\n   * Simuler différents scénarios d'erreur\n   */\n  static async simulateError(errorType: 'network' | 'analysis' | 'not_found' = 'analysis'): Promise<never> {\n    await this.delay(500);\n\n    switch (errorType) {\n      case 'network':\n        throw new Error('Erreur réseau - Impossible de contacter les serveurs IA');\n      case 'analysis':\n        throw new Error('Impossible d\\'identifier l\\'aliment dans cette image');\n      case 'not_found':\n        throw new Error('Aucune donnée nutritionnelle disponible pour cet aliment');\n      default:\n        throw new Error('Erreur inconnue lors du scan');\n    }\n  }\n\n  /**\n   * Simuler un scan avec différents niveaux de confiance\n   */\n  static async simulateConfidenceScenario(scenario: 'high' | 'medium' | 'low'): Promise<FoodAnalysisResponse & NutritionDataResponse> {\n    const result = await this.simulateAnalysis();\n    \n    switch (scenario) {\n      case 'high':\n        result.confidence = 0.90 + Math.random() * 0.1;\n        break;\n      case 'medium':\n        result.confidence = 0.70 + Math.random() * 0.2;\n        break;\n      case 'low':\n        result.confidence = 0.50 + Math.random() * 0.2;\n        break;\n    }\n\n    return result;\n  }\n\n  /**\n   * Obtenir des aliments de démonstration\n   */\n  static getDemoFoods() {\n    return MOCK_FOOD_DATABASE.map((food, index) => ({\n      name: food.name,\n      ...food.nutrition,\n      confidence: food.confidence\n    }));\n  }\n\n  /**\n   * Simuler l'historique des scans\n   */\n  static generateMockHistory(count: number = 5) {\n    const history = [];\n    const now = new Date();\n\n    for (let i = 0; i < count; i++) {\n      const food = MOCK_FOOD_DATABASE[Math.floor(Math.random() * MOCK_FOOD_DATABASE.length)];\n      const scanDate = new Date(now.getTime() - (i * 24 * 60 * 60 * 1000)); // Échelonner sur plusieurs jours\n\n      history.push({\n        analysis_id: `mock_${Date.now()}_${i}`,\n        name: food.name,\n        ...food.nutrition,\n        confidence: food.confidence,\n        scanned_at: scanDate.toISOString()\n      });\n    }\n\n    return history;\n  }\n\n  // Méthodes utilitaires privées\n  private static delay(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  private static findBestMatch(searchTerm: string) {\n    const search = searchTerm.toLowerCase();\n    \n    // Correspondance exacte\n    let bestMatch = MOCK_FOOD_DATABASE.find(food => \n      food.name.toLowerCase() === search\n    );\n\n    if (bestMatch) return bestMatch;\n\n    // Correspondance par mots-clés\n    bestMatch = MOCK_FOOD_DATABASE.find(food =>\n      food.keywords.some(keyword => search.includes(keyword) || keyword.includes(search))\n    );\n\n    if (bestMatch) return bestMatch;\n\n    // Correspondance partielle sur le nom\n    bestMatch = MOCK_FOOD_DATABASE.find(food =>\n      food.name.toLowerCase().includes(search) || search.includes(food.name.toLowerCase())\n    );\n\n    return bestMatch || MOCK_FOOD_DATABASE[0]; // Fallback\n  }\n\n  private static getRandomPreparation(): string {\n    const preparations = ['grilled', 'baked', 'fried', 'steamed', 'raw', 'boiled', 'roasted'];\n    return preparations[Math.floor(Math.random() * preparations.length)];\n  }\n\n  private static getRandomAdditionalItems(): string[] {\n    const items = ['herbs', 'spices', 'sauce', 'seasoning', 'garnish'];\n    const count = Math.floor(Math.random() * 3);\n    const shuffled = items.sort(() => 0.5 - Math.random());\n    return shuffled.slice(0, count);\n  }\n}\n\n/**\n * Hook pour utiliser le service de simulation\n */\nexport const useMockFoodScanner = () => {\n  const simulateScan = async (scenario?: 'success' | 'error' | 'low_confidence') => {\n    try {\n      switch (scenario) {\n        case 'error':\n          return await MockFoodVisionService.simulateError();\n        case 'low_confidence':\n          return await MockFoodVisionService.simulateConfidenceScenario('low');\n        default:\n          return await MockFoodVisionService.simulateAnalysis();\n      }\n    } catch (error: any) {\n      throw error;\n    }\n  };\n\n  return {\n    simulateScan,\n    getDemoFoods: MockFoodVisionService.getDemoFoods,\n    generateMockHistory: MockFoodVisionService.generateMockHistory\n  };\n};\n\nexport default MockFoodVisionService;"],"mappings":"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C,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAA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","ignoreList":[]}