85538ff93ff574c83ea96e58c3d70204
"use strict";

/* istanbul ignore next */
function cov_1bpztih51v() {
  var path = "/workspaces/MyFitHero/src/lib/services/scaleService.ts";
  var hash = "bafca1b66c5fce600a2b06d0abd7c5e2916bfe38";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/MyFitHero/src/lib/services/scaleService.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 30
        }
      },
      "2": {
        start: {
          line: 7,
          column: 8
        },
        end: {
          line: 27,
          column: 9
        }
      },
      "3": {
        start: {
          line: 8,
          column: 12
        },
        end: {
          line: 10,
          column: 13
        }
      },
      "4": {
        start: {
          line: 9,
          column: 16
        },
        end: {
          line: 9,
          column: 76
        }
      },
      "5": {
        start: {
          line: 11,
          column: 27
        },
        end: {
          line: 19,
          column: 14
        }
      },
      "6": {
        start: {
          line: 20,
          column: 12
        },
        end: {
          line: 20,
          column: 41
        }
      },
      "7": {
        start: {
          line: 21,
          column: 12
        },
        end: {
          line: 21,
          column: 26
        }
      },
      "8": {
        start: {
          line: 25,
          column: 12
        },
        end: {
          line: 25,
          column: 64
        }
      },
      "9": {
        start: {
          line: 26,
          column: 12
        },
        end: {
          line: 26,
          column: 24
        }
      },
      "10": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 52,
          column: 9
        }
      },
      "11": {
        start: {
          line: 34,
          column: 27
        },
        end: {
          line: 34,
          column: 55
        }
      },
      "12": {
        start: {
          line: 35,
          column: 12
        },
        end: {
          line: 36,
          column: 28
        }
      },
      "13": {
        start: {
          line: 36,
          column: 16
        },
        end: {
          line: 36,
          column: 28
        }
      },
      "14": {
        start: {
          line: 38,
          column: 28
        },
        end: {
          line: 38,
          column: 66
        }
      },
      "15": {
        start: {
          line: 39,
          column: 35
        },
        end: {
          line: 39,
          column: 74
        }
      },
      "16": {
        start: {
          line: 40,
          column: 26
        },
        end: {
          line: 40,
          column: 58
        }
      },
      "17": {
        start: {
          line: 41,
          column: 27
        },
        end: {
          line: 41,
          column: 52
        }
      },
      "18": {
        start: {
          line: 42,
          column: 12
        },
        end: {
          line: 46,
          column: 14
        }
      },
      "19": {
        start: {
          line: 50,
          column: 12
        },
        end: {
          line: 50,
          column: 60
        }
      },
      "20": {
        start: {
          line: 51,
          column: 12
        },
        end: {
          line: 51,
          column: 24
        }
      },
      "21": {
        start: {
          line: 56,
          column: 8
        },
        end: {
          line: 82,
          column: 9
        }
      },
      "22": {
        start: {
          line: 57,
          column: 25
        },
        end: {
          line: 57,
          column: 27
        }
      },
      "23": {
        start: {
          line: 58,
          column: 26
        },
        end: {
          line: 58,
          column: 28
        }
      },
      "24": {
        start: {
          line: 59,
          column: 12
        },
        end: {
          line: 72,
          column: 13
        }
      },
      "25": {
        start: {
          line: 61,
          column: 20
        },
        end: {
          line: 61,
          column: 69
        }
      },
      "26": {
        start: {
          line: 62,
          column: 20
        },
        end: {
          line: 62,
          column: 73
        }
      },
      "27": {
        start: {
          line: 63,
          column: 20
        },
        end: {
          line: 63,
          column: 26
        }
      },
      "28": {
        start: {
          line: 65,
          column: 20
        },
        end: {
          line: 65,
          column: 67
        }
      },
      "29": {
        start: {
          line: 66,
          column: 20
        },
        end: {
          line: 66,
          column: 73
        }
      },
      "30": {
        start: {
          line: 67,
          column: 20
        },
        end: {
          line: 67,
          column: 26
        }
      },
      "31": {
        start: {
          line: 69,
          column: 20
        },
        end: {
          line: 69,
          column: 98
        }
      },
      "32": {
        start: {
          line: 70,
          column: 20
        },
        end: {
          line: 70,
          column: 73
        }
      },
      "33": {
        start: {
          line: 71,
          column: 20
        },
        end: {
          line: 71,
          column: 26
        }
      },
      "34": {
        start: {
          line: 73,
          column: 29
        },
        end: {
          line: 73,
          column: 61
        }
      },
      "35": {
        start: {
          line: 74,
          column: 25
        },
        end: {
          line: 74,
          column: 46
        }
      },
      "36": {
        start: {
          line: 76,
          column: 12
        },
        end: {
          line: 76,
          column: 55
        }
      },
      "37": {
        start: {
          line: 80,
          column: 12
        },
        end: {
          line: 80,
          column: 55
        }
      },
      "38": {
        start: {
          line: 81,
          column: 12
        },
        end: {
          line: 81,
          column: 22
        }
      },
      "39": {
        start: {
          line: 87,
          column: 8
        },
        end: {
          line: 87,
          column: 18
        }
      },
      "40": {
        start: {
          line: 91,
          column: 8
        },
        end: {
          line: 102,
          column: 9
        }
      },
      "41": {
        start: {
          line: 93,
          column: 12
        },
        end: {
          line: 97,
          column: 15
        }
      },
      "42": {
        start: {
          line: 101,
          column: 12
        },
        end: {
          line: 101,
          column: 55
        }
      },
      "43": {
        start: {
          line: 105,
          column: 0
        },
        end: {
          line: 105,
          column: 36
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 6,
            column: 4
          },
          end: {
            line: 6,
            column: 5
          }
        },
        loc: {
          start: {
            line: 6,
            column: 41
          },
          end: {
            line: 28,
            column: 5
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 30,
            column: 4
          },
          end: {
            line: 30,
            column: 5
          }
        },
        loc: {
          start: {
            line: 30,
            column: 39
          },
          end: {
            line: 53,
            column: 5
          }
        },
        line: 30
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 55,
            column: 4
          },
          end: {
            line: 55,
            column: 5
          }
        },
        loc: {
          start: {
            line: 55,
            column: 57
          },
          end: {
            line: 83,
            column: 5
          }
        },
        line: 55
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 84,
            column: 4
          },
          end: {
            line: 84,
            column: 5
          }
        },
        loc: {
          start: {
            line: 84,
            column: 42
          },
          end: {
            line: 88,
            column: 5
          }
        },
        line: 84
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 90,
            column: 4
          },
          end: {
            line: 90,
            column: 5
          }
        },
        loc: {
          start: {
            line: 90,
            column: 43
          },
          end: {
            line: 103,
            column: 5
          }
        },
        line: 90
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 8,
            column: 12
          },
          end: {
            line: 10,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 8,
            column: 12
          },
          end: {
            line: 10,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 8
      },
      "1": {
        loc: {
          start: {
            line: 35,
            column: 12
          },
          end: {
            line: 36,
            column: 28
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 35,
            column: 12
          },
          end: {
            line: 36,
            column: 28
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 35
      },
      "2": {
        loc: {
          start: {
            line: 59,
            column: 12
          },
          end: {
            line: 72,
            column: 13
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 60,
            column: 16
          },
          end: {
            line: 63,
            column: 26
          }
        }, {
          start: {
            line: 64,
            column: 16
          },
          end: {
            line: 67,
            column: 26
          }
        }, {
          start: {
            line: 68,
            column: 16
          },
          end: {
            line: 71,
            column: 26
          }
        }],
        line: 59
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0, 0]
    },
    inputSourceMap: {
      file: "/workspaces/MyFitHero/src/lib/services/scaleService.ts",
      mappings: ";;;AAaA,MAAa,YAAY;IACvB,0CAA0C;IAC1C,MAAM,CAAC,KAAK,CAAC,qBAAqB;QAChC,IAAI,CAAC;YACH,IAAI,CAAC,SAAS,CAAC,SAAS,EAAE,CAAC;gBACzB,MAAM,IAAI,KAAK,CAAC,0CAA0C,CAAC,CAAC;YAC9D,CAAC;YAED,MAAM,MAAM,GAAG,MAAM,SAAS,CAAC,SAAS,CAAC,aAAa,CAAC;gBACrD,OAAO,EAAE;oBACP,EAAE,UAAU,EAAE,UAAU,EAAE;oBAC1B,EAAE,UAAU,EAAE,QAAQ,EAAE;oBACxB,EAAE,UAAU,EAAE,UAAU,EAAE;oBAC1B,EAAE,UAAU,EAAE,QAAQ,EAAE;iBACzB;gBACD,gBAAgB,EAAE,CAAC,iBAAiB,EAAE,oBAAoB,CAAC;aAC5D,CAAC,CAAC;YAEH,MAAM,MAAM,CAAC,IAAI,EAAE,OAAO,EAAE,CAAC;YAC7B,OAAO,MAAM,CAAC;QAChB,CAAC;QAAC,MAAM,CAAC;YACP,qBAAqB;YACrB,OAAO,CAAC,KAAK,CAAC,6BAA6B,EAAE,KAAK,CAAC,CAAC;YACpD,OAAO,IAAI,CAAC;QACd,CAAC;IACH,CAAC;IAED,iCAAiC;IACjC,MAAM,CAAC,KAAK,CAAC,aAAa,CAAC,MAAuB;QAChD,IAAI,CAAC;YACH,6DAA6D;YAC7D,gCAAgC;YAEhC,MAAM,MAAM,GAAG,MAAM,MAAM,CAAC,IAAI,EAAE,OAAO,EAAE,CAAC;YAC5C,IAAI,CAAC,MAAM;gBAAE,OAAO,IAAI,CAAC;YAEzB,+BAA+B;YAC/B,MAAM,OAAO,GAAG,MAAM,MAAM,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC,CAAC,uBAAuB;YAC/E,MAAM,cAAc,GAAG,MAAM,OAAO,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC,CAAC,qBAAqB;YAErF,MAAM,KAAK,GAAG,MAAM,cAAc,CAAC,SAAS,EAAE,CAAC;YAC/C,MAAM,MAAM,GAAG,KAAK,CAAC,UAAU,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,gBAAgB;YAE1D,OAAO;gBACL,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,EAAE,CAAC,GAAG,EAAE;gBACpC,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;gBACnC,QAAQ,EAAE,MAAM,CAAC,EAAE;aACpB,CAAC;QACJ,CAAC;QAAC,MAAM,CAAC;YACP,qBAAqB;YACrB,OAAO,CAAC,KAAK,CAAC,yBAAyB,EAAE,KAAK,CAAC,CAAC;YAChD,OAAO,IAAI,CAAC;QACd,CAAC;IACH,CAAC;IAED,0DAA0D;IAC1D,MAAM,CAAC,KAAK,CAAC,gBAAgB,CAC3B,QAA0C,EAC1C,WAAmB;QAEnB,IAAI,CAAC;YACH,IAAI,MAAM,GAAG,EAAE,CAAC;YAChB,IAAI,OAAO,GAAG,EAAE,CAAC;YAEjB,QAAQ,QAAQ,EAAE,CAAC;gBACjB,KAAK,QAAQ;oBACX,MAAM,GAAG,uCAAuC,CAAC;oBACjD,OAAO,GAAG,EAAE,aAAa,EAAE,UAAU,WAAW,EAAE,EAAE,CAAC;oBACrD,MAAM;gBACR,KAAK,UAAU;oBACb,MAAM,GAAG,qCAAqC,CAAC;oBAC/C,OAAO,GAAG,EAAE,aAAa,EAAE,UAAU,WAAW,EAAE,EAAE,CAAC;oBACrD,MAAM;gBACR,KAAK,QAAQ;oBACX,MAAM,GAAG,oEAAoE,CAAC;oBAC9E,OAAO,GAAG,EAAE,aAAa,EAAE,UAAU,WAAW,EAAE,EAAE,CAAC;oBACrD,MAAM;YACV,CAAC;YAED,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,MAAM,EAAE,EAAE,OAAO,EAAE,CAAC,CAAC;YAClD,MAAM,IAAI,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;YAEnC,uCAAuC;YACvC,OAAO,IAAI,CAAC,cAAc,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;QAC7C,CAAC;QAAC,MAAM,CAAC;YACP,qBAAqB;YACrB,OAAO,CAAC,KAAK,CAAC,oBAAoB,EAAE,KAAK,CAAC,CAAC;YAC3C,OAAO,EAAE,CAAC;QACZ,CAAC;IACH,CAAC;IAEO,MAAM,CAAC,cAAc,CAAC,QAAgB,EAAE,IAAS;QACvD,kDAAkD;QAClD,6BAA6B;QAC7B,OAAO,EAAE,CAAC;IACZ,CAAC;IAED,mCAAmC;IACnC,MAAM,CAAC,KAAK,CAAC,gBAAgB,CAAC,OAAqB;QACjD,IAAI,CAAC;YACH,iDAAiD;YACjD,MAAM,KAAK,CAAC,qBAAqB,EAAE;gBACjC,MAAM,EAAE,MAAM;gBACd,OAAO,EAAE,EAAE,cAAc,EAAE,kBAAkB,EAAE;gBAC/C,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC;aAC9B,CAAC,CAAC;QACL,CAAC;QAAC,MAAM,CAAC;YACP,qBAAqB;YACrB,OAAO,CAAC,KAAK,CAAC,oBAAoB,EAAE,KAAK,CAAC,CAAC;QAC7C,CAAC;IACH,CAAC;CACF;AA/GD,oCA+GC",
      names: [],
      sources: ["/workspaces/MyFitHero/src/lib/services/scaleService.ts"],
      sourcesContent: ["// services/scaleService.ts\nexport interface ScaleReading {\n  weight: number;\n  bodyFat?: number;\n  muscleMass?: number;\n  boneMass?: number;\n  waterPercentage?: number;\n  visceralFat?: number;\n  bmr?: number; // M\xE9tabolisme de base\n  timestamp: string;\n  deviceId: string;\n}\n\nexport class ScaleService {\n  // Connexion Bluetooth (Web Bluetooth API)\n  static async connectBluetoothScale(): Promise<BluetoothDevice | null> {\n    try {\n      if (!navigator.bluetooth) {\n        throw new Error('Bluetooth non support\xE9 par ce navigateur');\n      }\n\n      const device = await navigator.bluetooth.requestDevice({\n        filters: [\n          { namePrefix: 'Mi Scale' },\n          { namePrefix: 'XIAOMI' },\n          { namePrefix: 'Withings' },\n          { namePrefix: 'Fitbit' },\n        ],\n        optionalServices: ['battery_service', 'device_information'],\n      });\n\n      await device.gatt?.connect();\n      return device;\n    } catch {\n      // Erreur silencieuse\n      console.error('Erreur connexion Bluetooth:', error);\n      return null;\n    }\n  }\n\n  // Lire les donn\xE9es de la balance\n  static async readScaleData(device: BluetoothDevice): Promise<ScaleReading | null> {\n    try {\n      // Impl\xE9mentation sp\xE9cifique selon le protocole de la balance\n      // Ceci est un exemple g\xE9n\xE9rique\n\n      const server = await device.gatt?.connect();\n      if (!server) return null;\n\n      // Exemple pour Xiaomi Mi Scale\n      const service = await server.getPrimaryService('181b'); // Weight Scale Service\n      const characteristic = await service.getCharacteristic('2a9d'); // Weight Measurement\n\n      const value = await characteristic.readValue();\n      const weight = value.getFloat32(1, true); // Little endian\n\n      return {\n        weight: Math.round(weight * 10) / 10,\n        timestamp: new Date().toISOString(),\n        deviceId: device.id,\n      };\n    } catch {\n      // Erreur silencieuse\n      console.error('Erreur lecture donn\xE9es:', error);\n      return null;\n    }\n  }\n\n  // Synchronisation avec API cloud (Xiaomi, Withings, etc.)\n  static async syncWithCloudAPI(\n    provider: 'xiaomi' | 'withings' | 'fitbit',\n    accessToken: string\n  ): Promise<ScaleReading[]> {\n    try {\n      let apiUrl = '';\n      let headers = {};\n\n      switch (provider) {\n        case 'xiaomi':\n          apiUrl = 'https://api.mi-fit.com/v1/data/weight';\n          headers = { Authorization: `Bearer ${accessToken}` };\n          break;\n        case 'withings':\n          apiUrl = 'https://wbsapi.withings.net/measure';\n          headers = { Authorization: `Bearer ${accessToken}` };\n          break;\n        case 'fitbit':\n          apiUrl = 'https://api.fitbit.com/1/user/-/body/log/weight/date/today/1m.json';\n          headers = { Authorization: `Bearer ${accessToken}` };\n          break;\n      }\n\n      const response = await fetch(apiUrl, { headers });\n      const data = await response.json();\n\n      // Parser selon le format de chaque API\n      return this.parseCloudData(provider, data);\n    } catch {\n      // Erreur silencieuse\n      console.error('Erreur sync cloud:', error);\n      return [];\n    }\n  }\n\n  private static parseCloudData(provider: string, data: any): ScaleReading[] {\n    // Impl\xE9mentation du parsing selon chaque provider\n    // Retourner un format unifi\xE9\n    return [];\n  }\n\n  // Sauvegarder les donn\xE9es en local\n  static async saveScaleReading(reading: ScaleReading): Promise<void> {\n    try {\n      // Sauvegarder en base de donn\xE9es via ton service\n      await fetch('/api/scale-readings', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(reading),\n      });\n    } catch {\n      // Erreur silencieuse\n      console.error('Erreur sauvegarde:', error);\n    }\n  }\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "bafca1b66c5fce600a2b06d0abd7c5e2916bfe38"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1bpztih51v = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1bpztih51v();
cov_1bpztih51v().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1bpztih51v().s[1]++;
exports.ScaleService = void 0;
class ScaleService {
  // Connexion Bluetooth (Web Bluetooth API)
  static async connectBluetoothScale() {
    /* istanbul ignore next */
    cov_1bpztih51v().f[0]++;
    cov_1bpztih51v().s[2]++;
    try {
      /* istanbul ignore next */
      cov_1bpztih51v().s[3]++;
      if (!navigator.bluetooth) {
        /* istanbul ignore next */
        cov_1bpztih51v().b[0][0]++;
        cov_1bpztih51v().s[4]++;
        throw new Error('Bluetooth non supporté par ce navigateur');
      } else
      /* istanbul ignore next */
      {
        cov_1bpztih51v().b[0][1]++;
      }
      const device =
      /* istanbul ignore next */
      (cov_1bpztih51v().s[5]++, await navigator.bluetooth.requestDevice({
        filters: [{
          namePrefix: 'Mi Scale'
        }, {
          namePrefix: 'XIAOMI'
        }, {
          namePrefix: 'Withings'
        }, {
          namePrefix: 'Fitbit'
        }],
        optionalServices: ['battery_service', 'device_information']
      }));
      /* istanbul ignore next */
      cov_1bpztih51v().s[6]++;
      await device.gatt?.connect();
      /* istanbul ignore next */
      cov_1bpztih51v().s[7]++;
      return device;
    } catch {
      /* istanbul ignore next */
      cov_1bpztih51v().s[8]++;
      // Erreur silencieuse
      console.error('Erreur connexion Bluetooth:', error);
      /* istanbul ignore next */
      cov_1bpztih51v().s[9]++;
      return null;
    }
  }
  // Lire les données de la balance
  static async readScaleData(device) {
    /* istanbul ignore next */
    cov_1bpztih51v().f[1]++;
    cov_1bpztih51v().s[10]++;
    try {
      // Implémentation spécifique selon le protocole de la balance
      // Ceci est un exemple générique
      const server =
      /* istanbul ignore next */
      (cov_1bpztih51v().s[11]++, await device.gatt?.connect());
      /* istanbul ignore next */
      cov_1bpztih51v().s[12]++;
      if (!server) {
        /* istanbul ignore next */
        cov_1bpztih51v().b[1][0]++;
        cov_1bpztih51v().s[13]++;
        return null;
      } else
      /* istanbul ignore next */
      {
        cov_1bpztih51v().b[1][1]++;
      }
      // Exemple pour Xiaomi Mi Scale
      const service =
      /* istanbul ignore next */
      (cov_1bpztih51v().s[14]++, await server.getPrimaryService('181b')); // Weight Scale Service
      const characteristic =
      /* istanbul ignore next */
      (cov_1bpztih51v().s[15]++, await service.getCharacteristic('2a9d')); // Weight Measurement
      const value =
      /* istanbul ignore next */
      (cov_1bpztih51v().s[16]++, await characteristic.readValue());
      const weight =
      /* istanbul ignore next */
      (cov_1bpztih51v().s[17]++, value.getFloat32(1, true)); // Little endian
      /* istanbul ignore next */
      cov_1bpztih51v().s[18]++;
      return {
        weight: Math.round(weight * 10) / 10,
        timestamp: new Date().toISOString(),
        deviceId: device.id
      };
    } catch {
      /* istanbul ignore next */
      cov_1bpztih51v().s[19]++;
      // Erreur silencieuse
      console.error('Erreur lecture données:', error);
      /* istanbul ignore next */
      cov_1bpztih51v().s[20]++;
      return null;
    }
  }
  // Synchronisation avec API cloud (Xiaomi, Withings, etc.)
  static async syncWithCloudAPI(provider, accessToken) {
    /* istanbul ignore next */
    cov_1bpztih51v().f[2]++;
    cov_1bpztih51v().s[21]++;
    try {
      let apiUrl =
      /* istanbul ignore next */
      (cov_1bpztih51v().s[22]++, '');
      let headers =
      /* istanbul ignore next */
      (cov_1bpztih51v().s[23]++, {});
      /* istanbul ignore next */
      cov_1bpztih51v().s[24]++;
      switch (provider) {
        case 'xiaomi':
          /* istanbul ignore next */
          cov_1bpztih51v().b[2][0]++;
          cov_1bpztih51v().s[25]++;
          apiUrl = 'https://api.mi-fit.com/v1/data/weight';
          /* istanbul ignore next */
          cov_1bpztih51v().s[26]++;
          headers = {
            Authorization: `Bearer ${accessToken}`
          };
          /* istanbul ignore next */
          cov_1bpztih51v().s[27]++;
          break;
        case 'withings':
          /* istanbul ignore next */
          cov_1bpztih51v().b[2][1]++;
          cov_1bpztih51v().s[28]++;
          apiUrl = 'https://wbsapi.withings.net/measure';
          /* istanbul ignore next */
          cov_1bpztih51v().s[29]++;
          headers = {
            Authorization: `Bearer ${accessToken}`
          };
          /* istanbul ignore next */
          cov_1bpztih51v().s[30]++;
          break;
        case 'fitbit':
          /* istanbul ignore next */
          cov_1bpztih51v().b[2][2]++;
          cov_1bpztih51v().s[31]++;
          apiUrl = 'https://api.fitbit.com/1/user/-/body/log/weight/date/today/1m.json';
          /* istanbul ignore next */
          cov_1bpztih51v().s[32]++;
          headers = {
            Authorization: `Bearer ${accessToken}`
          };
          /* istanbul ignore next */
          cov_1bpztih51v().s[33]++;
          break;
      }
      const response =
      /* istanbul ignore next */
      (cov_1bpztih51v().s[34]++, await fetch(apiUrl, {
        headers
      }));
      const data =
      /* istanbul ignore next */
      (cov_1bpztih51v().s[35]++, await response.json());
      // Parser selon le format de chaque API
      /* istanbul ignore next */
      cov_1bpztih51v().s[36]++;
      return this.parseCloudData(provider, data);
    } catch {
      /* istanbul ignore next */
      cov_1bpztih51v().s[37]++;
      // Erreur silencieuse
      console.error('Erreur sync cloud:', error);
      /* istanbul ignore next */
      cov_1bpztih51v().s[38]++;
      return [];
    }
  }
  static parseCloudData(provider, data) {
    /* istanbul ignore next */
    cov_1bpztih51v().f[3]++;
    cov_1bpztih51v().s[39]++;
    // Implémentation du parsing selon chaque provider
    // Retourner un format unifié
    return [];
  }
  // Sauvegarder les données en local
  static async saveScaleReading(reading) {
    /* istanbul ignore next */
    cov_1bpztih51v().f[4]++;
    cov_1bpztih51v().s[40]++;
    try {
      /* istanbul ignore next */
      cov_1bpztih51v().s[41]++;
      // Sauvegarder en base de données via ton service
      await fetch('/api/scale-readings', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(reading)
      });
    } catch {
      /* istanbul ignore next */
      cov_1bpztih51v().s[42]++;
      // Erreur silencieuse
      console.error('Erreur sauvegarde:', error);
    }
  }
}
/* istanbul ignore next */
cov_1bpztih51v().s[43]++;
exports.ScaleService = ScaleService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,