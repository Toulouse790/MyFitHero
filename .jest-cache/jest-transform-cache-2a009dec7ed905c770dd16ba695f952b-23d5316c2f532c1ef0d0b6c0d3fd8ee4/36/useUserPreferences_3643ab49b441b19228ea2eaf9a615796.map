{"version":3,"names":["cov_1217si2sc5","actualCoverage","s","react_1","require","react_i18next_1","getUnitPreferences","system","f","b","weight","height","distance","temperature","liquid","exports","getUnitSystemFromLocale","locale","metricCountries","countryCode","split","toLowerCase","includes","DEFAULT_PREFERENCES","language","unitSystem","units","dateFormat","timeFormat","currency","theme","useUserPreferences","i18n","useTranslation","preferences","setPreferences","useState","isLoading","setIsLoading","useEffect","loadPreferences","stored","localStorage","getItem","parsed","JSON","parse","detectedSystem","detectedPrefs","setItem","stringify","error","console","savePreferences","newPreferences","updated","changeLanguage","changeUnitSystem","newUnits","updates","formatDate","date","options","year","month","day","toLocaleDateString","toISOString","formatTime","hour","minute","hour12","toLocaleTimeString","formatCurrency","amount","Intl","NumberFormat","style","format","formatNumber","number","decimals","minimumFractionDigits","maximumFractionDigits","isUSUser","startsWith"],"sources":["/workspaces/MyFitHero/src/features/ai-coach/hooks/useUserPreferences.ts"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\n\n// Interface pour les systèmes d'unités\nexport type UnitSystem = 'metric' | 'imperial';\n\nexport interface UnitPreferences {\n  weight: 'kg' | 'lbs';\n  height: 'cm' | 'ft';\n  distance: 'km' | 'mi';\n  temperature: 'celsius' | 'fahrenheit';\n  liquid: 'ml' | 'oz';\n}\n\n// Fonction utilitaire pour obtenir les préférences d'unités\nexport const getUnitPreferences = (system: UnitSystem): UnitPreferences => {\n  if (system === 'metric') {\n    return {\n      weight: 'kg',\n      height: 'cm',\n      distance: 'km',\n      temperature: 'celsius',\n      liquid: 'ml',\n    };\n  } else {\n    return {\n      weight: 'lbs',\n      height: 'ft',\n      distance: 'mi',\n      temperature: 'fahrenheit',\n      liquid: 'oz',\n    };\n  }\n};\n\n// Fonction pour obtenir le système d'unités depuis la locale\nexport const getUnitSystemFromLocale = (locale: string): UnitSystem => {\n  const metricCountries = ['fr', 'de', 'es', 'it', 'ca', 'au', 'nz'];\n  const countryCode = locale.split('-')[0].toLowerCase();\n  return metricCountries.includes(countryCode) ? 'metric' : 'imperial';\n};\n\nexport interface UserPreferences {\n  language: string;\n  unitSystem: UnitSystem;\n  units: UnitPreferences;\n  dateFormat: 'MM/DD/YYYY' | 'DD/MM/YYYY' | 'YYYY-MM-DD';\n  timeFormat: '12h' | '24h';\n  currency: string;\n  theme: 'light' | 'dark' | 'system';\n}\n\nconst DEFAULT_PREFERENCES: UserPreferences = {\n  language: 'en',\n  unitSystem: 'imperial',\n  units: getUnitPreferences('imperial'),\n  dateFormat: 'MM/DD/YYYY',\n  timeFormat: '12h',\n  currency: 'USD',\n  theme: 'system',\n};\n\nexport const useUserPreferences = () => {\n  const { i18n } = useTranslation();\n  const [preferences, setPreferences] = useState<UserPreferences>(DEFAULT_PREFERENCES);\n  const [isLoading, setIsLoading] = useState(true);\n\n  // Chargement des préférences au montage\n  useEffect(() => {\n    const loadPreferences = () => {\n      try {\n        const stored = localStorage.getItem('userPreferences');\n        if (stored) {\n          const parsed = JSON.parse(stored);\n          setPreferences(parsed);\n        } else {\n          // Détection automatique basée sur la locale\n          const detectedSystem = getUnitSystemFromLocale(i18n.language);\n          const detectedPrefs: UserPreferences = {\n            ...DEFAULT_PREFERENCES,\n            language: i18n.language,\n            unitSystem: detectedSystem,\n            units: getUnitPreferences(detectedSystem),\n            dateFormat: detectedSystem === 'imperial' ? 'MM/DD/YYYY' : 'DD/MM/YYYY',\n            currency: detectedSystem === 'imperial' ? 'USD' : 'EUR',\n          };\n          setPreferences(detectedPrefs);\n          localStorage.setItem('userPreferences', JSON.stringify(detectedPrefs));\n        }\n      } catch (error: any) {\n      // Erreur silencieuse\n        console.error('Error loading preferences:', error);\n        setPreferences(DEFAULT_PREFERENCES);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    loadPreferences();\n  }, [i18n.language]);\n\n  // Sauvegarde des préférences\n  const savePreferences = (newPreferences: Partial<UserPreferences>) => {\n    const updated = { ...preferences, ...newPreferences };\n    setPreferences(updated);\n    localStorage.setItem('userPreferences', JSON.stringify(updated));\n\n    // Changer la langue si nécessaire\n    if (newPreferences.language && newPreferences.language !== i18n.language) {\n      i18n.changeLanguage(newPreferences.language);\n    }\n  };\n\n  // Changer le système d'unités\n  const changeUnitSystem = (system: UnitSystem) => {\n    const newUnits = getUnitPreferences(system);\n    const updates: Partial<UserPreferences> = {\n      unitSystem: system,\n      units: newUnits,\n      dateFormat: system === 'imperial' ? 'MM/DD/YYYY' : 'DD/MM/YYYY',\n      timeFormat: system === 'imperial' ? '12h' : '24h',\n      currency: system === 'imperial' ? 'USD' : 'EUR',\n    };\n    savePreferences(updates);\n  };\n\n  // Changer la langue\n  const changeLanguage = (language: string) => {\n    const system = getUnitSystemFromLocale(language);\n    const updates: Partial<UserPreferences> = {\n      language,\n      unitSystem: system,\n      units: getUnitPreferences(system),\n      dateFormat: system === 'imperial' ? 'MM/DD/YYYY' : 'DD/MM/YYYY',\n      currency: system === 'imperial' ? 'USD' : 'EUR',\n    };\n    savePreferences(updates);\n  };\n\n  // Formatage de la date selon les préférences\n  const formatDate = (date: Date): string => {\n    const options: Intl.DateTimeFormatOptions = {\n      year: 'numeric',\n      month: '2-digit',\n      day: '2-digit',\n    };\n\n    switch (preferences.dateFormat) {\n      case 'MM/DD/YYYY':\n        return date.toLocaleDateString('en-US', options);\n      case 'DD/MM/YYYY':\n        return date.toLocaleDateString('en-GB', options);\n      case 'YYYY-MM-DD':\n        return date.toISOString().split('T')[0];\n      default:\n        return date.toLocaleDateString();\n    }\n  };\n\n  // Formatage de l'heure selon les préférences\n  const formatTime = (date: Date): string => {\n    const options: Intl.DateTimeFormatOptions = {\n      hour: '2-digit',\n      minute: '2-digit',\n      hour12: preferences.timeFormat === '12h',\n    };\n    return date.toLocaleTimeString(preferences.language, options);\n  };\n\n  // Formatage de la monnaie\n  const formatCurrency = (amount: number): string => {\n    return new Intl.NumberFormat(preferences.language, {\n      style: 'currency',\n      currency: preferences.currency,\n    }).format(amount);\n  };\n\n  // Formatage des nombres\n  const formatNumber = (number: number, decimals: number = 2): string => {\n    return new Intl.NumberFormat(preferences.language, {\n      minimumFractionDigits: decimals,\n      maximumFractionDigits: decimals,\n    }).format(number);\n  };\n\n  // Détection si l'utilisateur est aux US\n  const isUSUser = (): boolean => {\n    return (\n      preferences.unitSystem === 'imperial' &&\n      preferences.language.startsWith('en') &&\n      preferences.currency === 'USD'\n    );\n  };\n\n  return {\n    preferences,\n    isLoading,\n    savePreferences,\n    changeUnitSystem,\n    changeLanguage,\n    formatDate,\n    formatTime,\n    formatCurrency,\n    formatNumber,\n    isUSUser,\n  };\n};\n"],"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","ignoreList":[]}