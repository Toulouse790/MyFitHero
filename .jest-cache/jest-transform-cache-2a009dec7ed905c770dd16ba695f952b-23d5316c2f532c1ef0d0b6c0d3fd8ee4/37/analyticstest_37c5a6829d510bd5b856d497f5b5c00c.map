{"file":"/workspaces/MyFitHero/src/__tests__/unit/analytics.test.tsx","mappings":"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","names":[],"sources":["/workspaces/MyFitHero/src/__tests__/unit/analytics.test.tsx"],"sourcesContent":["/**\n * TESTS UNITAIRES - MODULE ANALYTICS\n * Tests complets pour analytics et métriques avancées\n */\n\nimport { describe, it, expect, beforeEach, afterEach, jest } from '@jest/globals';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport { AnalyticsDashboard } from '@/features/analytics/components/AnalyticsDashboard';\nimport { PerformanceChart } from '@/features/analytics/components/PerformanceChart';\nimport { MetricsCalculator } from '@/features/analytics/components/MetricsCalculator';\nimport { ProgressTracker } from '@/features/analytics/components/ProgressTracker';\nimport { analyticsService } from '@/features/analytics/services/analyticsService';\nimport { analyticsStore } from '@/features/analytics/store/analyticsStore';\nimport { mockUser, mockAnalyticsData } from '@/test/mocks';\n\n// Mock des services\njest.mock('@/features/analytics/services/analyticsService');\njest.mock('@/lib/supabase');\n\ndescribe('Analytics Module - Tests Complets', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    analyticsStore.getState().reset();\n  });\n\n  afterEach(() => {\n    jest.restoreAllMocks();\n  });\n\n  describe('AnalyticsDashboard Component', () => {\n    it('doit afficher le tableau de bord analytique complet', async () => {\n      const mockDashboardData = {\n        overviewMetrics: {\n          totalWorkouts: 156,\n          totalDuration: 8760, // minutes\n          averageIntensity: 75,\n          caloriesBurned: 45200,\n          strengthGains: 23.5,\n          cardioImprovement: 18.2\n        },\n        trendsData: {\n          weeklyProgress: [85, 87, 90, 88, 92, 89, 94],\n          monthlyComparison: { current: 89, previous: 82 },\n          yearlyGrowth: 15.7\n        },\n        achievements: [\n          { id: 1, title: 'Consistency King', description: '30 jours consécutifs', date: '2024-01-15' },\n          { id: 2, title: 'Strength Master', description: '100% gains force', date: '2024-01-10' }\n        ]\n      };\n\n      (analyticsService.getDashboardData as jest.Mock).mockResolvedValue(mockDashboardData);\n\n      render(<AnalyticsDashboard userId={mockUser.id} />);\n\n      await waitFor(() => {\n        expect(screen.getByText(/tableau de bord analytique/i)).toBeInTheDocument();\n      });\n\n      expect(screen.getByText('156')).toBeInTheDocument(); // Total workouts\n      expect(screen.getByText(/45,200 calories/i)).toBeInTheDocument();\n      expect(screen.getByText('Consistency King')).toBeInTheDocument();\n      expect(screen.getByText(/23.5%/i)).toBeInTheDocument(); // Strength gains\n    });\n\n    it('doit permettre de filtrer les données par période', async () => {\n      const mockFilteredData = {\n        overviewMetrics: { totalWorkouts: 45 }\n      };\n\n      (analyticsService.getDashboardData as jest.Mock).mockResolvedValue(mockFilteredData);\n\n      render(<AnalyticsDashboard userId={mockUser.id} />);\n\n      await waitFor(() => {\n        fireEvent.change(screen.getByRole('combobox'), { target: { value: '30days' } });\n      });\n\n      await waitFor(() => {\n        expect(analyticsService.getDashboardData).toHaveBeenCalledWith(\n          mockUser.id,\n          expect.objectContaining({ period: '30days' })\n        );\n      });\n    });\n\n    it('doit gérer les métriques en temps réel', async () => {\n      const initialData = { overviewMetrics: { totalWorkouts: 100 } };\n      const updatedData = { overviewMetrics: { totalWorkouts: 101 } };\n\n      (analyticsService.getDashboardData as jest.Mock)\n        .mockResolvedValueOnce(initialData)\n        .mockResolvedValueOnce(updatedData);\n\n      render(<AnalyticsDashboard userId={mockUser.id} />);\n\n      await waitFor(() => {\n        expect(screen.getByText('100')).toBeInTheDocument();\n      });\n\n      // Simulation d'une nouvelle séance\n      analyticsStore.getState().updateRealTimeMetrics({ newWorkout: true });\n\n      await waitFor(() => {\n        expect(screen.getByText('101')).toBeInTheDocument();\n      });\n    });\n  });\n\n  describe('PerformanceChart Component', () => {\n    it('doit afficher les graphiques de performance', () => {\n      const mockChartData = {\n        labels: ['Jan', 'Fév', 'Mar', 'Avr', 'Mai', 'Jun'],\n        datasets: [\n          {\n            label: 'Force',\n            data: [65, 70, 75, 80, 85, 90],\n            borderColor: '#3B82F6',\n            backgroundColor: 'rgba(59, 130, 246, 0.1)'\n          },\n          {\n            label: 'Cardio',\n            data: [60, 65, 68, 72, 78, 82],\n            borderColor: '#EF4444',\n            backgroundColor: 'rgba(239, 68, 68, 0.1)'\n          }\n        ]\n      };\n\n      render(\n        <PerformanceChart \n          data={mockChartData} \n          type=\"line\" \n          title=\"Évolution des performances\"\n        />\n      );\n\n      expect(screen.getByText(/évolution des performances/i)).toBeInTheDocument();\n      expect(screen.getByText('Force')).toBeInTheDocument();\n      expect(screen.getByText('Cardio')).toBeInTheDocument();\n    });\n\n    it('doit permettre de changer le type de graphique', () => {\n      const mockData = {\n        labels: ['Lun', 'Mar', 'Mer', 'Jeu', 'Ven'],\n        datasets: [{ label: 'Test', data: [1, 2, 3, 4, 5] }]\n      };\n\n      const { rerender } = render(\n        <PerformanceChart data={mockData} type=\"line\" />\n      );\n\n      expect(screen.getByTestId('line-chart')).toBeInTheDocument();\n\n      rerender(<PerformanceChart data={mockData} type=\"bar\" />);\n\n      expect(screen.getByTestId('bar-chart')).toBeInTheDocument();\n    });\n\n    it('doit gérer les interactions utilisateur sur le graphique', () => {\n      const mockOnDataPointClick = jest.fn();\n      const mockData = {\n        labels: ['Point 1', 'Point 2'],\n        datasets: [{ label: 'Test', data: [10, 20] }]\n      };\n\n      render(\n        <PerformanceChart \n          data={mockData} \n          type=\"line\" \n          onDataPointClick={mockOnDataPointClick}\n        />\n      );\n\n      // Simulation d'un clic sur un point de données\n      fireEvent.click(screen.getByTestId('chart-point-0'));\n\n      expect(mockOnDataPointClick).toHaveBeenCalledWith(\n        expect.objectContaining({ index: 0, value: 10 })\n      );\n    });\n  });\n\n  describe('MetricsCalculator Component', () => {\n    it('doit calculer les métriques avancées', () => {\n      const mockUserData = {\n        workouts: [\n          { date: '2024-01-15', type: 'strength', volume: 5000, intensity: 80 },\n          { date: '2024-01-14', type: 'cardio', duration: 45, heartRate: 150 },\n          { date: '2024-01-13', type: 'strength', volume: 5200, intensity: 85 }\n        ],\n        userProfile: {\n          weight: 75,\n          height: 180,\n          age: 30,\n          gender: 'male'\n        }\n      };\n\n      render(<MetricsCalculator data={mockUserData} />);\n\n      // Vérifier que les métriques calculées sont affichées\n      expect(screen.getByText(/volume d'entraînement/i)).toBeInTheDocument();\n      expect(screen.getByText(/intensité moyenne/i)).toBeInTheDocument();\n      expect(screen.getByText(/charge progressive/i)).toBeInTheDocument();\n    });\n\n    it('doit calculer le score de forme physique composite', () => {\n      const mockMetrics = {\n        strengthScore: 85,\n        cardioScore: 78,\n        flexibilityScore: 70,\n        enduranceScore: 82,\n        recoveryScore: 88\n      };\n\n      render(<MetricsCalculator compositeMetrics={mockMetrics} />);\n\n      // Score composite calculé : (85+78+70+82+88)/5 = 80.6\n      expect(screen.getByText(/80\\.6/)).toBeInTheDocument();\n      expect(screen.getByText(/score composite/i)).toBeInTheDocument();\n    });\n\n    it('doit identifier les tendances et recommandations', () => {\n      const mockTrendData = [\n        { week: 1, performance: 70 },\n        { week: 2, performance: 75 },\n        { week: 3, performance: 73 },\n        { week: 4, performance: 78 }\n      ];\n\n      render(<MetricsCalculator trendData={mockTrendData} />);\n\n      expect(screen.getByText(/tendance positive/i)).toBeInTheDocument();\n      expect(screen.getByText(/amélioration de 11%/i)).toBeInTheDocument();\n    });\n  });\n\n  describe('ProgressTracker Component', () => {\n    it('doit suivre les objectifs et les progrès', () => {\n      const mockGoals = [\n        {\n          id: 1,\n          title: 'Perdre 5kg',\n          target: 70,\n          current: 73,\n          unit: 'kg',\n          deadline: '2024-03-01',\n          progress: 40\n        },\n        {\n          id: 2,\n          title: 'Courir 10km',\n          target: 10,\n          current: 7.5,\n          unit: 'km',\n          deadline: '2024-02-15',\n          progress: 75\n        }\n      ];\n\n      render(<ProgressTracker goals={mockGoals} />);\n\n      expect(screen.getByText('Perdre 5kg')).toBeInTheDocument();\n      expect(screen.getByText('40%')).toBeInTheDocument();\n      expect(screen.getByText('Courir 10km')).toBeInTheDocument();\n      expect(screen.getByText('75%')).toBeInTheDocument();\n    });\n\n    it('doit permettre de mettre à jour les objectifs', async () => {\n      const mockOnGoalUpdate = jest.fn();\n      const mockGoals = [\n        { id: 1, title: 'Test Goal', current: 5, target: 10 }\n      ];\n\n      render(\n        <ProgressTracker \n          goals={mockGoals} \n          onGoalUpdate={mockOnGoalUpdate}\n        />\n      );\n\n      fireEvent.click(screen.getByText(/mettre à jour/i));\n      \n      const input = screen.getByDisplayValue('5');\n      fireEvent.change(input, { target: { value: '6' } });\n      fireEvent.click(screen.getByText(/sauvegarder/i));\n\n      await waitFor(() => {\n        expect(mockOnGoalUpdate).toHaveBeenCalledWith(1, { current: 6 });\n      });\n    });\n\n    it('doit calculer les projections et estimations', () => {\n      const mockGoal = {\n        id: 1,\n        title: 'Objectif Fitness',\n        target: 100,\n        current: 60,\n        startDate: '2024-01-01',\n        deadline: '2024-03-01',\n        progressHistory: [\n          { date: '2024-01-01', value: 40 },\n          { date: '2024-01-15', value: 50 },\n          { date: '2024-01-30', value: 60 }\n        ]\n      };\n\n      render(<ProgressTracker goals={[mockGoal]} showProjections={true} />);\n\n      expect(screen.getByText(/projection/i)).toBeInTheDocument();\n      expect(screen.getByText(/estimation.*mars/i)).toBeInTheDocument();\n    });\n  });\n\n  describe('Analytics Service', () => {\n    it('doit calculer les métriques de performance avancées', () => {\n      const workoutData = [\n        { type: 'strength', volume: 5000, intensity: 80, date: '2024-01-15' },\n        { type: 'strength', volume: 5200, intensity: 82, date: '2024-01-16' },\n        { type: 'cardio', duration: 45, avgHeartRate: 150, date: '2024-01-17' }\n      ];\n\n      const metrics = analyticsService.calculateAdvancedMetrics(workoutData);\n\n      expect(metrics).toHaveProperty('volumeProgression');\n      expect(metrics).toHaveProperty('intensityTrend');\n      expect(metrics).toHaveProperty('workoutFrequency');\n      expect(metrics.volumeProgression).toBeGreaterThan(0); // Progression positive\n    });\n\n    it('doit générer des insights personnalisés', () => {\n      const userData = {\n        fitnessLevel: 'intermediate',\n        goals: ['weight_loss', 'strength'],\n        preferences: ['morning_workouts'],\n        limitations: ['knee_injury'],\n        recentPerformance: { trend: 'improving', consistency: 85 }\n      };\n\n      const insights = analyticsService.generatePersonalizedInsights(userData);\n\n      expect(Array.isArray(insights)).toBe(true);\n      expect(insights.length).toBeGreaterThan(0);\n      expect(insights[0]).toHaveProperty('type');\n      expect(insights[0]).toHaveProperty('message');\n      expect(insights[0]).toHaveProperty('actionable');\n    });\n\n    it('doit prédire les performances futures', () => {\n      const historicalData = [\n        { month: 1, performance: 70 },\n        { month: 2, performance: 75 },\n        { month: 3, performance: 78 },\n        { month: 4, performance: 82 }\n      ];\n\n      const predictions = analyticsService.predictFuturePerformance(\n        historicalData, \n        3 // 3 mois futurs\n      );\n\n      expect(Array.isArray(predictions)).toBe(true);\n      expect(predictions.length).toBe(3);\n      expect(predictions[0]).toHaveProperty('month');\n      expect(predictions[0]).toHaveProperty('predictedPerformance');\n      expect(predictions[0]).toHaveProperty('confidenceInterval');\n    });\n\n    it('doit analyser les patterns comportementaux', () => {\n      const behaviorData = {\n        workoutTimes: ['07:00', '07:30', '06:45', '07:15', '08:00'],\n        workoutDurations: [45, 60, 50, 55, 40],\n        skipPatterns: ['sunday', 'friday_evening'],\n        preferredExercises: ['squat', 'deadlift', 'bench_press']\n      };\n\n      const analysis = analyticsService.analyzeBehaviorPatterns(behaviorData);\n\n      expect(analysis).toHaveProperty('optimalWorkoutTime');\n      expect(analysis).toHaveProperty('preferredDuration');\n      expect(analysis).toHaveProperty('riskFactors');\n      expect(analysis.optimalWorkoutTime).toMatch(/07:00|07:30|morning/i);\n    });\n  });\n\n  describe('Analytics Store', () => {\n    it('doit gérer l\\'état analytique global', () => {\n      const { getState, setState } = analyticsStore;\n\n      setState({\n        dashboardData: mockAnalyticsData.dashboard,\n        selectedPeriod: '90days',\n        isLoading: false,\n        lastUpdated: new Date().toISOString()\n      });\n\n      const state = getState();\n      expect(state.dashboardData).toEqual(mockAnalyticsData.dashboard);\n      expect(state.selectedPeriod).toBe('90days');\n      expect(state.isLoading).toBe(false);\n    });\n\n    it('doit mettre à jour les métriques en temps réel', () => {\n      const newMetrics = {\n        totalWorkouts: 157,\n        weeklyProgress: [85, 87, 90, 88, 92, 89, 95]\n      };\n\n      analyticsStore.getState().updateRealTimeMetrics(newMetrics);\n\n      const state = analyticsStore.getState();\n      expect(state.dashboardData.overviewMetrics.totalWorkouts).toBe(157);\n    });\n\n    it('doit gérer le cache des données analytiques', () => {\n      const testData = { test: 'data' };\n      const cacheKey = 'dashboard_30days_user123';\n\n      analyticsStore.getState().setCacheData(cacheKey, testData);\n      \n      const cachedData = analyticsStore.getState().getCacheData(cacheKey);\n      expect(cachedData).toEqual(testData);\n    });\n  });\n\n  describe('Intégration Cross-Module Analytics', () => {\n    it('doit agréger les données de tous les modules', async () => {\n      const mockAggregatedData = {\n        workout: { sessions: 45, totalVolume: 15000 },\n        nutrition: { mealsLogged: 135, avgCalories: 2200 },\n        sleep: { avgDuration: 7.5, avgQuality: 82 },\n        recovery: { avgScore: 78, sessionsCompleted: 12 }\n      };\n\n      (analyticsService.aggregateCrossModuleData as jest.Mock).mockResolvedValue(\n        mockAggregatedData\n      );\n\n      const result = await analyticsService.aggregateCrossModuleData(mockUser.id);\n\n      expect(result).toEqual(mockAggregatedData);\n      expect(result.workout.sessions).toBe(45);\n      expect(result.nutrition.mealsLogged).toBe(135);\n    });\n\n    it('doit générer des corrélations inter-modules', () => {\n      const moduleData = {\n        sleep: [7.5, 8.0, 6.5, 7.8, 8.2],\n        workout_performance: [75, 82, 68, 78, 85],\n        nutrition_compliance: [85, 90, 75, 88, 92],\n        recovery_score: [78, 85, 70, 82, 88]\n      };\n\n      const correlations = analyticsService.calculateCrossModuleCorrelations(moduleData);\n\n      expect(correlations).toHaveProperty('sleep_workout');\n      expect(correlations).toHaveProperty('nutrition_recovery');\n      expect(correlations.sleep_workout).toBeGreaterThan(0.5); // Corrélation positive\n    });\n\n    it('doit optimiser les recommandations cross-module', () => {\n      const userMetrics = {\n        workoutConsistency: 75,\n        sleepQuality: 60, // Faible\n        nutritionScore: 85,\n        recoveryRate: 70\n      };\n\n      const recommendations = analyticsService.getCrossModuleRecommendations(userMetrics);\n\n      expect(recommendations).toContain(\n        expect.objectContaining({\n          module: 'sleep',\n          priority: 'high',\n          reason: expect.stringContaining('qualité du sommeil')\n        })\n      );\n    });\n  });\n});"],"version":3}