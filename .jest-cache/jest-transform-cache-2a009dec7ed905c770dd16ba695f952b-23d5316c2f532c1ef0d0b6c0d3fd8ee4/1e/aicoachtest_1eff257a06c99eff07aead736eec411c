2d3131db395e992bcbd8daf21be1e88b
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
// Mock des dÃ©pendances critiques
jest.mock('../../../features/ai-coach/services/ai-coach.service');
jest.mock('../../../core/api/supabase.client');
/**
 * TESTS UNITAIRES EXHAUSTIFS - MODULE AI-COACH
 * Composant le plus critique : Orchestrateur de santÃ© globale
 */
const react_1 = require("@testing-library/react");
const HealthOrchestrator_1 = require("../../../features/ai-coach/components/HealthOrchestrator");
const ai_coach_service_1 = require("../../../features/ai-coach/services/ai-coach.service");
describe('ðŸ¤– AI-COACH MODULE - Tests Unitaires Exhaustifs', () => {
    describe('HealthOrchestrator Component', () => {
        const mockUser = {
            id: 'user-123',
            active_modules: ['workout', 'nutrition', 'sleep', 'recovery'],
            goals: ['strength', 'weight-loss'],
            fitness_experience: 'intermediate'
        };
        beforeEach(() => {
            jest.clearAllMocks();
        });
        it('affiche correctement le dashboard de santÃ© global', () => {
            (0, react_1.render)((0, jsx_runtime_1.jsx)(HealthOrchestrator_1.HealthOrchestrator, { user: mockUser }));
            // VÃ©rifications d'affichage critiques
            expect(react_1.screen.getByText(/orchestrateur/i)).toBeInTheDocument();
            expect(react_1.screen.getByTestId('health-score')).toBeInTheDocument();
            expect(react_1.screen.getByTestId('pillar-overview')).toBeInTheDocument();
        });
        it('calcule et affiche le score de santÃ© global (0-100)', async () => {
            // Mock du service de calcul de score
            const mockHealthScore = {
                global: 87,
                pillars: {
                    fitness: 92,
                    nutrition: 85,
                    sleep: 88,
                    recovery: 83
                }
            };
            ai_coach_service_1.AICoachService.calculateHealthScore.mockResolvedValue(mockHealthScore);
            (0, react_1.render)((0, jsx_runtime_1.jsx)(HealthOrchestrator_1.HealthOrchestrator, { user: mockUser }));
            await (0, react_1.waitFor)(() => {
                expect(react_1.screen.getByText('87')).toBeInTheDocument(); // Score global
                expect(react_1.screen.getByText('92')).toBeInTheDocument(); // Fitness
                expect(react_1.screen.getByText('85')).toBeInTheDocument(); // Nutrition
            });
        });
        it('gÃ©nÃ¨re des recommandations personnalisÃ©es basÃ©es sur l\'IA', async () => {
            const mockRecommendations = [
                {
                    id: '1',
                    type: 'workout',
                    priority: 'high',
                    title: 'Augmenter l\'intensitÃ© cardio',
                    description: 'BasÃ© sur votre progression, il est temps d\'intensifier',
                    evidence: { data_points: 15, confidence: 0.89 }
                },
                {
                    id: '2',
                    type: 'nutrition',
                    priority: 'medium',
                    title: 'Optimiser les protÃ©ines post-workout',
                    description: 'AmÃ©liorer la rÃ©cupÃ©ration musculaire',
                    evidence: { data_points: 23, confidence: 0.76 }
                }
            ];
            ai_coach_service_1.AICoachService.generateRecommendations.mockResolvedValue(mockRecommendations);
            (0, react_1.render)((0, jsx_runtime_1.jsx)(HealthOrchestrator_1.HealthOrchestrator, { user: mockUser }));
            await (0, react_1.waitFor)(() => {
                expect(react_1.screen.getByText('Augmenter l\'intensitÃ© cardio')).toBeInTheDocument();
                expect(react_1.screen.getByText('Optimiser les protÃ©ines post-workout')).toBeInTheDocument();
            });
        });
        it('gÃ¨re les erreurs d\'analyse IA gracieusement', async () => {
            // Simulation d'erreur service IA
            ai_coach_service_1.AICoachService.calculateHealthScore.mockRejectedValue(new Error('Service IA temporairement indisponible'));
            (0, react_1.render)((0, jsx_runtime_1.jsx)(HealthOrchestrator_1.HealthOrchestrator, { user: mockUser }));
            await (0, react_1.waitFor)(() => {
                expect(react_1.screen.getByText(/temporairement indisponible/i)).toBeInTheDocument();
                expect(react_1.screen.getByTestId('fallback-metrics')).toBeInTheDocument();
            });
        });
        it('met Ã  jour en temps rÃ©el lors de changements de donnÃ©es', async () => {
            const { rerender } = (0, react_1.render)((0, jsx_runtime_1.jsx)(HealthOrchestrator_1.HealthOrchestrator, { user: mockUser }));
            // Simulation changement donnÃ©es utilisateur
            const updatedUser = {
                ...mockUser,
                active_modules: [...mockUser.active_modules, 'mental-health']
            };
            rerender((0, jsx_runtime_1.jsx)(HealthOrchestrator_1.HealthOrchestrator, { user: updatedUser }));
            await (0, react_1.waitFor)(() => {
                expect(react_1.screen.getByTestId('mental-health-pillar')).toBeInTheDocument();
            });
        });
        it('optimise les performances avec lazy loading des widgets', () => {
            (0, react_1.render)((0, jsx_runtime_1.jsx)(HealthOrchestrator_1.HealthOrchestrator, { user: mockUser }));
            // VÃ©rification que les widgets non critiques sont en lazy loading
            const lazyWidgets = react_1.screen.queryAllByTestId(/lazy-widget/);
            expect(lazyWidgets.length).toBeGreaterThan(0);
        });
        describe('Interactions utilisateur critiques', () => {
            it('permet d\'explorer les dÃ©tails de chaque pilier', async () => {
                (0, react_1.render)((0, jsx_runtime_1.jsx)(HealthOrchestrator_1.HealthOrchestrator, { user: mockUser }));
                // Clic sur pilier fitness
                const fitnessCard = react_1.screen.getByTestId('fitness-pillar-card');
                react_1.fireEvent.click(fitnessCard);
                await (0, react_1.waitFor)(() => {
                    expect(react_1.screen.getByTestId('fitness-detailed-view')).toBeInTheDocument();
                    expect(react_1.screen.getByText(/progression/i)).toBeInTheDocument();
                });
            });
            it('permet d\'accepter/rejeter les recommandations IA', async () => {
                const mockRecommendations = [
                    {
                        id: '1',
                        type: 'workout',
                        priority: 'high',
                        title: 'Test recommendation'
                    }
                ];
                ai_coach_service_1.AICoachService.generateRecommendations.mockResolvedValue(mockRecommendations);
                (0, react_1.render)((0, jsx_runtime_1.jsx)(HealthOrchestrator_1.HealthOrchestrator, { user: mockUser }));
                await (0, react_1.waitFor)(() => {
                    const acceptButton = react_1.screen.getByTestId('accept-recommendation-1');
                    const rejectButton = react_1.screen.getByTestId('reject-recommendation-1');
                    expect(acceptButton).toBeInTheDocument();
                    expect(rejectButton).toBeInTheDocument();
                });
                // Test interaction
                const acceptButton = react_1.screen.getByTestId('accept-recommendation-1');
                react_1.fireEvent.click(acceptButton);
                expect(ai_coach_service_1.AICoachService.recordRecommendationFeedback).toHaveBeenCalledWith('1', 'accepted');
            });
        });
        describe('Cas limites et edge cases', () => {
            it('gÃ¨re un utilisateur sans modules actifs', () => {
                const userNoModules = { ...mockUser, active_modules: [] };
                (0, react_1.render)((0, jsx_runtime_1.jsx)(HealthOrchestrator_1.HealthOrchestrator, { user: userNoModules }));
                expect(react_1.screen.getByText(/aucun module actif/i)).toBeInTheDocument();
                expect(react_1.screen.getByTestId('onboarding-suggestion')).toBeInTheDocument();
            });
            it('gÃ¨re des donnÃ©es de santÃ© incomplÃ¨tes', async () => {
                const partialHealthData = {
                    global: null,
                    pillars: {
                        fitness: 85,
                        nutrition: null,
                        sleep: 75,
                        recovery: null
                    }
                };
                ai_coach_service_1.AICoachService.calculateHealthScore.mockResolvedValue(partialHealthData);
                (0, react_1.render)((0, jsx_runtime_1.jsx)(HealthOrchestrator_1.HealthOrchestrator, { user: mockUser }));
                await (0, react_1.waitFor)(() => {
                    expect(react_1.screen.getByText(/donnÃ©es insuffisantes/i)).toBeInTheDocument();
                    expect(react_1.screen.getByTestId('data-collection-prompt')).toBeInTheDocument();
                });
            });
            it('handle des scores de santÃ© extrÃªmes (0 et 100)', async () => {
                const extremeScores = {
                    global: 100,
                    pillars: { fitness: 100, nutrition: 0, sleep: 100, recovery: 0 }
                };
                ai_coach_service_1.AICoachService.calculateHealthScore.mockResolvedValue(extremeScores);
                (0, react_1.render)((0, jsx_runtime_1.jsx)(HealthOrchestrator_1.HealthOrchestrator, { user: mockUser }));
                await (0, react_1.waitFor)(() => {
                    expect(react_1.screen.getByTestId('perfect-score-celebration')).toBeInTheDocument();
                    expect(react_1.screen.getByTestId('critical-pillars-alert')).toBeInTheDocument();
                });
            });
        });
        describe('Performance et optimisation', () => {
            it('debounce les appels API pour Ã©viter le spam', async () => {
                const { rerender } = (0, react_1.render)((0, jsx_runtime_1.jsx)(HealthOrchestrator_1.HealthOrchestrator, { user: mockUser }));
                // Multiples re-renders rapides
                for (let i = 0; i < 5; i++) {
                    rerender((0, jsx_runtime_1.jsx)(HealthOrchestrator_1.HealthOrchestrator, { user: { ...mockUser, id: `user-${i}` } }));
                }
                // Attendre la stabilisation
                await (0, react_1.waitFor)(() => {
                    // VÃ©rifier qu'une seule requÃªte a Ã©tÃ© faite
                    expect(ai_coach_service_1.AICoachService.calculateHealthScore).toHaveBeenCalledTimes(1);
                }, { timeout: 2000 });
            });
            it('utilise la mise en cache intelligente pour les donnÃ©es', async () => {
                // Premier rendu
                (0, react_1.render)((0, jsx_runtime_1.jsx)(HealthOrchestrator_1.HealthOrchestrator, { user: mockUser }));
                await (0, react_1.waitFor)(() => {
                    expect(ai_coach_service_1.AICoachService.calculateHealthScore).toHaveBeenCalledTimes(1);
                });
                // DeuxiÃ¨me rendu avec mÃªme utilisateur
                (0, react_1.render)((0, jsx_runtime_1.jsx)(HealthOrchestrator_1.HealthOrchestrator, { user: mockUser }));
                // VÃ©rifier que le cache est utilisÃ© (pas d'appel supplÃ©mentaire)
                expect(ai_coach_service_1.AICoachService.calculateHealthScore).toHaveBeenCalledTimes(1);
            });
        });
    });
    describe('AICoachService', () => {
        it('calcule correctement le score de santÃ© global basÃ© sur les piliers', () => {
            const pillarScores = {
                fitness: 85,
                nutrition: 90,
                sleep: 75,
                recovery: 80
            };
            const globalScore = ai_coach_service_1.AICoachService.calculateGlobalHealthScore(pillarScores);
            // Moyenne pondÃ©rÃ©e attendue
            expect(globalScore).toBeCloseTo(82.5, 1);
        });
        it('applique les pondÃ©rations correctes selon le profil utilisateur', () => {
            const athleteProfile = { type: 'athlete', focus: 'performance' };
            const casualProfile = { type: 'casual', focus: 'wellness' };
            const pillarScores = { fitness: 90, nutrition: 70, sleep: 80, recovery: 85 };
            const athleteScore = ai_coach_service_1.AICoachService.calculateWeightedScore(pillarScores, athleteProfile);
            const casualScore = ai_coach_service_1.AICoachService.calculateWeightedScore(pillarScores, casualProfile);
            // AthlÃ¨te devrait avoir fitness et recovery plus pondÃ©rÃ©s
            expect(athleteScore).toBeGreaterThan(casualScore);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,