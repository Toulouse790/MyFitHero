{"file":"/workspaces/MyFitHero/src/__tests__/unit/features/ai-coach.test.tsx","mappings":"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","names":[],"sources":["/workspaces/MyFitHero/src/__tests__/unit/features/ai-coach.test.tsx"],"sourcesContent":["/**\n * TESTS UNITAIRES EXHAUSTIFS - MODULE AI-COACH\n * Composant le plus critique : Orchestrateur de santÃ© globale\n */\n\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport { HealthOrchestrator } from '../../../features/ai-coach/components/HealthOrchestrator';\nimport { AICoachService } from '../../../features/ai-coach/services/ai-coach.service';\n\n// Mock des dÃ©pendances critiques\njest.mock('../../../features/ai-coach/services/ai-coach.service');\njest.mock('../../../core/api/supabase.client');\n\ndescribe('ðŸ¤– AI-COACH MODULE - Tests Unitaires Exhaustifs', () => {\n  describe('HealthOrchestrator Component', () => {\n    const mockUser = {\n      id: 'user-123',\n      active_modules: ['workout', 'nutrition', 'sleep', 'recovery'],\n      goals: ['strength', 'weight-loss'],\n      fitness_experience: 'intermediate'\n    };\n\n    beforeEach(() => {\n      jest.clearAllMocks();\n    });\n\n    it('affiche correctement le dashboard de santÃ© global', () => {\n      render(<HealthOrchestrator user={mockUser} />);\n      \n      // VÃ©rifications d'affichage critiques\n      expect(screen.getByText(/orchestrateur/i)).toBeInTheDocument();\n      expect(screen.getByTestId('health-score')).toBeInTheDocument();\n      expect(screen.getByTestId('pillar-overview')).toBeInTheDocument();\n    });\n\n    it('calcule et affiche le score de santÃ© global (0-100)', async () => {\n      // Mock du service de calcul de score\n      const mockHealthScore = {\n        global: 87,\n        pillars: {\n          fitness: 92,\n          nutrition: 85,\n          sleep: 88,\n          recovery: 83\n        }\n      };\n\n      (AICoachService.calculateHealthScore as jest.Mock).mockResolvedValue(mockHealthScore);\n\n      render(<HealthOrchestrator user={mockUser} />);\n\n      await waitFor(() => {\n        expect(screen.getByText('87')).toBeInTheDocument(); // Score global\n        expect(screen.getByText('92')).toBeInTheDocument(); // Fitness\n        expect(screen.getByText('85')).toBeInTheDocument(); // Nutrition\n      });\n    });\n\n    it('gÃ©nÃ¨re des recommandations personnalisÃ©es basÃ©es sur l\\'IA', async () => {\n      const mockRecommendations = [\n        { \n          id: '1', \n          type: 'workout',\n          priority: 'high',\n          title: 'Augmenter l\\'intensitÃ© cardio',\n          description: 'BasÃ© sur votre progression, il est temps d\\'intensifier',\n          evidence: { data_points: 15, confidence: 0.89 }\n        },\n        {\n          id: '2',\n          type: 'nutrition',\n          priority: 'medium', \n          title: 'Optimiser les protÃ©ines post-workout',\n          description: 'AmÃ©liorer la rÃ©cupÃ©ration musculaire',\n          evidence: { data_points: 23, confidence: 0.76 }\n        }\n      ];\n\n      (AICoachService.generateRecommendations as jest.Mock).mockResolvedValue(mockRecommendations);\n\n      render(<HealthOrchestrator user={mockUser} />);\n\n      await waitFor(() => {\n        expect(screen.getByText('Augmenter l\\'intensitÃ© cardio')).toBeInTheDocument();\n        expect(screen.getByText('Optimiser les protÃ©ines post-workout')).toBeInTheDocument();\n      });\n    });\n\n    it('gÃ¨re les erreurs d\\'analyse IA gracieusement', async () => {\n      // Simulation d'erreur service IA\n      (AICoachService.calculateHealthScore as jest.Mock).mockRejectedValue(\n        new Error('Service IA temporairement indisponible')\n      );\n\n      render(<HealthOrchestrator user={mockUser} />);\n\n      await waitFor(() => {\n        expect(screen.getByText(/temporairement indisponible/i)).toBeInTheDocument();\n        expect(screen.getByTestId('fallback-metrics')).toBeInTheDocument();\n      });\n    });\n\n    it('met Ã  jour en temps rÃ©el lors de changements de donnÃ©es', async () => {\n      const { rerender } = render(<HealthOrchestrator user={mockUser} />);\n\n      // Simulation changement donnÃ©es utilisateur\n      const updatedUser = {\n        ...mockUser,\n        active_modules: [...mockUser.active_modules, 'mental-health']\n      };\n\n      rerender(<HealthOrchestrator user={updatedUser} />);\n\n      await waitFor(() => {\n        expect(screen.getByTestId('mental-health-pillar')).toBeInTheDocument();\n      });\n    });\n\n    it('optimise les performances avec lazy loading des widgets', () => {\n      render(<HealthOrchestrator user={mockUser} />);\n      \n      // VÃ©rification que les widgets non critiques sont en lazy loading\n      const lazyWidgets = screen.queryAllByTestId(/lazy-widget/);\n      expect(lazyWidgets.length).toBeGreaterThan(0);\n    });\n\n    describe('Interactions utilisateur critiques', () => {\n      it('permet d\\'explorer les dÃ©tails de chaque pilier', async () => {\n        render(<HealthOrchestrator user={mockUser} />);\n        \n        // Clic sur pilier fitness\n        const fitnessCard = screen.getByTestId('fitness-pillar-card');\n        fireEvent.click(fitnessCard);\n\n        await waitFor(() => {\n          expect(screen.getByTestId('fitness-detailed-view')).toBeInTheDocument();\n          expect(screen.getByText(/progression/i)).toBeInTheDocument();\n        });\n      });\n\n      it('permet d\\'accepter/rejeter les recommandations IA', async () => {\n        const mockRecommendations = [\n          { \n            id: '1', \n            type: 'workout',\n            priority: 'high',\n            title: 'Test recommendation'\n          }\n        ];\n\n        (AICoachService.generateRecommendations as jest.Mock).mockResolvedValue(mockRecommendations);\n\n        render(<HealthOrchestrator user={mockUser} />);\n\n        await waitFor(() => {\n          const acceptButton = screen.getByTestId('accept-recommendation-1');\n          const rejectButton = screen.getByTestId('reject-recommendation-1');\n          \n          expect(acceptButton).toBeInTheDocument();\n          expect(rejectButton).toBeInTheDocument();\n        });\n\n        // Test interaction\n        const acceptButton = screen.getByTestId('accept-recommendation-1');\n        fireEvent.click(acceptButton);\n\n        expect(AICoachService.recordRecommendationFeedback).toHaveBeenCalledWith('1', 'accepted');\n      });\n    });\n\n    describe('Cas limites et edge cases', () => {\n      it('gÃ¨re un utilisateur sans modules actifs', () => {\n        const userNoModules = { ...mockUser, active_modules: [] };\n        render(<HealthOrchestrator user={userNoModules} />);\n\n        expect(screen.getByText(/aucun module actif/i)).toBeInTheDocument();\n        expect(screen.getByTestId('onboarding-suggestion')).toBeInTheDocument();\n      });\n\n      it('gÃ¨re des donnÃ©es de santÃ© incomplÃ¨tes', async () => {\n        const partialHealthData = {\n          global: null,\n          pillars: {\n            fitness: 85,\n            nutrition: null,\n            sleep: 75,\n            recovery: null\n          }\n        };\n\n        (AICoachService.calculateHealthScore as jest.Mock).mockResolvedValue(partialHealthData);\n\n        render(<HealthOrchestrator user={mockUser} />);\n\n        await waitFor(() => {\n          expect(screen.getByText(/donnÃ©es insuffisantes/i)).toBeInTheDocument();\n          expect(screen.getByTestId('data-collection-prompt')).toBeInTheDocument();\n        });\n      });\n\n      it('handle des scores de santÃ© extrÃªmes (0 et 100)', async () => {\n        const extremeScores = {\n          global: 100,\n          pillars: { fitness: 100, nutrition: 0, sleep: 100, recovery: 0 }\n        };\n\n        (AICoachService.calculateHealthScore as jest.Mock).mockResolvedValue(extremeScores);\n\n        render(<HealthOrchestrator user={mockUser} />);\n\n        await waitFor(() => {\n          expect(screen.getByTestId('perfect-score-celebration')).toBeInTheDocument();\n          expect(screen.getByTestId('critical-pillars-alert')).toBeInTheDocument();\n        });\n      });\n    });\n\n    describe('Performance et optimisation', () => {\n      it('debounce les appels API pour Ã©viter le spam', async () => {\n        const { rerender } = render(<HealthOrchestrator user={mockUser} />);\n\n        // Multiples re-renders rapides\n        for (let i = 0; i < 5; i++) {\n          rerender(<HealthOrchestrator user={{ ...mockUser, id: `user-${i}` }} />);\n        }\n\n        // Attendre la stabilisation\n        await waitFor(() => {\n          // VÃ©rifier qu'une seule requÃªte a Ã©tÃ© faite\n          expect(AICoachService.calculateHealthScore).toHaveBeenCalledTimes(1);\n        }, { timeout: 2000 });\n      });\n\n      it('utilise la mise en cache intelligente pour les donnÃ©es', async () => {\n        // Premier rendu\n        render(<HealthOrchestrator user={mockUser} />);\n        \n        await waitFor(() => {\n          expect(AICoachService.calculateHealthScore).toHaveBeenCalledTimes(1);\n        });\n\n        // DeuxiÃ¨me rendu avec mÃªme utilisateur\n        render(<HealthOrchestrator user={mockUser} />);\n\n        // VÃ©rifier que le cache est utilisÃ© (pas d'appel supplÃ©mentaire)\n        expect(AICoachService.calculateHealthScore).toHaveBeenCalledTimes(1);\n      });\n    });\n  });\n\n  describe('AICoachService', () => {\n    it('calcule correctement le score de santÃ© global basÃ© sur les piliers', () => {\n      const pillarScores = {\n        fitness: 85,\n        nutrition: 90,\n        sleep: 75,\n        recovery: 80\n      };\n\n      const globalScore = AICoachService.calculateGlobalHealthScore(pillarScores);\n      \n      // Moyenne pondÃ©rÃ©e attendue\n      expect(globalScore).toBeCloseTo(82.5, 1);\n    });\n\n    it('applique les pondÃ©rations correctes selon le profil utilisateur', () => {\n      const athleteProfile = { type: 'athlete', focus: 'performance' };\n      const casualProfile = { type: 'casual', focus: 'wellness' };\n\n      const pillarScores = { fitness: 90, nutrition: 70, sleep: 80, recovery: 85 };\n\n      const athleteScore = AICoachService.calculateWeightedScore(pillarScores, athleteProfile);\n      const casualScore = AICoachService.calculateWeightedScore(pillarScores, casualProfile);\n\n      // AthlÃ¨te devrait avoir fitness et recovery plus pondÃ©rÃ©s\n      expect(athleteScore).toBeGreaterThan(casualScore);\n    });\n  });\n});"],"version":3}