{"version":3,"names":["supabase_1","cov_11u6026v87","s","require","UserDataService","getPillarData","userId","pillarType","startDate","endDate","f","query","supabase","from","select","eq","order","ascending","b","gte","lte","data","error","console","catchError","savePillarData","pillarData","insert","created_at","Date","toISOString","updated_at","updatePillarData","id","updates","update","getUserStats","single","updateUserStats","upsert","user_id","getDailyCheckin","date","saveOrUpdateDailyCheckin","checkinData","getCheckinHistory","limit","calculateCurrentStreak","checkins","length","streak","today","i","checkinDate","dayDiff","Math","floor","getTime","isCheckinComplete","checkin","workout_completed","nutrition_logged","sleep_tracked","hydration_logged","getDashboardData","split","weekAgo","now","stats","todayCheckin","weeklyData","currentStreak","Promise","all","exports"],"sources":["/workspaces/MyFitHero/src/lib/services/userDataService.ts"],"sourcesContent":["// client/src/services/userDataService.ts\nimport { supabase } from '@/lib/supabase';\n\nexport interface UserPillarData {\n  id: string;\n  user_id: string;\n  pillar_type: 'workout' | 'nutrition' | 'sleep' | 'hydration';\n  date: string;\n  value: number;\n  unit: string;\n  notes?: string;\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface UserStats {\n  id: string;\n  user_id: string;\n  total_workouts: number;\n  total_nutrition_logs: number;\n  total_sleep_hours: number;\n  total_hydration_logs: number;\n  current_streak: number;\n  longest_streak: number;\n  badges_earned: number;\n  level: number;\n  experience_points: number;\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface DailyCheckin {\n  id: string;\n  user_id: string;\n  date: string;\n  workout_completed: boolean;\n  nutrition_logged: boolean;\n  sleep_tracked: boolean;\n  hydration_logged: boolean;\n  mood_score: number;\n  energy_level: number;\n  notes?: string;\n  created_at: string;\n  updated_at: string;\n}\n\nexport class UserDataService {\n  /**\n   * Récupère les données d'un pilier pour un utilisateur\n   */\n  static async getPillarData(\n    userId: string,\n    pillarType: 'workout' | 'nutrition' | 'sleep' | 'hydration',\n    startDate?: string,\n    endDate?: string\n  ): Promise<UserPillarData[]> {\n    try {\n      let query = supabase\n        .from('user_pillar_data')\n        .select('*')\n        .eq('user_id', userId)\n        .eq('pillar_type', pillarType)\n        .order('date', { ascending: false });\n\n      if (startDate) {\n        query = query.gte('date', startDate);\n      }\n      if (endDate) {\n        query = query.lte('date', endDate);\n      }\n\n      const { data, error }: any = await query;\n\n      if (error) {\n        console.error('Erreur lors de la récupération des données du pilier:', error);\n        return [];\n      }\n\n      return data || [];\n    } catch (catchError) {\n      // Erreur silencieuse\n      console.error('Erreur lors de la récupération des données du pilier:', catchError);\n      return [];\n    }\n  }\n\n  /**\n   * Sauvegarde les données d'un pilier\n   */\n  static async savePillarData(\n    pillarData: Omit<UserPillarData, 'id' | 'created_at' | 'updated_at'>\n  ): Promise<boolean> {\n    try {\n      const { error } = await supabase.from('user_pillar_data').insert([\n        {\n          ...pillarData,\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString(),\n        },\n      ]);\n\n      if (error) {\n        console.error('Erreur lors de la sauvegarde des données du pilier:', error);\n        return false;\n      }\n\n      return true;\n    } catch (catchError) {\n      // Erreur silencieuse\n      console.error('Erreur lors de la sauvegarde des données du pilier:', catchError);\n      return false;\n    }\n  }\n\n  /**\n   * Met à jour les données d'un pilier\n   */\n  static async updatePillarData(id: string, updates: Partial<UserPillarData>): Promise<boolean> {\n    try {\n      const { error } = await supabase\n        .from('user_pillar_data')\n        .update({\n          ...updates,\n          updated_at: new Date().toISOString(),\n        })\n        .eq('id', id);\n\n      if (error) {\n        console.error('Erreur lors de la mise à jour des données du pilier:', error);\n        return false;\n      }\n\n      return true;\n    } catch (catchError) {\n      // Erreur silencieuse\n      console.error('Erreur lors de la mise à jour des données du pilier:', catchError);\n      return false;\n    }\n  }\n\n  /**\n   * Récupère les statistiques d'un utilisateur\n   */\n  static async getUserStats(userId: string): Promise<UserStats | null> {\n    try {\n      const { data, error }: any = await supabase\n        .from('user_stats')\n        .select('*')\n        .eq('user_id', userId)\n        .single();\n\n      if (error) {\n        console.error('Erreur lors de la récupération des statistiques:', error);\n        return null;\n      }\n\n      return data;\n    } catch (catchError) {\n      // Erreur silencieuse\n      console.error('Erreur lors de la récupération des statistiques:', catchError);\n      return null;\n    }\n  }\n\n  /**\n   * Met à jour les statistiques d'un utilisateur\n   */\n  static async updateUserStats(userId: string, updates: Partial<UserStats>): Promise<boolean> {\n    try {\n      const { error } = await supabase.from('user_stats').upsert({\n        user_id: userId,\n        ...updates,\n        updated_at: new Date().toISOString(),\n      });\n\n      if (error) {\n        console.error('Erreur lors de la mise à jour des statistiques:', error);\n        return false;\n      }\n\n      return true;\n    } catch (catchError) {\n      // Erreur silencieuse\n      console.error('Erreur lors de la mise à jour des statistiques:', catchError);\n      return false;\n    }\n  }\n\n  /**\n   * Récupère le check-in quotidien d'un utilisateur\n   */\n  static async getDailyCheckin(userId: string, date: string): Promise<DailyCheckin | null> {\n    try {\n      const { data, error }: any = await supabase\n        .from('daily_checkins')\n        .select('*')\n        .eq('user_id', userId)\n        .eq('date', date)\n        .single();\n\n      if (error) {\n        console.error('Erreur lors de la récupération du check-in:', error);\n        return null;\n      }\n\n      return data;\n    } catch (catchError) {\n      // Erreur silencieuse\n      console.error('Erreur lors de la récupération du check-in:', catchError);\n      return null;\n    }\n  }\n\n  /**\n   * Sauvegarde ou met à jour le check-in quotidien\n   */\n  static async saveOrUpdateDailyCheckin(\n    checkinData: Omit<DailyCheckin, 'id' | 'created_at' | 'updated_at'>\n  ): Promise<boolean> {\n    try {\n      const { error } = await supabase.from('daily_checkins').upsert({\n        ...checkinData,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString(),\n      });\n\n      if (error) {\n        console.error('Erreur lors de la sauvegarde du check-in:', error);\n        return false;\n      }\n\n      return true;\n    } catch (catchError) {\n      // Erreur silencieuse\n      console.error('Erreur lors de la sauvegarde du check-in:', catchError);\n      return false;\n    }\n  }\n\n  /**\n   * Récupère l'historique des check-ins d'un utilisateur\n   */\n  static async getCheckinHistory(userId: string, limit: number = 30): Promise<DailyCheckin[]> {\n    try {\n      const { data, error }: any = await supabase\n        .from('daily_checkins')\n        .select('*')\n        .eq('user_id', userId)\n        .order('date', { ascending: false })\n        .limit(limit);\n\n      if (error) {\n        console.error(\"Erreur lors de la récupération de l'historique des check-ins:\", error);\n        return [];\n      }\n\n      return data || [];\n    } catch (catchError) {\n      // Erreur silencieuse\n      console.error(\"Erreur lors de la récupération de l'historique des check-ins:\", catchError);\n      return [];\n    }\n  }\n\n  /**\n   * Calcule la streak actuelle d'un utilisateur\n   */\n  static async calculateCurrentStreak(userId: string): Promise<number> {\n    try {\n      const checkins = await this.getCheckinHistory(userId, 365);\n\n      if (checkins.length === 0) return 0;\n\n      let streak = 0;\n      const today = new Date();\n\n      for (let i = 0; i < checkins.length; i++) {\n        const checkinDate = new Date(checkins[i].date);\n        const dayDiff = Math.floor(\n          (today.getTime() - checkinDate.getTime()) / (1000 * 60 * 60 * 24)\n        );\n\n        if (dayDiff === i && this.isCheckinComplete(checkins[i])) {\n          streak++;\n        } else {\n          break;\n        }\n      }\n\n      return streak;\n    } catch (catchError) {\n      // Erreur silencieuse\n      console.error('Erreur lors du calcul de la streak:', catchError);\n      return 0;\n    }\n  }\n\n  /**\n   * Vérifie si un check-in est complet\n   */\n  private static isCheckinComplete(checkin: DailyCheckin): boolean {\n    return (\n      checkin.workout_completed &&\n      checkin.nutrition_logged &&\n      checkin.sleep_tracked &&\n      checkin.hydration_logged\n    );\n  }\n\n  /**\n   * Récupère les données de progression pour le dashboard\n   */\n  static async getDashboardData(userId: string): Promise<{\n    stats: UserStats | undefined;\n    todayCheckin: DailyCheckin | undefined;\n    weeklyData: UserPillarData[];\n    currentStreak: number;\n  }> {\n    try {\n      const today = new Date().toISOString().split('T')[0];\n      const weekAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0];\n\n      const [stats, todayCheckin, weeklyData, currentStreak] = await Promise.all([\n        this.getUserStats(userId),\n        this.getDailyCheckin(userId, today),\n        this.getPillarData(userId, 'workout', weekAgo), // Exemple avec workout\n        this.calculateCurrentStreak(userId),\n      ]);\n\n      return {\n        stats,\n        todayCheckin,\n        weeklyData,\n        currentStreak,\n      };\n    } catch (catchError) {\n      // Erreur silencieuse\n      console.error('Erreur lors de la récupération des données du dashboard:', catchError);\n      return {\n        stats: null,\n        todayCheckin: null,\n        weeklyData: [],\n        currentStreak: 0,\n      };\n    }\n  }\n}\n"],"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","ignoreList":[]}