08597c36c4f01d64b2b507895919e6e1
"use strict";

/* istanbul ignore next */
function cov_11u6026v87() {
  var path = "/workspaces/MyFitHero/src/lib/services/userDataService.ts";
  var hash = "ced8cd78163dcfd1f46007f5e31361b2beb6dcca";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/MyFitHero/src/lib/services/userDataService.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 33
        }
      },
      "2": {
        start: {
          line: 5,
          column: 19
        },
        end: {
          line: 5,
          column: 44
        }
      },
      "3": {
        start: {
          line: 11,
          column: 8
        },
        end: {
          line: 35,
          column: 9
        }
      },
      "4": {
        start: {
          line: 12,
          column: 24
        },
        end: {
          line: 17,
          column: 52
        }
      },
      "5": {
        start: {
          line: 18,
          column: 12
        },
        end: {
          line: 20,
          column: 13
        }
      },
      "6": {
        start: {
          line: 19,
          column: 16
        },
        end: {
          line: 19,
          column: 53
        }
      },
      "7": {
        start: {
          line: 21,
          column: 12
        },
        end: {
          line: 23,
          column: 13
        }
      },
      "8": {
        start: {
          line: 22,
          column: 16
        },
        end: {
          line: 22,
          column: 51
        }
      },
      "9": {
        start: {
          line: 24,
          column: 36
        },
        end: {
          line: 24,
          column: 47
        }
      },
      "10": {
        start: {
          line: 25,
          column: 12
        },
        end: {
          line: 28,
          column: 13
        }
      },
      "11": {
        start: {
          line: 26,
          column: 16
        },
        end: {
          line: 26,
          column: 94
        }
      },
      "12": {
        start: {
          line: 27,
          column: 16
        },
        end: {
          line: 27,
          column: 26
        }
      },
      "13": {
        start: {
          line: 29,
          column: 12
        },
        end: {
          line: 29,
          column: 30
        }
      },
      "14": {
        start: {
          line: 33,
          column: 12
        },
        end: {
          line: 33,
          column: 95
        }
      },
      "15": {
        start: {
          line: 34,
          column: 12
        },
        end: {
          line: 34,
          column: 22
        }
      },
      "16": {
        start: {
          line: 41,
          column: 8
        },
        end: {
          line: 59,
          column: 9
        }
      },
      "17": {
        start: {
          line: 42,
          column: 30
        },
        end: {
          line: 48,
          column: 14
        }
      },
      "18": {
        start: {
          line: 49,
          column: 12
        },
        end: {
          line: 52,
          column: 13
        }
      },
      "19": {
        start: {
          line: 50,
          column: 16
        },
        end: {
          line: 50,
          column: 92
        }
      },
      "20": {
        start: {
          line: 51,
          column: 16
        },
        end: {
          line: 51,
          column: 29
        }
      },
      "21": {
        start: {
          line: 53,
          column: 12
        },
        end: {
          line: 53,
          column: 24
        }
      },
      "22": {
        start: {
          line: 57,
          column: 12
        },
        end: {
          line: 57,
          column: 93
        }
      },
      "23": {
        start: {
          line: 58,
          column: 12
        },
        end: {
          line: 58,
          column: 25
        }
      },
      "24": {
        start: {
          line: 65,
          column: 8
        },
        end: {
          line: 83,
          column: 9
        }
      },
      "25": {
        start: {
          line: 66,
          column: 30
        },
        end: {
          line: 72,
          column: 29
        }
      },
      "26": {
        start: {
          line: 73,
          column: 12
        },
        end: {
          line: 76,
          column: 13
        }
      },
      "27": {
        start: {
          line: 74,
          column: 16
        },
        end: {
          line: 74,
          column: 93
        }
      },
      "28": {
        start: {
          line: 75,
          column: 16
        },
        end: {
          line: 75,
          column: 29
        }
      },
      "29": {
        start: {
          line: 77,
          column: 12
        },
        end: {
          line: 77,
          column: 24
        }
      },
      "30": {
        start: {
          line: 81,
          column: 12
        },
        end: {
          line: 81,
          column: 94
        }
      },
      "31": {
        start: {
          line: 82,
          column: 12
        },
        end: {
          line: 82,
          column: 25
        }
      },
      "32": {
        start: {
          line: 89,
          column: 8
        },
        end: {
          line: 105,
          column: 9
        }
      },
      "33": {
        start: {
          line: 90,
          column: 36
        },
        end: {
          line: 94,
          column: 25
        }
      },
      "34": {
        start: {
          line: 95,
          column: 12
        },
        end: {
          line: 98,
          column: 13
        }
      },
      "35": {
        start: {
          line: 96,
          column: 16
        },
        end: {
          line: 96,
          column: 89
        }
      },
      "36": {
        start: {
          line: 97,
          column: 16
        },
        end: {
          line: 97,
          column: 28
        }
      },
      "37": {
        start: {
          line: 99,
          column: 12
        },
        end: {
          line: 99,
          column: 24
        }
      },
      "38": {
        start: {
          line: 103,
          column: 12
        },
        end: {
          line: 103,
          column: 90
        }
      },
      "39": {
        start: {
          line: 104,
          column: 12
        },
        end: {
          line: 104,
          column: 24
        }
      },
      "40": {
        start: {
          line: 111,
          column: 8
        },
        end: {
          line: 127,
          column: 9
        }
      },
      "41": {
        start: {
          line: 112,
          column: 30
        },
        end: {
          line: 116,
          column: 14
        }
      },
      "42": {
        start: {
          line: 117,
          column: 12
        },
        end: {
          line: 120,
          column: 13
        }
      },
      "43": {
        start: {
          line: 118,
          column: 16
        },
        end: {
          line: 118,
          column: 88
        }
      },
      "44": {
        start: {
          line: 119,
          column: 16
        },
        end: {
          line: 119,
          column: 29
        }
      },
      "45": {
        start: {
          line: 121,
          column: 12
        },
        end: {
          line: 121,
          column: 24
        }
      },
      "46": {
        start: {
          line: 125,
          column: 12
        },
        end: {
          line: 125,
          column: 89
        }
      },
      "47": {
        start: {
          line: 126,
          column: 12
        },
        end: {
          line: 126,
          column: 25
        }
      },
      "48": {
        start: {
          line: 133,
          column: 8
        },
        end: {
          line: 150,
          column: 9
        }
      },
      "49": {
        start: {
          line: 134,
          column: 36
        },
        end: {
          line: 139,
          column: 25
        }
      },
      "50": {
        start: {
          line: 140,
          column: 12
        },
        end: {
          line: 143,
          column: 13
        }
      },
      "51": {
        start: {
          line: 141,
          column: 16
        },
        end: {
          line: 141,
          column: 84
        }
      },
      "52": {
        start: {
          line: 142,
          column: 16
        },
        end: {
          line: 142,
          column: 28
        }
      },
      "53": {
        start: {
          line: 144,
          column: 12
        },
        end: {
          line: 144,
          column: 24
        }
      },
      "54": {
        start: {
          line: 148,
          column: 12
        },
        end: {
          line: 148,
          column: 85
        }
      },
      "55": {
        start: {
          line: 149,
          column: 12
        },
        end: {
          line: 149,
          column: 24
        }
      },
      "56": {
        start: {
          line: 156,
          column: 8
        },
        end: {
          line: 172,
          column: 9
        }
      },
      "57": {
        start: {
          line: 157,
          column: 30
        },
        end: {
          line: 161,
          column: 14
        }
      },
      "58": {
        start: {
          line: 162,
          column: 12
        },
        end: {
          line: 165,
          column: 13
        }
      },
      "59": {
        start: {
          line: 163,
          column: 16
        },
        end: {
          line: 163,
          column: 82
        }
      },
      "60": {
        start: {
          line: 164,
          column: 16
        },
        end: {
          line: 164,
          column: 29
        }
      },
      "61": {
        start: {
          line: 166,
          column: 12
        },
        end: {
          line: 166,
          column: 24
        }
      },
      "62": {
        start: {
          line: 170,
          column: 12
        },
        end: {
          line: 170,
          column: 83
        }
      },
      "63": {
        start: {
          line: 171,
          column: 12
        },
        end: {
          line: 171,
          column: 25
        }
      },
      "64": {
        start: {
          line: 178,
          column: 8
        },
        end: {
          line: 195,
          column: 9
        }
      },
      "65": {
        start: {
          line: 179,
          column: 36
        },
        end: {
          line: 184,
          column: 29
        }
      },
      "66": {
        start: {
          line: 185,
          column: 12
        },
        end: {
          line: 188,
          column: 13
        }
      },
      "67": {
        start: {
          line: 186,
          column: 16
        },
        end: {
          line: 186,
          column: 102
        }
      },
      "68": {
        start: {
          line: 187,
          column: 16
        },
        end: {
          line: 187,
          column: 26
        }
      },
      "69": {
        start: {
          line: 189,
          column: 12
        },
        end: {
          line: 189,
          column: 30
        }
      },
      "70": {
        start: {
          line: 193,
          column: 12
        },
        end: {
          line: 193,
          column: 103
        }
      },
      "71": {
        start: {
          line: 194,
          column: 12
        },
        end: {
          line: 194,
          column: 22
        }
      },
      "72": {
        start: {
          line: 201,
          column: 8
        },
        end: {
          line: 223,
          column: 9
        }
      },
      "73": {
        start: {
          line: 202,
          column: 29
        },
        end: {
          line: 202,
          column: 70
        }
      },
      "74": {
        start: {
          line: 203,
          column: 12
        },
        end: {
          line: 204,
          column: 25
        }
      },
      "75": {
        start: {
          line: 204,
          column: 16
        },
        end: {
          line: 204,
          column: 25
        }
      },
      "76": {
        start: {
          line: 205,
          column: 25
        },
        end: {
          line: 205,
          column: 26
        }
      },
      "77": {
        start: {
          line: 206,
          column: 26
        },
        end: {
          line: 206,
          column: 36
        }
      },
      "78": {
        start: {
          line: 207,
          column: 12
        },
        end: {
          line: 216,
          column: 13
        }
      },
      "79": {
        start: {
          line: 207,
          column: 25
        },
        end: {
          line: 207,
          column: 26
        }
      },
      "80": {
        start: {
          line: 208,
          column: 36
        },
        end: {
          line: 208,
          column: 62
        }
      },
      "81": {
        start: {
          line: 209,
          column: 32
        },
        end: {
          line: 209,
          column: 109
        }
      },
      "82": {
        start: {
          line: 210,
          column: 16
        },
        end: {
          line: 215,
          column: 17
        }
      },
      "83": {
        start: {
          line: 211,
          column: 20
        },
        end: {
          line: 211,
          column: 29
        }
      },
      "84": {
        start: {
          line: 214,
          column: 20
        },
        end: {
          line: 214,
          column: 26
        }
      },
      "85": {
        start: {
          line: 217,
          column: 12
        },
        end: {
          line: 217,
          column: 26
        }
      },
      "86": {
        start: {
          line: 221,
          column: 12
        },
        end: {
          line: 221,
          column: 77
        }
      },
      "87": {
        start: {
          line: 222,
          column: 12
        },
        end: {
          line: 222,
          column: 21
        }
      },
      "88": {
        start: {
          line: 229,
          column: 8
        },
        end: {
          line: 232,
          column: 38
        }
      },
      "89": {
        start: {
          line: 238,
          column: 8
        },
        end: {
          line: 263,
          column: 9
        }
      },
      "90": {
        start: {
          line: 239,
          column: 26
        },
        end: {
          line: 239,
          column: 64
        }
      },
      "91": {
        start: {
          line: 240,
          column: 28
        },
        end: {
          line: 240,
          column: 102
        }
      },
      "92": {
        start: {
          line: 241,
          column: 69
        },
        end: {
          line: 246,
          column: 14
        }
      },
      "93": {
        start: {
          line: 247,
          column: 12
        },
        end: {
          line: 252,
          column: 14
        }
      },
      "94": {
        start: {
          line: 256,
          column: 12
        },
        end: {
          line: 256,
          column: 98
        }
      },
      "95": {
        start: {
          line: 257,
          column: 12
        },
        end: {
          line: 262,
          column: 14
        }
      },
      "96": {
        start: {
          line: 266,
          column: 0
        },
        end: {
          line: 266,
          column: 42
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 10,
            column: 5
          }
        },
        loc: {
          start: {
            line: 10,
            column: 71
          },
          end: {
            line: 36,
            column: 5
          }
        },
        line: 10
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 40,
            column: 4
          },
          end: {
            line: 40,
            column: 5
          }
        },
        loc: {
          start: {
            line: 40,
            column: 44
          },
          end: {
            line: 60,
            column: 5
          }
        },
        line: 40
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 64,
            column: 4
          },
          end: {
            line: 64,
            column: 5
          }
        },
        loc: {
          start: {
            line: 64,
            column: 47
          },
          end: {
            line: 84,
            column: 5
          }
        },
        line: 64
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 88,
            column: 4
          },
          end: {
            line: 88,
            column: 5
          }
        },
        loc: {
          start: {
            line: 88,
            column: 38
          },
          end: {
            line: 106,
            column: 5
          }
        },
        line: 88
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 110,
            column: 4
          },
          end: {
            line: 110,
            column: 5
          }
        },
        loc: {
          start: {
            line: 110,
            column: 50
          },
          end: {
            line: 128,
            column: 5
          }
        },
        line: 110
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 132,
            column: 4
          },
          end: {
            line: 132,
            column: 5
          }
        },
        loc: {
          start: {
            line: 132,
            column: 47
          },
          end: {
            line: 151,
            column: 5
          }
        },
        line: 132
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 155,
            column: 4
          },
          end: {
            line: 155,
            column: 5
          }
        },
        loc: {
          start: {
            line: 155,
            column: 55
          },
          end: {
            line: 173,
            column: 5
          }
        },
        line: 155
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 177,
            column: 4
          },
          end: {
            line: 177,
            column: 5
          }
        },
        loc: {
          start: {
            line: 177,
            column: 55
          },
          end: {
            line: 196,
            column: 5
          }
        },
        line: 177
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 200,
            column: 4
          },
          end: {
            line: 200,
            column: 5
          }
        },
        loc: {
          start: {
            line: 200,
            column: 48
          },
          end: {
            line: 224,
            column: 5
          }
        },
        line: 200
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 228,
            column: 4
          },
          end: {
            line: 228,
            column: 5
          }
        },
        loc: {
          start: {
            line: 228,
            column: 38
          },
          end: {
            line: 233,
            column: 5
          }
        },
        line: 228
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 237,
            column: 4
          },
          end: {
            line: 237,
            column: 5
          }
        },
        loc: {
          start: {
            line: 237,
            column: 42
          },
          end: {
            line: 264,
            column: 5
          }
        },
        line: 237
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 18,
            column: 12
          },
          end: {
            line: 20,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 18,
            column: 12
          },
          end: {
            line: 20,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 18
      },
      "1": {
        loc: {
          start: {
            line: 21,
            column: 12
          },
          end: {
            line: 23,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 21,
            column: 12
          },
          end: {
            line: 23,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 21
      },
      "2": {
        loc: {
          start: {
            line: 25,
            column: 12
          },
          end: {
            line: 28,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 25,
            column: 12
          },
          end: {
            line: 28,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 25
      },
      "3": {
        loc: {
          start: {
            line: 29,
            column: 19
          },
          end: {
            line: 29,
            column: 29
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 29,
            column: 19
          },
          end: {
            line: 29,
            column: 23
          }
        }, {
          start: {
            line: 29,
            column: 27
          },
          end: {
            line: 29,
            column: 29
          }
        }],
        line: 29
      },
      "4": {
        loc: {
          start: {
            line: 49,
            column: 12
          },
          end: {
            line: 52,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 49,
            column: 12
          },
          end: {
            line: 52,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 49
      },
      "5": {
        loc: {
          start: {
            line: 73,
            column: 12
          },
          end: {
            line: 76,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 73,
            column: 12
          },
          end: {
            line: 76,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 73
      },
      "6": {
        loc: {
          start: {
            line: 95,
            column: 12
          },
          end: {
            line: 98,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 95,
            column: 12
          },
          end: {
            line: 98,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 95
      },
      "7": {
        loc: {
          start: {
            line: 117,
            column: 12
          },
          end: {
            line: 120,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 117,
            column: 12
          },
          end: {
            line: 120,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 117
      },
      "8": {
        loc: {
          start: {
            line: 140,
            column: 12
          },
          end: {
            line: 143,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 140,
            column: 12
          },
          end: {
            line: 143,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 140
      },
      "9": {
        loc: {
          start: {
            line: 162,
            column: 12
          },
          end: {
            line: 165,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 162,
            column: 12
          },
          end: {
            line: 165,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 162
      },
      "10": {
        loc: {
          start: {
            line: 177,
            column: 43
          },
          end: {
            line: 177,
            column: 53
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 177,
            column: 51
          },
          end: {
            line: 177,
            column: 53
          }
        }],
        line: 177
      },
      "11": {
        loc: {
          start: {
            line: 185,
            column: 12
          },
          end: {
            line: 188,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 185,
            column: 12
          },
          end: {
            line: 188,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 185
      },
      "12": {
        loc: {
          start: {
            line: 189,
            column: 19
          },
          end: {
            line: 189,
            column: 29
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 189,
            column: 19
          },
          end: {
            line: 189,
            column: 23
          }
        }, {
          start: {
            line: 189,
            column: 27
          },
          end: {
            line: 189,
            column: 29
          }
        }],
        line: 189
      },
      "13": {
        loc: {
          start: {
            line: 203,
            column: 12
          },
          end: {
            line: 204,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 203,
            column: 12
          },
          end: {
            line: 204,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 203
      },
      "14": {
        loc: {
          start: {
            line: 210,
            column: 16
          },
          end: {
            line: 215,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 210,
            column: 16
          },
          end: {
            line: 215,
            column: 17
          }
        }, {
          start: {
            line: 213,
            column: 21
          },
          end: {
            line: 215,
            column: 17
          }
        }],
        line: 210
      },
      "15": {
        loc: {
          start: {
            line: 210,
            column: 20
          },
          end: {
            line: 210,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 210,
            column: 20
          },
          end: {
            line: 210,
            column: 33
          }
        }, {
          start: {
            line: 210,
            column: 37
          },
          end: {
            line: 210,
            column: 72
          }
        }],
        line: 210
      },
      "16": {
        loc: {
          start: {
            line: 229,
            column: 16
          },
          end: {
            line: 232,
            column: 36
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 229,
            column: 16
          },
          end: {
            line: 229,
            column: 41
          }
        }, {
          start: {
            line: 230,
            column: 12
          },
          end: {
            line: 230,
            column: 36
          }
        }, {
          start: {
            line: 231,
            column: 12
          },
          end: {
            line: 231,
            column: 33
          }
        }, {
          start: {
            line: 232,
            column: 12
          },
          end: {
            line: 232,
            column: 36
          }
        }],
        line: 229
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0, 0, 0]
    },
    inputSourceMap: {
      file: "/workspaces/MyFitHero/src/lib/services/userDataService.ts",
      mappings: "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",
      names: [],
      sources: ["/workspaces/MyFitHero/src/lib/services/userDataService.ts"],
      sourcesContent: ["// client/src/services/userDataService.ts\nimport { supabase } from '@/lib/supabase';\n\nexport interface UserPillarData {\n  id: string;\n  user_id: string;\n  pillar_type: 'workout' | 'nutrition' | 'sleep' | 'hydration';\n  date: string;\n  value: number;\n  unit: string;\n  notes?: string;\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface UserStats {\n  id: string;\n  user_id: string;\n  total_workouts: number;\n  total_nutrition_logs: number;\n  total_sleep_hours: number;\n  total_hydration_logs: number;\n  current_streak: number;\n  longest_streak: number;\n  badges_earned: number;\n  level: number;\n  experience_points: number;\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface DailyCheckin {\n  id: string;\n  user_id: string;\n  date: string;\n  workout_completed: boolean;\n  nutrition_logged: boolean;\n  sleep_tracked: boolean;\n  hydration_logged: boolean;\n  mood_score: number;\n  energy_level: number;\n  notes?: string;\n  created_at: string;\n  updated_at: string;\n}\n\nexport class UserDataService {\n  /**\n   * R\xE9cup\xE8re les donn\xE9es d'un pilier pour un utilisateur\n   */\n  static async getPillarData(\n    userId: string,\n    pillarType: 'workout' | 'nutrition' | 'sleep' | 'hydration',\n    startDate?: string,\n    endDate?: string\n  ): Promise<UserPillarData[]> {\n    try {\n      let query = supabase\n        .from('user_pillar_data')\n        .select('*')\n        .eq('user_id', userId)\n        .eq('pillar_type', pillarType)\n        .order('date', { ascending: false });\n\n      if (startDate) {\n        query = query.gte('date', startDate);\n      }\n      if (endDate) {\n        query = query.lte('date', endDate);\n      }\n\n      const { data, error }: any = await query;\n\n      if (error) {\n        console.error('Erreur lors de la r\xE9cup\xE9ration des donn\xE9es du pilier:', error);\n        return [];\n      }\n\n      return data || [];\n    } catch (catchError) {\n      // Erreur silencieuse\n      console.error('Erreur lors de la r\xE9cup\xE9ration des donn\xE9es du pilier:', catchError);\n      return [];\n    }\n  }\n\n  /**\n   * Sauvegarde les donn\xE9es d'un pilier\n   */\n  static async savePillarData(\n    pillarData: Omit<UserPillarData, 'id' | 'created_at' | 'updated_at'>\n  ): Promise<boolean> {\n    try {\n      const { error } = await supabase.from('user_pillar_data').insert([\n        {\n          ...pillarData,\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString(),\n        },\n      ]);\n\n      if (error) {\n        console.error('Erreur lors de la sauvegarde des donn\xE9es du pilier:', error);\n        return false;\n      }\n\n      return true;\n    } catch (catchError) {\n      // Erreur silencieuse\n      console.error('Erreur lors de la sauvegarde des donn\xE9es du pilier:', catchError);\n      return false;\n    }\n  }\n\n  /**\n   * Met \xE0 jour les donn\xE9es d'un pilier\n   */\n  static async updatePillarData(id: string, updates: Partial<UserPillarData>): Promise<boolean> {\n    try {\n      const { error } = await supabase\n        .from('user_pillar_data')\n        .update({\n          ...updates,\n          updated_at: new Date().toISOString(),\n        })\n        .eq('id', id);\n\n      if (error) {\n        console.error('Erreur lors de la mise \xE0 jour des donn\xE9es du pilier:', error);\n        return false;\n      }\n\n      return true;\n    } catch (catchError) {\n      // Erreur silencieuse\n      console.error('Erreur lors de la mise \xE0 jour des donn\xE9es du pilier:', catchError);\n      return false;\n    }\n  }\n\n  /**\n   * R\xE9cup\xE8re les statistiques d'un utilisateur\n   */\n  static async getUserStats(userId: string): Promise<UserStats | null> {\n    try {\n      const { data, error }: any = await supabase\n        .from('user_stats')\n        .select('*')\n        .eq('user_id', userId)\n        .single();\n\n      if (error) {\n        console.error('Erreur lors de la r\xE9cup\xE9ration des statistiques:', error);\n        return null;\n      }\n\n      return data;\n    } catch (catchError) {\n      // Erreur silencieuse\n      console.error('Erreur lors de la r\xE9cup\xE9ration des statistiques:', catchError);\n      return null;\n    }\n  }\n\n  /**\n   * Met \xE0 jour les statistiques d'un utilisateur\n   */\n  static async updateUserStats(userId: string, updates: Partial<UserStats>): Promise<boolean> {\n    try {\n      const { error } = await supabase.from('user_stats').upsert({\n        user_id: userId,\n        ...updates,\n        updated_at: new Date().toISOString(),\n      });\n\n      if (error) {\n        console.error('Erreur lors de la mise \xE0 jour des statistiques:', error);\n        return false;\n      }\n\n      return true;\n    } catch (catchError) {\n      // Erreur silencieuse\n      console.error('Erreur lors de la mise \xE0 jour des statistiques:', catchError);\n      return false;\n    }\n  }\n\n  /**\n   * R\xE9cup\xE8re le check-in quotidien d'un utilisateur\n   */\n  static async getDailyCheckin(userId: string, date: string): Promise<DailyCheckin | null> {\n    try {\n      const { data, error }: any = await supabase\n        .from('daily_checkins')\n        .select('*')\n        .eq('user_id', userId)\n        .eq('date', date)\n        .single();\n\n      if (error) {\n        console.error('Erreur lors de la r\xE9cup\xE9ration du check-in:', error);\n        return null;\n      }\n\n      return data;\n    } catch (catchError) {\n      // Erreur silencieuse\n      console.error('Erreur lors de la r\xE9cup\xE9ration du check-in:', catchError);\n      return null;\n    }\n  }\n\n  /**\n   * Sauvegarde ou met \xE0 jour le check-in quotidien\n   */\n  static async saveOrUpdateDailyCheckin(\n    checkinData: Omit<DailyCheckin, 'id' | 'created_at' | 'updated_at'>\n  ): Promise<boolean> {\n    try {\n      const { error } = await supabase.from('daily_checkins').upsert({\n        ...checkinData,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString(),\n      });\n\n      if (error) {\n        console.error('Erreur lors de la sauvegarde du check-in:', error);\n        return false;\n      }\n\n      return true;\n    } catch (catchError) {\n      // Erreur silencieuse\n      console.error('Erreur lors de la sauvegarde du check-in:', catchError);\n      return false;\n    }\n  }\n\n  /**\n   * R\xE9cup\xE8re l'historique des check-ins d'un utilisateur\n   */\n  static async getCheckinHistory(userId: string, limit: number = 30): Promise<DailyCheckin[]> {\n    try {\n      const { data, error }: any = await supabase\n        .from('daily_checkins')\n        .select('*')\n        .eq('user_id', userId)\n        .order('date', { ascending: false })\n        .limit(limit);\n\n      if (error) {\n        console.error(\"Erreur lors de la r\xE9cup\xE9ration de l'historique des check-ins:\", error);\n        return [];\n      }\n\n      return data || [];\n    } catch (catchError) {\n      // Erreur silencieuse\n      console.error(\"Erreur lors de la r\xE9cup\xE9ration de l'historique des check-ins:\", catchError);\n      return [];\n    }\n  }\n\n  /**\n   * Calcule la streak actuelle d'un utilisateur\n   */\n  static async calculateCurrentStreak(userId: string): Promise<number> {\n    try {\n      const checkins = await this.getCheckinHistory(userId, 365);\n\n      if (checkins.length === 0) return 0;\n\n      let streak = 0;\n      const today = new Date();\n\n      for (let i = 0; i < checkins.length; i++) {\n        const checkinDate = new Date(checkins[i].date);\n        const dayDiff = Math.floor(\n          (today.getTime() - checkinDate.getTime()) / (1000 * 60 * 60 * 24)\n        );\n\n        if (dayDiff === i && this.isCheckinComplete(checkins[i])) {\n          streak++;\n        } else {\n          break;\n        }\n      }\n\n      return streak;\n    } catch (catchError) {\n      // Erreur silencieuse\n      console.error('Erreur lors du calcul de la streak:', catchError);\n      return 0;\n    }\n  }\n\n  /**\n   * V\xE9rifie si un check-in est complet\n   */\n  private static isCheckinComplete(checkin: DailyCheckin): boolean {\n    return (\n      checkin.workout_completed &&\n      checkin.nutrition_logged &&\n      checkin.sleep_tracked &&\n      checkin.hydration_logged\n    );\n  }\n\n  /**\n   * R\xE9cup\xE8re les donn\xE9es de progression pour le dashboard\n   */\n  static async getDashboardData(userId: string): Promise<{\n    stats: UserStats | undefined;\n    todayCheckin: DailyCheckin | undefined;\n    weeklyData: UserPillarData[];\n    currentStreak: number;\n  }> {\n    try {\n      const today = new Date().toISOString().split('T')[0];\n      const weekAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0];\n\n      const [stats, todayCheckin, weeklyData, currentStreak] = await Promise.all([\n        this.getUserStats(userId),\n        this.getDailyCheckin(userId, today),\n        this.getPillarData(userId, 'workout', weekAgo), // Exemple avec workout\n        this.calculateCurrentStreak(userId),\n      ]);\n\n      return {\n        stats,\n        todayCheckin,\n        weeklyData,\n        currentStreak,\n      };\n    } catch (catchError) {\n      // Erreur silencieuse\n      console.error('Erreur lors de la r\xE9cup\xE9ration des donn\xE9es du dashboard:', catchError);\n      return {\n        stats: null,\n        todayCheckin: null,\n        weeklyData: [],\n        currentStreak: 0,\n      };\n    }\n  }\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "ced8cd78163dcfd1f46007f5e31361b2beb6dcca"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_11u6026v87 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_11u6026v87();
cov_11u6026v87().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_11u6026v87().s[1]++;
exports.UserDataService = void 0;
// client/src/services/userDataService.ts
const supabase_1 =
/* istanbul ignore next */
(cov_11u6026v87().s[2]++, require("@/lib/supabase"));
class UserDataService {
  /**
   * Récupère les données d'un pilier pour un utilisateur
   */
  static async getPillarData(userId, pillarType, startDate, endDate) {
    /* istanbul ignore next */
    cov_11u6026v87().f[0]++;
    cov_11u6026v87().s[3]++;
    try {
      let query =
      /* istanbul ignore next */
      (cov_11u6026v87().s[4]++, supabase_1.supabase.from('user_pillar_data').select('*').eq('user_id', userId).eq('pillar_type', pillarType).order('date', {
        ascending: false
      }));
      /* istanbul ignore next */
      cov_11u6026v87().s[5]++;
      if (startDate) {
        /* istanbul ignore next */
        cov_11u6026v87().b[0][0]++;
        cov_11u6026v87().s[6]++;
        query = query.gte('date', startDate);
      } else
      /* istanbul ignore next */
      {
        cov_11u6026v87().b[0][1]++;
      }
      cov_11u6026v87().s[7]++;
      if (endDate) {
        /* istanbul ignore next */
        cov_11u6026v87().b[1][0]++;
        cov_11u6026v87().s[8]++;
        query = query.lte('date', endDate);
      } else
      /* istanbul ignore next */
      {
        cov_11u6026v87().b[1][1]++;
      }
      const {
        data,
        error
      } =
      /* istanbul ignore next */
      (cov_11u6026v87().s[9]++, await query);
      /* istanbul ignore next */
      cov_11u6026v87().s[10]++;
      if (error) {
        /* istanbul ignore next */
        cov_11u6026v87().b[2][0]++;
        cov_11u6026v87().s[11]++;
        console.error('Erreur lors de la récupération des données du pilier:', error);
        /* istanbul ignore next */
        cov_11u6026v87().s[12]++;
        return [];
      } else
      /* istanbul ignore next */
      {
        cov_11u6026v87().b[2][1]++;
      }
      cov_11u6026v87().s[13]++;
      return /* istanbul ignore next */(cov_11u6026v87().b[3][0]++, data) ||
      /* istanbul ignore next */
      (cov_11u6026v87().b[3][1]++, []);
    } catch (catchError) {
      /* istanbul ignore next */
      cov_11u6026v87().s[14]++;
      // Erreur silencieuse
      console.error('Erreur lors de la récupération des données du pilier:', catchError);
      /* istanbul ignore next */
      cov_11u6026v87().s[15]++;
      return [];
    }
  }
  /**
   * Sauvegarde les données d'un pilier
   */
  static async savePillarData(pillarData) {
    /* istanbul ignore next */
    cov_11u6026v87().f[1]++;
    cov_11u6026v87().s[16]++;
    try {
      const {
        error
      } =
      /* istanbul ignore next */
      (cov_11u6026v87().s[17]++, await supabase_1.supabase.from('user_pillar_data').insert([{
        ...pillarData,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      }]));
      /* istanbul ignore next */
      cov_11u6026v87().s[18]++;
      if (error) {
        /* istanbul ignore next */
        cov_11u6026v87().b[4][0]++;
        cov_11u6026v87().s[19]++;
        console.error('Erreur lors de la sauvegarde des données du pilier:', error);
        /* istanbul ignore next */
        cov_11u6026v87().s[20]++;
        return false;
      } else
      /* istanbul ignore next */
      {
        cov_11u6026v87().b[4][1]++;
      }
      cov_11u6026v87().s[21]++;
      return true;
    } catch (catchError) {
      /* istanbul ignore next */
      cov_11u6026v87().s[22]++;
      // Erreur silencieuse
      console.error('Erreur lors de la sauvegarde des données du pilier:', catchError);
      /* istanbul ignore next */
      cov_11u6026v87().s[23]++;
      return false;
    }
  }
  /**
   * Met à jour les données d'un pilier
   */
  static async updatePillarData(id, updates) {
    /* istanbul ignore next */
    cov_11u6026v87().f[2]++;
    cov_11u6026v87().s[24]++;
    try {
      const {
        error
      } =
      /* istanbul ignore next */
      (cov_11u6026v87().s[25]++, await supabase_1.supabase.from('user_pillar_data').update({
        ...updates,
        updated_at: new Date().toISOString()
      }).eq('id', id));
      /* istanbul ignore next */
      cov_11u6026v87().s[26]++;
      if (error) {
        /* istanbul ignore next */
        cov_11u6026v87().b[5][0]++;
        cov_11u6026v87().s[27]++;
        console.error('Erreur lors de la mise à jour des données du pilier:', error);
        /* istanbul ignore next */
        cov_11u6026v87().s[28]++;
        return false;
      } else
      /* istanbul ignore next */
      {
        cov_11u6026v87().b[5][1]++;
      }
      cov_11u6026v87().s[29]++;
      return true;
    } catch (catchError) {
      /* istanbul ignore next */
      cov_11u6026v87().s[30]++;
      // Erreur silencieuse
      console.error('Erreur lors de la mise à jour des données du pilier:', catchError);
      /* istanbul ignore next */
      cov_11u6026v87().s[31]++;
      return false;
    }
  }
  /**
   * Récupère les statistiques d'un utilisateur
   */
  static async getUserStats(userId) {
    /* istanbul ignore next */
    cov_11u6026v87().f[3]++;
    cov_11u6026v87().s[32]++;
    try {
      const {
        data,
        error
      } =
      /* istanbul ignore next */
      (cov_11u6026v87().s[33]++, await supabase_1.supabase.from('user_stats').select('*').eq('user_id', userId).single());
      /* istanbul ignore next */
      cov_11u6026v87().s[34]++;
      if (error) {
        /* istanbul ignore next */
        cov_11u6026v87().b[6][0]++;
        cov_11u6026v87().s[35]++;
        console.error('Erreur lors de la récupération des statistiques:', error);
        /* istanbul ignore next */
        cov_11u6026v87().s[36]++;
        return null;
      } else
      /* istanbul ignore next */
      {
        cov_11u6026v87().b[6][1]++;
      }
      cov_11u6026v87().s[37]++;
      return data;
    } catch (catchError) {
      /* istanbul ignore next */
      cov_11u6026v87().s[38]++;
      // Erreur silencieuse
      console.error('Erreur lors de la récupération des statistiques:', catchError);
      /* istanbul ignore next */
      cov_11u6026v87().s[39]++;
      return null;
    }
  }
  /**
   * Met à jour les statistiques d'un utilisateur
   */
  static async updateUserStats(userId, updates) {
    /* istanbul ignore next */
    cov_11u6026v87().f[4]++;
    cov_11u6026v87().s[40]++;
    try {
      const {
        error
      } =
      /* istanbul ignore next */
      (cov_11u6026v87().s[41]++, await supabase_1.supabase.from('user_stats').upsert({
        user_id: userId,
        ...updates,
        updated_at: new Date().toISOString()
      }));
      /* istanbul ignore next */
      cov_11u6026v87().s[42]++;
      if (error) {
        /* istanbul ignore next */
        cov_11u6026v87().b[7][0]++;
        cov_11u6026v87().s[43]++;
        console.error('Erreur lors de la mise à jour des statistiques:', error);
        /* istanbul ignore next */
        cov_11u6026v87().s[44]++;
        return false;
      } else
      /* istanbul ignore next */
      {
        cov_11u6026v87().b[7][1]++;
      }
      cov_11u6026v87().s[45]++;
      return true;
    } catch (catchError) {
      /* istanbul ignore next */
      cov_11u6026v87().s[46]++;
      // Erreur silencieuse
      console.error('Erreur lors de la mise à jour des statistiques:', catchError);
      /* istanbul ignore next */
      cov_11u6026v87().s[47]++;
      return false;
    }
  }
  /**
   * Récupère le check-in quotidien d'un utilisateur
   */
  static async getDailyCheckin(userId, date) {
    /* istanbul ignore next */
    cov_11u6026v87().f[5]++;
    cov_11u6026v87().s[48]++;
    try {
      const {
        data,
        error
      } =
      /* istanbul ignore next */
      (cov_11u6026v87().s[49]++, await supabase_1.supabase.from('daily_checkins').select('*').eq('user_id', userId).eq('date', date).single());
      /* istanbul ignore next */
      cov_11u6026v87().s[50]++;
      if (error) {
        /* istanbul ignore next */
        cov_11u6026v87().b[8][0]++;
        cov_11u6026v87().s[51]++;
        console.error('Erreur lors de la récupération du check-in:', error);
        /* istanbul ignore next */
        cov_11u6026v87().s[52]++;
        return null;
      } else
      /* istanbul ignore next */
      {
        cov_11u6026v87().b[8][1]++;
      }
      cov_11u6026v87().s[53]++;
      return data;
    } catch (catchError) {
      /* istanbul ignore next */
      cov_11u6026v87().s[54]++;
      // Erreur silencieuse
      console.error('Erreur lors de la récupération du check-in:', catchError);
      /* istanbul ignore next */
      cov_11u6026v87().s[55]++;
      return null;
    }
  }
  /**
   * Sauvegarde ou met à jour le check-in quotidien
   */
  static async saveOrUpdateDailyCheckin(checkinData) {
    /* istanbul ignore next */
    cov_11u6026v87().f[6]++;
    cov_11u6026v87().s[56]++;
    try {
      const {
        error
      } =
      /* istanbul ignore next */
      (cov_11u6026v87().s[57]++, await supabase_1.supabase.from('daily_checkins').upsert({
        ...checkinData,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      }));
      /* istanbul ignore next */
      cov_11u6026v87().s[58]++;
      if (error) {
        /* istanbul ignore next */
        cov_11u6026v87().b[9][0]++;
        cov_11u6026v87().s[59]++;
        console.error('Erreur lors de la sauvegarde du check-in:', error);
        /* istanbul ignore next */
        cov_11u6026v87().s[60]++;
        return false;
      } else
      /* istanbul ignore next */
      {
        cov_11u6026v87().b[9][1]++;
      }
      cov_11u6026v87().s[61]++;
      return true;
    } catch (catchError) {
      /* istanbul ignore next */
      cov_11u6026v87().s[62]++;
      // Erreur silencieuse
      console.error('Erreur lors de la sauvegarde du check-in:', catchError);
      /* istanbul ignore next */
      cov_11u6026v87().s[63]++;
      return false;
    }
  }
  /**
   * Récupère l'historique des check-ins d'un utilisateur
   */
  static async getCheckinHistory(userId, limit =
  /* istanbul ignore next */
  (cov_11u6026v87().b[10][0]++, 30)) {
    /* istanbul ignore next */
    cov_11u6026v87().f[7]++;
    cov_11u6026v87().s[64]++;
    try {
      const {
        data,
        error
      } =
      /* istanbul ignore next */
      (cov_11u6026v87().s[65]++, await supabase_1.supabase.from('daily_checkins').select('*').eq('user_id', userId).order('date', {
        ascending: false
      }).limit(limit));
      /* istanbul ignore next */
      cov_11u6026v87().s[66]++;
      if (error) {
        /* istanbul ignore next */
        cov_11u6026v87().b[11][0]++;
        cov_11u6026v87().s[67]++;
        console.error("Erreur lors de la récupération de l'historique des check-ins:", error);
        /* istanbul ignore next */
        cov_11u6026v87().s[68]++;
        return [];
      } else
      /* istanbul ignore next */
      {
        cov_11u6026v87().b[11][1]++;
      }
      cov_11u6026v87().s[69]++;
      return /* istanbul ignore next */(cov_11u6026v87().b[12][0]++, data) ||
      /* istanbul ignore next */
      (cov_11u6026v87().b[12][1]++, []);
    } catch (catchError) {
      /* istanbul ignore next */
      cov_11u6026v87().s[70]++;
      // Erreur silencieuse
      console.error("Erreur lors de la récupération de l'historique des check-ins:", catchError);
      /* istanbul ignore next */
      cov_11u6026v87().s[71]++;
      return [];
    }
  }
  /**
   * Calcule la streak actuelle d'un utilisateur
   */
  static async calculateCurrentStreak(userId) {
    /* istanbul ignore next */
    cov_11u6026v87().f[8]++;
    cov_11u6026v87().s[72]++;
    try {
      const checkins =
      /* istanbul ignore next */
      (cov_11u6026v87().s[73]++, await this.getCheckinHistory(userId, 365));
      /* istanbul ignore next */
      cov_11u6026v87().s[74]++;
      if (checkins.length === 0) {
        /* istanbul ignore next */
        cov_11u6026v87().b[13][0]++;
        cov_11u6026v87().s[75]++;
        return 0;
      } else
      /* istanbul ignore next */
      {
        cov_11u6026v87().b[13][1]++;
      }
      let streak =
      /* istanbul ignore next */
      (cov_11u6026v87().s[76]++, 0);
      const today =
      /* istanbul ignore next */
      (cov_11u6026v87().s[77]++, new Date());
      /* istanbul ignore next */
      cov_11u6026v87().s[78]++;
      for (let i =
      /* istanbul ignore next */
      (cov_11u6026v87().s[79]++, 0); i < checkins.length; i++) {
        const checkinDate =
        /* istanbul ignore next */
        (cov_11u6026v87().s[80]++, new Date(checkins[i].date));
        const dayDiff =
        /* istanbul ignore next */
        (cov_11u6026v87().s[81]++, Math.floor((today.getTime() - checkinDate.getTime()) / (1000 * 60 * 60 * 24)));
        /* istanbul ignore next */
        cov_11u6026v87().s[82]++;
        if (
        /* istanbul ignore next */
        (cov_11u6026v87().b[15][0]++, dayDiff === i) &&
        /* istanbul ignore next */
        (cov_11u6026v87().b[15][1]++, this.isCheckinComplete(checkins[i]))) {
          /* istanbul ignore next */
          cov_11u6026v87().b[14][0]++;
          cov_11u6026v87().s[83]++;
          streak++;
        } else {
          /* istanbul ignore next */
          cov_11u6026v87().b[14][1]++;
          cov_11u6026v87().s[84]++;
          break;
        }
      }
      /* istanbul ignore next */
      cov_11u6026v87().s[85]++;
      return streak;
    } catch (catchError) {
      /* istanbul ignore next */
      cov_11u6026v87().s[86]++;
      // Erreur silencieuse
      console.error('Erreur lors du calcul de la streak:', catchError);
      /* istanbul ignore next */
      cov_11u6026v87().s[87]++;
      return 0;
    }
  }
  /**
   * Vérifie si un check-in est complet
   */
  static isCheckinComplete(checkin) {
    /* istanbul ignore next */
    cov_11u6026v87().f[9]++;
    cov_11u6026v87().s[88]++;
    return /* istanbul ignore next */(cov_11u6026v87().b[16][0]++, checkin.workout_completed) &&
    /* istanbul ignore next */
    (cov_11u6026v87().b[16][1]++, checkin.nutrition_logged) &&
    /* istanbul ignore next */
    (cov_11u6026v87().b[16][2]++, checkin.sleep_tracked) &&
    /* istanbul ignore next */
    (cov_11u6026v87().b[16][3]++, checkin.hydration_logged);
  }
  /**
   * Récupère les données de progression pour le dashboard
   */
  static async getDashboardData(userId) {
    /* istanbul ignore next */
    cov_11u6026v87().f[10]++;
    cov_11u6026v87().s[89]++;
    try {
      const today =
      /* istanbul ignore next */
      (cov_11u6026v87().s[90]++, new Date().toISOString().split('T')[0]);
      const weekAgo =
      /* istanbul ignore next */
      (cov_11u6026v87().s[91]++, new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0]);
      const [stats, todayCheckin, weeklyData, currentStreak] =
      /* istanbul ignore next */
      (cov_11u6026v87().s[92]++, await Promise.all([this.getUserStats(userId), this.getDailyCheckin(userId, today), this.getPillarData(userId, 'workout', weekAgo),
      // Exemple avec workout
      this.calculateCurrentStreak(userId)]));
      /* istanbul ignore next */
      cov_11u6026v87().s[93]++;
      return {
        stats,
        todayCheckin,
        weeklyData,
        currentStreak
      };
    } catch (catchError) {
      /* istanbul ignore next */
      cov_11u6026v87().s[94]++;
      // Erreur silencieuse
      console.error('Erreur lors de la récupération des données du dashboard:', catchError);
      /* istanbul ignore next */
      cov_11u6026v87().s[95]++;
      return {
        stats: null,
        todayCheckin: null,
        weeklyData: [],
        currentStreak: 0
      };
    }
  }
}
/* istanbul ignore next */
cov_11u6026v87().s[96]++;
exports.UserDataService = UserDataService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,