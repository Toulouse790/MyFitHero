{"version":3,"names":["supabase_1","cov_24fpaoe66e","s","require","AvatarUploadService","uploadAvatar","file","userId","f","fileExt","name","split","pop","fileName","Date","now","filePath","error","uploadError","supabase","storage","from","upload","cacheControl","upsert","b","data","publicUrlData","getPublicUrl","avatarUrl","publicUrl","updateError","update","avatar_url","updated_at","toISOString","eq","success","console","removeAvatar","_error","exports"],"sources":["/workspaces/MyFitHero/src/features/profile/components/avatar/AvatarUploadService.tsx"],"sourcesContent":["import React from 'react';\n// src/features/profile/components/avatar/AvatarUploadService.tsx\nimport { supabase } from '@/lib/supabase';\n\nexport interface UploadResult {\n  success: boolean;\n  avatarUrl?: string;\n  error?: string;\n}\n\nexport class AvatarUploadService {\n  static async uploadAvatar(file: File, userId: string): Promise<UploadResult> {\n    try {\n      // Générer un nom de fichier unique\n      const fileExt = file.name.split('.').pop();\n      const fileName = `${userId}-${Date.now()}.${fileExt}`;\n      const filePath = `avatars/${fileName}`;\n\n      // Upload vers Supabase Storage\n      const { error: uploadError } = await supabase.storage\n        .from('user-avatars')\n        .upload(filePath, file, {\n          cacheControl: '3600',\n          upsert: true,\n        });\n\n      if (uploadError) {\n        throw uploadError;\n      }\n\n      // Obtenir l'URL publique\n      const { data: publicUrlData } = supabase.storage\n        .from('user-avatars')\n        .getPublicUrl(filePath);\n\n      const avatarUrl = publicUrlData.publicUrl;\n\n      // Mettre à jour le profil utilisateur\n      const { error: updateError } = await (supabase as any)\n        .from('user_profiles')\n        .update({\n          avatar_url: avatarUrl,\n          updated_at: new Date().toISOString(),\n        })\n        .eq('id', userId);\n\n      if (updateError) {\n        throw updateError;\n      }\n\n      return {\n        success: true,\n        avatarUrl,\n      };\n    } catch (error: any) {\n      console.error('Erreur upload avatar:', error);\n      return {\n        success: false,\n        error: 'Impossible de mettre à jour votre photo.',\n      };\n    }\n  }\n\n  static async removeAvatar(userId: string): Promise<UploadResult> {\n    try {\n      // Supprimer du profil\n      const { error: _error } = await (supabase as any)\n        .from('user_profiles')\n        .update({\n          avatar_url: null,\n          updated_at: new Date().toISOString(),\n        })\n        .eq('id', userId);\n\n      if (_error) {\n        throw _error;\n      }\n\n      return {\n        success: true,\n      };\n    } catch (error: any) {\n      console.error('Erreur suppression avatar:', error);\n      return {\n        success: false,\n        error: 'Impossible de supprimer votre photo.',\n      };\n    }\n  }\n}"],"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","ignoreList":[]}