{"file":"/workspaces/MyFitHero/src/__tests__/unit/features/nutrition.test.tsx","mappings":"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","names":[],"sources":["/workspaces/MyFitHero/src/__tests__/unit/features/nutrition.test.tsx"],"sourcesContent":["/**\n * TESTS UNITAIRES EXHAUSTIFS - MODULE NUTRITION\n * Tests pour le tracking intelligent et optimisation nutritionnelle\n */\n\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\n\n// Interfaces de base pour les tests nutrition\ninterface NutritionEntry {\n  id: string;\n  food_name: string;\n  quantity: number;\n  unit: string;\n  calories: number;\n  macros: {\n    protein: number;\n    carbs: number;\n    fat: number;\n    fiber?: number;\n  };\n  micronutrients?: {\n    vitamin_c?: number;\n    iron?: number;\n    calcium?: number;\n  };\n  meal_type: 'breakfast' | 'lunch' | 'dinner' | 'snack';\n  logged_at: Date;\n}\n\ninterface NutritionGoals {\n  calories: number;\n  protein: number;\n  carbs: number;\n  fat: number;\n  water_liters: number;\n}\n\ninterface UserNutritionProfile {\n  id: string;\n  age: number;\n  gender: 'male' | 'female';\n  weight: number;\n  height: number;\n  activity_level: 'sedentary' | 'light' | 'moderate' | 'active' | 'very_active';\n  goals: 'weight_loss' | 'maintenance' | 'muscle_gain' | 'performance';\n  dietary_restrictions: string[];\n  allergies: string[];\n}\n\ndescribe('🥗 NUTRITION MODULE - Tests Unitaires Exhaustifs', () => {\n  describe('Calculs nutritionnels critiques', () => {\n    it('calcule correctement les besoins caloriques basés sur Harris-Benedict', () => {\n      const profile: UserNutritionProfile = {\n        id: 'user-123',\n        age: 30,\n        gender: 'male',\n        weight: 80, // kg\n        height: 180, // cm\n        activity_level: 'moderate',\n        goals: 'muscle_gain',\n        dietary_restrictions: [],\n        allergies: []\n      };\n\n      const calculateBMR = (profile: UserNutritionProfile): number => {\n        if (profile.gender === 'male') {\n          return 88.362 + (13.397 * profile.weight) + (4.799 * profile.height) - (5.677 * profile.age);\n        } else {\n          return 447.593 + (9.247 * profile.weight) + (3.098 * profile.height) - (4.330 * profile.age);\n        }\n      };\n\n      const calculateTDEE = (bmr: number, activityLevel: string): number => {\n        const multipliers = {\n          sedentary: 1.2,\n          light: 1.375,\n          moderate: 1.55,\n          active: 1.725,\n          very_active: 1.9\n        };\n        return bmr * multipliers[activityLevel as keyof typeof multipliers];\n      };\n\n      const bmr = calculateBMR(profile);\n      const tdee = calculateTDEE(bmr, profile.activity_level);\n\n      expect(bmr).toBeCloseTo(1866, 0); // BMR attendu pour ce profil\n      expect(tdee).toBeCloseTo(2892, 0); // TDEE avec activité modérée\n    });\n\n    it('ajuste les macros selon les objectifs fitness', () => {\n      const calculateMacros = (calories: number, goal: string) => {\n        const macroDistribution = {\n          weight_loss: { protein: 0.35, carbs: 0.35, fat: 0.30 },\n          maintenance: { protein: 0.25, carbs: 0.45, fat: 0.30 },\n          muscle_gain: { protein: 0.30, carbs: 0.40, fat: 0.30 },\n          performance: { protein: 0.20, carbs: 0.55, fat: 0.25 }\n        };\n\n        const distribution = macroDistribution[goal as keyof typeof macroDistribution];\n        \n        return {\n          protein: Math.round((calories * distribution.protein) / 4), // 4 cal/g\n          carbs: Math.round((calories * distribution.carbs) / 4), // 4 cal/g\n          fat: Math.round((calories * distribution.fat) / 9) // 9 cal/g\n        };\n      };\n\n      const muscleBuildingMacros = calculateMacros(2500, 'muscle_gain');\n      const weightLossMacros = calculateMacros(2000, 'weight_loss');\n\n      // Muscle gain devrait avoir plus de protéines et carbs\n      expect(muscleBuildingMacros.protein).toBe(188); // 30% de 2500 cal\n      expect(muscleBuildingMacros.carbs).toBe(250); // 40% de 2500 cal\n      \n      // Weight loss devrait avoir un ratio protéine plus élevé\n      expect(weightLossMacros.protein).toBe(175); // 35% de 2000 cal\n      expect(weightLossMacros.carbs).toBe(175); // 35% de 2000 cal\n    });\n\n    it('calcule le timing optimal des repas pour la performance', () => {\n      interface MealTiming {\n        meal: string;\n        time: string;\n        macroFocus: string;\n        purpose: string;\n      }\n\n      const generateMealTiming = (workoutTime: string): MealTiming[] => {\n        const baseTimings: MealTiming[] = [\n          {\n            meal: 'pre-workout',\n            time: '1-2h avant entraînement',\n            macroFocus: 'Glucides complexes + protéines légères',\n            purpose: 'Énergie soutenue'\n          },\n          {\n            meal: 'post-workout',\n            time: '30min après entraînement',\n            macroFocus: 'Protéines + glucides simples',\n            purpose: 'Récupération musculaire'\n          },\n          {\n            meal: 'dinner',\n            time: '3-4h après post-workout',\n            macroFocus: 'Protéines + légumes + glucides modérés',\n            purpose: 'Récupération nocturne'\n          }\n        ];\n\n        return baseTimings;\n      };\n\n      const timings = generateMealTiming('18:00');\n      \n      expect(timings).toHaveLength(3);\n      expect(timings[0].macroFocus).toContain('Glucides complexes');\n      expect(timings[1].macroFocus).toContain('Protéines');\n      expect(timings[1].time).toBe('30min après entraînement');\n    });\n  });\n\n  describe('Tracking et logging nutritionnel', () => {\n    it('enregistre correctement un repas avec validation', () => {\n      const validateNutritionEntry = (entry: Partial<NutritionEntry>): string[] => {\n        const errors: string[] = [];\n        \n        if (!entry.food_name || entry.food_name.trim().length === 0) {\n          errors.push('Nom de l\\'aliment requis');\n        }\n        \n        if (!entry.quantity || entry.quantity <= 0) {\n          errors.push('Quantité doit être positive');\n        }\n        \n        if (!entry.calories || entry.calories < 0) {\n          errors.push('Calories invalides');\n        }\n        \n        if (!entry.macros || entry.macros.protein < 0 || entry.macros.carbs < 0 || entry.macros.fat < 0) {\n          errors.push('Macronutriments invalides');\n        }\n\n        return errors;\n      };\n\n      // Entry valide\n      const validEntry: Partial<NutritionEntry> = {\n        food_name: 'Blanc de poulet grillé',\n        quantity: 150,\n        unit: 'g',\n        calories: 248,\n        macros: { protein: 46.2, carbs: 0, fat: 5.4 },\n        meal_type: 'lunch'\n      };\n\n      // Entry invalide\n      const invalidEntry: Partial<NutritionEntry> = {\n        food_name: '',\n        quantity: -10,\n        calories: -50,\n        macros: { protein: -5, carbs: 0, fat: 0 }\n      };\n\n      expect(validateNutritionEntry(validEntry)).toHaveLength(0);\n      expect(validateNutritionEntry(invalidEntry)).toHaveLength(4);\n    });\n\n    it('calcule la progression quotidienne vers les objectifs', () => {\n      const dailyEntries: NutritionEntry[] = [\n        {\n          id: '1',\n          food_name: 'Avoine',\n          quantity: 80,\n          unit: 'g',\n          calories: 312,\n          macros: { protein: 10.6, carbs: 56, fat: 6.2 },\n          meal_type: 'breakfast',\n          logged_at: new Date()\n        },\n        {\n          id: '2',\n          food_name: 'Poulet',\n          quantity: 150,\n          unit: 'g',\n          calories: 248,\n          macros: { protein: 46.2, carbs: 0, fat: 5.4 },\n          meal_type: 'lunch',\n          logged_at: new Date()\n        }\n      ];\n\n      const goals: NutritionGoals = {\n        calories: 2500,\n        protein: 150,\n        carbs: 300,\n        fat: 80,\n        water_liters: 3\n      };\n\n      const calculateProgress = (entries: NutritionEntry[], goals: NutritionGoals) => {\n        const totals = entries.reduce((sum, entry) => ({\n          calories: sum.calories + entry.calories,\n          protein: sum.protein + entry.macros.protein,\n          carbs: sum.carbs + entry.macros.carbs,\n          fat: sum.fat + entry.macros.fat\n        }), { calories: 0, protein: 0, carbs: 0, fat: 0 });\n\n        return {\n          calories: { current: totals.calories, goal: goals.calories, percentage: (totals.calories / goals.calories) * 100 },\n          protein: { current: totals.protein, goal: goals.protein, percentage: (totals.protein / goals.protein) * 100 },\n          carbs: { current: totals.carbs, goal: goals.carbs, percentage: (totals.carbs / goals.carbs) * 100 },\n          fat: { current: totals.fat, goal: goals.fat, percentage: (totals.fat / goals.fat) * 100 }\n        };\n      };\n\n      const progress = calculateProgress(dailyEntries, goals);\n      \n      expect(progress.calories.current).toBe(560); // 312 + 248\n      expect(progress.protein.current).toBeCloseTo(56.8, 1); // 10.6 + 46.2\n      expect(progress.calories.percentage).toBeCloseTo(22.4, 1); // 560/2500 * 100\n    });\n\n    it('détecte les carences nutritionnelles potentielles', () => {\n      const analyzeNutritionalGaps = (weeklyEntries: NutritionEntry[]) => {\n        const weeklyTotals = weeklyEntries.reduce((sum, entry) => {\n          return {\n            fiber: sum.fiber + (entry.macros.fiber || 0),\n            vitamin_c: sum.vitamin_c + (entry.micronutrients?.vitamin_c || 0),\n            iron: sum.iron + (entry.micronutrients?.iron || 0),\n            calcium: sum.calcium + (entry.micronutrients?.calcium || 0)\n          };\n        }, { fiber: 0, vitamin_c: 0, iron: 0, calcium: 0 });\n\n        const recommendations = [];\n        \n        // Recommandations basées sur les RDA\n        if (weeklyTotals.fiber < 175) { // 25g/jour * 7 jours\n          recommendations.push({\n            nutrient: 'fiber',\n            status: 'low',\n            suggestion: 'Ajouter plus de légumes, fruits et céréales complètes'\n          });\n        }\n        \n        if (weeklyTotals.vitamin_c < 630) { // 90mg/jour * 7 jours\n          recommendations.push({\n            nutrient: 'vitamin_c',\n            status: 'low',\n            suggestion: 'Consommer plus d\\'agrumes, poivrons, et légumes verts'\n          });\n        }\n\n        return recommendations;\n      };\n\n      // Semaine avec peu de fibres et vitamine C\n      const lowNutrientWeek: NutritionEntry[] = Array(7).fill(null).map((_, i) => ({\n        id: `day-${i}`,\n        food_name: 'Repas basique',\n        quantity: 100,\n        unit: 'g',\n        calories: 400,\n        macros: { protein: 20, carbs: 40, fat: 15, fiber: 2 },\n        micronutrients: { vitamin_c: 5 },\n        meal_type: 'lunch' as const,\n        logged_at: new Date()\n      }));\n\n      const gaps = analyzeNutritionalGaps(lowNutrientWeek);\n      \n      expect(gaps).toEqual(\n        expect.arrayContaining([\n          expect.objectContaining({\n            nutrient: 'fiber',\n            status: 'low'\n          }),\n          expect.objectContaining({\n            nutrient: 'vitamin_c',\n            status: 'low'\n          })\n        ])\n      );\n    });\n  });\n\n  describe('Intelligence artificielle nutritionnelle', () => {\n    it('génère des recommandations personnalisées basées sur l\\'historique', () => {\n      const generateSmartRecommendations = (\n        profile: UserNutritionProfile, \n        recentEntries: NutritionEntry[],\n        workoutData?: any\n      ) => {\n        const recommendations = [];\n\n        // Analyse des patterns alimentaires\n        const mealFrequency = recentEntries.reduce((freq, entry) => {\n          freq[entry.meal_type] = (freq[entry.meal_type] || 0) + 1;\n          return freq;\n        }, {} as Record<string, number>);\n\n        // Si peu de petits-déjeuners\n        if (mealFrequency.breakfast < 5) {\n          recommendations.push({\n            type: 'meal_pattern',\n            priority: 'medium',\n            message: 'Essayez de prendre un petit-déjeuner plus régulièrement pour stabiliser votre métabolisme',\n            suggested_foods: ['Avoine', 'Œufs', 'Yaourt grec', 'Fruits']\n          });\n        }\n\n        // Si objectif prise de masse et protéines insuffisantes\n        if (profile.goals === 'muscle_gain') {\n          const avgProtein = recentEntries.reduce((sum, e) => sum + e.macros.protein, 0) / recentEntries.length;\n          const proteinTarget = profile.weight * 1.6; // 1.6g/kg pour prise de masse\n          \n          if (avgProtein < proteinTarget * 0.8) {\n            recommendations.push({\n              type: 'macronutrient',\n              priority: 'high',\n              message: `Augmentez votre apport protéique à ${proteinTarget}g/jour pour optimiser la croissance musculaire`,\n              suggested_foods: ['Poulet', 'Poisson', 'Légumineuses', 'Protéine en poudre']\n            });\n          }\n        }\n\n        return recommendations;\n      };\n\n      const profile: UserNutritionProfile = {\n        id: 'user-123',\n        age: 25,\n        gender: 'male',\n        weight: 75,\n        height: 175,\n        activity_level: 'active',\n        goals: 'muscle_gain',\n        dietary_restrictions: [],\n        allergies: []\n      };\n\n      // Historique avec peu de protéines et pas de petit-déjeuner\n      const recentEntries: NutritionEntry[] = [\n        {\n          id: '1',\n          food_name: 'Salade',\n          quantity: 200,\n          unit: 'g',\n          calories: 150,\n          macros: { protein: 5, carbs: 20, fat: 8 },\n          meal_type: 'lunch',\n          logged_at: new Date()\n        }\n      ];\n\n      const recommendations = generateSmartRecommendations(profile, recentEntries);\n      \n      expect(recommendations).toEqual(\n        expect.arrayContaining([\n          expect.objectContaining({\n            type: 'meal_pattern',\n            message: expect.stringContaining('petit-déjeuner')\n          }),\n          expect.objectContaining({\n            type: 'macronutrient',\n            priority: 'high',\n            message: expect.stringContaining('protéique')\n          })\n        ])\n      );\n    });\n\n    it('optimise le timing nutritionnel autour des entraînements', () => {\n      const optimizeWorkoutNutrition = (\n        workoutSchedule: { time: string, type: string, duration: number }[],\n        currentNutrition: NutritionEntry[]\n      ) => {\n        const recommendations = [];\n\n        workoutSchedule.forEach(workout => {\n          const workoutHour = parseInt(workout.time.split(':')[0]);\n          \n          // Nutrition pré-entraînement\n          if (workout.type === 'strength' || workout.duration > 60) {\n            recommendations.push({\n              timing: `${workout.time} - 1h30`,\n              type: 'pre-workout',\n              macros: 'Glucides complexes (30-40g) + Protéines (15-20g)',\n              examples: ['Banane + beurre d\\'amande', 'Avoine + protéine whey'],\n              purpose: 'Énergie soutenue pour performance'\n            });\n          }\n\n          // Nutrition post-entraînement\n          recommendations.push({\n            timing: `${workout.time} + 30min`,\n            type: 'post-workout',\n            macros: 'Protéines (20-30g) + Glucides simples (30-50g)',\n            examples: ['Shake protéiné + banane', 'Yaourt grec + miel'],\n            purpose: 'Récupération et synthèse protéique'\n          });\n        });\n\n        return recommendations;\n      };\n\n      const workoutSchedule = [\n        { time: '07:00', type: 'strength', duration: 75 },\n        { time: '18:30', type: 'cardio', duration: 45 }\n      ];\n\n      const nutritionPlan = optimizeWorkoutNutrition(workoutSchedule, []);\n      \n      expect(nutritionPlan).toHaveLength(4); // 2 workouts * 2 recommendations each\n      expect(nutritionPlan[0].timing).toBe('07:00 - 1h30');\n      expect(nutritionPlan[1].timing).toBe('07:00 + 30min');\n    });\n  });\n\n  describe('Intégrations et synchronisation', () => {\n    it('synchronise avec les données d\\'entraînement pour ajuster les besoins', () => {\n      const adjustNutritionForWorkout = (\n        baseNeeds: NutritionGoals,\n        workoutData: { type: string, duration: number, intensity: string, calories_burned: number }\n      ) => {\n        const adjustedNeeds = { ...baseNeeds };\n\n        // Ajustement calorique basé sur la dépense\n        adjustedNeeds.calories += workoutData.calories_burned;\n\n        // Ajustement protéique pour récupération\n        if (workoutData.type === 'strength') {\n          adjustedNeeds.protein += Math.round(workoutData.duration * 0.3); // +0.3g par minute\n        }\n\n        // Ajustement glucides pour reconstitution glycogène\n        if (workoutData.intensity === 'high' || workoutData.duration > 60) {\n          adjustedNeeds.carbs += Math.round(workoutData.calories_burned * 0.15); // 15% des calories brûlées\n        }\n\n        return adjustedNeeds;\n      };\n\n      const baseNeeds: NutritionGoals = {\n        calories: 2000,\n        protein: 120,\n        carbs: 250,\n        fat: 65,\n        water_liters: 2.5\n      };\n\n      const intenseWorkout = {\n        type: 'strength',\n        duration: 90,\n        intensity: 'high',\n        calories_burned: 400\n      };\n\n      const adjustedNeeds = adjustNutritionForWorkout(baseNeeds, intenseWorkout);\n\n      expect(adjustedNeeds.calories).toBe(2400); // +400 calories brûlées\n      expect(adjustedNeeds.protein).toBe(147); // +27g pour récupération (90 * 0.3)\n      expect(adjustedNeeds.carbs).toBe(310); // +60g pour glycogène (400 * 0.15)\n    });\n\n    it('intègre les données de qualité du sommeil pour optimiser la nutrition', () => {\n      const optimizeNutritionForSleep = (\n        sleepQuality: { score: number, duration: number, deep_sleep_percentage: number },\n        currentTime: string\n      ) => {\n        const recommendations = [];\n        const currentHour = parseInt(currentTime.split(':')[0]);\n\n        // Si sommeil de mauvaise qualité\n        if (sleepQuality.score < 70) {\n          recommendations.push({\n            nutrient: 'magnesium',\n            timing: '2h avant coucher',\n            foods: ['Amandes', 'Épinards', 'Chocolat noir'],\n            reason: 'Améliorer la qualité du sommeil'\n          });\n        }\n\n        // Si peu de sommeil profond\n        if (sleepQuality.deep_sleep_percentage < 20) {\n          recommendations.push({\n            nutrient: 'tryptophan',\n            timing: 'Dîner',\n            foods: ['Dinde', 'Banane', 'Lait chaud'],\n            reason: 'Favoriser le sommeil profond'\n          });\n        }\n\n        // Éviter stimulants après 14h si sommeil perturbé\n        if (sleepQuality.score < 80 && currentHour > 14) {\n          recommendations.push({\n            type: 'avoid',\n            substances: ['Caféine', 'Théine', 'Chocolat'],\n            reason: 'Préserver la qualité du sommeil'\n          });\n        }\n\n        return recommendations;\n      };\n\n      const poorSleep = {\n        score: 60,\n        duration: 6.5,\n        deep_sleep_percentage: 15\n      };\n\n      const recommendations = optimizeNutritionForSleep(poorSleep, '15:30');\n      \n      expect(recommendations).toEqual(\n        expect.arrayContaining([\n          expect.objectContaining({ nutrient: 'magnesium' }),\n          expect.objectContaining({ nutrient: 'tryptophan' }),\n          expect.objectContaining({ type: 'avoid' })\n        ])\n      );\n    });\n  });\n});"],"version":3}