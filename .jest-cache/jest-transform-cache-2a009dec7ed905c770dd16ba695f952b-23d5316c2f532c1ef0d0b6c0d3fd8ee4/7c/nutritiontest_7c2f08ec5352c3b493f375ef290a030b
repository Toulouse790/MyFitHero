9ad127707ce900149d6e5e9da51e71f7
"use strict";
/**
 * TESTS UNITAIRES EXHAUSTIFS - MODULE NUTRITION
 * Tests pour le tracking intelligent et optimisation nutritionnelle
 */
Object.defineProperty(exports, "__esModule", { value: true });
describe('ü•ó NUTRITION MODULE - Tests Unitaires Exhaustifs', () => {
    describe('Calculs nutritionnels critiques', () => {
        it('calcule correctement les besoins caloriques bas√©s sur Harris-Benedict', () => {
            const profile = {
                id: 'user-123',
                age: 30,
                gender: 'male',
                weight: 80, // kg
                height: 180, // cm
                activity_level: 'moderate',
                goals: 'muscle_gain',
                dietary_restrictions: [],
                allergies: []
            };
            const calculateBMR = (profile) => {
                if (profile.gender === 'male') {
                    return 88.362 + (13.397 * profile.weight) + (4.799 * profile.height) - (5.677 * profile.age);
                }
                else {
                    return 447.593 + (9.247 * profile.weight) + (3.098 * profile.height) - (4.330 * profile.age);
                }
            };
            const calculateTDEE = (bmr, activityLevel) => {
                const multipliers = {
                    sedentary: 1.2,
                    light: 1.375,
                    moderate: 1.55,
                    active: 1.725,
                    very_active: 1.9
                };
                return bmr * multipliers[activityLevel];
            };
            const bmr = calculateBMR(profile);
            const tdee = calculateTDEE(bmr, profile.activity_level);
            expect(bmr).toBeCloseTo(1866, 0); // BMR attendu pour ce profil
            expect(tdee).toBeCloseTo(2892, 0); // TDEE avec activit√© mod√©r√©e
        });
        it('ajuste les macros selon les objectifs fitness', () => {
            const calculateMacros = (calories, goal) => {
                const macroDistribution = {
                    weight_loss: { protein: 0.35, carbs: 0.35, fat: 0.30 },
                    maintenance: { protein: 0.25, carbs: 0.45, fat: 0.30 },
                    muscle_gain: { protein: 0.30, carbs: 0.40, fat: 0.30 },
                    performance: { protein: 0.20, carbs: 0.55, fat: 0.25 }
                };
                const distribution = macroDistribution[goal];
                return {
                    protein: Math.round((calories * distribution.protein) / 4), // 4 cal/g
                    carbs: Math.round((calories * distribution.carbs) / 4), // 4 cal/g
                    fat: Math.round((calories * distribution.fat) / 9) // 9 cal/g
                };
            };
            const muscleBuildingMacros = calculateMacros(2500, 'muscle_gain');
            const weightLossMacros = calculateMacros(2000, 'weight_loss');
            // Muscle gain devrait avoir plus de prot√©ines et carbs
            expect(muscleBuildingMacros.protein).toBe(188); // 30% de 2500 cal
            expect(muscleBuildingMacros.carbs).toBe(250); // 40% de 2500 cal
            // Weight loss devrait avoir un ratio prot√©ine plus √©lev√©
            expect(weightLossMacros.protein).toBe(175); // 35% de 2000 cal
            expect(weightLossMacros.carbs).toBe(175); // 35% de 2000 cal
        });
        it('calcule le timing optimal des repas pour la performance', () => {
            const generateMealTiming = (workoutTime) => {
                const baseTimings = [
                    {
                        meal: 'pre-workout',
                        time: '1-2h avant entra√Ænement',
                        macroFocus: 'Glucides complexes + prot√©ines l√©g√®res',
                        purpose: '√ânergie soutenue'
                    },
                    {
                        meal: 'post-workout',
                        time: '30min apr√®s entra√Ænement',
                        macroFocus: 'Prot√©ines + glucides simples',
                        purpose: 'R√©cup√©ration musculaire'
                    },
                    {
                        meal: 'dinner',
                        time: '3-4h apr√®s post-workout',
                        macroFocus: 'Prot√©ines + l√©gumes + glucides mod√©r√©s',
                        purpose: 'R√©cup√©ration nocturne'
                    }
                ];
                return baseTimings;
            };
            const timings = generateMealTiming('18:00');
            expect(timings).toHaveLength(3);
            expect(timings[0].macroFocus).toContain('Glucides complexes');
            expect(timings[1].macroFocus).toContain('Prot√©ines');
            expect(timings[1].time).toBe('30min apr√®s entra√Ænement');
        });
    });
    describe('Tracking et logging nutritionnel', () => {
        it('enregistre correctement un repas avec validation', () => {
            const validateNutritionEntry = (entry) => {
                const errors = [];
                if (!entry.food_name || entry.food_name.trim().length === 0) {
                    errors.push('Nom de l\'aliment requis');
                }
                if (!entry.quantity || entry.quantity <= 0) {
                    errors.push('Quantit√© doit √™tre positive');
                }
                if (!entry.calories || entry.calories < 0) {
                    errors.push('Calories invalides');
                }
                if (!entry.macros || entry.macros.protein < 0 || entry.macros.carbs < 0 || entry.macros.fat < 0) {
                    errors.push('Macronutriments invalides');
                }
                return errors;
            };
            // Entry valide
            const validEntry = {
                food_name: 'Blanc de poulet grill√©',
                quantity: 150,
                unit: 'g',
                calories: 248,
                macros: { protein: 46.2, carbs: 0, fat: 5.4 },
                meal_type: 'lunch'
            };
            // Entry invalide
            const invalidEntry = {
                food_name: '',
                quantity: -10,
                calories: -50,
                macros: { protein: -5, carbs: 0, fat: 0 }
            };
            expect(validateNutritionEntry(validEntry)).toHaveLength(0);
            expect(validateNutritionEntry(invalidEntry)).toHaveLength(4);
        });
        it('calcule la progression quotidienne vers les objectifs', () => {
            const dailyEntries = [
                {
                    id: '1',
                    food_name: 'Avoine',
                    quantity: 80,
                    unit: 'g',
                    calories: 312,
                    macros: { protein: 10.6, carbs: 56, fat: 6.2 },
                    meal_type: 'breakfast',
                    logged_at: new Date()
                },
                {
                    id: '2',
                    food_name: 'Poulet',
                    quantity: 150,
                    unit: 'g',
                    calories: 248,
                    macros: { protein: 46.2, carbs: 0, fat: 5.4 },
                    meal_type: 'lunch',
                    logged_at: new Date()
                }
            ];
            const goals = {
                calories: 2500,
                protein: 150,
                carbs: 300,
                fat: 80,
                water_liters: 3
            };
            const calculateProgress = (entries, goals) => {
                const totals = entries.reduce((sum, entry) => ({
                    calories: sum.calories + entry.calories,
                    protein: sum.protein + entry.macros.protein,
                    carbs: sum.carbs + entry.macros.carbs,
                    fat: sum.fat + entry.macros.fat
                }), { calories: 0, protein: 0, carbs: 0, fat: 0 });
                return {
                    calories: { current: totals.calories, goal: goals.calories, percentage: (totals.calories / goals.calories) * 100 },
                    protein: { current: totals.protein, goal: goals.protein, percentage: (totals.protein / goals.protein) * 100 },
                    carbs: { current: totals.carbs, goal: goals.carbs, percentage: (totals.carbs / goals.carbs) * 100 },
                    fat: { current: totals.fat, goal: goals.fat, percentage: (totals.fat / goals.fat) * 100 }
                };
            };
            const progress = calculateProgress(dailyEntries, goals);
            expect(progress.calories.current).toBe(560); // 312 + 248
            expect(progress.protein.current).toBeCloseTo(56.8, 1); // 10.6 + 46.2
            expect(progress.calories.percentage).toBeCloseTo(22.4, 1); // 560/2500 * 100
        });
        it('d√©tecte les carences nutritionnelles potentielles', () => {
            const analyzeNutritionalGaps = (weeklyEntries) => {
                const weeklyTotals = weeklyEntries.reduce((sum, entry) => {
                    return {
                        fiber: sum.fiber + (entry.macros.fiber || 0),
                        vitamin_c: sum.vitamin_c + (entry.micronutrients?.vitamin_c || 0),
                        iron: sum.iron + (entry.micronutrients?.iron || 0),
                        calcium: sum.calcium + (entry.micronutrients?.calcium || 0)
                    };
                }, { fiber: 0, vitamin_c: 0, iron: 0, calcium: 0 });
                const recommendations = [];
                // Recommandations bas√©es sur les RDA
                if (weeklyTotals.fiber < 175) { // 25g/jour * 7 jours
                    recommendations.push({
                        nutrient: 'fiber',
                        status: 'low',
                        suggestion: 'Ajouter plus de l√©gumes, fruits et c√©r√©ales compl√®tes'
                    });
                }
                if (weeklyTotals.vitamin_c < 630) { // 90mg/jour * 7 jours
                    recommendations.push({
                        nutrient: 'vitamin_c',
                        status: 'low',
                        suggestion: 'Consommer plus d\'agrumes, poivrons, et l√©gumes verts'
                    });
                }
                return recommendations;
            };
            // Semaine avec peu de fibres et vitamine C
            const lowNutrientWeek = Array(7).fill(null).map((_, i) => ({
                id: `day-${i}`,
                food_name: 'Repas basique',
                quantity: 100,
                unit: 'g',
                calories: 400,
                macros: { protein: 20, carbs: 40, fat: 15, fiber: 2 },
                micronutrients: { vitamin_c: 5 },
                meal_type: 'lunch',
                logged_at: new Date()
            }));
            const gaps = analyzeNutritionalGaps(lowNutrientWeek);
            expect(gaps).toEqual(expect.arrayContaining([
                expect.objectContaining({
                    nutrient: 'fiber',
                    status: 'low'
                }),
                expect.objectContaining({
                    nutrient: 'vitamin_c',
                    status: 'low'
                })
            ]));
        });
    });
    describe('Intelligence artificielle nutritionnelle', () => {
        it('g√©n√®re des recommandations personnalis√©es bas√©es sur l\'historique', () => {
            const generateSmartRecommendations = (profile, recentEntries, workoutData) => {
                const recommendations = [];
                // Analyse des patterns alimentaires
                const mealFrequency = recentEntries.reduce((freq, entry) => {
                    freq[entry.meal_type] = (freq[entry.meal_type] || 0) + 1;
                    return freq;
                }, {});
                // Si peu de petits-d√©jeuners
                if (mealFrequency.breakfast < 5) {
                    recommendations.push({
                        type: 'meal_pattern',
                        priority: 'medium',
                        message: 'Essayez de prendre un petit-d√©jeuner plus r√©guli√®rement pour stabiliser votre m√©tabolisme',
                        suggested_foods: ['Avoine', '≈íufs', 'Yaourt grec', 'Fruits']
                    });
                }
                // Si objectif prise de masse et prot√©ines insuffisantes
                if (profile.goals === 'muscle_gain') {
                    const avgProtein = recentEntries.reduce((sum, e) => sum + e.macros.protein, 0) / recentEntries.length;
                    const proteinTarget = profile.weight * 1.6; // 1.6g/kg pour prise de masse
                    if (avgProtein < proteinTarget * 0.8) {
                        recommendations.push({
                            type: 'macronutrient',
                            priority: 'high',
                            message: `Augmentez votre apport prot√©ique √† ${proteinTarget}g/jour pour optimiser la croissance musculaire`,
                            suggested_foods: ['Poulet', 'Poisson', 'L√©gumineuses', 'Prot√©ine en poudre']
                        });
                    }
                }
                return recommendations;
            };
            const profile = {
                id: 'user-123',
                age: 25,
                gender: 'male',
                weight: 75,
                height: 175,
                activity_level: 'active',
                goals: 'muscle_gain',
                dietary_restrictions: [],
                allergies: []
            };
            // Historique avec peu de prot√©ines et pas de petit-d√©jeuner
            const recentEntries = [
                {
                    id: '1',
                    food_name: 'Salade',
                    quantity: 200,
                    unit: 'g',
                    calories: 150,
                    macros: { protein: 5, carbs: 20, fat: 8 },
                    meal_type: 'lunch',
                    logged_at: new Date()
                }
            ];
            const recommendations = generateSmartRecommendations(profile, recentEntries);
            expect(recommendations).toEqual(expect.arrayContaining([
                expect.objectContaining({
                    type: 'meal_pattern',
                    message: expect.stringContaining('petit-d√©jeuner')
                }),
                expect.objectContaining({
                    type: 'macronutrient',
                    priority: 'high',
                    message: expect.stringContaining('prot√©ique')
                })
            ]));
        });
        it('optimise le timing nutritionnel autour des entra√Ænements', () => {
            const optimizeWorkoutNutrition = (workoutSchedule, currentNutrition) => {
                const recommendations = [];
                workoutSchedule.forEach(workout => {
                    const workoutHour = parseInt(workout.time.split(':')[0]);
                    // Nutrition pr√©-entra√Ænement
                    if (workout.type === 'strength' || workout.duration > 60) {
                        recommendations.push({
                            timing: `${workout.time} - 1h30`,
                            type: 'pre-workout',
                            macros: 'Glucides complexes (30-40g) + Prot√©ines (15-20g)',
                            examples: ['Banane + beurre d\'amande', 'Avoine + prot√©ine whey'],
                            purpose: '√ânergie soutenue pour performance'
                        });
                    }
                    // Nutrition post-entra√Ænement
                    recommendations.push({
                        timing: `${workout.time} + 30min`,
                        type: 'post-workout',
                        macros: 'Prot√©ines (20-30g) + Glucides simples (30-50g)',
                        examples: ['Shake prot√©in√© + banane', 'Yaourt grec + miel'],
                        purpose: 'R√©cup√©ration et synth√®se prot√©ique'
                    });
                });
                return recommendations;
            };
            const workoutSchedule = [
                { time: '07:00', type: 'strength', duration: 75 },
                { time: '18:30', type: 'cardio', duration: 45 }
            ];
            const nutritionPlan = optimizeWorkoutNutrition(workoutSchedule, []);
            expect(nutritionPlan).toHaveLength(4); // 2 workouts * 2 recommendations each
            expect(nutritionPlan[0].timing).toBe('07:00 - 1h30');
            expect(nutritionPlan[1].timing).toBe('07:00 + 30min');
        });
    });
    describe('Int√©grations et synchronisation', () => {
        it('synchronise avec les donn√©es d\'entra√Ænement pour ajuster les besoins', () => {
            const adjustNutritionForWorkout = (baseNeeds, workoutData) => {
                const adjustedNeeds = { ...baseNeeds };
                // Ajustement calorique bas√© sur la d√©pense
                adjustedNeeds.calories += workoutData.calories_burned;
                // Ajustement prot√©ique pour r√©cup√©ration
                if (workoutData.type === 'strength') {
                    adjustedNeeds.protein += Math.round(workoutData.duration * 0.3); // +0.3g par minute
                }
                // Ajustement glucides pour reconstitution glycog√®ne
                if (workoutData.intensity === 'high' || workoutData.duration > 60) {
                    adjustedNeeds.carbs += Math.round(workoutData.calories_burned * 0.15); // 15% des calories br√ªl√©es
                }
                return adjustedNeeds;
            };
            const baseNeeds = {
                calories: 2000,
                protein: 120,
                carbs: 250,
                fat: 65,
                water_liters: 2.5
            };
            const intenseWorkout = {
                type: 'strength',
                duration: 90,
                intensity: 'high',
                calories_burned: 400
            };
            const adjustedNeeds = adjustNutritionForWorkout(baseNeeds, intenseWorkout);
            expect(adjustedNeeds.calories).toBe(2400); // +400 calories br√ªl√©es
            expect(adjustedNeeds.protein).toBe(147); // +27g pour r√©cup√©ration (90 * 0.3)
            expect(adjustedNeeds.carbs).toBe(310); // +60g pour glycog√®ne (400 * 0.15)
        });
        it('int√®gre les donn√©es de qualit√© du sommeil pour optimiser la nutrition', () => {
            const optimizeNutritionForSleep = (sleepQuality, currentTime) => {
                const recommendations = [];
                const currentHour = parseInt(currentTime.split(':')[0]);
                // Si sommeil de mauvaise qualit√©
                if (sleepQuality.score < 70) {
                    recommendations.push({
                        nutrient: 'magnesium',
                        timing: '2h avant coucher',
                        foods: ['Amandes', '√âpinards', 'Chocolat noir'],
                        reason: 'Am√©liorer la qualit√© du sommeil'
                    });
                }
                // Si peu de sommeil profond
                if (sleepQuality.deep_sleep_percentage < 20) {
                    recommendations.push({
                        nutrient: 'tryptophan',
                        timing: 'D√Æner',
                        foods: ['Dinde', 'Banane', 'Lait chaud'],
                        reason: 'Favoriser le sommeil profond'
                    });
                }
                // √âviter stimulants apr√®s 14h si sommeil perturb√©
                if (sleepQuality.score < 80 && currentHour > 14) {
                    recommendations.push({
                        type: 'avoid',
                        substances: ['Caf√©ine', 'Th√©ine', 'Chocolat'],
                        reason: 'Pr√©server la qualit√© du sommeil'
                    });
                }
                return recommendations;
            };
            const poorSleep = {
                score: 60,
                duration: 6.5,
                deep_sleep_percentage: 15
            };
            const recommendations = optimizeNutritionForSleep(poorSleep, '15:30');
            expect(recommendations).toEqual(expect.arrayContaining([
                expect.objectContaining({ nutrient: 'magnesium' }),
                expect.objectContaining({ nutrient: 'tryptophan' }),
                expect.objectContaining({ type: 'avoid' })
            ]));
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,