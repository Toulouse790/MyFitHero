{"version":3,"names":["cov_1eha7aifc0","actualCoverage","s","react_1","require","use_toast_1","useWorkoutExercises","currentSession","updateSession","saveWeightHistory","f","toast","useToast","addExercise","useCallback","exercise","b","newEx","id","crypto","randomUUID","exercises","updateExerciseSet","exerciseId","setIndex","updates","updatedExercises","map","ex","updatedSets","sets","set","index","setUpdates","completed","timestamp","Date","toISOString","every","weight","find","e","name","completeExercise","title","description","addSetToExercise","newSet","defaultSet","reps","removeSetFromExercise","filter","_","i","exports"],"sources":["/workspaces/MyFitHero/src/features/workout/hooks/useWorkoutExercises.ts"],"sourcesContent":["import React, { useCallback } from 'react';\nimport { useToast } from '@/shared/hooks/use-toast';\n\n// Types locaux temporaires jusqu'à ce que les types soient correctement exportés\ninterface ExerciseSet {\n  id: string;\n  reps: number;\n  weight: number;\n  completed: boolean;\n  rest_time?: number;\n  timestamp?: string;\n}\n\ninterface WorkoutExercise {\n  id: string;\n  name: string;\n  sets: ExerciseSet[];\n  notes?: string;\n}\n\ninterface WorkoutSession {\n  id: string;\n  exercises: WorkoutExercise[];\n  // autres propriétés selon vos besoins\n}\n\nexport interface UseWorkoutExercisesReturn {\n  addExercise: (exercise: Omit<WorkoutExercise, 'id'>) => Promise<void>;\n  updateExerciseSet: (\n    exerciseId: string,\n    setIndex: number,\n    updates: Partial<ExerciseSet>\n  ) => Promise<void>;\n  completeExercise: (exerciseId: string) => Promise<void>;\n  addSetToExercise: (exerciseId: string, newSet?: Partial<ExerciseSet>) => Promise<void>;\n  removeSetFromExercise: (exerciseId: string, setIndex: number) => Promise<void>;\n}\n\nexport const useWorkoutExercises = (\n  currentSession: WorkoutSession | null,\n  updateSession: (updates: Partial<WorkoutSession>) => void,\n  saveWeightHistory: (exerciseName: string, weight: number) => void\n): UseWorkoutExercisesReturn => {\n  const { toast } = useToast();\n\n  const addExercise = useCallback(\n    async (exercise: Omit<WorkoutExercise, 'id'>) => {\n      if (!currentSession) return;\n      const newEx: WorkoutExercise = { ...exercise, id: crypto.randomUUID() };\n      updateSession({\n        exercises: [...currentSession.exercises, newEx],\n      });\n    },\n    [currentSession, updateSession]\n  );\n\n  const updateExerciseSet = useCallback(\n    async (exerciseId: string, setIndex: number, updates: Partial<ExerciseSet>) => {\n      if (!currentSession) return;\n\n      const updatedExercises = currentSession.exercises.map(ex => {\n        if (ex.id !== exerciseId) return ex;\n\n        const updatedSets = ex.sets.map((set, index) => {\n          if (index !== setIndex) return set;\n\n          // Ajouter timestamp si le set devient complété\n          const setUpdates = { ...updates };\n          if (updates.completed && !set.completed) {\n            setUpdates.timestamp = new Date().toISOString();\n          }\n\n          return { ...set, ...setUpdates };\n        });\n\n        // Marquer l'exercice terminé si toutes les séries le sont\n        const completed = updatedSets.every(s => s.completed);\n\n        return { ...ex, sets: updatedSets, completed };\n      });\n\n      updateSession({ exercises: updatedExercises });\n\n      // Sauvegarder l'historique des poids\n      if (updates.weight && updates.weight > 0) {\n        const exercise = currentSession.exercises.find(e => e.id === exerciseId);\n        if (exercise) {\n          saveWeightHistory(exercise.name, updates.weight);\n        }\n      }\n    },\n    [currentSession, updateSession, saveWeightHistory]\n  );\n\n  const completeExercise = useCallback(\n    async (exerciseId: string) => {\n      if (!currentSession) return;\n\n      const updatedExercises = currentSession.exercises.map(ex =>\n        ex.id === exerciseId\n          ? {\n              ...ex,\n              completed: true,\n              sets: ex.sets.map(set => ({\n                ...set,\n                completed: true,\n                timestamp: new Date().toISOString(),\n              })),\n            }\n          : ex\n      );\n\n      updateSession({ exercises: updatedExercises });\n\n      toast({\n        title: 'Exercice terminé',\n        description: 'Bravo ! Toutes les séries sont complétées',\n      });\n    },\n    [currentSession, updateSession, toast]\n  );\n\n  const addSetToExercise = useCallback(\n    async (exerciseId: string, newSet?: Partial<ExerciseSet>) => {\n      if (!currentSession) return;\n\n      const defaultSet: ExerciseSet = {\n        reps: 0,\n        weight: 0,\n        completed: false,\n        ...newSet,\n      };\n\n      const updatedExercises = currentSession.exercises.map(ex =>\n        ex.id === exerciseId ? { ...ex, sets: [...ex.sets, defaultSet] } : ex\n      );\n\n      updateSession({ exercises: updatedExercises });\n\n      toast({\n        title: 'Série ajoutée',\n        description: \"Nouvelle série ajoutée à l'exercice\",\n      });\n    },\n    [currentSession, updateSession, toast]\n  );\n\n  const removeSetFromExercise = useCallback(\n    async (exerciseId: string, setIndex: number) => {\n      if (!currentSession) return;\n\n      const updatedExercises = currentSession.exercises.map(ex =>\n        ex.id === exerciseId\n          ? {\n              ...ex,\n              sets: ex.sets.filter((_, i) => i !== setIndex),\n              completed: false, // Réinitialiser le statut de l'exercice\n            }\n          : ex\n      );\n\n      updateSession({ exercises: updatedExercises });\n\n      toast({\n        title: 'Série supprimée',\n        description: \"La série a été retirée de l'exercice\",\n      });\n    },\n    [currentSession, updateSession, toast]\n  );\n\n  return {\n    addExercise,\n    updateExerciseSet,\n    completeExercise,\n    addSetToExercise,\n    removeSetFromExercise,\n  };\n};\n"],"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","ignoreList":[]}