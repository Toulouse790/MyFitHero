{"version":3,"names":["cov_1epn62j0gh","actualCoverage","react_1","s","__importDefault","require","useMuscleRecovery_1","PreWorkoutRecoveryCheck","plannedMuscles","f","isReadyForWorkout","recommendations","useMuscleRecovery","isReady","jsx_runtime_1","jsxs","className","b","children","jsx","slice","map","rec","i","message","exports"],"sources":["/workspaces/MyFitHero/src/features/workout/components/PreWorkoutRecoveryCheck.tsx"],"sourcesContent":["import React from 'react';\nimport { Check } from 'lucide-react';\n// components/PreWorkoutRecoveryCheck.tsx\nimport { useMuscleRecovery } from '@/features/workout/hooks/useMuscleRecovery';\n\ninterface MuscleRecoveryRecommendation {\n  message: string;\n  // autres propriétés selon le type réel\n}\n\nexport const PreWorkoutRecoveryCheck = ({ plannedMuscles }: { plannedMuscles: string[] }) => {\n  const { isReadyForWorkout, recommendations } = useMuscleRecovery();\n\n  const isReady = isReadyForWorkout(plannedMuscles as any);\n\n  return (\n    <div className={`p-4 rounded-lg ${isReady ? 'bg-green-50' : 'bg-orange-50'}`}>\n      <h3 className=\"font-semibold mb-2\">\n        {isReady ? \"✅ Prêt pour l'entraînement\" : '⚠️ Attention récupération'}\n      </h3>\n      {!isReady && (\n        <div className=\"space-y-2\">\n          {recommendations.slice(0, 2).map((rec: MuscleRecoveryRecommendation, i: number) => (\n            <p key={i} className=\"text-sm text-orange-700\">\n              {rec.message}\n            </p>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAUa;IAAAA,cAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,cAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAVb,MAAAE,OAAA;AAAA;AAAA,CAAAF,cAAA,GAAAG,CAAA,OAAAC,eAAA,CAAAC,OAAA;AAEA;AACA,MAAAC,mBAAA;AAAA;AAAA,CAAAN,cAAA,GAAAG,CAAA,OAAAE,OAAA;AAA+E;AAAAL,cAAA,GAAAG,CAAA;AAOxE,MAAMI,uBAAuB,GAAGA,CAAC;EAAEC;AAAc,CAAgC,KAAI;EAAA;EAAAR,cAAA,GAAAS,CAAA;EAC1F,MAAM;IAAEC,iBAAiB;IAAEC;EAAe,CAAE;EAAA;EAAA,CAAAX,cAAA,GAAAG,CAAA,OAAG,IAAAG,mBAAA,CAAAM,iBAAiB,GAAE;EAElE,MAAMC,OAAO;EAAA;EAAA,CAAAb,cAAA,GAAAG,CAAA,OAAGO,iBAAiB,CAACF,cAAqB,CAAC;EAAC;EAAAR,cAAA,GAAAG,CAAA;EAEzD,OACE,IAAAW,aAAA,CAAAC,IAAA;IAAKC,SAAS,EAAE,kBAAkBH,OAAO;IAAA;IAAA,CAAAb,cAAA,GAAAiB,CAAA,UAAG,aAAa;IAAA;IAAA,CAAAjB,cAAA,GAAAiB,CAAA,UAAG,cAAc,GAAE;IAAAC,QAAA,GAC1E,IAAAJ,aAAA,CAAAK,GAAA;MAAIH,SAAS,EAAC,oBAAoB;MAAAE,QAAA,EAC/BL,OAAO;MAAA;MAAA,CAAAb,cAAA,GAAAiB,CAAA,UAAG,4BAA4B;MAAA;MAAA,CAAAjB,cAAA,GAAAiB,CAAA,UAAG,2BAA2B;IAAA,EAClE;IACJ;IAAA,CAAAjB,cAAA,GAAAiB,CAAA,WAACJ,OAAO;IAAA;IAAA,CAAAb,cAAA,GAAAiB,CAAA,UACP,IAAAH,aAAA,CAAAK,GAAA;MAAKH,SAAS,EAAC,WAAW;MAAAE,QAAA,EACvBP,eAAe,CAACS,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAACC,GAAG,CAAC,CAACC,GAAiC,EAAEC,CAAS,KAC5E;QAAA;QAAAvB,cAAA,GAAAS,CAAA;QAAAT,cAAA,GAAAG,CAAA;QAAA,WAAAW,aAAA,CAAAK,GAAA;UAAWH,SAAS,EAAC,yBAAyB;UAAAE,QAAA,EAC3CI,GAAG,CAACE;QAAO,GADND,CAAC,CAEL;MAFK,CAGV;IAAC,EACE,CACP;EAAA,EACG;AAEV,CAAC;AAAC;AAAAvB,cAAA,GAAAG,CAAA;AArBWsB,OAAA,CAAAlB,uBAAuB,GAAAA,uBAAA","ignoreList":[]}