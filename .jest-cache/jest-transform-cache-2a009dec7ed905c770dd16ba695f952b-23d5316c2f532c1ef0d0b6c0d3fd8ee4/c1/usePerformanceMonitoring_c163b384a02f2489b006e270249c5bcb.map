{"version":3,"names":["cov_ik32bkk6o","actualCoverage","s","react_1","require","usePerformanceMonitoring","f","metrics","setMetrics","useState","loadTime","renderTime","interactionTime","memoryUsage","networkRequests","bundleSize","isMonitoring","setIsMonitoring","performanceObserver","setPerformanceObserver","getMemoryUsage","useCallback","performance","b","memory","usedJSHeapSize","getNetworkRequests","networkEntries","getEntriesByType","length","getBundleSize","resourceEntries","filter","entry","name","includes","reduce","total","transferSize","startMonitoring","window","observer","PerformanceObserver","list","entries","getEntries","forEach","entryType","navigationEntry","prev","loadEventEnd","fetchStart","duration","observe","entryTypes","error","console","warn","stopMonitoring","disconnect","recordInteraction","startMark","endMark","mark","setTimeout","measure","getReport","clearMetrics","clearMarks","clearMeasures","useEffect","interval","setInterval","clearInterval","exports","default"],"sources":["/workspaces/MyFitHero/src/features/ai-coach/hooks/usePerformanceMonitoring.ts"],"sourcesContent":["import { Star } from 'lucide-react';\nimport React, { useState, useEffect, useCallback } from 'react';\n\nexport interface PerformanceMetrics {\n  loadTime: number;\n  renderTime: number;\n  interactionTime: number;\n  memoryUsage: number;\n  networkRequests: number;\n  bundleSize: number;\n}\n\nexport interface PerformanceEntry {\n  name: string;\n  entryType: string;\n  startTime: number;\n  duration: number;\n}\n\nexport interface UsePerformanceMonitoringReturn {\n  metrics: PerformanceMetrics;\n  isMonitoring: boolean;\n  startMonitoring: () => void;\n  stopMonitoring: () => void;\n  recordInteraction: (name: string) => void;\n  getReport: () => PerformanceMetrics;\n  clearMetrics: () => void;\n}\n\nexport const usePerformanceMonitoring = (): UsePerformanceMonitoringReturn => {\n  const [metrics, setMetrics] = useState<PerformanceMetrics>({\n    loadTime: 0,\n    renderTime: 0,\n    interactionTime: 0,\n    memoryUsage: 0,\n    networkRequests: 0,\n    bundleSize: 0,\n  });\n\n  const [isMonitoring, setIsMonitoring] = useState(false);\n  const [performanceObserver, setPerformanceObserver] = useState<PerformanceObserver | null>(null);\n\n  // Get memory usage if available\n  const getMemoryUsage = useCallback((): number => {\n    if ('memory' in performance) {\n      const memory = (performance as any).memory;\n      return memory.usedJSHeapSize / 1024 / 1024; // Convert to MB\n    }\n    return 0;\n  }, []);\n\n  // Get network request count\n  const getNetworkRequests = useCallback((): number => {\n    if ('getEntriesByType' in performance) {\n      const networkEntries = performance.getEntriesByType('resource');\n      return networkEntries.length;\n    }\n    return 0;\n  }, []);\n\n  // Calculate bundle size from resource entries\n  const getBundleSize = useCallback((): number => {\n    if ('getEntriesByType' in performance) {\n      const resourceEntries = performance.getEntriesByType(\n        'resource'\n      ) as PerformanceResourceTiming[];\n      return (\n        resourceEntries\n          .filter(entry => entry.name.includes('.js') || entry.name.includes('.css'))\n          .reduce((total, entry) => total + (entry.transferSize || 0), 0) / 1024\n      ); // Convert to KB\n    }\n    return 0;\n  }, []);\n\n  // Start monitoring performance\n  const startMonitoring = useCallback(() => {\n    if (!isMonitoring && 'PerformanceObserver' in window) {\n      const observer = new PerformanceObserver(list => {\n        const entries = list.getEntries();\n\n        entries.forEach(entry => {\n          if (entry.entryType === 'navigation') {\n            const navigationEntry = entry as PerformanceNavigationTiming;\n            setMetrics(prev => ({\n              ...prev,\n              loadTime: navigationEntry.loadEventEnd - (navigationEntry.fetchStart || 0),\n            }));\n          }\n\n          if (entry.entryType === 'measure') {\n            setMetrics(prev => ({\n              ...prev,\n              renderTime: entry.duration,\n            }));\n          }\n\n          if (entry.entryType === 'user-timing') {\n            setMetrics(prev => ({\n              ...prev,\n              interactionTime: entry.duration,\n            }));\n          }\n        });\n      });\n\n      try {\n        observer.observe({ entryTypes: ['navigation', 'measure', 'user-timing'] });\n        setPerformanceObserver(observer);\n        setIsMonitoring(true);\n\n        // Update other metrics\n        setMetrics(prev => ({\n          ...prev,\n          memoryUsage: getMemoryUsage(),\n          networkRequests: getNetworkRequests(),\n          bundleSize: getBundleSize(),\n        }));\n      } catch (error: any) {\n      // Erreur silencieuse\n        console.warn('Performance monitoring not supported:', error);\n      }\n    }\n  }, [isMonitoring, getMemoryUsage, getNetworkRequests, getBundleSize]);\n\n  // Stop monitoring\n  const stopMonitoring = useCallback(() => {\n    if (performanceObserver) {\n      performanceObserver.disconnect();\n      setPerformanceObserver(null);\n      setIsMonitoring(false);\n    }\n  }, [performanceObserver]);\n\n  // Record user interaction\n  const recordInteraction = useCallback((name: string) => {\n    if ('mark' in performance && 'measure' in performance) {\n      const startMark = `${name}-start`;\n      const endMark = `${name}-end`;\n\n      performance.mark(startMark);\n\n      // Simulate interaction end (in real app, call this when interaction completes)\n      setTimeout(() => {\n        performance.mark(endMark);\n        performance.measure(name, startMark, endMark);\n      }, 0);\n    }\n  }, []);\n\n  // Get current performance report\n  const getReport = useCallback((): PerformanceMetrics => {\n    return {\n      ...metrics,\n      memoryUsage: getMemoryUsage(),\n      networkRequests: getNetworkRequests(),\n      bundleSize: getBundleSize(),\n    };\n  }, [metrics, getMemoryUsage, getNetworkRequests, getBundleSize]);\n\n  // Clear metrics\n  const clearMetrics = useCallback(() => {\n    setMetrics({\n      loadTime: 0,\n      renderTime: 0,\n      interactionTime: 0,\n      memoryUsage: 0,\n      networkRequests: 0,\n      bundleSize: 0,\n    });\n\n    if ('clearMarks' in performance && 'clearMeasures' in performance) {\n      performance.clearMarks();\n      performance.clearMeasures();\n    }\n  }, []);\n\n  // Update metrics periodically\n  useEffect(() => {\n    if (!isMonitoring) return;\n    \n    const interval = setInterval(() => {\n      setMetrics(prev => ({\n        ...prev,\n        memoryUsage: getMemoryUsage(),\n        networkRequests: getNetworkRequests(),\n      }));\n    }, 5000); // Update every 5 seconds\n\n    return () => clearInterval(interval);\n  }, [isMonitoring, getMemoryUsage, getNetworkRequests]);\n\n  // Cleanup on unmount\n  useEffect(() => {\n    return () => {\n      if (performanceObserver) {\n        performanceObserver.disconnect();\n      }\n    };\n  }, [performanceObserver]);\n\n  return {\n    metrics,\n    isMonitoring,\n    startMonitoring,\n    stopMonitoring,\n    recordInteraction,\n    getReport,\n    clearMetrics,\n  };\n};\n\nexport default usePerformanceMonitoring;\n"],"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","ignoreList":[]}