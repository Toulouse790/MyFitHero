bdab1da3cec998f21ae7781b5194d783
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// Ajoutez ici d'autres mocks globaux si besoin (Web Speech API, etc.)
// Mock pour env.config.ts qui utilise import.meta.env
jest.mock('@/core/config/env.config', () => ({
    env: {
        SUPABASE_URL: 'https://test.supabase.co',
        SUPABASE_ANON_KEY: 'test-anon-key',
        NODE_ENV: 'test',
        isProd: false,
        isDev: false,
        isTest: true,
    },
}));
require("@testing-library/jest-dom");
require("jest-axe/extend-expect");
// Mocks globaux pour l'environnement de test (fetch, localStorage, etc.)
// Temporairement simplifiés pour éviter les dépendances manquantes
// Mock pour fetch simplifié
global.fetch = jest.fn(() => Promise.resolve({
    ok: true,
    status: 200,
    json: () => Promise.resolve({}),
    text: () => Promise.resolve(''),
}));
// Configuration globale pour les tests
global.ResizeObserver = jest.fn().mockImplementation(() => ({
    observe: jest.fn(),
    unobserve: jest.fn(),
    disconnect: jest.fn(),
}));
global.IntersectionObserver = jest.fn().mockImplementation(() => ({
    observe: jest.fn(),
    unobserve: jest.fn(),
    disconnect: jest.fn(),
    root: null,
    rootMargin: '',
    thresholds: [],
}));
// Mock pour window.matchMedia
Object.defineProperty(window, 'matchMedia', {
    writable: true,
    value: jest.fn().mockImplementation(query => ({
        matches: false,
        media: query,
        onchange: null,
        addListener: jest.fn(), // deprecated
        removeListener: jest.fn(), // deprecated
        addEventListener: jest.fn(),
        removeEventListener: jest.fn(),
        dispatchEvent: jest.fn(),
    })),
});
// Mock pour localStorage
const localStorageMock = {
    getItem: jest.fn(),
    setItem: jest.fn(),
    removeItem: jest.fn(),
    clear: jest.fn(),
    length: 0,
    key: jest.fn(),
};
global.localStorage = localStorageMock;
// Mock pour sessionStorage
const sessionStorageMock = {
    getItem: jest.fn(),
    setItem: jest.fn(),
    removeItem: jest.fn(),
    clear: jest.fn(),
    length: 0,
    key: jest.fn(),
};
global.sessionStorage = sessionStorageMock;
// Mock pour fetch
global.fetch = jest.fn(() => Promise.resolve({
    ok: true,
    status: 200,
    json: () => Promise.resolve({}),
    text: () => Promise.resolve(''),
}));
// Mock pour console pour éviter les logs pendant les tests
const originalError = console.error;
const originalWarn = console.warn;
beforeAll(() => {
    console.error = (...args) => {
        if (typeof args[0] === 'string' &&
            args[0].includes('Warning: ReactDOM.render is no longer supported')) {
            return;
        }
        originalError.call(console, ...args);
    };
    console.warn = (...args) => {
        if (typeof args[0] === 'string' &&
            (args[0].includes('componentWillReceiveProps') ||
                args[0].includes('componentWillUpdate'))) {
            return;
        }
        originalWarn.call(console, ...args);
    };
});
afterAll(() => {
    console.error = originalError;
    console.warn = originalWarn;
});
// Configuration des timeouts par défaut
jest.setTimeout(10000);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,