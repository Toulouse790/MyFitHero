{"version":3,"names":["cov_1ogx53w4fz","actualCoverage","s","supabase_js_1","require","supabaseUrl","import","meta","env","VITE_SUPABASE_URL","supabaseAnonKey","VITE_SUPABASE_ANON_KEY","b","Error","exports","supabase","createClient","auth","autoRefreshToken","persistSession","detectSessionInUrl","storage","window","localStorage","undefined","realtime","params","eventsPerSecond","global","headers","validateSupabaseConfig","f","config","url","hasAnonKey","isValidUrl","startsWith","includes","console","log","supabaseHelpers","getCurrentUser","data","user","error","getUser","getUserProfile","userId","from","select","eq","single","updateUserProfile","updates","update","updated_at","Date","toISOString","fetchData","table","dateFrom","dateTo","limit","query","gte","lte","order","ascending","insertData","result","insert","updateData","id","deleteData","delete","subscribeToChanges","callback","channel","on","event","schema","filter","subscribe","authHelpers","signUp","email","password","metadata","options","signIn","signInWithPassword","signOut","resetPassword","resetPasswordForEmail","supabaseHealthCheck","testConnection","count","head","success","message","testAuthService","getSession","retryWithBackoff","fn","maxRetries","baseDelay","lastError","attempt","delay","Math","pow","warn","Promise","resolve","setTimeout","default"],"sources":["/workspaces/MyFitHero/src/lib/supabase.ts"],"sourcesContent":["import { createClient, SupabaseClient } from '@supabase/supabase-js';\n\n// Types are now centralized in /src/lib/types/database.ts\n// Import from there: import { Database, UserProfile, etc. } from '@/lib/types/database'\nimport type { Database } from '@/lib/types/database';\n\n// Environment variables - strict validation required\nconst supabaseUrl = import.meta.env.VITE_SUPABASE_URL;\nconst supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY;\n\n// Validation stricte des variables d'environnement\nif (!supabaseUrl || supabaseUrl === 'https://your-project.supabase.co') {\n  throw new Error('❌ VITE_SUPABASE_URL est requise et doit être configurée dans le fichier .env');\n}\n\nif (!supabaseAnonKey || supabaseAnonKey === 'your-anon-key') {\n  throw new Error('❌ VITE_SUPABASE_ANON_KEY est requise et doit être configurée dans le fichier .env');\n}\n\n// Create Supabase client with validated environment variables\nexport const supabase: SupabaseClient = createClient(\n  supabaseUrl, \n  supabaseAnonKey, \n  {\n  auth: {\n    autoRefreshToken: true,\n    persistSession: true,\n    detectSessionInUrl: true,\n    storage: typeof window !== 'undefined' ? window.localStorage : undefined,\n  },\n  realtime: {\n    params: {\n      eventsPerSecond: 2,\n    },\n  },\n  global: {\n    headers: {\n      'x-my-custom-header': 'myfithero-app',\n    },\n  },\n});\n\n// Fonction utilitaire pour vérifier la configuration Supabase\nexport const validateSupabaseConfig = () => {\n  const config = {\n    url: supabaseUrl,\n    hasAnonKey: !!supabaseAnonKey,\n    isValidUrl: supabaseUrl?.startsWith('https://') && supabaseUrl.includes('.supabase.co'),\n  };\n  \n  console.log('📊 Configuration Supabase:', {\n    url: config.url,\n    hasAnonKey: config.hasAnonKey,\n    isValidUrl: config.isValidUrl,\n  });\n  \n  return config;\n};\n\n// Utility functions for common operations\nexport const supabaseHelpers = {\n  // Get current user\n  getCurrentUser: async () => {\n    const { data: { user }, error } = await supabase.auth.getUser();\n    if (error) {\n      console.error('Error getting current user:', error);\n      return null;\n    }\n    return user;\n  },\n\n  // Get user profile\n  getUserProfile: async (userId: string) => {\n    const { data, error }: any = await supabase\n      .from('user_profiles')\n      .select('*')\n      .eq('id', userId)\n      .single();\n    \n    if (error) {\n      console.error('Error getting user profile:', error);\n      return null;\n    }\n    return data;\n  },\n\n  // Update user profile\n  updateUserProfile: async (userId: string, updates: Database['public']['Tables']['user_profiles']['Update']) => {\n    const { data, error }: any = await supabase\n      .from('user_profiles')\n      .update({ ...updates, updated_at: new Date().toISOString() })\n      .eq('id', userId)\n      .select()\n      .single();\n    \n    if (error) {\n      console.error('Error updating user profile:', error);\n      throw error;\n    }\n    return data;\n  },\n\n  // Generic data fetcher\n  fetchData: async <T>(\n    table: string,\n    userId: string,\n    dateFrom?: string,\n    dateTo?: string,\n    limit?: number\n  ): Promise<T[]> => {\n    let query = supabase\n      .from(table)\n      .select('*')\n      .eq('user_id', userId);\n\n    if (dateFrom) {\n      query = query.gte('date', dateFrom);\n    }\n    if (dateTo) {\n      query = query.lte('date', dateTo);\n    }\n    if (limit) {\n      query = query.limit(limit);\n    }\n\n    query = query.order('date', { ascending: false });\n\n    const { data, error }: any = await query;\n    \n    if (error) {\n      console.error(`Error fetching data from ${table}:`, error);\n      throw error;\n    }\n    \n    return data as T[];\n  },\n\n  // Generic data inserter\n  insertData: async <T>(\n    table: string,\n    data: any\n  ): Promise<T> => {\n    const { data: result, error } = await supabase\n      .from(table)\n      .insert(data)\n      .select()\n      .single();\n    \n    if (error) {\n      console.error(`Error inserting data to ${table}:`, error);\n      throw error;\n    }\n    \n    return result as T;\n  },\n\n  // Generic data updater\n  updateData: async <T>(\n    table: string,\n    id: string,\n    updates: any\n  ): Promise<T> => {\n    const { data, error }: any = await supabase\n      .from(table)\n      .update({ ...updates, updated_at: new Date().toISOString() })\n      .eq('id', id)\n      .select()\n      .single();\n    \n    if (error) {\n      console.error(`Error updating data in ${table}:`, error);\n      throw error;\n    }\n    \n    return data as T;\n  },\n\n  // Delete data\n  deleteData: async (table: string, id: string) => {\n    const { error } = await supabase\n      .from(table)\n      .delete()\n      .eq('id', id);\n    \n    if (error) {\n      console.error(`Error deleting data from ${table}:`, error);\n      throw error;\n    }\n  },\n\n  // Subscribe to realtime changes\n  subscribeToChanges: (\n    table: string,\n    userId: string,\n    callback: (payload: any) => void\n  ) => {\n    return supabase\n      .channel(`${table}_changes`)\n      .on(\n        'postgres_changes',\n        {\n          event: '*',\n          schema: 'public',\n          table: table,\n          filter: `user_id=eq.${userId}`,\n        },\n        callback\n      )\n      .subscribe();\n  },\n};\n\n// Auth helpers\nexport const authHelpers = {\n  signUp: async (email: string, password: string, metadata?: any) => {\n    const { data, error }: any = await supabase.auth.signUp({\n      email,\n      password,\n      options: {\n        data: metadata,\n      },\n    });\n    \n    if (error) {\n      console.error('Error signing up:', error);\n      throw error;\n    }\n    \n    return data;\n  },\n\n  signIn: async (email: string, password: string) => {\n    const { data, error }: any = await supabase.auth.signInWithPassword({\n      email,\n      password,\n    });\n    \n    if (error) {\n      console.error('Error signing in:', error);\n      throw error;\n    }\n    \n    return data;\n  },\n\n  signOut: async () => {\n    const { error } = await supabase.auth.signOut();\n    \n    if (error) {\n      console.error('Error signing out:', error);\n      throw error;\n    }\n  },\n\n  resetPassword: async (email: string) => {\n    const { data, error }: any = await supabase.auth.resetPasswordForEmail(email);\n    \n    if (error) {\n      console.error('Error resetting password:', error);\n      throw error;\n    }\n    \n    return data;\n  },\n};\n\n// Utility functions for health checks and error handling\nexport const supabaseHealthCheck = {\n  /**\n   * Test basic connectivity to Supabase\n   */\n  testConnection: async (): Promise<{ success: boolean; error?: string }> => {\n    try {\n      const { data, error }: any = await supabase.from('user_profiles').select('count', { count: 'exact', head: true });\n      \n      if (error) {\n        return { success: false, error: error.message };\n      }\n      \n      return { success: true };\n    } catch (error: any) {\n      return { \n        success: false, \n        error: error instanceof Error ? error.message : 'Unknown connection error' \n      };\n    }\n  },\n\n  /**\n   * Test authentication service specifically\n   */\n  testAuthService: async (): Promise<{ success: boolean; error?: string }> => {\n    try {\n      const { data, error }: any = await supabase.auth.getSession();\n      \n      if (error) {\n        return { success: false, error: error.message };\n      }\n      \n      return { success: true };\n    } catch (error: any) {\n      return { \n        success: false, \n        error: error instanceof Error ? error.message : 'Auth service error' \n      };\n    }\n  }\n};\n\n// Network retry utility with exponential backoff\nexport const retryWithBackoff = async <T>(\n  fn: () => Promise<T>,\n  maxRetries: number = 3,\n  baseDelay: number = 1000\n): Promise<T> => {\n  let lastError: Error;\n  \n  for (let attempt = 0; attempt <= maxRetries; attempt++) {\n    try {\n      return await fn();\n    } catch (error: any) {\n      lastError = error instanceof Error ? error : new Error('Unknown error');\n      \n      if (attempt === maxRetries) {\n        throw lastError;\n      }\n      \n      // Exponential backoff: 1s, 2s, 4s\n      const delay = baseDelay * Math.pow(2, attempt);\n      console.warn(`Attempt ${attempt + 1} failed, retrying in ${delay}ms:`, lastError.message);\n      \n      await new Promise(resolve => setTimeout(resolve, delay));\n    }\n  }\n  \n  throw lastError!;\n};\n\nexport default supabase;"],"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","ignoreList":[]}