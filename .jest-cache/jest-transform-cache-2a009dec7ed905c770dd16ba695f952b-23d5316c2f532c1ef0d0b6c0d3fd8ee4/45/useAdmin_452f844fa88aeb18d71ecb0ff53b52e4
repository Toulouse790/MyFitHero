07d77eb9c50a441df67ac619a84be1fa
"use strict";

/* istanbul ignore next */
function cov_1t3vpkb0g() {
  var path = "/workspaces/MyFitHero/src/features/admin/hooks/useAdmin.ts";
  var hash = "b87d407ef536846afc217da5f05650e780666a63";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/MyFitHero/src/features/admin/hooks/useAdmin.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 26
        }
      },
      "2": {
        start: {
          line: 4,
          column: 16
        },
        end: {
          line: 4,
          column: 32
        }
      },
      "3": {
        start: {
          line: 5,
          column: 17
        },
        end: {
          line: 263,
          column: 1
        }
      },
      "4": {
        start: {
          line: 7,
          column: 30
        },
        end: {
          line: 7,
          column: 57
        }
      },
      "5": {
        start: {
          line: 8,
          column: 44
        },
        end: {
          line: 8,
          column: 72
        }
      },
      "6": {
        start: {
          line: 9,
          column: 40
        },
        end: {
          line: 9,
          column: 67
        }
      },
      "7": {
        start: {
          line: 11,
          column: 30
        },
        end: {
          line: 15,
          column: 6
        }
      },
      "8": {
        start: {
          line: 16,
          column: 44
        },
        end: {
          line: 16,
          column: 72
        }
      },
      "9": {
        start: {
          line: 17,
          column: 40
        },
        end: {
          line: 17,
          column: 67
        }
      },
      "10": {
        start: {
          line: 19,
          column: 22
        },
        end: {
          line: 54,
          column: 10
        }
      },
      "11": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 53,
          column: 9
        }
      },
      "12": {
        start: {
          line: 21,
          column: 12
        },
        end: {
          line: 21,
          column: 34
        }
      },
      "13": {
        start: {
          line: 22,
          column: 12
        },
        end: {
          line: 22,
          column: 32
        }
      },
      "14": {
        start: {
          line: 24,
          column: 30
        },
        end: {
          line: 42,
          column: 13
        }
      },
      "15": {
        start: {
          line: 44,
          column: 12
        },
        end: {
          line: 44,
          column: 68
        }
      },
      "16": {
        start: {
          line: 44,
          column: 41
        },
        end: {
          line: 44,
          column: 66
        }
      },
      "17": {
        start: {
          line: 45,
          column: 12
        },
        end: {
          line: 45,
          column: 32
        }
      },
      "18": {
        start: {
          line: 49,
          column: 12
        },
        end: {
          line: 49,
          column: 91
        }
      },
      "19": {
        start: {
          line: 52,
          column: 12
        },
        end: {
          line: 52,
          column: 35
        }
      },
      "20": {
        start: {
          line: 56,
          column: 22
        },
        end: {
          line: 98,
          column: 10
        }
      },
      "21": {
        start: {
          line: 57,
          column: 8
        },
        end: {
          line: 97,
          column: 9
        }
      },
      "22": {
        start: {
          line: 58,
          column: 12
        },
        end: {
          line: 58,
          column: 34
        }
      },
      "23": {
        start: {
          line: 59,
          column: 12
        },
        end: {
          line: 59,
          column: 32
        }
      },
      "24": {
        start: {
          line: 61,
          column: 30
        },
        end: {
          line: 69,
          column: 15
        }
      },
      "25": {
        start: {
          line: 61,
          column: 68
        },
        end: {
          line: 69,
          column: 13
        }
      },
      "26": {
        start: {
          line: 71,
          column: 32
        },
        end: {
          line: 71,
          column: 41
        }
      },
      "27": {
        start: {
          line: 72,
          column: 12
        },
        end: {
          line: 74,
          column: 13
        }
      },
      "28": {
        start: {
          line: 73,
          column: 16
        },
        end: {
          line: 73,
          column: 93
        }
      },
      "29": {
        start: {
          line: 73,
          column: 61
        },
        end: {
          line: 73,
          column: 91
        }
      },
      "30": {
        start: {
          line: 75,
          column: 12
        },
        end: {
          line: 77,
          column: 13
        }
      },
      "31": {
        start: {
          line: 76,
          column: 16
        },
        end: {
          line: 76,
          column: 89
        }
      },
      "32": {
        start: {
          line: 76,
          column: 61
        },
        end: {
          line: 76,
          column: 87
        }
      },
      "33": {
        start: {
          line: 78,
          column: 12
        },
        end: {
          line: 82,
          column: 13
        }
      },
      "34": {
        start: {
          line: 79,
          column: 36
        },
        end: {
          line: 79,
          column: 64
        }
      },
      "35": {
        start: {
          line: 80,
          column: 16
        },
        end: {
          line: 81,
          column: 68
        }
      },
      "36": {
        start: {
          line: 80,
          column: 61
        },
        end: {
          line: 81,
          column: 66
        }
      },
      "37": {
        start: {
          line: 84,
          column: 12
        },
        end: {
          line: 84,
          column: 67
        }
      },
      "38": {
        start: {
          line: 84,
          column: 41
        },
        end: {
          line: 84,
          column: 65
        }
      },
      "39": {
        start: {
          line: 85,
          column: 12
        },
        end: {
          line: 89,
          column: 15
        }
      },
      "40": {
        start: {
          line: 93,
          column: 12
        },
        end: {
          line: 93,
          column: 91
        }
      },
      "41": {
        start: {
          line: 96,
          column: 12
        },
        end: {
          line: 96,
          column: 35
        }
      },
      "42": {
        start: {
          line: 100,
          column: 29
        },
        end: {
          line: 115,
          column: 10
        }
      },
      "43": {
        start: {
          line: 101,
          column: 8
        },
        end: {
          line: 114,
          column: 9
        }
      },
      "44": {
        start: {
          line: 103,
          column: 12
        },
        end: {
          line: 103,
          column: 67
        }
      },
      "45": {
        start: {
          line: 103,
          column: 41
        },
        end: {
          line: 103,
          column: 65
        }
      },
      "46": {
        start: {
          line: 104,
          column: 12
        },
        end: {
          line: 107,
          column: 16
        }
      },
      "47": {
        start: {
          line: 104,
          column: 30
        },
        end: {
          line: 107,
          column: 13
        }
      },
      "48": {
        start: {
          line: 106,
          column: 56
        },
        end: {
          line: 106,
          column: 103
        }
      },
      "49": {
        start: {
          line: 108,
          column: 12
        },
        end: {
          line: 108,
          column: 24
        }
      },
      "50": {
        start: {
          line: 112,
          column: 12
        },
        end: {
          line: 112,
          column: 66
        }
      },
      "51": {
        start: {
          line: 113,
          column: 12
        },
        end: {
          line: 113,
          column: 25
        }
      },
      "52": {
        start: {
          line: 117,
          column: 27
        },
        end: {
          line: 132,
          column: 10
        }
      },
      "53": {
        start: {
          line: 118,
          column: 8
        },
        end: {
          line: 131,
          column: 9
        }
      },
      "54": {
        start: {
          line: 120,
          column: 12
        },
        end: {
          line: 120,
          column: 67
        }
      },
      "55": {
        start: {
          line: 120,
          column: 41
        },
        end: {
          line: 120,
          column: 65
        }
      },
      "56": {
        start: {
          line: 121,
          column: 12
        },
        end: {
          line: 124,
          column: 16
        }
      },
      "57": {
        start: {
          line: 121,
          column: 30
        },
        end: {
          line: 124,
          column: 13
        }
      },
      "58": {
        start: {
          line: 123,
          column: 56
        },
        end: {
          line: 123,
          column: 101
        }
      },
      "59": {
        start: {
          line: 125,
          column: 12
        },
        end: {
          line: 125,
          column: 24
        }
      },
      "60": {
        start: {
          line: 129,
          column: 12
        },
        end: {
          line: 129,
          column: 64
        }
      },
      "61": {
        start: {
          line: 130,
          column: 12
        },
        end: {
          line: 130,
          column: 25
        }
      },
      "62": {
        start: {
          line: 134,
          column: 23
        },
        end: {
          line: 150,
          column: 10
        }
      },
      "63": {
        start: {
          line: 135,
          column: 8
        },
        end: {
          line: 149,
          column: 9
        }
      },
      "64": {
        start: {
          line: 137,
          column: 12
        },
        end: {
          line: 137,
          column: 67
        }
      },
      "65": {
        start: {
          line: 137,
          column: 41
        },
        end: {
          line: 137,
          column: 65
        }
      },
      "66": {
        start: {
          line: 138,
          column: 12
        },
        end: {
          line: 142,
          column: 16
        }
      },
      "67": {
        start: {
          line: 138,
          column: 30
        },
        end: {
          line: 142,
          column: 13
        }
      },
      "68": {
        start: {
          line: 140,
          column: 49
        },
        end: {
          line: 140,
          column: 67
        }
      },
      "69": {
        start: {
          line: 143,
          column: 12
        },
        end: {
          line: 143,
          column: 24
        }
      },
      "70": {
        start: {
          line: 147,
          column: 12
        },
        end: {
          line: 147,
          column: 59
        }
      },
      "71": {
        start: {
          line: 148,
          column: 12
        },
        end: {
          line: 148,
          column: 25
        }
      },
      "72": {
        start: {
          line: 152,
          column: 28
        },
        end: {
          line: 178,
          column: 10
        }
      },
      "73": {
        start: {
          line: 153,
          column: 8
        },
        end: {
          line: 177,
          column: 9
        }
      },
      "74": {
        start: {
          line: 155,
          column: 12
        },
        end: {
          line: 155,
          column: 68
        }
      },
      "75": {
        start: {
          line: 155,
          column: 41
        },
        end: {
          line: 155,
          column: 66
        }
      },
      "76": {
        start: {
          line: 156,
          column: 12
        },
        end: {
          line: 170,
          column: 16
        }
      },
      "77": {
        start: {
          line: 156,
          column: 30
        },
        end: {
          line: 170,
          column: 13
        }
      },
      "78": {
        start: {
          line: 159,
          column: 20
        },
        end: {
          line: 167,
          column: 21
        }
      },
      "79": {
        start: {
          line: 160,
          column: 24
        },
        end: {
          line: 166,
          column: 26
        }
      },
      "80": {
        start: {
          line: 168,
          column: 20
        },
        end: {
          line: 168,
          column: 32
        }
      },
      "81": {
        start: {
          line: 171,
          column: 12
        },
        end: {
          line: 171,
          column: 24
        }
      },
      "82": {
        start: {
          line: 175,
          column: 12
        },
        end: {
          line: 175,
          column: 65
        }
      },
      "83": {
        start: {
          line: 176,
          column: 12
        },
        end: {
          line: 176,
          column: 25
        }
      },
      "84": {
        start: {
          line: 180,
          column: 35
        },
        end: {
          line: 191,
          column: 10
        }
      },
      "85": {
        start: {
          line: 181,
          column: 8
        },
        end: {
          line: 190,
          column: 9
        }
      },
      "86": {
        start: {
          line: 183,
          column: 12
        },
        end: {
          line: 183,
          column: 67
        }
      },
      "87": {
        start: {
          line: 183,
          column: 41
        },
        end: {
          line: 183,
          column: 65
        }
      },
      "88": {
        start: {
          line: 184,
          column: 12
        },
        end: {
          line: 184,
          column: 24
        }
      },
      "89": {
        start: {
          line: 188,
          column: 12
        },
        end: {
          line: 188,
          column: 65
        }
      },
      "90": {
        start: {
          line: 189,
          column: 12
        },
        end: {
          line: 189,
          column: 25
        }
      },
      "91": {
        start: {
          line: 193,
          column: 27
        },
        end: {
          line: 229,
          column: 21
        }
      },
      "92": {
        start: {
          line: 194,
          column: 8
        },
        end: {
          line: 228,
          column: 9
        }
      },
      "93": {
        start: {
          line: 196,
          column: 12
        },
        end: {
          line: 196,
          column: 68
        }
      },
      "94": {
        start: {
          line: 196,
          column: 41
        },
        end: {
          line: 196,
          column: 66
        }
      },
      "95": {
        start: {
          line: 197,
          column: 25
        },
        end: {
          line: 197,
          column: 36
        }
      },
      "96": {
        start: {
          line: 198,
          column: 29
        },
        end: {
          line: 198,
          column: 95
        }
      },
      "97": {
        start: {
          line: 199,
          column: 12
        },
        end: {
          line: 221,
          column: 13
        }
      },
      "98": {
        start: {
          line: 200,
          column: 35
        },
        end: {
          line: 203,
          column: 28
        }
      },
      "99": {
        start: {
          line: 202,
          column: 40
        },
        end: {
          line: 202,
          column: 144
        }
      },
      "100": {
        start: {
          line: 204,
          column: 29
        },
        end: {
          line: 204,
          column: 73
        }
      },
      "101": {
        start: {
          line: 205,
          column: 28
        },
        end: {
          line: 205,
          column: 53
        }
      },
      "102": {
        start: {
          line: 206,
          column: 26
        },
        end: {
          line: 206,
          column: 53
        }
      },
      "103": {
        start: {
          line: 207,
          column: 16
        },
        end: {
          line: 207,
          column: 29
        }
      },
      "104": {
        start: {
          line: 208,
          column: 16
        },
        end: {
          line: 208,
          column: 38
        }
      },
      "105": {
        start: {
          line: 209,
          column: 16
        },
        end: {
          line: 209,
          column: 26
        }
      },
      "106": {
        start: {
          line: 210,
          column: 16
        },
        end: {
          line: 210,
          column: 41
        }
      },
      "107": {
        start: {
          line: 213,
          column: 36
        },
        end: {
          line: 213,
          column: 65
        }
      },
      "108": {
        start: {
          line: 214,
          column: 29
        },
        end: {
          line: 214,
          column: 82
        }
      },
      "109": {
        start: {
          line: 215,
          column: 28
        },
        end: {
          line: 215,
          column: 53
        }
      },
      "110": {
        start: {
          line: 216,
          column: 26
        },
        end: {
          line: 216,
          column: 53
        }
      },
      "111": {
        start: {
          line: 217,
          column: 16
        },
        end: {
          line: 217,
          column: 29
        }
      },
      "112": {
        start: {
          line: 218,
          column: 16
        },
        end: {
          line: 218,
          column: 38
        }
      },
      "113": {
        start: {
          line: 219,
          column: 16
        },
        end: {
          line: 219,
          column: 26
        }
      },
      "114": {
        start: {
          line: 220,
          column: 16
        },
        end: {
          line: 220,
          column: 41
        }
      },
      "115": {
        start: {
          line: 222,
          column: 12
        },
        end: {
          line: 222,
          column: 24
        }
      },
      "116": {
        start: {
          line: 226,
          column: 12
        },
        end: {
          line: 226,
          column: 59
        }
      },
      "117": {
        start: {
          line: 227,
          column: 12
        },
        end: {
          line: 227,
          column: 25
        }
      },
      "118": {
        start: {
          line: 231,
          column: 27
        },
        end: {
          line: 242,
          column: 10
        }
      },
      "119": {
        start: {
          line: 232,
          column: 8
        },
        end: {
          line: 241,
          column: 9
        }
      },
      "120": {
        start: {
          line: 234,
          column: 12
        },
        end: {
          line: 234,
          column: 68
        }
      },
      "121": {
        start: {
          line: 234,
          column: 41
        },
        end: {
          line: 234,
          column: 66
        }
      },
      "122": {
        start: {
          line: 235,
          column: 12
        },
        end: {
          line: 235,
          column: 24
        }
      },
      "123": {
        start: {
          line: 239,
          column: 12
        },
        end: {
          line: 239,
          column: 63
        }
      },
      "124": {
        start: {
          line: 240,
          column: 12
        },
        end: {
          line: 240,
          column: 25
        }
      },
      "125": {
        start: {
          line: 243,
          column: 4
        },
        end: {
          line: 262,
          column: 6
        }
      },
      "126": {
        start: {
          line: 264,
          column: 0
        },
        end: {
          line: 264,
          column: 28
        }
      },
      "127": {
        start: {
          line: 265,
          column: 0
        },
        end: {
          line: 265,
          column: 35
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 5,
            column: 17
          },
          end: {
            line: 5,
            column: 18
          }
        },
        loc: {
          start: {
            line: 5,
            column: 23
          },
          end: {
            line: 263,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 19,
            column: 47
          },
          end: {
            line: 19,
            column: 48
          }
        },
        loc: {
          start: {
            line: 19,
            column: 59
          },
          end: {
            line: 54,
            column: 5
          }
        },
        line: 19
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 44,
            column: 30
          },
          end: {
            line: 44,
            column: 31
          }
        },
        loc: {
          start: {
            line: 44,
            column: 41
          },
          end: {
            line: 44,
            column: 66
          }
        },
        line: 44
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 56,
            column: 47
          },
          end: {
            line: 56,
            column: 48
          }
        },
        loc: {
          start: {
            line: 56,
            column: 71
          },
          end: {
            line: 98,
            column: 5
          }
        },
        line: 56
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 61,
            column: 57
          },
          end: {
            line: 61,
            column: 58
          }
        },
        loc: {
          start: {
            line: 61,
            column: 68
          },
          end: {
            line: 69,
            column: 13
          }
        },
        line: 61
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 73,
            column: 53
          },
          end: {
            line: 73,
            column: 54
          }
        },
        loc: {
          start: {
            line: 73,
            column: 61
          },
          end: {
            line: 73,
            column: 91
          }
        },
        line: 73
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 76,
            column: 53
          },
          end: {
            line: 76,
            column: 54
          }
        },
        loc: {
          start: {
            line: 76,
            column: 61
          },
          end: {
            line: 76,
            column: 87
          }
        },
        line: 76
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 80,
            column: 53
          },
          end: {
            line: 80,
            column: 54
          }
        },
        loc: {
          start: {
            line: 80,
            column: 61
          },
          end: {
            line: 81,
            column: 66
          }
        },
        line: 80
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 84,
            column: 30
          },
          end: {
            line: 84,
            column: 31
          }
        },
        loc: {
          start: {
            line: 84,
            column: 41
          },
          end: {
            line: 84,
            column: 65
          }
        },
        line: 84
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 100,
            column: 54
          },
          end: {
            line: 100,
            column: 55
          }
        },
        loc: {
          start: {
            line: 100,
            column: 80
          },
          end: {
            line: 115,
            column: 5
          }
        },
        line: 100
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 103,
            column: 30
          },
          end: {
            line: 103,
            column: 31
          }
        },
        loc: {
          start: {
            line: 103,
            column: 41
          },
          end: {
            line: 103,
            column: 65
          }
        },
        line: 103
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 104,
            column: 21
          },
          end: {
            line: 104,
            column: 22
          }
        },
        loc: {
          start: {
            line: 104,
            column: 30
          },
          end: {
            line: 107,
            column: 13
          }
        },
        line: 104
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 106,
            column: 38
          },
          end: {
            line: 106,
            column: 39
          }
        },
        loc: {
          start: {
            line: 106,
            column: 56
          },
          end: {
            line: 106,
            column: 103
          }
        },
        line: 106
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 117,
            column: 52
          },
          end: {
            line: 117,
            column: 53
          }
        },
        loc: {
          start: {
            line: 117,
            column: 76
          },
          end: {
            line: 132,
            column: 5
          }
        },
        line: 117
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 120,
            column: 30
          },
          end: {
            line: 120,
            column: 31
          }
        },
        loc: {
          start: {
            line: 120,
            column: 41
          },
          end: {
            line: 120,
            column: 65
          }
        },
        line: 120
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 121,
            column: 21
          },
          end: {
            line: 121,
            column: 22
          }
        },
        loc: {
          start: {
            line: 121,
            column: 30
          },
          end: {
            line: 124,
            column: 13
          }
        },
        line: 121
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 123,
            column: 38
          },
          end: {
            line: 123,
            column: 39
          }
        },
        loc: {
          start: {
            line: 123,
            column: 56
          },
          end: {
            line: 123,
            column: 101
          }
        },
        line: 123
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 134,
            column: 48
          },
          end: {
            line: 134,
            column: 49
          }
        },
        loc: {
          start: {
            line: 134,
            column: 66
          },
          end: {
            line: 150,
            column: 5
          }
        },
        line: 134
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 137,
            column: 30
          },
          end: {
            line: 137,
            column: 31
          }
        },
        loc: {
          start: {
            line: 137,
            column: 41
          },
          end: {
            line: 137,
            column: 65
          }
        },
        line: 137
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 138,
            column: 21
          },
          end: {
            line: 138,
            column: 22
          }
        },
        loc: {
          start: {
            line: 138,
            column: 30
          },
          end: {
            line: 142,
            column: 13
          }
        },
        line: 138
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 140,
            column: 41
          },
          end: {
            line: 140,
            column: 42
          }
        },
        loc: {
          start: {
            line: 140,
            column: 49
          },
          end: {
            line: 140,
            column: 67
          }
        },
        line: 140
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 152,
            column: 53
          },
          end: {
            line: 152,
            column: 54
          }
        },
        loc: {
          start: {
            line: 152,
            column: 81
          },
          end: {
            line: 178,
            column: 5
          }
        },
        line: 152
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 155,
            column: 30
          },
          end: {
            line: 155,
            column: 31
          }
        },
        loc: {
          start: {
            line: 155,
            column: 41
          },
          end: {
            line: 155,
            column: 66
          }
        },
        line: 155
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 156,
            column: 21
          },
          end: {
            line: 156,
            column: 22
          }
        },
        loc: {
          start: {
            line: 156,
            column: 30
          },
          end: {
            line: 170,
            column: 13
          }
        },
        line: 156
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 158,
            column: 38
          },
          end: {
            line: 158,
            column: 39
          }
        },
        loc: {
          start: {
            line: 158,
            column: 55
          },
          end: {
            line: 169,
            column: 17
          }
        },
        line: 158
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 180,
            column: 60
          },
          end: {
            line: 180,
            column: 61
          }
        },
        loc: {
          start: {
            line: 180,
            column: 92
          },
          end: {
            line: 191,
            column: 5
          }
        },
        line: 180
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 183,
            column: 30
          },
          end: {
            line: 183,
            column: 31
          }
        },
        loc: {
          start: {
            line: 183,
            column: 41
          },
          end: {
            line: 183,
            column: 65
          }
        },
        line: 183
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 193,
            column: 52
          },
          end: {
            line: 193,
            column: 53
          }
        },
        loc: {
          start: {
            line: 193,
            column: 70
          },
          end: {
            line: 229,
            column: 5
          }
        },
        line: 193
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 196,
            column: 30
          },
          end: {
            line: 196,
            column: 31
          }
        },
        loc: {
          start: {
            line: 196,
            column: 41
          },
          end: {
            line: 196,
            column: 66
          }
        },
        line: 196
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 202,
            column: 32
          },
          end: {
            line: 202,
            column: 33
          }
        },
        loc: {
          start: {
            line: 202,
            column: 40
          },
          end: {
            line: 202,
            column: 144
          }
        },
        line: 202
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 231,
            column: 52
          },
          end: {
            line: 231,
            column: 53
          }
        },
        loc: {
          start: {
            line: 231,
            column: 68
          },
          end: {
            line: 242,
            column: 5
          }
        },
        line: 231
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 234,
            column: 30
          },
          end: {
            line: 234,
            column: 31
          }
        },
        loc: {
          start: {
            line: 234,
            column: 41
          },
          end: {
            line: 234,
            column: 66
          }
        },
        line: 234
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 49,
            column: 26
          },
          end: {
            line: 49,
            column: 89
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 49,
            column: 51
          },
          end: {
            line: 49,
            column: 64
          }
        }, {
          start: {
            line: 49,
            column: 67
          },
          end: {
            line: 49,
            column: 89
          }
        }],
        line: 49
      },
      "1": {
        loc: {
          start: {
            line: 56,
            column: 54
          },
          end: {
            line: 56,
            column: 66
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 56,
            column: 64
          },
          end: {
            line: 56,
            column: 66
          }
        }],
        line: 56
      },
      "2": {
        loc: {
          start: {
            line: 72,
            column: 12
          },
          end: {
            line: 74,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 72,
            column: 12
          },
          end: {
            line: 74,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 72
      },
      "3": {
        loc: {
          start: {
            line: 75,
            column: 12
          },
          end: {
            line: 77,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 75,
            column: 12
          },
          end: {
            line: 77,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 75
      },
      "4": {
        loc: {
          start: {
            line: 78,
            column: 12
          },
          end: {
            line: 82,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 78,
            column: 12
          },
          end: {
            line: 82,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 78
      },
      "5": {
        loc: {
          start: {
            line: 80,
            column: 61
          },
          end: {
            line: 81,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 80,
            column: 61
          },
          end: {
            line: 80,
            column: 106
          }
        }, {
          start: {
            line: 81,
            column: 20
          },
          end: {
            line: 81,
            column: 66
          }
        }],
        line: 80
      },
      "6": {
        loc: {
          start: {
            line: 93,
            column: 26
          },
          end: {
            line: 93,
            column: 89
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 93,
            column: 51
          },
          end: {
            line: 93,
            column: 64
          }
        }, {
          start: {
            line: 93,
            column: 67
          },
          end: {
            line: 93,
            column: 89
          }
        }],
        line: 93
      },
      "7": {
        loc: {
          start: {
            line: 106,
            column: 56
          },
          end: {
            line: 106,
            column: 103
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 106,
            column: 77
          },
          end: {
            line: 106,
            column: 96
          }
        }, {
          start: {
            line: 106,
            column: 99
          },
          end: {
            line: 106,
            column: 103
          }
        }],
        line: 106
      },
      "8": {
        loc: {
          start: {
            line: 123,
            column: 56
          },
          end: {
            line: 123,
            column: 101
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 123,
            column: 77
          },
          end: {
            line: 123,
            column: 94
          }
        }, {
          start: {
            line: 123,
            column: 97
          },
          end: {
            line: 123,
            column: 101
          }
        }],
        line: 123
      },
      "9": {
        loc: {
          start: {
            line: 159,
            column: 20
          },
          end: {
            line: 167,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 159,
            column: 20
          },
          end: {
            line: 167,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 159
      },
      "10": {
        loc: {
          start: {
            line: 162,
            column: 32
          },
          end: {
            line: 164,
            column: 29
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 162,
            column: 32
          },
          end: {
            line: 162,
            column: 46
          }
        }, {
          start: {
            line: 162,
            column: 50
          },
          end: {
            line: 164,
            column: 29
          }
        }],
        line: 162
      },
      "11": {
        loc: {
          start: {
            line: 165,
            column: 32
          },
          end: {
            line: 165,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 165,
            column: 32
          },
          end: {
            line: 165,
            column: 44
          }
        }, {
          start: {
            line: 165,
            column: 48
          },
          end: {
            line: 165,
            column: 70
          }
        }],
        line: 165
      },
      "12": {
        loc: {
          start: {
            line: 199,
            column: 12
          },
          end: {
            line: 221,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 199,
            column: 12
          },
          end: {
            line: 221,
            column: 13
          }
        }, {
          start: {
            line: 212,
            column: 17
          },
          end: {
            line: 221,
            column: 13
          }
        }],
        line: 199
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0
    },
    b: {
      "0": [0, 0],
      "1": [0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0]
    },
    inputSourceMap: {
      file: "/workspaces/MyFitHero/src/features/admin/hooks/useAdmin.ts",
      mappings: "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",
      names: [],
      sources: ["/workspaces/MyFitHero/src/features/admin/hooks/useAdmin.ts"],
      sourcesContent: ["import { Users } from 'lucide-react';\nimport React, { useState, useCallback } from 'react';\n\nexport interface AdminStats {\n  totalUsers: number;\n  activeUsers: number;\n  totalWorkouts: number;\n  totalSessions: number;\n  averageSessionDuration: number;\n  popularExercises: Array<{ name: string; count: number }>;\n  userGrowth: Array<{ date: string; count: number }>;\n}\n\nexport interface UserManagement {\n  users: Array<{\n    id: string;\n    email: string;\n    name: string;\n    createdAt: string;\n    lastActive: string;\n    status: 'active' | 'inactive' | 'suspended';\n    role: 'user' | 'admin' | 'moderator';\n  }>;\n  totalUsers: number;\n  filters: {\n    status?: string;\n    role?: string;\n    search?: string;\n  };\n}\n\nexport interface UseAdminReturn {\n  // Stats\n  stats: AdminStats | undefined;\n  statsLoading: boolean;\n  statsError: string | undefined;\n\n  // User Management\n  users: UserManagement;\n  usersLoading: boolean;\n  usersError: string | undefined;\n\n  // Actions\n  loadStats: () => Promise<void>;\n  loadUsers: (filters?: UserManagement['filters']) => Promise<void>;\n  updateUserStatus: (\n    userId: string,\n    status: 'active' | 'inactive' | 'suspended'\n  ) => Promise<boolean>;\n  updateUserRole: (userId: string, role: 'user' | 'admin' | 'moderator') => Promise<boolean>;\n  deleteUser: (userId: string) => Promise<boolean>;\n\n  // Bulk actions\n  bulkUpdateUsers: (\n    userIds: string[],\n    updates: { status?: string; role?: string }\n  ) => Promise<boolean>;\n\n  // System actions\n  sendSystemNotification: (message: string, targetUsers: string[]) => Promise<boolean>;\n  exportUserData: (format: 'csv' | 'json') => Promise<boolean>;\n  generateReport: (type: 'users' | 'activities' | 'performance') => Promise<boolean>;\n}\n\nexport const useAdmin = (): UseAdminReturn => {\n  // Stats state\n  const [stats, setStats] = useState<AdminStats | null>(null);\n  const [statsLoading, setStatsLoading] = useState(false);\n  const [statsError, setStatsError] = useState<string | null>(null);\n\n  // Users state\n  const [users, setUsers] = useState<UserManagement>({\n    users: [],\n    totalUsers: 0,\n    filters: {},\n  });\n  const [usersLoading, setUsersLoading] = useState(false);\n  const [usersError, setUsersError] = useState<string | null>(null);\n\n  // Load admin stats\n  const loadStats = useCallback(async (): Promise<void> => {\n    try {\n      setStatsLoading(true);\n      setStatsError(null);\n\n      // Mock data - replace with actual API call\n      const mockStats: AdminStats = {\n        totalUsers: 1250,\n        activeUsers: 342,\n        totalWorkouts: 8750,\n        totalSessions: 3420,\n        averageSessionDuration: 45,\n        popularExercises: [\n          { name: 'Push-ups', count: 450 },\n          { name: 'Squats', count: 380 },\n          { name: 'Pull-ups', count: 320 },\n          { name: 'Deadlifts', count: 290 },\n          { name: 'Bench Press', count: 260 },\n        ],\n        userGrowth: [\n          { date: '2025-08-01', count: 1100 },\n          { date: '2025-08-15', count: 1150 },\n          { date: '2025-09-01', count: 1250 },\n        ],\n      };\n\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 1000));\n\n      setStats(mockStats);\n    } catch (error: any) {\n      // Erreur silencieuse\n      setStatsError(error instanceof Error ? error.message : 'Failed to load stats');\n    } finally {\n      setStatsLoading(false);\n    }\n  }, []);\n\n  // Load users\n  const loadUsers = useCallback(async (filters: UserManagement['filters'] = {}): Promise<void> => {\n    try {\n      setUsersLoading(true);\n      setUsersError(null);\n\n      // Mock data - replace with actual API call\n      const mockUsers = Array.from({ length: 50 }, (_, i) => ({\n        id: `user-${i + 1}`,\n        email: `user${i + 1}@example.com`,\n        name: `User ${i + 1}`,\n        createdAt: new Date(Date.now() - Math.random() * 365 * 24 * 60 * 60 * 1000).toISOString(),\n        lastActive: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000).toISOString(),\n        status: ['active', 'inactive', 'suspended'][Math.floor(Math.random() * 3)] as\n          | 'active'\n          | 'inactive'\n          | 'suspended',\n        role: ['user', 'admin', 'moderator'][Math.floor(Math.random() * 3)] as\n          | 'user'\n          | 'admin'\n          | 'moderator',\n      }));\n\n      // Apply filters\n      let filteredUsers = mockUsers;\n      if (filters.status) {\n        filteredUsers = filteredUsers.filter(user => user.status === filters.status);\n      }\n      if (filters.role) {\n        filteredUsers = filteredUsers.filter(user => user.role === filters.role);\n      }\n      if (filters.search) {\n        const searchLower = filters.search.toLowerCase();\n        filteredUsers = filteredUsers.filter(\n          user =>\n            user.name.toLowerCase().includes(searchLower) ||\n            user.email.toLowerCase().includes(searchLower)\n        );\n      }\n\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 800));\n\n      setUsers({\n        users: filteredUsers,\n        totalUsers: filteredUsers.length,\n        filters,\n      });\n    } catch (error: any) {\n      // Erreur silencieuse\n      setUsersError(error instanceof Error ? error.message : 'Failed to load users');\n    } finally {\n      setUsersLoading(false);\n    }\n  }, []);\n\n  // Update user status\n  const updateUserStatus = useCallback(\n    async (userId: string, status: 'active' | 'inactive' | 'suspended'): Promise<boolean> => {\n      try {\n        // Mock API call\n        await new Promise(resolve => setTimeout(resolve, 500));\n\n        setUsers(prev => ({\n          ...prev,\n          users: prev.users.map((user, index) => (user.id === userId ? { ...user, status } : user)),\n        }));\n\n        return true;\n      } catch (error: any) {\n      // Erreur silencieuse\n        console.error('Failed to update user status:', error);\n        return false;\n      }\n    },\n    []\n  );\n\n  // Update user role\n  const updateUserRole = useCallback(\n    async (userId: string, role: 'user' | 'admin' | 'moderator'): Promise<boolean> => {\n      try {\n        // Mock API call\n        await new Promise(resolve => setTimeout(resolve, 500));\n\n        setUsers(prev => ({\n          ...prev,\n          users: prev.users.map((user, index) => (user.id === userId ? { ...user, role } : user)),\n        }));\n\n        return true;\n      } catch (error: any) {\n      // Erreur silencieuse\n        console.error('Failed to update user role:', error);\n        return false;\n      }\n    },\n    []\n  );\n\n  // Delete user\n  const deleteUser = useCallback(async (userId: string): Promise<boolean> => {\n    try {\n      // Mock API call\n      await new Promise(resolve => setTimeout(resolve, 500));\n\n      setUsers(prev => ({\n        ...prev,\n        users: prev.users.filter(user => user.id !== userId),\n        totalUsers: prev.totalUsers - 1,\n      }));\n\n      return true;\n    } catch (error: any) {\n      // Erreur silencieuse\n      console.error('Failed to delete user:', error);\n      return false;\n    }\n  }, []);\n\n  // Bulk update users\n  const bulkUpdateUsers = useCallback(\n    async (userIds: string[], updates: { status?: string; role?: string }): Promise<boolean> => {\n      try {\n        // Mock API call\n        await new Promise(resolve => setTimeout(resolve, 1000));\n\n        setUsers(prev => ({\n          ...prev,\n          users: prev.users.map((user, index) => {\n            if (userIds.includes(user.id)) {\n              return {\n                ...user,\n                ...(updates.status && {\n                  status: updates.status as 'active' | 'inactive' | 'suspended',\n                }),\n                ...(updates.role && { role: updates.role as 'user' | 'admin' | 'moderator' }),\n              };\n            }\n            return user;\n          }),\n        }));\n\n        return true;\n      } catch (error: any) {\n      // Erreur silencieuse\n        console.error('Failed to bulk update users:', error);\n        return false;\n      }\n    },\n    []\n  );\n\n  // Send system notification\n  const sendSystemNotification = useCallback(\n    async (message: string, targetUsers: string[]): Promise<boolean> => {\n      try {\n        // Mock API call\n        await new Promise(resolve => setTimeout(resolve, 800));\n        return true;\n      } catch (error: any) {\n      // Erreur silencieuse\n        console.error('Failed to send notification:', error);\n        return false;\n      }\n    },\n    []\n  );\n\n  // Export user data\n  const exportUserData = useCallback(\n    async (format: 'csv' | 'json'): Promise<boolean> => {\n      try {\n        // Mock export\n        await new Promise(resolve => setTimeout(resolve, 1500));\n\n        const data = users.users;\n        const filename = `users_export_${new Date().toISOString().split('T')[0]}.${format}`;\n\n        if (format === 'csv') {\n          const csvContent = [\n            'ID,Email,Name,Created At,Last Active,Status,Role',\n            ...data.map(\n              user =>\n                `${user.id},${user.email},${user.name},${user.createdAt},${user.lastActive},${user.status},${user.role}`\n            ),\n          ].join('\\n');\n\n          const blob = new Blob([csvContent], { type: 'text/csv' });\n          const url = URL.createObjectURL(blob);\n          const a = document.createElement('a');\n          a.href = url;\n          a.download = filename;\n          a.click();\n          URL.revokeObjectURL(url);\n        } else {\n          const jsonContent = JSON.stringify(data, null, 2);\n          const blob = new Blob([jsonContent], { type: 'application/json' });\n          const url = URL.createObjectURL(blob);\n          const a = document.createElement('a');\n          a.href = url;\n          a.download = filename;\n          a.click();\n          URL.revokeObjectURL(url);\n        }\n\n        return true;\n      } catch (error: any) {\n      // Erreur silencieuse\n        console.error('Failed to export data:', error);\n        return false;\n      }\n    },\n    [users.users]\n  );\n\n  // Generate report\n  const generateReport = useCallback(\n    async (type: 'users' | 'activities' | 'performance'): Promise<boolean> => {\n      try {\n        // Mock report generation\n        await new Promise(resolve => setTimeout(resolve, 2000));\n        return true;\n      } catch (error: any) {\n      // Erreur silencieuse\n        console.error('Failed to generate report:', error);\n        return false;\n      }\n    },\n    []\n  );\n\n  return {\n    // Stats\n    stats,\n    statsLoading,\n    statsError,\n\n    // Users\n    users,\n    usersLoading,\n    usersError,\n\n    // Actions\n    loadStats,\n    loadUsers,\n    updateUserStatus,\n    updateUserRole,\n    deleteUser,\n    bulkUpdateUsers,\n    sendSystemNotification,\n    exportUserData,\n    generateReport,\n  };\n};\n\nexport default useAdmin;\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "b87d407ef536846afc217da5f05650e780666a63"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1t3vpkb0g = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1t3vpkb0g();
cov_1t3vpkb0g().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1t3vpkb0g().s[1]++;
exports.useAdmin = void 0;
const react_1 =
/* istanbul ignore next */
(cov_1t3vpkb0g().s[2]++, require("react"));
/* istanbul ignore next */
cov_1t3vpkb0g().s[3]++;
const useAdmin = () => {
  /* istanbul ignore next */
  cov_1t3vpkb0g().f[0]++;
  // Stats state
  const [stats, setStats] =
  /* istanbul ignore next */
  (cov_1t3vpkb0g().s[4]++, (0, react_1.useState)(null));
  const [statsLoading, setStatsLoading] =
  /* istanbul ignore next */
  (cov_1t3vpkb0g().s[5]++, (0, react_1.useState)(false));
  const [statsError, setStatsError] =
  /* istanbul ignore next */
  (cov_1t3vpkb0g().s[6]++, (0, react_1.useState)(null));
  // Users state
  const [users, setUsers] =
  /* istanbul ignore next */
  (cov_1t3vpkb0g().s[7]++, (0, react_1.useState)({
    users: [],
    totalUsers: 0,
    filters: {}
  }));
  const [usersLoading, setUsersLoading] =
  /* istanbul ignore next */
  (cov_1t3vpkb0g().s[8]++, (0, react_1.useState)(false));
  const [usersError, setUsersError] =
  /* istanbul ignore next */
  (cov_1t3vpkb0g().s[9]++, (0, react_1.useState)(null));
  // Load admin stats
  const loadStats =
  /* istanbul ignore next */
  (cov_1t3vpkb0g().s[10]++, (0, react_1.useCallback)(async () => {
    /* istanbul ignore next */
    cov_1t3vpkb0g().f[1]++;
    cov_1t3vpkb0g().s[11]++;
    try {
      /* istanbul ignore next */
      cov_1t3vpkb0g().s[12]++;
      setStatsLoading(true);
      /* istanbul ignore next */
      cov_1t3vpkb0g().s[13]++;
      setStatsError(null);
      // Mock data - replace with actual API call
      const mockStats =
      /* istanbul ignore next */
      (cov_1t3vpkb0g().s[14]++, {
        totalUsers: 1250,
        activeUsers: 342,
        totalWorkouts: 8750,
        totalSessions: 3420,
        averageSessionDuration: 45,
        popularExercises: [{
          name: 'Push-ups',
          count: 450
        }, {
          name: 'Squats',
          count: 380
        }, {
          name: 'Pull-ups',
          count: 320
        }, {
          name: 'Deadlifts',
          count: 290
        }, {
          name: 'Bench Press',
          count: 260
        }],
        userGrowth: [{
          date: '2025-08-01',
          count: 1100
        }, {
          date: '2025-08-15',
          count: 1150
        }, {
          date: '2025-09-01',
          count: 1250
        }]
      });
      // Simulate API delay
      /* istanbul ignore next */
      cov_1t3vpkb0g().s[15]++;
      await new Promise(resolve => {
        /* istanbul ignore next */
        cov_1t3vpkb0g().f[2]++;
        cov_1t3vpkb0g().s[16]++;
        return setTimeout(resolve, 1000);
      });
      /* istanbul ignore next */
      cov_1t3vpkb0g().s[17]++;
      setStats(mockStats);
    } catch (error) {
      /* istanbul ignore next */
      cov_1t3vpkb0g().s[18]++;
      // Erreur silencieuse
      setStatsError(error instanceof Error ?
      /* istanbul ignore next */
      (cov_1t3vpkb0g().b[0][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1t3vpkb0g().b[0][1]++, 'Failed to load stats'));
    } finally {
      /* istanbul ignore next */
      cov_1t3vpkb0g().s[19]++;
      setStatsLoading(false);
    }
  }, []));
  // Load users
  const loadUsers =
  /* istanbul ignore next */
  (cov_1t3vpkb0g().s[20]++, (0, react_1.useCallback)(async (filters =
  /* istanbul ignore next */
  (cov_1t3vpkb0g().b[1][0]++, {})) => {
    /* istanbul ignore next */
    cov_1t3vpkb0g().f[3]++;
    cov_1t3vpkb0g().s[21]++;
    try {
      /* istanbul ignore next */
      cov_1t3vpkb0g().s[22]++;
      setUsersLoading(true);
      /* istanbul ignore next */
      cov_1t3vpkb0g().s[23]++;
      setUsersError(null);
      // Mock data - replace with actual API call
      const mockUsers =
      /* istanbul ignore next */
      (cov_1t3vpkb0g().s[24]++, Array.from({
        length: 50
      }, (_, i) => {
        /* istanbul ignore next */
        cov_1t3vpkb0g().f[4]++;
        cov_1t3vpkb0g().s[25]++;
        return {
          id: `user-${i + 1}`,
          email: `user${i + 1}@example.com`,
          name: `User ${i + 1}`,
          createdAt: new Date(Date.now() - Math.random() * 365 * 24 * 60 * 60 * 1000).toISOString(),
          lastActive: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000).toISOString(),
          status: ['active', 'inactive', 'suspended'][Math.floor(Math.random() * 3)],
          role: ['user', 'admin', 'moderator'][Math.floor(Math.random() * 3)]
        };
      }));
      // Apply filters
      let filteredUsers =
      /* istanbul ignore next */
      (cov_1t3vpkb0g().s[26]++, mockUsers);
      /* istanbul ignore next */
      cov_1t3vpkb0g().s[27]++;
      if (filters.status) {
        /* istanbul ignore next */
        cov_1t3vpkb0g().b[2][0]++;
        cov_1t3vpkb0g().s[28]++;
        filteredUsers = filteredUsers.filter(user => {
          /* istanbul ignore next */
          cov_1t3vpkb0g().f[5]++;
          cov_1t3vpkb0g().s[29]++;
          return user.status === filters.status;
        });
      } else
      /* istanbul ignore next */
      {
        cov_1t3vpkb0g().b[2][1]++;
      }
      cov_1t3vpkb0g().s[30]++;
      if (filters.role) {
        /* istanbul ignore next */
        cov_1t3vpkb0g().b[3][0]++;
        cov_1t3vpkb0g().s[31]++;
        filteredUsers = filteredUsers.filter(user => {
          /* istanbul ignore next */
          cov_1t3vpkb0g().f[6]++;
          cov_1t3vpkb0g().s[32]++;
          return user.role === filters.role;
        });
      } else
      /* istanbul ignore next */
      {
        cov_1t3vpkb0g().b[3][1]++;
      }
      cov_1t3vpkb0g().s[33]++;
      if (filters.search) {
        /* istanbul ignore next */
        cov_1t3vpkb0g().b[4][0]++;
        const searchLower =
        /* istanbul ignore next */
        (cov_1t3vpkb0g().s[34]++, filters.search.toLowerCase());
        /* istanbul ignore next */
        cov_1t3vpkb0g().s[35]++;
        filteredUsers = filteredUsers.filter(user => {
          /* istanbul ignore next */
          cov_1t3vpkb0g().f[7]++;
          cov_1t3vpkb0g().s[36]++;
          return /* istanbul ignore next */(cov_1t3vpkb0g().b[5][0]++, user.name.toLowerCase().includes(searchLower)) ||
          /* istanbul ignore next */
          (cov_1t3vpkb0g().b[5][1]++, user.email.toLowerCase().includes(searchLower));
        });
      } else
      /* istanbul ignore next */
      {
        cov_1t3vpkb0g().b[4][1]++;
      }
      // Simulate API delay
      cov_1t3vpkb0g().s[37]++;
      await new Promise(resolve => {
        /* istanbul ignore next */
        cov_1t3vpkb0g().f[8]++;
        cov_1t3vpkb0g().s[38]++;
        return setTimeout(resolve, 800);
      });
      /* istanbul ignore next */
      cov_1t3vpkb0g().s[39]++;
      setUsers({
        users: filteredUsers,
        totalUsers: filteredUsers.length,
        filters
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1t3vpkb0g().s[40]++;
      // Erreur silencieuse
      setUsersError(error instanceof Error ?
      /* istanbul ignore next */
      (cov_1t3vpkb0g().b[6][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1t3vpkb0g().b[6][1]++, 'Failed to load users'));
    } finally {
      /* istanbul ignore next */
      cov_1t3vpkb0g().s[41]++;
      setUsersLoading(false);
    }
  }, []));
  // Update user status
  const updateUserStatus =
  /* istanbul ignore next */
  (cov_1t3vpkb0g().s[42]++, (0, react_1.useCallback)(async (userId, status) => {
    /* istanbul ignore next */
    cov_1t3vpkb0g().f[9]++;
    cov_1t3vpkb0g().s[43]++;
    try {
      /* istanbul ignore next */
      cov_1t3vpkb0g().s[44]++;
      // Mock API call
      await new Promise(resolve => {
        /* istanbul ignore next */
        cov_1t3vpkb0g().f[10]++;
        cov_1t3vpkb0g().s[45]++;
        return setTimeout(resolve, 500);
      });
      /* istanbul ignore next */
      cov_1t3vpkb0g().s[46]++;
      setUsers(prev => {
        /* istanbul ignore next */
        cov_1t3vpkb0g().f[11]++;
        cov_1t3vpkb0g().s[47]++;
        return {
          ...prev,
          users: prev.users.map((user, index) => {
            /* istanbul ignore next */
            cov_1t3vpkb0g().f[12]++;
            cov_1t3vpkb0g().s[48]++;
            return user.id === userId ?
            /* istanbul ignore next */
            (cov_1t3vpkb0g().b[7][0]++, {
              ...user,
              status
            }) :
            /* istanbul ignore next */
            (cov_1t3vpkb0g().b[7][1]++, user);
          })
        };
      });
      /* istanbul ignore next */
      cov_1t3vpkb0g().s[49]++;
      return true;
    } catch (error) {
      /* istanbul ignore next */
      cov_1t3vpkb0g().s[50]++;
      // Erreur silencieuse
      console.error('Failed to update user status:', error);
      /* istanbul ignore next */
      cov_1t3vpkb0g().s[51]++;
      return false;
    }
  }, []));
  // Update user role
  const updateUserRole =
  /* istanbul ignore next */
  (cov_1t3vpkb0g().s[52]++, (0, react_1.useCallback)(async (userId, role) => {
    /* istanbul ignore next */
    cov_1t3vpkb0g().f[13]++;
    cov_1t3vpkb0g().s[53]++;
    try {
      /* istanbul ignore next */
      cov_1t3vpkb0g().s[54]++;
      // Mock API call
      await new Promise(resolve => {
        /* istanbul ignore next */
        cov_1t3vpkb0g().f[14]++;
        cov_1t3vpkb0g().s[55]++;
        return setTimeout(resolve, 500);
      });
      /* istanbul ignore next */
      cov_1t3vpkb0g().s[56]++;
      setUsers(prev => {
        /* istanbul ignore next */
        cov_1t3vpkb0g().f[15]++;
        cov_1t3vpkb0g().s[57]++;
        return {
          ...prev,
          users: prev.users.map((user, index) => {
            /* istanbul ignore next */
            cov_1t3vpkb0g().f[16]++;
            cov_1t3vpkb0g().s[58]++;
            return user.id === userId ?
            /* istanbul ignore next */
            (cov_1t3vpkb0g().b[8][0]++, {
              ...user,
              role
            }) :
            /* istanbul ignore next */
            (cov_1t3vpkb0g().b[8][1]++, user);
          })
        };
      });
      /* istanbul ignore next */
      cov_1t3vpkb0g().s[59]++;
      return true;
    } catch (error) {
      /* istanbul ignore next */
      cov_1t3vpkb0g().s[60]++;
      // Erreur silencieuse
      console.error('Failed to update user role:', error);
      /* istanbul ignore next */
      cov_1t3vpkb0g().s[61]++;
      return false;
    }
  }, []));
  // Delete user
  const deleteUser =
  /* istanbul ignore next */
  (cov_1t3vpkb0g().s[62]++, (0, react_1.useCallback)(async userId => {
    /* istanbul ignore next */
    cov_1t3vpkb0g().f[17]++;
    cov_1t3vpkb0g().s[63]++;
    try {
      /* istanbul ignore next */
      cov_1t3vpkb0g().s[64]++;
      // Mock API call
      await new Promise(resolve => {
        /* istanbul ignore next */
        cov_1t3vpkb0g().f[18]++;
        cov_1t3vpkb0g().s[65]++;
        return setTimeout(resolve, 500);
      });
      /* istanbul ignore next */
      cov_1t3vpkb0g().s[66]++;
      setUsers(prev => {
        /* istanbul ignore next */
        cov_1t3vpkb0g().f[19]++;
        cov_1t3vpkb0g().s[67]++;
        return {
          ...prev,
          users: prev.users.filter(user => {
            /* istanbul ignore next */
            cov_1t3vpkb0g().f[20]++;
            cov_1t3vpkb0g().s[68]++;
            return user.id !== userId;
          }),
          totalUsers: prev.totalUsers - 1
        };
      });
      /* istanbul ignore next */
      cov_1t3vpkb0g().s[69]++;
      return true;
    } catch (error) {
      /* istanbul ignore next */
      cov_1t3vpkb0g().s[70]++;
      // Erreur silencieuse
      console.error('Failed to delete user:', error);
      /* istanbul ignore next */
      cov_1t3vpkb0g().s[71]++;
      return false;
    }
  }, []));
  // Bulk update users
  const bulkUpdateUsers =
  /* istanbul ignore next */
  (cov_1t3vpkb0g().s[72]++, (0, react_1.useCallback)(async (userIds, updates) => {
    /* istanbul ignore next */
    cov_1t3vpkb0g().f[21]++;
    cov_1t3vpkb0g().s[73]++;
    try {
      /* istanbul ignore next */
      cov_1t3vpkb0g().s[74]++;
      // Mock API call
      await new Promise(resolve => {
        /* istanbul ignore next */
        cov_1t3vpkb0g().f[22]++;
        cov_1t3vpkb0g().s[75]++;
        return setTimeout(resolve, 1000);
      });
      /* istanbul ignore next */
      cov_1t3vpkb0g().s[76]++;
      setUsers(prev => {
        /* istanbul ignore next */
        cov_1t3vpkb0g().f[23]++;
        cov_1t3vpkb0g().s[77]++;
        return {
          ...prev,
          users: prev.users.map((user, index) => {
            /* istanbul ignore next */
            cov_1t3vpkb0g().f[24]++;
            cov_1t3vpkb0g().s[78]++;
            if (userIds.includes(user.id)) {
              /* istanbul ignore next */
              cov_1t3vpkb0g().b[9][0]++;
              cov_1t3vpkb0g().s[79]++;
              return {
                ...user,
                ...(
                /* istanbul ignore next */
                (cov_1t3vpkb0g().b[10][0]++, updates.status) &&
                /* istanbul ignore next */
                (cov_1t3vpkb0g().b[10][1]++, {
                  status: updates.status
                })),
                ...(
                /* istanbul ignore next */
                (cov_1t3vpkb0g().b[11][0]++, updates.role) &&
                /* istanbul ignore next */
                (cov_1t3vpkb0g().b[11][1]++, {
                  role: updates.role
                }))
              };
            } else
            /* istanbul ignore next */
            {
              cov_1t3vpkb0g().b[9][1]++;
            }
            cov_1t3vpkb0g().s[80]++;
            return user;
          })
        };
      });
      /* istanbul ignore next */
      cov_1t3vpkb0g().s[81]++;
      return true;
    } catch (error) {
      /* istanbul ignore next */
      cov_1t3vpkb0g().s[82]++;
      // Erreur silencieuse
      console.error('Failed to bulk update users:', error);
      /* istanbul ignore next */
      cov_1t3vpkb0g().s[83]++;
      return false;
    }
  }, []));
  // Send system notification
  const sendSystemNotification =
  /* istanbul ignore next */
  (cov_1t3vpkb0g().s[84]++, (0, react_1.useCallback)(async (message, targetUsers) => {
    /* istanbul ignore next */
    cov_1t3vpkb0g().f[25]++;
    cov_1t3vpkb0g().s[85]++;
    try {
      /* istanbul ignore next */
      cov_1t3vpkb0g().s[86]++;
      // Mock API call
      await new Promise(resolve => {
        /* istanbul ignore next */
        cov_1t3vpkb0g().f[26]++;
        cov_1t3vpkb0g().s[87]++;
        return setTimeout(resolve, 800);
      });
      /* istanbul ignore next */
      cov_1t3vpkb0g().s[88]++;
      return true;
    } catch (error) {
      /* istanbul ignore next */
      cov_1t3vpkb0g().s[89]++;
      // Erreur silencieuse
      console.error('Failed to send notification:', error);
      /* istanbul ignore next */
      cov_1t3vpkb0g().s[90]++;
      return false;
    }
  }, []));
  // Export user data
  const exportUserData =
  /* istanbul ignore next */
  (cov_1t3vpkb0g().s[91]++, (0, react_1.useCallback)(async format => {
    /* istanbul ignore next */
    cov_1t3vpkb0g().f[27]++;
    cov_1t3vpkb0g().s[92]++;
    try {
      /* istanbul ignore next */
      cov_1t3vpkb0g().s[93]++;
      // Mock export
      await new Promise(resolve => {
        /* istanbul ignore next */
        cov_1t3vpkb0g().f[28]++;
        cov_1t3vpkb0g().s[94]++;
        return setTimeout(resolve, 1500);
      });
      const data =
      /* istanbul ignore next */
      (cov_1t3vpkb0g().s[95]++, users.users);
      const filename =
      /* istanbul ignore next */
      (cov_1t3vpkb0g().s[96]++, `users_export_${new Date().toISOString().split('T')[0]}.${format}`);
      /* istanbul ignore next */
      cov_1t3vpkb0g().s[97]++;
      if (format === 'csv') {
        /* istanbul ignore next */
        cov_1t3vpkb0g().b[12][0]++;
        const csvContent =
        /* istanbul ignore next */
        (cov_1t3vpkb0g().s[98]++, ['ID,Email,Name,Created At,Last Active,Status,Role', ...data.map(user => {
          /* istanbul ignore next */
          cov_1t3vpkb0g().f[29]++;
          cov_1t3vpkb0g().s[99]++;
          return `${user.id},${user.email},${user.name},${user.createdAt},${user.lastActive},${user.status},${user.role}`;
        })].join('\n'));
        const blob =
        /* istanbul ignore next */
        (cov_1t3vpkb0g().s[100]++, new Blob([csvContent], {
          type: 'text/csv'
        }));
        const url =
        /* istanbul ignore next */
        (cov_1t3vpkb0g().s[101]++, URL.createObjectURL(blob));
        const a =
        /* istanbul ignore next */
        (cov_1t3vpkb0g().s[102]++, document.createElement('a'));
        /* istanbul ignore next */
        cov_1t3vpkb0g().s[103]++;
        a.href = url;
        /* istanbul ignore next */
        cov_1t3vpkb0g().s[104]++;
        a.download = filename;
        /* istanbul ignore next */
        cov_1t3vpkb0g().s[105]++;
        a.click();
        /* istanbul ignore next */
        cov_1t3vpkb0g().s[106]++;
        URL.revokeObjectURL(url);
      } else {
        /* istanbul ignore next */
        cov_1t3vpkb0g().b[12][1]++;
        const jsonContent =
        /* istanbul ignore next */
        (cov_1t3vpkb0g().s[107]++, JSON.stringify(data, null, 2));
        const blob =
        /* istanbul ignore next */
        (cov_1t3vpkb0g().s[108]++, new Blob([jsonContent], {
          type: 'application/json'
        }));
        const url =
        /* istanbul ignore next */
        (cov_1t3vpkb0g().s[109]++, URL.createObjectURL(blob));
        const a =
        /* istanbul ignore next */
        (cov_1t3vpkb0g().s[110]++, document.createElement('a'));
        /* istanbul ignore next */
        cov_1t3vpkb0g().s[111]++;
        a.href = url;
        /* istanbul ignore next */
        cov_1t3vpkb0g().s[112]++;
        a.download = filename;
        /* istanbul ignore next */
        cov_1t3vpkb0g().s[113]++;
        a.click();
        /* istanbul ignore next */
        cov_1t3vpkb0g().s[114]++;
        URL.revokeObjectURL(url);
      }
      /* istanbul ignore next */
      cov_1t3vpkb0g().s[115]++;
      return true;
    } catch (error) {
      /* istanbul ignore next */
      cov_1t3vpkb0g().s[116]++;
      // Erreur silencieuse
      console.error('Failed to export data:', error);
      /* istanbul ignore next */
      cov_1t3vpkb0g().s[117]++;
      return false;
    }
  }, [users.users]));
  // Generate report
  const generateReport =
  /* istanbul ignore next */
  (cov_1t3vpkb0g().s[118]++, (0, react_1.useCallback)(async type => {
    /* istanbul ignore next */
    cov_1t3vpkb0g().f[30]++;
    cov_1t3vpkb0g().s[119]++;
    try {
      /* istanbul ignore next */
      cov_1t3vpkb0g().s[120]++;
      // Mock report generation
      await new Promise(resolve => {
        /* istanbul ignore next */
        cov_1t3vpkb0g().f[31]++;
        cov_1t3vpkb0g().s[121]++;
        return setTimeout(resolve, 2000);
      });
      /* istanbul ignore next */
      cov_1t3vpkb0g().s[122]++;
      return true;
    } catch (error) {
      /* istanbul ignore next */
      cov_1t3vpkb0g().s[123]++;
      // Erreur silencieuse
      console.error('Failed to generate report:', error);
      /* istanbul ignore next */
      cov_1t3vpkb0g().s[124]++;
      return false;
    }
  }, []));
  /* istanbul ignore next */
  cov_1t3vpkb0g().s[125]++;
  return {
    // Stats
    stats,
    statsLoading,
    statsError,
    // Users
    users,
    usersLoading,
    usersError,
    // Actions
    loadStats,
    loadUsers,
    updateUserStatus,
    updateUserRole,
    deleteUser,
    bulkUpdateUsers,
    sendSystemNotification,
    exportUserData,
    generateReport
  };
};
/* istanbul ignore next */
cov_1t3vpkb0g().s[126]++;
exports.useAdmin = useAdmin;
/* istanbul ignore next */
cov_1t3vpkb0g().s[127]++;
exports.default = exports.useAdmin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,