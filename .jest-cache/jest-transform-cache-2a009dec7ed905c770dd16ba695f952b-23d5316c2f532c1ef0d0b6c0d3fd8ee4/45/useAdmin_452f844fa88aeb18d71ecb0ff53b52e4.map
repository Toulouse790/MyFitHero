{"version":3,"names":["cov_1t3vpkb0g","actualCoverage","s","react_1","require","useAdmin","f","stats","setStats","useState","statsLoading","setStatsLoading","statsError","setStatsError","users","setUsers","totalUsers","filters","usersLoading","setUsersLoading","usersError","setUsersError","loadStats","useCallback","mockStats","activeUsers","totalWorkouts","totalSessions","averageSessionDuration","popularExercises","name","count","userGrowth","date","Promise","resolve","setTimeout","error","Error","b","message","loadUsers","mockUsers","Array","from","length","_","i","id","email","createdAt","Date","now","Math","random","toISOString","lastActive","status","floor","role","filteredUsers","filter","user","search","searchLower","toLowerCase","includes","updateUserStatus","userId","prev","map","index","console","updateUserRole","deleteUser","bulkUpdateUsers","userIds","updates","sendSystemNotification","targetUsers","exportUserData","format","data","filename","split","csvContent","join","blob","Blob","type","url","URL","createObjectURL","a","document","createElement","href","download","click","revokeObjectURL","jsonContent","JSON","stringify","generateReport","exports","default"],"sources":["/workspaces/MyFitHero/src/features/admin/hooks/useAdmin.ts"],"sourcesContent":["import { Users } from 'lucide-react';\nimport React, { useState, useCallback } from 'react';\n\nexport interface AdminStats {\n  totalUsers: number;\n  activeUsers: number;\n  totalWorkouts: number;\n  totalSessions: number;\n  averageSessionDuration: number;\n  popularExercises: Array<{ name: string; count: number }>;\n  userGrowth: Array<{ date: string; count: number }>;\n}\n\nexport interface UserManagement {\n  users: Array<{\n    id: string;\n    email: string;\n    name: string;\n    createdAt: string;\n    lastActive: string;\n    status: 'active' | 'inactive' | 'suspended';\n    role: 'user' | 'admin' | 'moderator';\n  }>;\n  totalUsers: number;\n  filters: {\n    status?: string;\n    role?: string;\n    search?: string;\n  };\n}\n\nexport interface UseAdminReturn {\n  // Stats\n  stats: AdminStats | undefined;\n  statsLoading: boolean;\n  statsError: string | undefined;\n\n  // User Management\n  users: UserManagement;\n  usersLoading: boolean;\n  usersError: string | undefined;\n\n  // Actions\n  loadStats: () => Promise<void>;\n  loadUsers: (filters?: UserManagement['filters']) => Promise<void>;\n  updateUserStatus: (\n    userId: string,\n    status: 'active' | 'inactive' | 'suspended'\n  ) => Promise<boolean>;\n  updateUserRole: (userId: string, role: 'user' | 'admin' | 'moderator') => Promise<boolean>;\n  deleteUser: (userId: string) => Promise<boolean>;\n\n  // Bulk actions\n  bulkUpdateUsers: (\n    userIds: string[],\n    updates: { status?: string; role?: string }\n  ) => Promise<boolean>;\n\n  // System actions\n  sendSystemNotification: (message: string, targetUsers: string[]) => Promise<boolean>;\n  exportUserData: (format: 'csv' | 'json') => Promise<boolean>;\n  generateReport: (type: 'users' | 'activities' | 'performance') => Promise<boolean>;\n}\n\nexport const useAdmin = (): UseAdminReturn => {\n  // Stats state\n  const [stats, setStats] = useState<AdminStats | null>(null);\n  const [statsLoading, setStatsLoading] = useState(false);\n  const [statsError, setStatsError] = useState<string | null>(null);\n\n  // Users state\n  const [users, setUsers] = useState<UserManagement>({\n    users: [],\n    totalUsers: 0,\n    filters: {},\n  });\n  const [usersLoading, setUsersLoading] = useState(false);\n  const [usersError, setUsersError] = useState<string | null>(null);\n\n  // Load admin stats\n  const loadStats = useCallback(async (): Promise<void> => {\n    try {\n      setStatsLoading(true);\n      setStatsError(null);\n\n      // Mock data - replace with actual API call\n      const mockStats: AdminStats = {\n        totalUsers: 1250,\n        activeUsers: 342,\n        totalWorkouts: 8750,\n        totalSessions: 3420,\n        averageSessionDuration: 45,\n        popularExercises: [\n          { name: 'Push-ups', count: 450 },\n          { name: 'Squats', count: 380 },\n          { name: 'Pull-ups', count: 320 },\n          { name: 'Deadlifts', count: 290 },\n          { name: 'Bench Press', count: 260 },\n        ],\n        userGrowth: [\n          { date: '2025-08-01', count: 1100 },\n          { date: '2025-08-15', count: 1150 },\n          { date: '2025-09-01', count: 1250 },\n        ],\n      };\n\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 1000));\n\n      setStats(mockStats);\n    } catch (error: any) {\n      // Erreur silencieuse\n      setStatsError(error instanceof Error ? error.message : 'Failed to load stats');\n    } finally {\n      setStatsLoading(false);\n    }\n  }, []);\n\n  // Load users\n  const loadUsers = useCallback(async (filters: UserManagement['filters'] = {}): Promise<void> => {\n    try {\n      setUsersLoading(true);\n      setUsersError(null);\n\n      // Mock data - replace with actual API call\n      const mockUsers = Array.from({ length: 50 }, (_, i) => ({\n        id: `user-${i + 1}`,\n        email: `user${i + 1}@example.com`,\n        name: `User ${i + 1}`,\n        createdAt: new Date(Date.now() - Math.random() * 365 * 24 * 60 * 60 * 1000).toISOString(),\n        lastActive: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000).toISOString(),\n        status: ['active', 'inactive', 'suspended'][Math.floor(Math.random() * 3)] as\n          | 'active'\n          | 'inactive'\n          | 'suspended',\n        role: ['user', 'admin', 'moderator'][Math.floor(Math.random() * 3)] as\n          | 'user'\n          | 'admin'\n          | 'moderator',\n      }));\n\n      // Apply filters\n      let filteredUsers = mockUsers;\n      if (filters.status) {\n        filteredUsers = filteredUsers.filter(user => user.status === filters.status);\n      }\n      if (filters.role) {\n        filteredUsers = filteredUsers.filter(user => user.role === filters.role);\n      }\n      if (filters.search) {\n        const searchLower = filters.search.toLowerCase();\n        filteredUsers = filteredUsers.filter(\n          user =>\n            user.name.toLowerCase().includes(searchLower) ||\n            user.email.toLowerCase().includes(searchLower)\n        );\n      }\n\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 800));\n\n      setUsers({\n        users: filteredUsers,\n        totalUsers: filteredUsers.length,\n        filters,\n      });\n    } catch (error: any) {\n      // Erreur silencieuse\n      setUsersError(error instanceof Error ? error.message : 'Failed to load users');\n    } finally {\n      setUsersLoading(false);\n    }\n  }, []);\n\n  // Update user status\n  const updateUserStatus = useCallback(\n    async (userId: string, status: 'active' | 'inactive' | 'suspended'): Promise<boolean> => {\n      try {\n        // Mock API call\n        await new Promise(resolve => setTimeout(resolve, 500));\n\n        setUsers(prev => ({\n          ...prev,\n          users: prev.users.map((user, index) => (user.id === userId ? { ...user, status } : user)),\n        }));\n\n        return true;\n      } catch (error: any) {\n      // Erreur silencieuse\n        console.error('Failed to update user status:', error);\n        return false;\n      }\n    },\n    []\n  );\n\n  // Update user role\n  const updateUserRole = useCallback(\n    async (userId: string, role: 'user' | 'admin' | 'moderator'): Promise<boolean> => {\n      try {\n        // Mock API call\n        await new Promise(resolve => setTimeout(resolve, 500));\n\n        setUsers(prev => ({\n          ...prev,\n          users: prev.users.map((user, index) => (user.id === userId ? { ...user, role } : user)),\n        }));\n\n        return true;\n      } catch (error: any) {\n      // Erreur silencieuse\n        console.error('Failed to update user role:', error);\n        return false;\n      }\n    },\n    []\n  );\n\n  // Delete user\n  const deleteUser = useCallback(async (userId: string): Promise<boolean> => {\n    try {\n      // Mock API call\n      await new Promise(resolve => setTimeout(resolve, 500));\n\n      setUsers(prev => ({\n        ...prev,\n        users: prev.users.filter(user => user.id !== userId),\n        totalUsers: prev.totalUsers - 1,\n      }));\n\n      return true;\n    } catch (error: any) {\n      // Erreur silencieuse\n      console.error('Failed to delete user:', error);\n      return false;\n    }\n  }, []);\n\n  // Bulk update users\n  const bulkUpdateUsers = useCallback(\n    async (userIds: string[], updates: { status?: string; role?: string }): Promise<boolean> => {\n      try {\n        // Mock API call\n        await new Promise(resolve => setTimeout(resolve, 1000));\n\n        setUsers(prev => ({\n          ...prev,\n          users: prev.users.map((user, index) => {\n            if (userIds.includes(user.id)) {\n              return {\n                ...user,\n                ...(updates.status && {\n                  status: updates.status as 'active' | 'inactive' | 'suspended',\n                }),\n                ...(updates.role && { role: updates.role as 'user' | 'admin' | 'moderator' }),\n              };\n            }\n            return user;\n          }),\n        }));\n\n        return true;\n      } catch (error: any) {\n      // Erreur silencieuse\n        console.error('Failed to bulk update users:', error);\n        return false;\n      }\n    },\n    []\n  );\n\n  // Send system notification\n  const sendSystemNotification = useCallback(\n    async (message: string, targetUsers: string[]): Promise<boolean> => {\n      try {\n        // Mock API call\n        await new Promise(resolve => setTimeout(resolve, 800));\n        return true;\n      } catch (error: any) {\n      // Erreur silencieuse\n        console.error('Failed to send notification:', error);\n        return false;\n      }\n    },\n    []\n  );\n\n  // Export user data\n  const exportUserData = useCallback(\n    async (format: 'csv' | 'json'): Promise<boolean> => {\n      try {\n        // Mock export\n        await new Promise(resolve => setTimeout(resolve, 1500));\n\n        const data = users.users;\n        const filename = `users_export_${new Date().toISOString().split('T')[0]}.${format}`;\n\n        if (format === 'csv') {\n          const csvContent = [\n            'ID,Email,Name,Created At,Last Active,Status,Role',\n            ...data.map(\n              user =>\n                `${user.id},${user.email},${user.name},${user.createdAt},${user.lastActive},${user.status},${user.role}`\n            ),\n          ].join('\\n');\n\n          const blob = new Blob([csvContent], { type: 'text/csv' });\n          const url = URL.createObjectURL(blob);\n          const a = document.createElement('a');\n          a.href = url;\n          a.download = filename;\n          a.click();\n          URL.revokeObjectURL(url);\n        } else {\n          const jsonContent = JSON.stringify(data, null, 2);\n          const blob = new Blob([jsonContent], { type: 'application/json' });\n          const url = URL.createObjectURL(blob);\n          const a = document.createElement('a');\n          a.href = url;\n          a.download = filename;\n          a.click();\n          URL.revokeObjectURL(url);\n        }\n\n        return true;\n      } catch (error: any) {\n      // Erreur silencieuse\n        console.error('Failed to export data:', error);\n        return false;\n      }\n    },\n    [users.users]\n  );\n\n  // Generate report\n  const generateReport = useCallback(\n    async (type: 'users' | 'activities' | 'performance'): Promise<boolean> => {\n      try {\n        // Mock report generation\n        await new Promise(resolve => setTimeout(resolve, 2000));\n        return true;\n      } catch (error: any) {\n      // Erreur silencieuse\n        console.error('Failed to generate report:', error);\n        return false;\n      }\n    },\n    []\n  );\n\n  return {\n    // Stats\n    stats,\n    statsLoading,\n    statsError,\n\n    // Users\n    users,\n    usersLoading,\n    usersError,\n\n    // Actions\n    loadStats,\n    loadUsers,\n    updateUserStatus,\n    updateUserRole,\n    deleteUser,\n    bulkUpdateUsers,\n    sendSystemNotification,\n    exportUserData,\n    generateReport,\n  };\n};\n\nexport default useAdmin;\n"],"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","ignoreList":[]}