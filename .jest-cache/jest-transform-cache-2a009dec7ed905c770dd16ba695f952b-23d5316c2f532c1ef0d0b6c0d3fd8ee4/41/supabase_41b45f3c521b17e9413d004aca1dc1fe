1d8c4d9e294481e5008a9817dc4c5bfe
"use strict";

/* istanbul ignore next */
function cov_1ogx53w4fz() {
  var path = "/workspaces/MyFitHero/src/lib/supabase.ts";
  var hash = "2b82537287c02a47d864f31ccf2e32a5d1adf5d1";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/MyFitHero/src/lib/supabase.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 164
        }
      },
      "2": {
        start: {
          line: 4,
          column: 22
        },
        end: {
          line: 4,
          column: 54
        }
      },
      "3": {
        start: {
          line: 6,
          column: 20
        },
        end: {
          line: 6,
          column: 53
        }
      },
      "4": {
        start: {
          line: 7,
          column: 24
        },
        end: {
          line: 7,
          column: 62
        }
      },
      "5": {
        start: {
          line: 9,
          column: 0
        },
        end: {
          line: 11,
          column: 1
        }
      },
      "6": {
        start: {
          line: 10,
          column: 4
        },
        end: {
          line: 10,
          column: 100
        }
      },
      "7": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 14,
          column: 1
        }
      },
      "8": {
        start: {
          line: 13,
          column: 4
        },
        end: {
          line: 13,
          column: 105
        }
      },
      "9": {
        start: {
          line: 16,
          column: 0
        },
        end: {
          line: 33,
          column: 3
        }
      },
      "10": {
        start: {
          line: 35,
          column: 31
        },
        end: {
          line: 47,
          column: 1
        }
      },
      "11": {
        start: {
          line: 36,
          column: 19
        },
        end: {
          line: 40,
          column: 5
        }
      },
      "12": {
        start: {
          line: 41,
          column: 4
        },
        end: {
          line: 45,
          column: 7
        }
      },
      "13": {
        start: {
          line: 46,
          column: 4
        },
        end: {
          line: 46,
          column: 18
        }
      },
      "14": {
        start: {
          line: 48,
          column: 0
        },
        end: {
          line: 48,
          column: 56
        }
      },
      "15": {
        start: {
          line: 50,
          column: 0
        },
        end: {
          line: 160,
          column: 2
        }
      },
      "16": {
        start: {
          line: 53,
          column: 42
        },
        end: {
          line: 53,
          column: 79
        }
      },
      "17": {
        start: {
          line: 54,
          column: 8
        },
        end: {
          line: 57,
          column: 9
        }
      },
      "18": {
        start: {
          line: 55,
          column: 12
        },
        end: {
          line: 55,
          column: 64
        }
      },
      "19": {
        start: {
          line: 56,
          column: 12
        },
        end: {
          line: 56,
          column: 24
        }
      },
      "20": {
        start: {
          line: 58,
          column: 8
        },
        end: {
          line: 58,
          column: 20
        }
      },
      "21": {
        start: {
          line: 62,
          column: 32
        },
        end: {
          line: 66,
          column: 21
        }
      },
      "22": {
        start: {
          line: 67,
          column: 8
        },
        end: {
          line: 70,
          column: 9
        }
      },
      "23": {
        start: {
          line: 68,
          column: 12
        },
        end: {
          line: 68,
          column: 64
        }
      },
      "24": {
        start: {
          line: 69,
          column: 12
        },
        end: {
          line: 69,
          column: 24
        }
      },
      "25": {
        start: {
          line: 71,
          column: 8
        },
        end: {
          line: 71,
          column: 20
        }
      },
      "26": {
        start: {
          line: 75,
          column: 32
        },
        end: {
          line: 80,
          column: 21
        }
      },
      "27": {
        start: {
          line: 81,
          column: 8
        },
        end: {
          line: 84,
          column: 9
        }
      },
      "28": {
        start: {
          line: 82,
          column: 12
        },
        end: {
          line: 82,
          column: 65
        }
      },
      "29": {
        start: {
          line: 83,
          column: 12
        },
        end: {
          line: 83,
          column: 24
        }
      },
      "30": {
        start: {
          line: 85,
          column: 8
        },
        end: {
          line: 85,
          column: 20
        }
      },
      "31": {
        start: {
          line: 89,
          column: 20
        },
        end: {
          line: 92,
          column: 34
        }
      },
      "32": {
        start: {
          line: 93,
          column: 8
        },
        end: {
          line: 95,
          column: 9
        }
      },
      "33": {
        start: {
          line: 94,
          column: 12
        },
        end: {
          line: 94,
          column: 48
        }
      },
      "34": {
        start: {
          line: 96,
          column: 8
        },
        end: {
          line: 98,
          column: 9
        }
      },
      "35": {
        start: {
          line: 97,
          column: 12
        },
        end: {
          line: 97,
          column: 46
        }
      },
      "36": {
        start: {
          line: 99,
          column: 8
        },
        end: {
          line: 101,
          column: 9
        }
      },
      "37": {
        start: {
          line: 100,
          column: 12
        },
        end: {
          line: 100,
          column: 39
        }
      },
      "38": {
        start: {
          line: 102,
          column: 8
        },
        end: {
          line: 102,
          column: 58
        }
      },
      "39": {
        start: {
          line: 103,
          column: 32
        },
        end: {
          line: 103,
          column: 43
        }
      },
      "40": {
        start: {
          line: 104,
          column: 8
        },
        end: {
          line: 107,
          column: 9
        }
      },
      "41": {
        start: {
          line: 105,
          column: 12
        },
        end: {
          line: 105,
          column: 71
        }
      },
      "42": {
        start: {
          line: 106,
          column: 12
        },
        end: {
          line: 106,
          column: 24
        }
      },
      "43": {
        start: {
          line: 108,
          column: 8
        },
        end: {
          line: 108,
          column: 20
        }
      },
      "44": {
        start: {
          line: 112,
          column: 40
        },
        end: {
          line: 116,
          column: 21
        }
      },
      "45": {
        start: {
          line: 117,
          column: 8
        },
        end: {
          line: 120,
          column: 9
        }
      },
      "46": {
        start: {
          line: 118,
          column: 12
        },
        end: {
          line: 118,
          column: 70
        }
      },
      "47": {
        start: {
          line: 119,
          column: 12
        },
        end: {
          line: 119,
          column: 24
        }
      },
      "48": {
        start: {
          line: 121,
          column: 8
        },
        end: {
          line: 121,
          column: 22
        }
      },
      "49": {
        start: {
          line: 125,
          column: 32
        },
        end: {
          line: 130,
          column: 21
        }
      },
      "50": {
        start: {
          line: 131,
          column: 8
        },
        end: {
          line: 134,
          column: 9
        }
      },
      "51": {
        start: {
          line: 132,
          column: 12
        },
        end: {
          line: 132,
          column: 69
        }
      },
      "52": {
        start: {
          line: 133,
          column: 12
        },
        end: {
          line: 133,
          column: 24
        }
      },
      "53": {
        start: {
          line: 135,
          column: 8
        },
        end: {
          line: 135,
          column: 20
        }
      },
      "54": {
        start: {
          line: 139,
          column: 26
        },
        end: {
          line: 142,
          column: 25
        }
      },
      "55": {
        start: {
          line: 143,
          column: 8
        },
        end: {
          line: 146,
          column: 9
        }
      },
      "56": {
        start: {
          line: 144,
          column: 12
        },
        end: {
          line: 144,
          column: 71
        }
      },
      "57": {
        start: {
          line: 145,
          column: 12
        },
        end: {
          line: 145,
          column: 24
        }
      },
      "58": {
        start: {
          line: 150,
          column: 8
        },
        end: {
          line: 158,
          column: 25
        }
      },
      "59": {
        start: {
          line: 162,
          column: 0
        },
        end: {
          line: 203,
          column: 2
        }
      },
      "60": {
        start: {
          line: 164,
          column: 32
        },
        end: {
          line: 170,
          column: 10
        }
      },
      "61": {
        start: {
          line: 171,
          column: 8
        },
        end: {
          line: 174,
          column: 9
        }
      },
      "62": {
        start: {
          line: 172,
          column: 12
        },
        end: {
          line: 172,
          column: 54
        }
      },
      "63": {
        start: {
          line: 173,
          column: 12
        },
        end: {
          line: 173,
          column: 24
        }
      },
      "64": {
        start: {
          line: 175,
          column: 8
        },
        end: {
          line: 175,
          column: 20
        }
      },
      "65": {
        start: {
          line: 178,
          column: 32
        },
        end: {
          line: 181,
          column: 10
        }
      },
      "66": {
        start: {
          line: 182,
          column: 8
        },
        end: {
          line: 185,
          column: 9
        }
      },
      "67": {
        start: {
          line: 183,
          column: 12
        },
        end: {
          line: 183,
          column: 54
        }
      },
      "68": {
        start: {
          line: 184,
          column: 12
        },
        end: {
          line: 184,
          column: 24
        }
      },
      "69": {
        start: {
          line: 186,
          column: 8
        },
        end: {
          line: 186,
          column: 20
        }
      },
      "70": {
        start: {
          line: 189,
          column: 26
        },
        end: {
          line: 189,
          column: 63
        }
      },
      "71": {
        start: {
          line: 190,
          column: 8
        },
        end: {
          line: 193,
          column: 9
        }
      },
      "72": {
        start: {
          line: 191,
          column: 12
        },
        end: {
          line: 191,
          column: 55
        }
      },
      "73": {
        start: {
          line: 192,
          column: 12
        },
        end: {
          line: 192,
          column: 24
        }
      },
      "74": {
        start: {
          line: 196,
          column: 32
        },
        end: {
          line: 196,
          column: 88
        }
      },
      "75": {
        start: {
          line: 197,
          column: 8
        },
        end: {
          line: 200,
          column: 9
        }
      },
      "76": {
        start: {
          line: 198,
          column: 12
        },
        end: {
          line: 198,
          column: 62
        }
      },
      "77": {
        start: {
          line: 199,
          column: 12
        },
        end: {
          line: 199,
          column: 24
        }
      },
      "78": {
        start: {
          line: 201,
          column: 8
        },
        end: {
          line: 201,
          column: 20
        }
      },
      "79": {
        start: {
          line: 205,
          column: 0
        },
        end: {
          line: 242,
          column: 2
        }
      },
      "80": {
        start: {
          line: 210,
          column: 8
        },
        end: {
          line: 222,
          column: 9
        }
      },
      "81": {
        start: {
          line: 211,
          column: 36
        },
        end: {
          line: 211,
          column: 128
        }
      },
      "82": {
        start: {
          line: 212,
          column: 12
        },
        end: {
          line: 214,
          column: 13
        }
      },
      "83": {
        start: {
          line: 213,
          column: 16
        },
        end: {
          line: 213,
          column: 64
        }
      },
      "84": {
        start: {
          line: 215,
          column: 12
        },
        end: {
          line: 215,
          column: 37
        }
      },
      "85": {
        start: {
          line: 218,
          column: 12
        },
        end: {
          line: 221,
          column: 14
        }
      },
      "86": {
        start: {
          line: 228,
          column: 8
        },
        end: {
          line: 240,
          column: 9
        }
      },
      "87": {
        start: {
          line: 229,
          column: 36
        },
        end: {
          line: 229,
          column: 76
        }
      },
      "88": {
        start: {
          line: 230,
          column: 12
        },
        end: {
          line: 232,
          column: 13
        }
      },
      "89": {
        start: {
          line: 231,
          column: 16
        },
        end: {
          line: 231,
          column: 64
        }
      },
      "90": {
        start: {
          line: 233,
          column: 12
        },
        end: {
          line: 233,
          column: 37
        }
      },
      "91": {
        start: {
          line: 236,
          column: 12
        },
        end: {
          line: 239,
          column: 14
        }
      },
      "92": {
        start: {
          line: 244,
          column: 25
        },
        end: {
          line: 262,
          column: 1
        }
      },
      "93": {
        start: {
          line: 246,
          column: 4
        },
        end: {
          line: 260,
          column: 5
        }
      },
      "94": {
        start: {
          line: 246,
          column: 23
        },
        end: {
          line: 246,
          column: 24
        }
      },
      "95": {
        start: {
          line: 247,
          column: 8
        },
        end: {
          line: 259,
          column: 9
        }
      },
      "96": {
        start: {
          line: 248,
          column: 12
        },
        end: {
          line: 248,
          column: 30
        }
      },
      "97": {
        start: {
          line: 251,
          column: 12
        },
        end: {
          line: 251,
          column: 84
        }
      },
      "98": {
        start: {
          line: 252,
          column: 12
        },
        end: {
          line: 254,
          column: 13
        }
      },
      "99": {
        start: {
          line: 253,
          column: 16
        },
        end: {
          line: 253,
          column: 32
        }
      },
      "100": {
        start: {
          line: 256,
          column: 26
        },
        end: {
          line: 256,
          column: 58
        }
      },
      "101": {
        start: {
          line: 257,
          column: 12
        },
        end: {
          line: 257,
          column: 102
        }
      },
      "102": {
        start: {
          line: 258,
          column: 12
        },
        end: {
          line: 258,
          column: 69
        }
      },
      "103": {
        start: {
          line: 258,
          column: 41
        },
        end: {
          line: 258,
          column: 67
        }
      },
      "104": {
        start: {
          line: 261,
          column: 4
        },
        end: {
          line: 261,
          column: 20
        }
      },
      "105": {
        start: {
          line: 263,
          column: 0
        },
        end: {
          line: 263,
          column: 44
        }
      },
      "106": {
        start: {
          line: 264,
          column: 0
        },
        end: {
          line: 264,
          column: 35
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 35,
            column: 31
          },
          end: {
            line: 35,
            column: 32
          }
        },
        loc: {
          start: {
            line: 35,
            column: 37
          },
          end: {
            line: 47,
            column: 1
          }
        },
        line: 35
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 52,
            column: 20
          },
          end: {
            line: 52,
            column: 21
          }
        },
        loc: {
          start: {
            line: 52,
            column: 32
          },
          end: {
            line: 59,
            column: 5
          }
        },
        line: 52
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 61,
            column: 20
          },
          end: {
            line: 61,
            column: 21
          }
        },
        loc: {
          start: {
            line: 61,
            column: 38
          },
          end: {
            line: 72,
            column: 5
          }
        },
        line: 61
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 74,
            column: 23
          },
          end: {
            line: 74,
            column: 24
          }
        },
        loc: {
          start: {
            line: 74,
            column: 50
          },
          end: {
            line: 86,
            column: 5
          }
        },
        line: 74
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 88,
            column: 15
          },
          end: {
            line: 88,
            column: 16
          }
        },
        loc: {
          start: {
            line: 88,
            column: 65
          },
          end: {
            line: 109,
            column: 5
          }
        },
        line: 88
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 111,
            column: 16
          },
          end: {
            line: 111,
            column: 17
          }
        },
        loc: {
          start: {
            line: 111,
            column: 39
          },
          end: {
            line: 122,
            column: 5
          }
        },
        line: 111
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 124,
            column: 16
          },
          end: {
            line: 124,
            column: 17
          }
        },
        loc: {
          start: {
            line: 124,
            column: 46
          },
          end: {
            line: 136,
            column: 5
          }
        },
        line: 124
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 138,
            column: 16
          },
          end: {
            line: 138,
            column: 17
          }
        },
        loc: {
          start: {
            line: 138,
            column: 37
          },
          end: {
            line: 147,
            column: 5
          }
        },
        line: 138
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 149,
            column: 24
          },
          end: {
            line: 149,
            column: 25
          }
        },
        loc: {
          start: {
            line: 149,
            column: 53
          },
          end: {
            line: 159,
            column: 5
          }
        },
        line: 149
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 163,
            column: 12
          },
          end: {
            line: 163,
            column: 13
          }
        },
        loc: {
          start: {
            line: 163,
            column: 49
          },
          end: {
            line: 176,
            column: 5
          }
        },
        line: 163
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 177,
            column: 12
          },
          end: {
            line: 177,
            column: 13
          }
        },
        loc: {
          start: {
            line: 177,
            column: 39
          },
          end: {
            line: 187,
            column: 5
          }
        },
        line: 177
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 188,
            column: 13
          },
          end: {
            line: 188,
            column: 14
          }
        },
        loc: {
          start: {
            line: 188,
            column: 25
          },
          end: {
            line: 194,
            column: 5
          }
        },
        line: 188
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 195,
            column: 19
          },
          end: {
            line: 195,
            column: 20
          }
        },
        loc: {
          start: {
            line: 195,
            column: 36
          },
          end: {
            line: 202,
            column: 5
          }
        },
        line: 195
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 209,
            column: 20
          },
          end: {
            line: 209,
            column: 21
          }
        },
        loc: {
          start: {
            line: 209,
            column: 32
          },
          end: {
            line: 223,
            column: 5
          }
        },
        line: 209
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 227,
            column: 21
          },
          end: {
            line: 227,
            column: 22
          }
        },
        loc: {
          start: {
            line: 227,
            column: 33
          },
          end: {
            line: 241,
            column: 5
          }
        },
        line: 227
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 244,
            column: 25
          },
          end: {
            line: 244,
            column: 26
          }
        },
        loc: {
          start: {
            line: 244,
            column: 73
          },
          end: {
            line: 262,
            column: 1
          }
        },
        line: 244
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 258,
            column: 30
          },
          end: {
            line: 258,
            column: 31
          }
        },
        loc: {
          start: {
            line: 258,
            column: 41
          },
          end: {
            line: 258,
            column: 67
          }
        },
        line: 258
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 9,
            column: 0
          },
          end: {
            line: 11,
            column: 1
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 9,
            column: 0
          },
          end: {
            line: 11,
            column: 1
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 9
      },
      "1": {
        loc: {
          start: {
            line: 9,
            column: 4
          },
          end: {
            line: 9,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 9,
            column: 4
          },
          end: {
            line: 9,
            column: 16
          }
        }, {
          start: {
            line: 9,
            column: 20
          },
          end: {
            line: 9,
            column: 70
          }
        }],
        line: 9
      },
      "2": {
        loc: {
          start: {
            line: 12,
            column: 0
          },
          end: {
            line: 14,
            column: 1
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 12,
            column: 0
          },
          end: {
            line: 14,
            column: 1
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 12
      },
      "3": {
        loc: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 20
          }
        }, {
          start: {
            line: 12,
            column: 24
          },
          end: {
            line: 12,
            column: 59
          }
        }],
        line: 12
      },
      "4": {
        loc: {
          start: {
            line: 21,
            column: 17
          },
          end: {
            line: 21,
            column: 80
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 21,
            column: 49
          },
          end: {
            line: 21,
            column: 68
          }
        }, {
          start: {
            line: 21,
            column: 71
          },
          end: {
            line: 21,
            column: 80
          }
        }],
        line: 21
      },
      "5": {
        loc: {
          start: {
            line: 39,
            column: 20
          },
          end: {
            line: 39,
            column: 95
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 39,
            column: 20
          },
          end: {
            line: 39,
            column: 55
          }
        }, {
          start: {
            line: 39,
            column: 59
          },
          end: {
            line: 39,
            column: 95
          }
        }],
        line: 39
      },
      "6": {
        loc: {
          start: {
            line: 54,
            column: 8
          },
          end: {
            line: 57,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 54,
            column: 8
          },
          end: {
            line: 57,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 54
      },
      "7": {
        loc: {
          start: {
            line: 67,
            column: 8
          },
          end: {
            line: 70,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 67,
            column: 8
          },
          end: {
            line: 70,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 67
      },
      "8": {
        loc: {
          start: {
            line: 81,
            column: 8
          },
          end: {
            line: 84,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 81,
            column: 8
          },
          end: {
            line: 84,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 81
      },
      "9": {
        loc: {
          start: {
            line: 93,
            column: 8
          },
          end: {
            line: 95,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 93,
            column: 8
          },
          end: {
            line: 95,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 93
      },
      "10": {
        loc: {
          start: {
            line: 96,
            column: 8
          },
          end: {
            line: 98,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 96,
            column: 8
          },
          end: {
            line: 98,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 96
      },
      "11": {
        loc: {
          start: {
            line: 99,
            column: 8
          },
          end: {
            line: 101,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 99,
            column: 8
          },
          end: {
            line: 101,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 99
      },
      "12": {
        loc: {
          start: {
            line: 104,
            column: 8
          },
          end: {
            line: 107,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 104,
            column: 8
          },
          end: {
            line: 107,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 104
      },
      "13": {
        loc: {
          start: {
            line: 117,
            column: 8
          },
          end: {
            line: 120,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 117,
            column: 8
          },
          end: {
            line: 120,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 117
      },
      "14": {
        loc: {
          start: {
            line: 131,
            column: 8
          },
          end: {
            line: 134,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 131,
            column: 8
          },
          end: {
            line: 134,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 131
      },
      "15": {
        loc: {
          start: {
            line: 143,
            column: 8
          },
          end: {
            line: 146,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 143,
            column: 8
          },
          end: {
            line: 146,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 143
      },
      "16": {
        loc: {
          start: {
            line: 171,
            column: 8
          },
          end: {
            line: 174,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 171,
            column: 8
          },
          end: {
            line: 174,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 171
      },
      "17": {
        loc: {
          start: {
            line: 182,
            column: 8
          },
          end: {
            line: 185,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 182,
            column: 8
          },
          end: {
            line: 185,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 182
      },
      "18": {
        loc: {
          start: {
            line: 190,
            column: 8
          },
          end: {
            line: 193,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 190,
            column: 8
          },
          end: {
            line: 193,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 190
      },
      "19": {
        loc: {
          start: {
            line: 197,
            column: 8
          },
          end: {
            line: 200,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 197,
            column: 8
          },
          end: {
            line: 200,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 197
      },
      "20": {
        loc: {
          start: {
            line: 212,
            column: 12
          },
          end: {
            line: 214,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 212,
            column: 12
          },
          end: {
            line: 214,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 212
      },
      "21": {
        loc: {
          start: {
            line: 220,
            column: 23
          },
          end: {
            line: 220,
            column: 90
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 220,
            column: 48
          },
          end: {
            line: 220,
            column: 61
          }
        }, {
          start: {
            line: 220,
            column: 64
          },
          end: {
            line: 220,
            column: 90
          }
        }],
        line: 220
      },
      "22": {
        loc: {
          start: {
            line: 230,
            column: 12
          },
          end: {
            line: 232,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 230,
            column: 12
          },
          end: {
            line: 232,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 230
      },
      "23": {
        loc: {
          start: {
            line: 238,
            column: 23
          },
          end: {
            line: 238,
            column: 84
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 238,
            column: 48
          },
          end: {
            line: 238,
            column: 61
          }
        }, {
          start: {
            line: 238,
            column: 64
          },
          end: {
            line: 238,
            column: 84
          }
        }],
        line: 238
      },
      "24": {
        loc: {
          start: {
            line: 244,
            column: 36
          },
          end: {
            line: 244,
            column: 50
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 244,
            column: 49
          },
          end: {
            line: 244,
            column: 50
          }
        }],
        line: 244
      },
      "25": {
        loc: {
          start: {
            line: 244,
            column: 52
          },
          end: {
            line: 244,
            column: 68
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 244,
            column: 64
          },
          end: {
            line: 244,
            column: 68
          }
        }],
        line: 244
      },
      "26": {
        loc: {
          start: {
            line: 251,
            column: 24
          },
          end: {
            line: 251,
            column: 83
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 251,
            column: 49
          },
          end: {
            line: 251,
            column: 54
          }
        }, {
          start: {
            line: 251,
            column: 57
          },
          end: {
            line: 251,
            column: 83
          }
        }],
        line: 251
      },
      "27": {
        loc: {
          start: {
            line: 252,
            column: 12
          },
          end: {
            line: 254,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 252,
            column: 12
          },
          end: {
            line: 254,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 252
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0],
      "25": [0],
      "26": [0, 0],
      "27": [0, 0]
    },
    inputSourceMap: {
      file: "/workspaces/MyFitHero/src/lib/supabase.ts",
      mappings: "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",
      names: [],
      sources: ["/workspaces/MyFitHero/src/lib/supabase.ts"],
      sourcesContent: ["import { createClient, SupabaseClient } from '@supabase/supabase-js';\n\n// Types are now centralized in /src/lib/types/database.ts\n// Import from there: import { Database, UserProfile, etc. } from '@/lib/types/database'\nimport type { Database } from '@/lib/types/database';\n\n// Environment variables - strict validation required\nconst supabaseUrl = import.meta.env.VITE_SUPABASE_URL;\nconst supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY;\n\n// Validation stricte des variables d'environnement\nif (!supabaseUrl || supabaseUrl === 'https://your-project.supabase.co') {\n  throw new Error('\u274C VITE_SUPABASE_URL est requise et doit \xEAtre configur\xE9e dans le fichier .env');\n}\n\nif (!supabaseAnonKey || supabaseAnonKey === 'your-anon-key') {\n  throw new Error('\u274C VITE_SUPABASE_ANON_KEY est requise et doit \xEAtre configur\xE9e dans le fichier .env');\n}\n\n// Create Supabase client with validated environment variables\nexport const supabase: SupabaseClient = createClient(\n  supabaseUrl, \n  supabaseAnonKey, \n  {\n  auth: {\n    autoRefreshToken: true,\n    persistSession: true,\n    detectSessionInUrl: true,\n    storage: typeof window !== 'undefined' ? window.localStorage : undefined,\n  },\n  realtime: {\n    params: {\n      eventsPerSecond: 2,\n    },\n  },\n  global: {\n    headers: {\n      'x-my-custom-header': 'myfithero-app',\n    },\n  },\n});\n\n// Fonction utilitaire pour v\xE9rifier la configuration Supabase\nexport const validateSupabaseConfig = () => {\n  const config = {\n    url: supabaseUrl,\n    hasAnonKey: !!supabaseAnonKey,\n    isValidUrl: supabaseUrl?.startsWith('https://') && supabaseUrl.includes('.supabase.co'),\n  };\n  \n  console.log('\uD83D\uDCCA Configuration Supabase:', {\n    url: config.url,\n    hasAnonKey: config.hasAnonKey,\n    isValidUrl: config.isValidUrl,\n  });\n  \n  return config;\n};\n\n// Utility functions for common operations\nexport const supabaseHelpers = {\n  // Get current user\n  getCurrentUser: async () => {\n    const { data: { user }, error } = await supabase.auth.getUser();\n    if (error) {\n      console.error('Error getting current user:', error);\n      return null;\n    }\n    return user;\n  },\n\n  // Get user profile\n  getUserProfile: async (userId: string) => {\n    const { data, error }: any = await supabase\n      .from('user_profiles')\n      .select('*')\n      .eq('id', userId)\n      .single();\n    \n    if (error) {\n      console.error('Error getting user profile:', error);\n      return null;\n    }\n    return data;\n  },\n\n  // Update user profile\n  updateUserProfile: async (userId: string, updates: Database['public']['Tables']['user_profiles']['Update']) => {\n    const { data, error }: any = await supabase\n      .from('user_profiles')\n      .update({ ...updates, updated_at: new Date().toISOString() })\n      .eq('id', userId)\n      .select()\n      .single();\n    \n    if (error) {\n      console.error('Error updating user profile:', error);\n      throw error;\n    }\n    return data;\n  },\n\n  // Generic data fetcher\n  fetchData: async <T>(\n    table: string,\n    userId: string,\n    dateFrom?: string,\n    dateTo?: string,\n    limit?: number\n  ): Promise<T[]> => {\n    let query = supabase\n      .from(table)\n      .select('*')\n      .eq('user_id', userId);\n\n    if (dateFrom) {\n      query = query.gte('date', dateFrom);\n    }\n    if (dateTo) {\n      query = query.lte('date', dateTo);\n    }\n    if (limit) {\n      query = query.limit(limit);\n    }\n\n    query = query.order('date', { ascending: false });\n\n    const { data, error }: any = await query;\n    \n    if (error) {\n      console.error(`Error fetching data from ${table}:`, error);\n      throw error;\n    }\n    \n    return data as T[];\n  },\n\n  // Generic data inserter\n  insertData: async <T>(\n    table: string,\n    data: any\n  ): Promise<T> => {\n    const { data: result, error } = await supabase\n      .from(table)\n      .insert(data)\n      .select()\n      .single();\n    \n    if (error) {\n      console.error(`Error inserting data to ${table}:`, error);\n      throw error;\n    }\n    \n    return result as T;\n  },\n\n  // Generic data updater\n  updateData: async <T>(\n    table: string,\n    id: string,\n    updates: any\n  ): Promise<T> => {\n    const { data, error }: any = await supabase\n      .from(table)\n      .update({ ...updates, updated_at: new Date().toISOString() })\n      .eq('id', id)\n      .select()\n      .single();\n    \n    if (error) {\n      console.error(`Error updating data in ${table}:`, error);\n      throw error;\n    }\n    \n    return data as T;\n  },\n\n  // Delete data\n  deleteData: async (table: string, id: string) => {\n    const { error } = await supabase\n      .from(table)\n      .delete()\n      .eq('id', id);\n    \n    if (error) {\n      console.error(`Error deleting data from ${table}:`, error);\n      throw error;\n    }\n  },\n\n  // Subscribe to realtime changes\n  subscribeToChanges: (\n    table: string,\n    userId: string,\n    callback: (payload: any) => void\n  ) => {\n    return supabase\n      .channel(`${table}_changes`)\n      .on(\n        'postgres_changes',\n        {\n          event: '*',\n          schema: 'public',\n          table: table,\n          filter: `user_id=eq.${userId}`,\n        },\n        callback\n      )\n      .subscribe();\n  },\n};\n\n// Auth helpers\nexport const authHelpers = {\n  signUp: async (email: string, password: string, metadata?: any) => {\n    const { data, error }: any = await supabase.auth.signUp({\n      email,\n      password,\n      options: {\n        data: metadata,\n      },\n    });\n    \n    if (error) {\n      console.error('Error signing up:', error);\n      throw error;\n    }\n    \n    return data;\n  },\n\n  signIn: async (email: string, password: string) => {\n    const { data, error }: any = await supabase.auth.signInWithPassword({\n      email,\n      password,\n    });\n    \n    if (error) {\n      console.error('Error signing in:', error);\n      throw error;\n    }\n    \n    return data;\n  },\n\n  signOut: async () => {\n    const { error } = await supabase.auth.signOut();\n    \n    if (error) {\n      console.error('Error signing out:', error);\n      throw error;\n    }\n  },\n\n  resetPassword: async (email: string) => {\n    const { data, error }: any = await supabase.auth.resetPasswordForEmail(email);\n    \n    if (error) {\n      console.error('Error resetting password:', error);\n      throw error;\n    }\n    \n    return data;\n  },\n};\n\n// Utility functions for health checks and error handling\nexport const supabaseHealthCheck = {\n  /**\n   * Test basic connectivity to Supabase\n   */\n  testConnection: async (): Promise<{ success: boolean; error?: string }> => {\n    try {\n      const { data, error }: any = await supabase.from('user_profiles').select('count', { count: 'exact', head: true });\n      \n      if (error) {\n        return { success: false, error: error.message };\n      }\n      \n      return { success: true };\n    } catch (error: any) {\n      return { \n        success: false, \n        error: error instanceof Error ? error.message : 'Unknown connection error' \n      };\n    }\n  },\n\n  /**\n   * Test authentication service specifically\n   */\n  testAuthService: async (): Promise<{ success: boolean; error?: string }> => {\n    try {\n      const { data, error }: any = await supabase.auth.getSession();\n      \n      if (error) {\n        return { success: false, error: error.message };\n      }\n      \n      return { success: true };\n    } catch (error: any) {\n      return { \n        success: false, \n        error: error instanceof Error ? error.message : 'Auth service error' \n      };\n    }\n  }\n};\n\n// Network retry utility with exponential backoff\nexport const retryWithBackoff = async <T>(\n  fn: () => Promise<T>,\n  maxRetries: number = 3,\n  baseDelay: number = 1000\n): Promise<T> => {\n  let lastError: Error;\n  \n  for (let attempt = 0; attempt <= maxRetries; attempt++) {\n    try {\n      return await fn();\n    } catch (error: any) {\n      lastError = error instanceof Error ? error : new Error('Unknown error');\n      \n      if (attempt === maxRetries) {\n        throw lastError;\n      }\n      \n      // Exponential backoff: 1s, 2s, 4s\n      const delay = baseDelay * Math.pow(2, attempt);\n      console.warn(`Attempt ${attempt + 1} failed, retrying in ${delay}ms:`, lastError.message);\n      \n      await new Promise(resolve => setTimeout(resolve, delay));\n    }\n  }\n  \n  throw lastError!;\n};\n\nexport default supabase;"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "2b82537287c02a47d864f31ccf2e32a5d1adf5d1"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1ogx53w4fz = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1ogx53w4fz();
cov_1ogx53w4fz().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1ogx53w4fz().s[1]++;
exports.retryWithBackoff = exports.supabaseHealthCheck = exports.authHelpers = exports.supabaseHelpers = exports.validateSupabaseConfig = exports.supabase = void 0;
const supabase_js_1 =
/* istanbul ignore next */
(cov_1ogx53w4fz().s[2]++, require("@supabase/supabase-js"));
// Environment variables - strict validation required
const supabaseUrl =
/* istanbul ignore next */
(cov_1ogx53w4fz().s[3]++, import.meta.env.VITE_SUPABASE_URL);
const supabaseAnonKey =
/* istanbul ignore next */
(cov_1ogx53w4fz().s[4]++, import.meta.env.VITE_SUPABASE_ANON_KEY);
// Validation stricte des variables d'environnement
/* istanbul ignore next */
cov_1ogx53w4fz().s[5]++;
if (
/* istanbul ignore next */
(cov_1ogx53w4fz().b[1][0]++, !supabaseUrl) ||
/* istanbul ignore next */
(cov_1ogx53w4fz().b[1][1]++, supabaseUrl === 'https://your-project.supabase.co')) {
  /* istanbul ignore next */
  cov_1ogx53w4fz().b[0][0]++;
  cov_1ogx53w4fz().s[6]++;
  throw new Error('❌ VITE_SUPABASE_URL est requise et doit être configurée dans le fichier .env');
} else
/* istanbul ignore next */
{
  cov_1ogx53w4fz().b[0][1]++;
}
cov_1ogx53w4fz().s[7]++;
if (
/* istanbul ignore next */
(cov_1ogx53w4fz().b[3][0]++, !supabaseAnonKey) ||
/* istanbul ignore next */
(cov_1ogx53w4fz().b[3][1]++, supabaseAnonKey === 'your-anon-key')) {
  /* istanbul ignore next */
  cov_1ogx53w4fz().b[2][0]++;
  cov_1ogx53w4fz().s[8]++;
  throw new Error('❌ VITE_SUPABASE_ANON_KEY est requise et doit être configurée dans le fichier .env');
} else
/* istanbul ignore next */
{
  cov_1ogx53w4fz().b[2][1]++;
}
// Create Supabase client with validated environment variables
cov_1ogx53w4fz().s[9]++;
exports.supabase = (0, supabase_js_1.createClient)(supabaseUrl, supabaseAnonKey, {
  auth: {
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: true,
    storage: typeof window !== 'undefined' ?
    /* istanbul ignore next */
    (cov_1ogx53w4fz().b[4][0]++, window.localStorage) :
    /* istanbul ignore next */
    (cov_1ogx53w4fz().b[4][1]++, undefined)
  },
  realtime: {
    params: {
      eventsPerSecond: 2
    }
  },
  global: {
    headers: {
      'x-my-custom-header': 'myfithero-app'
    }
  }
});
// Fonction utilitaire pour vérifier la configuration Supabase
/* istanbul ignore next */
cov_1ogx53w4fz().s[10]++;
const validateSupabaseConfig = () => {
  /* istanbul ignore next */
  cov_1ogx53w4fz().f[0]++;
  const config =
  /* istanbul ignore next */
  (cov_1ogx53w4fz().s[11]++, {
    url: supabaseUrl,
    hasAnonKey: !!supabaseAnonKey,
    isValidUrl:
    /* istanbul ignore next */
    (cov_1ogx53w4fz().b[5][0]++, supabaseUrl?.startsWith('https://')) &&
    /* istanbul ignore next */
    (cov_1ogx53w4fz().b[5][1]++, supabaseUrl.includes('.supabase.co'))
  });
  /* istanbul ignore next */
  cov_1ogx53w4fz().s[12]++;
  console.log('📊 Configuration Supabase:', {
    url: config.url,
    hasAnonKey: config.hasAnonKey,
    isValidUrl: config.isValidUrl
  });
  /* istanbul ignore next */
  cov_1ogx53w4fz().s[13]++;
  return config;
};
/* istanbul ignore next */
cov_1ogx53w4fz().s[14]++;
exports.validateSupabaseConfig = validateSupabaseConfig;
// Utility functions for common operations
/* istanbul ignore next */
cov_1ogx53w4fz().s[15]++;
exports.supabaseHelpers = {
  // Get current user
  getCurrentUser: async () => {
    /* istanbul ignore next */
    cov_1ogx53w4fz().f[1]++;
    const {
      data: {
        user
      },
      error
    } =
    /* istanbul ignore next */
    (cov_1ogx53w4fz().s[16]++, await exports.supabase.auth.getUser());
    /* istanbul ignore next */
    cov_1ogx53w4fz().s[17]++;
    if (error) {
      /* istanbul ignore next */
      cov_1ogx53w4fz().b[6][0]++;
      cov_1ogx53w4fz().s[18]++;
      console.error('Error getting current user:', error);
      /* istanbul ignore next */
      cov_1ogx53w4fz().s[19]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_1ogx53w4fz().b[6][1]++;
    }
    cov_1ogx53w4fz().s[20]++;
    return user;
  },
  // Get user profile
  getUserProfile: async userId => {
    /* istanbul ignore next */
    cov_1ogx53w4fz().f[2]++;
    const {
      data,
      error
    } =
    /* istanbul ignore next */
    (cov_1ogx53w4fz().s[21]++, await exports.supabase.from('user_profiles').select('*').eq('id', userId).single());
    /* istanbul ignore next */
    cov_1ogx53w4fz().s[22]++;
    if (error) {
      /* istanbul ignore next */
      cov_1ogx53w4fz().b[7][0]++;
      cov_1ogx53w4fz().s[23]++;
      console.error('Error getting user profile:', error);
      /* istanbul ignore next */
      cov_1ogx53w4fz().s[24]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_1ogx53w4fz().b[7][1]++;
    }
    cov_1ogx53w4fz().s[25]++;
    return data;
  },
  // Update user profile
  updateUserProfile: async (userId, updates) => {
    /* istanbul ignore next */
    cov_1ogx53w4fz().f[3]++;
    const {
      data,
      error
    } =
    /* istanbul ignore next */
    (cov_1ogx53w4fz().s[26]++, await exports.supabase.from('user_profiles').update({
      ...updates,
      updated_at: new Date().toISOString()
    }).eq('id', userId).select().single());
    /* istanbul ignore next */
    cov_1ogx53w4fz().s[27]++;
    if (error) {
      /* istanbul ignore next */
      cov_1ogx53w4fz().b[8][0]++;
      cov_1ogx53w4fz().s[28]++;
      console.error('Error updating user profile:', error);
      /* istanbul ignore next */
      cov_1ogx53w4fz().s[29]++;
      throw error;
    } else
    /* istanbul ignore next */
    {
      cov_1ogx53w4fz().b[8][1]++;
    }
    cov_1ogx53w4fz().s[30]++;
    return data;
  },
  // Generic data fetcher
  fetchData: async (table, userId, dateFrom, dateTo, limit) => {
    /* istanbul ignore next */
    cov_1ogx53w4fz().f[4]++;
    let query =
    /* istanbul ignore next */
    (cov_1ogx53w4fz().s[31]++, exports.supabase.from(table).select('*').eq('user_id', userId));
    /* istanbul ignore next */
    cov_1ogx53w4fz().s[32]++;
    if (dateFrom) {
      /* istanbul ignore next */
      cov_1ogx53w4fz().b[9][0]++;
      cov_1ogx53w4fz().s[33]++;
      query = query.gte('date', dateFrom);
    } else
    /* istanbul ignore next */
    {
      cov_1ogx53w4fz().b[9][1]++;
    }
    cov_1ogx53w4fz().s[34]++;
    if (dateTo) {
      /* istanbul ignore next */
      cov_1ogx53w4fz().b[10][0]++;
      cov_1ogx53w4fz().s[35]++;
      query = query.lte('date', dateTo);
    } else
    /* istanbul ignore next */
    {
      cov_1ogx53w4fz().b[10][1]++;
    }
    cov_1ogx53w4fz().s[36]++;
    if (limit) {
      /* istanbul ignore next */
      cov_1ogx53w4fz().b[11][0]++;
      cov_1ogx53w4fz().s[37]++;
      query = query.limit(limit);
    } else
    /* istanbul ignore next */
    {
      cov_1ogx53w4fz().b[11][1]++;
    }
    cov_1ogx53w4fz().s[38]++;
    query = query.order('date', {
      ascending: false
    });
    const {
      data,
      error
    } =
    /* istanbul ignore next */
    (cov_1ogx53w4fz().s[39]++, await query);
    /* istanbul ignore next */
    cov_1ogx53w4fz().s[40]++;
    if (error) {
      /* istanbul ignore next */
      cov_1ogx53w4fz().b[12][0]++;
      cov_1ogx53w4fz().s[41]++;
      console.error(`Error fetching data from ${table}:`, error);
      /* istanbul ignore next */
      cov_1ogx53w4fz().s[42]++;
      throw error;
    } else
    /* istanbul ignore next */
    {
      cov_1ogx53w4fz().b[12][1]++;
    }
    cov_1ogx53w4fz().s[43]++;
    return data;
  },
  // Generic data inserter
  insertData: async (table, data) => {
    /* istanbul ignore next */
    cov_1ogx53w4fz().f[5]++;
    const {
      data: result,
      error
    } =
    /* istanbul ignore next */
    (cov_1ogx53w4fz().s[44]++, await exports.supabase.from(table).insert(data).select().single());
    /* istanbul ignore next */
    cov_1ogx53w4fz().s[45]++;
    if (error) {
      /* istanbul ignore next */
      cov_1ogx53w4fz().b[13][0]++;
      cov_1ogx53w4fz().s[46]++;
      console.error(`Error inserting data to ${table}:`, error);
      /* istanbul ignore next */
      cov_1ogx53w4fz().s[47]++;
      throw error;
    } else
    /* istanbul ignore next */
    {
      cov_1ogx53w4fz().b[13][1]++;
    }
    cov_1ogx53w4fz().s[48]++;
    return result;
  },
  // Generic data updater
  updateData: async (table, id, updates) => {
    /* istanbul ignore next */
    cov_1ogx53w4fz().f[6]++;
    const {
      data,
      error
    } =
    /* istanbul ignore next */
    (cov_1ogx53w4fz().s[49]++, await exports.supabase.from(table).update({
      ...updates,
      updated_at: new Date().toISOString()
    }).eq('id', id).select().single());
    /* istanbul ignore next */
    cov_1ogx53w4fz().s[50]++;
    if (error) {
      /* istanbul ignore next */
      cov_1ogx53w4fz().b[14][0]++;
      cov_1ogx53w4fz().s[51]++;
      console.error(`Error updating data in ${table}:`, error);
      /* istanbul ignore next */
      cov_1ogx53w4fz().s[52]++;
      throw error;
    } else
    /* istanbul ignore next */
    {
      cov_1ogx53w4fz().b[14][1]++;
    }
    cov_1ogx53w4fz().s[53]++;
    return data;
  },
  // Delete data
  deleteData: async (table, id) => {
    /* istanbul ignore next */
    cov_1ogx53w4fz().f[7]++;
    const {
      error
    } =
    /* istanbul ignore next */
    (cov_1ogx53w4fz().s[54]++, await exports.supabase.from(table).delete().eq('id', id));
    /* istanbul ignore next */
    cov_1ogx53w4fz().s[55]++;
    if (error) {
      /* istanbul ignore next */
      cov_1ogx53w4fz().b[15][0]++;
      cov_1ogx53w4fz().s[56]++;
      console.error(`Error deleting data from ${table}:`, error);
      /* istanbul ignore next */
      cov_1ogx53w4fz().s[57]++;
      throw error;
    } else
    /* istanbul ignore next */
    {
      cov_1ogx53w4fz().b[15][1]++;
    }
  },
  // Subscribe to realtime changes
  subscribeToChanges: (table, userId, callback) => {
    /* istanbul ignore next */
    cov_1ogx53w4fz().f[8]++;
    cov_1ogx53w4fz().s[58]++;
    return exports.supabase.channel(`${table}_changes`).on('postgres_changes', {
      event: '*',
      schema: 'public',
      table: table,
      filter: `user_id=eq.${userId}`
    }, callback).subscribe();
  }
};
// Auth helpers
/* istanbul ignore next */
cov_1ogx53w4fz().s[59]++;
exports.authHelpers = {
  signUp: async (email, password, metadata) => {
    /* istanbul ignore next */
    cov_1ogx53w4fz().f[9]++;
    const {
      data,
      error
    } =
    /* istanbul ignore next */
    (cov_1ogx53w4fz().s[60]++, await exports.supabase.auth.signUp({
      email,
      password,
      options: {
        data: metadata
      }
    }));
    /* istanbul ignore next */
    cov_1ogx53w4fz().s[61]++;
    if (error) {
      /* istanbul ignore next */
      cov_1ogx53w4fz().b[16][0]++;
      cov_1ogx53w4fz().s[62]++;
      console.error('Error signing up:', error);
      /* istanbul ignore next */
      cov_1ogx53w4fz().s[63]++;
      throw error;
    } else
    /* istanbul ignore next */
    {
      cov_1ogx53w4fz().b[16][1]++;
    }
    cov_1ogx53w4fz().s[64]++;
    return data;
  },
  signIn: async (email, password) => {
    /* istanbul ignore next */
    cov_1ogx53w4fz().f[10]++;
    const {
      data,
      error
    } =
    /* istanbul ignore next */
    (cov_1ogx53w4fz().s[65]++, await exports.supabase.auth.signInWithPassword({
      email,
      password
    }));
    /* istanbul ignore next */
    cov_1ogx53w4fz().s[66]++;
    if (error) {
      /* istanbul ignore next */
      cov_1ogx53w4fz().b[17][0]++;
      cov_1ogx53w4fz().s[67]++;
      console.error('Error signing in:', error);
      /* istanbul ignore next */
      cov_1ogx53w4fz().s[68]++;
      throw error;
    } else
    /* istanbul ignore next */
    {
      cov_1ogx53w4fz().b[17][1]++;
    }
    cov_1ogx53w4fz().s[69]++;
    return data;
  },
  signOut: async () => {
    /* istanbul ignore next */
    cov_1ogx53w4fz().f[11]++;
    const {
      error
    } =
    /* istanbul ignore next */
    (cov_1ogx53w4fz().s[70]++, await exports.supabase.auth.signOut());
    /* istanbul ignore next */
    cov_1ogx53w4fz().s[71]++;
    if (error) {
      /* istanbul ignore next */
      cov_1ogx53w4fz().b[18][0]++;
      cov_1ogx53w4fz().s[72]++;
      console.error('Error signing out:', error);
      /* istanbul ignore next */
      cov_1ogx53w4fz().s[73]++;
      throw error;
    } else
    /* istanbul ignore next */
    {
      cov_1ogx53w4fz().b[18][1]++;
    }
  },
  resetPassword: async email => {
    /* istanbul ignore next */
    cov_1ogx53w4fz().f[12]++;
    const {
      data,
      error
    } =
    /* istanbul ignore next */
    (cov_1ogx53w4fz().s[74]++, await exports.supabase.auth.resetPasswordForEmail(email));
    /* istanbul ignore next */
    cov_1ogx53w4fz().s[75]++;
    if (error) {
      /* istanbul ignore next */
      cov_1ogx53w4fz().b[19][0]++;
      cov_1ogx53w4fz().s[76]++;
      console.error('Error resetting password:', error);
      /* istanbul ignore next */
      cov_1ogx53w4fz().s[77]++;
      throw error;
    } else
    /* istanbul ignore next */
    {
      cov_1ogx53w4fz().b[19][1]++;
    }
    cov_1ogx53w4fz().s[78]++;
    return data;
  }
};
// Utility functions for health checks and error handling
/* istanbul ignore next */
cov_1ogx53w4fz().s[79]++;
exports.supabaseHealthCheck = {
  /**
   * Test basic connectivity to Supabase
   */
  testConnection: async () => {
    /* istanbul ignore next */
    cov_1ogx53w4fz().f[13]++;
    cov_1ogx53w4fz().s[80]++;
    try {
      const {
        data,
        error
      } =
      /* istanbul ignore next */
      (cov_1ogx53w4fz().s[81]++, await exports.supabase.from('user_profiles').select('count', {
        count: 'exact',
        head: true
      }));
      /* istanbul ignore next */
      cov_1ogx53w4fz().s[82]++;
      if (error) {
        /* istanbul ignore next */
        cov_1ogx53w4fz().b[20][0]++;
        cov_1ogx53w4fz().s[83]++;
        return {
          success: false,
          error: error.message
        };
      } else
      /* istanbul ignore next */
      {
        cov_1ogx53w4fz().b[20][1]++;
      }
      cov_1ogx53w4fz().s[84]++;
      return {
        success: true
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1ogx53w4fz().s[85]++;
      return {
        success: false,
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1ogx53w4fz().b[21][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1ogx53w4fz().b[21][1]++, 'Unknown connection error')
      };
    }
  },
  /**
   * Test authentication service specifically
   */
  testAuthService: async () => {
    /* istanbul ignore next */
    cov_1ogx53w4fz().f[14]++;
    cov_1ogx53w4fz().s[86]++;
    try {
      const {
        data,
        error
      } =
      /* istanbul ignore next */
      (cov_1ogx53w4fz().s[87]++, await exports.supabase.auth.getSession());
      /* istanbul ignore next */
      cov_1ogx53w4fz().s[88]++;
      if (error) {
        /* istanbul ignore next */
        cov_1ogx53w4fz().b[22][0]++;
        cov_1ogx53w4fz().s[89]++;
        return {
          success: false,
          error: error.message
        };
      } else
      /* istanbul ignore next */
      {
        cov_1ogx53w4fz().b[22][1]++;
      }
      cov_1ogx53w4fz().s[90]++;
      return {
        success: true
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1ogx53w4fz().s[91]++;
      return {
        success: false,
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1ogx53w4fz().b[23][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1ogx53w4fz().b[23][1]++, 'Auth service error')
      };
    }
  }
};
// Network retry utility with exponential backoff
/* istanbul ignore next */
cov_1ogx53w4fz().s[92]++;
const retryWithBackoff = async (fn, maxRetries =
/* istanbul ignore next */
(cov_1ogx53w4fz().b[24][0]++, 3), baseDelay =
/* istanbul ignore next */
(cov_1ogx53w4fz().b[25][0]++, 1000)) => {
  /* istanbul ignore next */
  cov_1ogx53w4fz().f[15]++;
  let lastError;
  /* istanbul ignore next */
  cov_1ogx53w4fz().s[93]++;
  for (let attempt =
  /* istanbul ignore next */
  (cov_1ogx53w4fz().s[94]++, 0); attempt <= maxRetries; attempt++) {
    /* istanbul ignore next */
    cov_1ogx53w4fz().s[95]++;
    try {
      /* istanbul ignore next */
      cov_1ogx53w4fz().s[96]++;
      return await fn();
    } catch (error) {
      /* istanbul ignore next */
      cov_1ogx53w4fz().s[97]++;
      lastError = error instanceof Error ?
      /* istanbul ignore next */
      (cov_1ogx53w4fz().b[26][0]++, error) :
      /* istanbul ignore next */
      (cov_1ogx53w4fz().b[26][1]++, new Error('Unknown error'));
      /* istanbul ignore next */
      cov_1ogx53w4fz().s[98]++;
      if (attempt === maxRetries) {
        /* istanbul ignore next */
        cov_1ogx53w4fz().b[27][0]++;
        cov_1ogx53w4fz().s[99]++;
        throw lastError;
      } else
      /* istanbul ignore next */
      {
        cov_1ogx53w4fz().b[27][1]++;
      }
      // Exponential backoff: 1s, 2s, 4s
      const delay =
      /* istanbul ignore next */
      (cov_1ogx53w4fz().s[100]++, baseDelay * Math.pow(2, attempt));
      /* istanbul ignore next */
      cov_1ogx53w4fz().s[101]++;
      console.warn(`Attempt ${attempt + 1} failed, retrying in ${delay}ms:`, lastError.message);
      /* istanbul ignore next */
      cov_1ogx53w4fz().s[102]++;
      await new Promise(resolve => {
        /* istanbul ignore next */
        cov_1ogx53w4fz().f[16]++;
        cov_1ogx53w4fz().s[103]++;
        return setTimeout(resolve, delay);
      });
    }
  }
  /* istanbul ignore next */
  cov_1ogx53w4fz().s[104]++;
  throw lastError;
};
/* istanbul ignore next */
cov_1ogx53w4fz().s[105]++;
exports.retryWithBackoff = retryWithBackoff;
/* istanbul ignore next */
cov_1ogx53w4fz().s[106]++;
exports.default = exports.supabase;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,