{"version":3,"names":["cov_1as5fcwj9w","actualCoverage","s","react_1","require","useLandingAnalytics","f","metrics","setMetrics","useState","metricsLoading","setMetricsLoading","metricsError","setMetricsError","ctaStats","setCTAStats","ctaStatsLoading","setCTAStatsLoading","loadMetrics","useCallback","mockMetrics","pageViews","uniqueVisitors","conversionRate","bounceRate","averageSessionTime","signupRate","Promise","resolve","setTimeout","error","Error","b","message","loadCTAStats","mockCTAStats","section","clicks","impressions","console","trackCTAClick","prev","map","stat","index","trackPageView","useEffect","exports"],"sources":["/workspaces/MyFitHero/src/features/landing/hooks/useLandingAnalytics.ts"],"sourcesContent":["// src/features/landing/hooks/useLandingAnalytics.ts\nimport { useState, useCallback, useEffect } from 'react';\n\nexport interface LandingMetrics {\n  pageViews: number;\n  uniqueVisitors: number;\n  conversionRate: number;\n  bounceRate: number;\n  averageSessionTime: number;\n  signupRate: number;\n}\n\nexport interface CTAStats {\n  section: string;\n  clicks: number;\n  impressions: number;\n  conversionRate: number;\n}\n\nexport interface UseLandingAnalyticsReturn {\n  metrics: LandingMetrics | undefined;\n  metricsLoading: boolean;\n  metricsError: string | undefined;\n  ctaStats: CTAStats[];\n  ctaStatsLoading: boolean;\n  loadMetrics: () => Promise<void>;\n  loadCTAStats: () => Promise<void>;\n  trackCTAClick: (section: string) => Promise<void>;\n  trackPageView: () => Promise<void>;\n}\n\nexport const useLandingAnalytics = (): UseLandingAnalyticsReturn => {\n  const [metrics, setMetrics] = useState<LandingMetrics | null>(null);\n  const [metricsLoading, setMetricsLoading] = useState(false);\n  const [metricsError, setMetricsError] = useState<string | null>(null);\n  const [ctaStats, setCTAStats] = useState<CTAStats[]>([]);\n  const [ctaStatsLoading, setCTAStatsLoading] = useState(false);\n\n  const loadMetrics = useCallback(async (): Promise<void> => {\n    try {\n      setMetricsLoading(true);\n      setMetricsError(null);\n\n      // Mock data - replace with actual API call\n      const mockMetrics: LandingMetrics = {\n        pageViews: 15420,\n        uniqueVisitors: 8930,\n        conversionRate: 3.2,\n        bounceRate: 45.8,\n        averageSessionTime: 185,\n        signupRate: 2.1,\n      };\n\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 600));\n\n      setMetrics(mockMetrics);\n    } catch (error: any) {\n      setMetricsError(error instanceof Error ? error.message : 'Failed to load metrics');\n    } finally {\n      setMetricsLoading(false);\n    }\n  }, []);\n\n  const loadCTAStats = useCallback(async (): Promise<void> => {\n    try {\n      setCTAStatsLoading(true);\n\n      // Mock data - replace with actual API call\n      const mockCTAStats: CTAStats[] = [\n        {\n          section: 'hero',\n          clicks: 1250,\n          impressions: 8930,\n          conversionRate: 14.0,\n        },\n        {\n          section: 'features',\n          clicks: 890,\n          impressions: 7650,\n          conversionRate: 11.6,\n        },\n        {\n          section: 'pricing',\n          clicks: 560,\n          impressions: 4320,\n          conversionRate: 13.0,\n        },\n        {\n          section: 'testimonials',\n          clicks: 320,\n          impressions: 3200,\n          conversionRate: 10.0,\n        },\n      ];\n\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 500));\n\n      setCTAStats(mockCTAStats);\n    } catch (error: any) {\n      console.error('Failed to load CTA stats:', error);\n    } finally {\n      setCTAStatsLoading(false);\n    }\n  }, []);\n\n  const trackCTAClick = useCallback(async (section: string): Promise<void> => {\n    try {\n      // Mock tracking - replace with actual analytics\n      await new Promise(resolve => setTimeout(resolve, 100));\n\n      setCTAStats(prev =>\n        prev.map((stat, index) =>\n          stat.section === section\n            ? {\n                ...stat,\n                clicks: stat.clicks + 1,\n                conversionRate: ((stat.clicks + 1) / stat.impressions) * 100,\n              }\n            : stat\n        )\n      );\n    } catch (error: any) {\n      console.error('Failed to track CTA click:', error);\n    }\n  }, []);\n\n  const trackPageView = useCallback(async (): Promise<void> => {\n    try {\n      // Mock tracking - replace with actual analytics\n      await new Promise(resolve => setTimeout(resolve, 50));\n\n      setMetrics(prev =>\n        prev\n          ? {\n              ...prev,\n              pageViews: prev.pageViews + 1,\n            }\n          : null\n      );\n    } catch (error: any) {\n      console.error('Failed to track page view:', error);\n    }\n  }, []);\n\n  // Auto-load analytics on mount\n  useEffect(() => {\n    loadMetrics();\n    loadCTAStats();\n  }, [loadMetrics, loadCTAStats]);\n\n  // Track page view on mount\n  useEffect(() => {\n    trackPageView();\n  }, [trackPageView]);\n\n  return {\n    metrics,\n    metricsLoading,\n    metricsError,\n    ctaStats,\n    ctaStatsLoading,\n    loadMetrics,\n    loadCTAStats,\n    trackCTAClick,\n    trackPageView,\n  };\n};"],"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","ignoreList":[]}