{"version":3,"names":["supabase_1","cov_q1fd2zjv1","s","require","date_fns_1","locale_1","AnalyticsService","getMultiPillarData","userId","period","b","f","days","startDate","subDays","Date","hydrationData","nutritionData","sleepData","workoutData","Promise","all","getHydrationData","getNutritionData","getSleepData","getWorkoutData","labels","Array","from","length","_","i","format","locale","fr","datasets","label","data","color","pillar","error","console","getPillarProgress","pillars","progressData","getPillarAnalytics","push","sort","a","progress_percentage","getPerformanceMetrics","consistency","activities","streaks","calculateConsistencyScore","getTotalActivities","getStreakData","consistency_score","score","improvement_rate","streak_days","current_streak","total_activities","total","weekly_average","best_day","challenges_completed","challenges","level_progress","getComparisonData","currentPeriod","now","currentStart","currentEnd","previousStart","previousEnd","startOfWeek","endOfWeek","startOfMonth","endOfMonth","currentData","previousData","getPeriodAverages","improvement","hydration","nutrition","sleep","workout","current_period","previous_period","getDetailedInsights","progress","metrics","comparison","insights","forEach","type","title","description","value","current_value","target","target_value","priority","icon","action_needed","Object","entries","toFixed","priorityOrder","high","medium","low","supabase","select","eq","gte","toISOString","order","aggregateDataByDay","field","divisor","dailyData","item","day","created_at","result","Math","max","keys","round","mockData","trend","trend_percentage","last_7_days","endDate","exports","analyticsService"],"sources":["/workspaces/MyFitHero/src/lib/services/analyticsService.ts"],"sourcesContent":["import { supabase } from '@/lib/supabase';\nimport { format, subDays, startOfWeek, endOfWeek, startOfMonth, endOfMonth } from 'date-fns';\nimport { fr } from 'date-fns/locale';\n\n// Types pour les analytics\nexport interface AnalyticsData {\n  labels: string[];\n  datasets: Array<{\n    label: string;\n    data: number[];\n    color: string;\n    pillar: string;\n  }>;\n}\n\nexport interface PillarProgress {\n  pillar: string;\n  current_value: number;\n  target_value: number;\n  progress_percentage: number;\n  trend: 'up' | 'down' | 'stable';\n  trend_percentage: number;\n  last_7_days: number[];\n  color: string;\n  icon: string;\n}\n\nexport interface PerformanceMetrics {\n  consistency_score: number;\n  improvement_rate: number;\n  streak_days: number;\n  total_activities: number;\n  weekly_average: number;\n  best_day: string;\n  challenges_completed: number;\n  level_progress: number;\n}\n\nexport interface ComparisonData {\n  current_period: {\n    label: string;\n    hydration: number;\n    nutrition: number;\n    sleep: number;\n    workout: number;\n  };\n  previous_period: {\n    label: string;\n    hydration: number;\n    nutrition: number;\n    sleep: number;\n    workout: number;\n  };\n  improvement: {\n    hydration: number;\n    nutrition: number;\n    sleep: number;\n    workout: number;\n  };\n}\n\nexport interface DetailedInsight {\n  type: 'achievement' | 'improvement' | 'warning' | 'suggestion';\n  pillar: string;\n  title: string;\n  description: string;\n  value?: number;\n  target?: number;\n  action_needed?: boolean;\n  priority: 'low' | 'medium' | 'high';\n  icon: string;\n  color: string;\n}\n\nclass AnalyticsService {\n  // R√©cup√©ration des donn√©es multi-piliers sur une p√©riode\n  async getMultiPillarData(\n    userId: string,\n    period: '7d' | '30d' | '90d' = '30d'\n  ): Promise<AnalyticsData> {\n    const days = period === '7d' ? 7 : period === '30d' ? 30 : 90;\n    const startDate = subDays(new Date(), days);\n\n    try {\n      // R√©cup√©ration parall√®le des donn√©es de tous les piliers\n      const [hydrationData, nutritionData, sleepData, workoutData] = await Promise.all([\n        this.getHydrationData(userId, startDate),\n        this.getNutritionData(userId, startDate),\n        this.getSleepData(userId, startDate),\n        this.getWorkoutData(userId, startDate),\n      ]);\n\n      // G√©n√©ration des labels de dates\n      const labels = Array.from({ length: days }, (_, i) => {\n        return format(subDays(new Date(), days - 1 - i), 'dd/MM', { locale: fr });\n      });\n\n      return {\n        labels,\n        datasets: [\n          {\n            label: 'Hydratation',\n            data: hydrationData,\n            color: '#06b6d4',\n            pillar: 'hydration',\n          },\n          {\n            label: 'Nutrition',\n            data: nutritionData,\n            color: '#10b981',\n            pillar: 'nutrition',\n          },\n          {\n            label: 'Sommeil',\n            data: sleepData,\n            color: '#8b5cf6',\n            pillar: 'sleep',\n          },\n          {\n            label: 'Entra√Ænement',\n            data: workoutData,\n            color: '#ef4444',\n            pillar: 'workout',\n          },\n        ],\n      };\n    } catch (error: any) {\n      // Erreur silencieuse\n      console.error('Error fetching multi-pillar data:', error);\n      throw error;\n    }\n  }\n\n  // Analyse des progr√®s par pilier avec tendances\n  async getPillarProgress(userId: string): Promise<PillarProgress[]> {\n    try {\n      const pillars = ['hydration', 'nutrition', 'sleep', 'workout'];\n      const progressData: PillarProgress[] = [];\n\n      for (const pillar of pillars) {\n        const data = await this.getPillarAnalytics(userId, pillar);\n        progressData.push(data);\n      }\n\n      return progressData.sort((a, b) => b.progress_percentage - a.progress_percentage);\n    } catch (error: any) {\n      // Erreur silencieuse\n      console.error('Error fetching pillar progress:', error);\n      throw error;\n    }\n  }\n\n  // M√©triques de performance globales\n  async getPerformanceMetrics(userId: string): Promise<PerformanceMetrics> {\n    try {\n      const [consistency, activities, streaks] = await Promise.all([\n        this.calculateConsistencyScore(userId),\n        this.getTotalActivities(userId),\n        this.getStreakData(userId),\n      ]);\n\n      return {\n        consistency_score: consistency.score,\n        improvement_rate: consistency.improvement_rate,\n        streak_days: streaks.current_streak,\n        total_activities: activities.total,\n        weekly_average: activities.weekly_average,\n        best_day: streaks.best_day,\n        challenges_completed: activities.challenges,\n        level_progress: consistency.level_progress,\n      };\n    } catch (error: any) {\n      // Erreur silencieuse\n      console.error('Error fetching performance metrics:', error);\n      throw error;\n    }\n  }\n\n  // Comparaison entre p√©riodes\n  async getComparisonData(\n    userId: string,\n    currentPeriod: 'week' | 'month' = 'week'\n  ): Promise<ComparisonData> {\n    try {\n      const now = new Date();\n      let currentStart: Date, currentEnd: Date, previousStart: Date, previousEnd: Date;\n\n      if (currentPeriod === 'week') {\n        currentStart = startOfWeek(now, { locale: fr });\n        currentEnd = endOfWeek(now, { locale: fr });\n        previousStart = startOfWeek(subDays(now, 7), { locale: fr });\n        previousEnd = endOfWeek(subDays(now, 7), { locale: fr });\n      } else {\n        currentStart = startOfMonth(now);\n        currentEnd = endOfMonth(now);\n        previousStart = startOfMonth(subDays(now, 30));\n        previousEnd = endOfMonth(subDays(now, 30));\n      }\n\n      const [currentData, previousData] = await Promise.all([\n        this.getPeriodAverages(userId, currentStart, currentEnd),\n        this.getPeriodAverages(userId, previousStart, previousEnd),\n      ]);\n\n      const improvement = {\n        hydration:\n          ((currentData.hydration - previousData.hydration) / previousData.hydration) * 100,\n        nutrition:\n          ((currentData.nutrition - previousData.nutrition) / previousData.nutrition) * 100,\n        sleep: ((currentData.sleep - previousData.sleep) / previousData.sleep) * 100,\n        workout: ((currentData.workout - previousData.workout) / previousData.workout) * 100,\n      };\n\n      return {\n        current_period: {\n          label: currentPeriod === 'week' ? 'Cette semaine' : 'Ce mois',\n          ...currentData,\n        },\n        previous_period: {\n          label: currentPeriod === 'week' ? 'Semaine derni√®re' : 'Mois dernier',\n          ...previousData,\n        },\n        improvement,\n      };\n    } catch (error: any) {\n      // Erreur silencieuse\n      console.error('Error fetching comparison data:', error);\n      throw error;\n    }\n  }\n\n  // Insights d√©taill√©s avec recommandations\n  async getDetailedInsights(userId: string): Promise<DetailedInsight[]> {\n    try {\n      const [progress, metrics, comparison] = await Promise.all([\n        this.getPillarProgress(userId),\n        this.getPerformanceMetrics(userId),\n        this.getComparisonData(userId),\n      ]);\n\n      const insights: DetailedInsight[] = [];\n\n      // Analyse des progr√®s par pilier\n      progress.forEach(pillar => {\n        if (pillar.progress_percentage >= 90) {\n          insights.push({\n            type: 'achievement',\n            pillar: pillar.pillar,\n            title: `Excellent progr√®s en ${pillar.pillar}`,\n            description: `Vous avez atteint ${pillar.progress_percentage}% de vos objectifs !`,\n            value: pillar.current_value,\n            target: pillar.target_value,\n            priority: 'low',\n            icon: 'üèÜ',\n            color: '#10b981',\n            action_needed: false,\n          });\n        } else if (pillar.progress_percentage < 50) {\n          insights.push({\n            type: 'warning',\n            pillar: pillar.pillar,\n            title: `Attention au ${pillar.pillar}`,\n            description: `Seulement ${pillar.progress_percentage}% d'objectifs atteints cette semaine.`,\n            value: pillar.current_value,\n            target: pillar.target_value,\n            priority: 'high',\n            icon: '‚ö†Ô∏è',\n            color: '#ef4444',\n            action_needed: true,\n          });\n        }\n      });\n\n      // Analyse de la consistance\n      if (metrics.consistency_score > 80) {\n        insights.push({\n          type: 'achievement',\n          pillar: 'general',\n          title: 'Consistance exceptionnelle',\n          description: `Score de consistance de ${metrics.consistency_score}% - continuez !`,\n          priority: 'low',\n          icon: 'üî•',\n          color: '#f59e0b',\n          action_needed: false,\n        });\n      }\n\n      // Analyse des am√©liorations\n      Object.entries(comparison.improvement).forEach(([pillar, improvement]) => {\n        if (improvement > 20) {\n          insights.push({\n            type: 'improvement',\n            pillar,\n            title: `Super am√©lioration en ${pillar}`,\n            description: `+${improvement.toFixed(1)}% par rapport √† la semaine derni√®re`,\n            priority: 'medium',\n            icon: 'üìà',\n            color: '#06b6d4',\n            action_needed: false,\n          });\n        }\n      });\n\n      // Suggestions bas√©es sur les donn√©es\n      if (metrics.streak_days < 3) {\n        insights.push({\n          type: 'suggestion',\n          pillar: 'general',\n          title: 'Construisez votre streak',\n          description:\n            'Maintenez vos habitudes 3 jours de suite pour cr√©er une dynamique positive.',\n          priority: 'medium',\n          icon: 'üéØ',\n          color: '#8b5cf6',\n          action_needed: true,\n        });\n      }\n\n      return insights.sort((a, b) => {\n        const priorityOrder = { high: 3, medium: 2, low: 1 };\n        return priorityOrder[b.priority] - priorityOrder[a.priority];\n      });\n    } catch (error: any) {\n      // Erreur silencieuse\n      console.error('Error generating insights:', error);\n      throw error;\n    }\n  }\n\n  // Helpers priv√©s pour r√©cup√©rer les donn√©es sp√©cifiques\n\n  private async getHydrationData(userId: string, startDate: Date): Promise<number[]> {\n    const { data } = await supabase\n      .from('hydration_logs')\n      .select('amount_ml, created_at')\n      .eq('user_id', userId)\n      .gte('created_at', startDate.toISOString())\n      .order('created_at');\n\n    return this.aggregateDataByDay(data || [], 'amount_ml');\n  }\n\n  private async getNutritionData(userId: string, startDate: Date): Promise<number[]> {\n    const { data } = await supabase\n      .from('nutrition_logs')\n      .select('calories, created_at')\n      .eq('user_id', userId)\n      .gte('created_at', startDate.toISOString())\n      .order('created_at');\n\n    return this.aggregateDataByDay(data || [], 'calories', 100); // Normalisation par 100 calories\n  }\n\n  private async getSleepData(userId: string, startDate: Date): Promise<number[]> {\n    const { data } = await supabase\n      .from('sleep_logs')\n      .select('duration_hours, created_at')\n      .eq('user_id', userId)\n      .gte('created_at', startDate.toISOString())\n      .order('created_at');\n\n    return this.aggregateDataByDay(data || [], 'duration_hours');\n  }\n\n  private async getWorkoutData(userId: string, startDate: Date): Promise<number[]> {\n    const { data } = await supabase\n      .from('workout_logs')\n      .select('duration_minutes, created_at')\n      .eq('user_id', userId)\n      .gte('created_at', startDate.toISOString())\n      .order('created_at');\n\n    return this.aggregateDataByDay(data || [], 'duration_minutes', 10); // Normalisation par 10 minutes\n  }\n\n  private aggregateDataByDay(data: unknown[], field: string, divisor: number = 1): number[] {\n    const dailyData: { [key: string]: number } = {};\n\n    data.forEach((item: any) => {\n      const day = format(new Date((item as any).created_at), 'yyyy-MM-dd');\n      dailyData[day] = (dailyData[day] || 0) + (item as any)[field] / divisor;\n    });\n\n    // Remplir les jours manquants avec 0\n    const result: number[] = [];\n    const days = Math.max(Object.keys(dailyData).length, 7);\n\n    for (let i = days - 1; i >= 0; i--) {\n      const day = format(subDays(new Date(), i), 'yyyy-MM-dd');\n      result.push(Math.round(dailyData[day] || 0));\n    }\n\n    return result;\n  }\n\n  private async getPillarAnalytics(userId: string, pillar: string): Promise<PillarProgress> {\n    // Simulation des donn√©es - √Ä remplacer par de vraies requ√™tes\n    const mockData: { [key: string]: PillarProgress } = {\n      hydration: {\n        pillar: 'Hydratation',\n        current_value: 2.1,\n        target_value: 2.5,\n        progress_percentage: 84,\n        trend: 'up',\n        trend_percentage: 12,\n        last_7_days: [1.8, 2.0, 2.3, 2.1, 2.4, 2.2, 2.1],\n        color: '#06b6d4',\n        icon: 'üíß',\n      },\n      nutrition: {\n        pillar: 'Nutrition',\n        current_value: 1850,\n        target_value: 2000,\n        progress_percentage: 92,\n        trend: 'stable',\n        trend_percentage: 2,\n        last_7_days: [1800, 1900, 1850, 1950, 1880, 1870, 1850],\n        color: '#10b981',\n        icon: 'üçé',\n      },\n      sleep: {\n        pillar: 'Sommeil',\n        current_value: 7.2,\n        target_value: 8.0,\n        progress_percentage: 90,\n        trend: 'up',\n        trend_percentage: 8,\n        last_7_days: [7.0, 7.5, 6.8, 7.2, 7.8, 7.1, 7.2],\n        color: '#8b5cf6',\n        icon: 'üò¥',\n      },\n      workout: {\n        pillar: 'Entra√Ænement',\n        current_value: 45,\n        target_value: 60,\n        progress_percentage: 75,\n        trend: 'down',\n        trend_percentage: -5,\n        last_7_days: [60, 45, 30, 50, 40, 35, 45],\n        color: '#ef4444',\n        icon: 'üí™',\n      },\n    };\n\n    return mockData[pillar] || mockData.hydration;\n  }\n\n  private async calculateConsistencyScore(userId: string): Promise<{\n    score: number;\n    improvement_rate: number;\n    level_progress: number;\n  }> {\n    // Simulation - √Ä remplacer par de vrais calculs\n    return {\n      score: 78,\n      improvement_rate: 15,\n      level_progress: 65,\n    };\n  }\n\n  private async getTotalActivities(userId: string): Promise<{\n    total: number;\n    weekly_average: number;\n    challenges: number;\n  }> {\n    // Simulation - √Ä remplacer par de vraies requ√™tes\n    return {\n      total: 156,\n      weekly_average: 22,\n      challenges: 8,\n    };\n  }\n\n  private async getStreakData(userId: string): Promise<{\n    current_streak: number;\n    best_day: string;\n  }> {\n    // Simulation - √Ä remplacer par de vrais calculs\n    return {\n      current_streak: 12,\n      best_day: 'Mercredi',\n    };\n  }\n\n  private async getPeriodAverages(\n    userId: string,\n    startDate: Date,\n    endDate: Date\n  ): Promise<{\n    hydration: number;\n    nutrition: number;\n    sleep: number;\n    workout: number;\n  }> {\n    // Simulation - √Ä remplacer par de vraies requ√™tes\n    return {\n      hydration: 2.1,\n      nutrition: 1850,\n      sleep: 7.2,\n      workout: 45,\n    };\n  }\n}\n\nexport const analyticsService = new AnalyticsService();\n"],"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","ignoreList":[]}