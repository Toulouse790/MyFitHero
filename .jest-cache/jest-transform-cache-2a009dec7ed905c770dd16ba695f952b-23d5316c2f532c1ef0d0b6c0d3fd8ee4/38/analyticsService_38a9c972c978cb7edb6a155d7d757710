cae569ab585b95d203a25b0a0b9065d6
"use strict";

/* istanbul ignore next */
function cov_q1fd2zjv1() {
  var path = "/workspaces/MyFitHero/src/lib/services/analyticsService.ts";
  var hash = "4b7e49df5f923045aad351f777cee4285e0c85c6";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/MyFitHero/src/lib/services/analyticsService.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 34
        }
      },
      "2": {
        start: {
          line: 4,
          column: 19
        },
        end: {
          line: 4,
          column: 44
        }
      },
      "3": {
        start: {
          line: 5,
          column: 19
        },
        end: {
          line: 5,
          column: 38
        }
      },
      "4": {
        start: {
          line: 6,
          column: 17
        },
        end: {
          line: 6,
          column: 43
        }
      },
      "5": {
        start: {
          line: 10,
          column: 21
        },
        end: {
          line: 10,
          column: 69
        }
      },
      "6": {
        start: {
          line: 11,
          column: 26
        },
        end: {
          line: 11,
          column: 67
        }
      },
      "7": {
        start: {
          line: 12,
          column: 8
        },
        end: {
          line: 58,
          column: 9
        }
      },
      "8": {
        start: {
          line: 14,
          column: 75
        },
        end: {
          line: 19,
          column: 14
        }
      },
      "9": {
        start: {
          line: 21,
          column: 27
        },
        end: {
          line: 23,
          column: 14
        }
      },
      "10": {
        start: {
          line: 22,
          column: 16
        },
        end: {
          line: 22,
          column: 131
        }
      },
      "11": {
        start: {
          line: 24,
          column: 12
        },
        end: {
          line: 52,
          column: 14
        }
      },
      "12": {
        start: {
          line: 56,
          column: 12
        },
        end: {
          line: 56,
          column: 70
        }
      },
      "13": {
        start: {
          line: 57,
          column: 12
        },
        end: {
          line: 57,
          column: 24
        }
      },
      "14": {
        start: {
          line: 62,
          column: 8
        },
        end: {
          line: 75,
          column: 9
        }
      },
      "15": {
        start: {
          line: 63,
          column: 28
        },
        end: {
          line: 63,
          column: 74
        }
      },
      "16": {
        start: {
          line: 64,
          column: 33
        },
        end: {
          line: 64,
          column: 35
        }
      },
      "17": {
        start: {
          line: 65,
          column: 12
        },
        end: {
          line: 68,
          column: 13
        }
      },
      "18": {
        start: {
          line: 66,
          column: 29
        },
        end: {
          line: 66,
          column: 74
        }
      },
      "19": {
        start: {
          line: 67,
          column: 16
        },
        end: {
          line: 67,
          column: 40
        }
      },
      "20": {
        start: {
          line: 69,
          column: 12
        },
        end: {
          line: 69,
          column: 94
        }
      },
      "21": {
        start: {
          line: 69,
          column: 47
        },
        end: {
          line: 69,
          column: 92
        }
      },
      "22": {
        start: {
          line: 73,
          column: 12
        },
        end: {
          line: 73,
          column: 68
        }
      },
      "23": {
        start: {
          line: 74,
          column: 12
        },
        end: {
          line: 74,
          column: 24
        }
      },
      "24": {
        start: {
          line: 79,
          column: 8
        },
        end: {
          line: 100,
          column: 9
        }
      },
      "25": {
        start: {
          line: 80,
          column: 55
        },
        end: {
          line: 84,
          column: 14
        }
      },
      "26": {
        start: {
          line: 85,
          column: 12
        },
        end: {
          line: 94,
          column: 14
        }
      },
      "27": {
        start: {
          line: 98,
          column: 12
        },
        end: {
          line: 98,
          column: 72
        }
      },
      "28": {
        start: {
          line: 99,
          column: 12
        },
        end: {
          line: 99,
          column: 24
        }
      },
      "29": {
        start: {
          line: 104,
          column: 8
        },
        end: {
          line: 145,
          column: 9
        }
      },
      "30": {
        start: {
          line: 105,
          column: 24
        },
        end: {
          line: 105,
          column: 34
        }
      },
      "31": {
        start: {
          line: 107,
          column: 12
        },
        end: {
          line: 118,
          column: 13
        }
      },
      "32": {
        start: {
          line: 108,
          column: 16
        },
        end: {
          line: 108,
          column: 89
        }
      },
      "33": {
        start: {
          line: 109,
          column: 16
        },
        end: {
          line: 109,
          column: 85
        }
      },
      "34": {
        start: {
          line: 110,
          column: 16
        },
        end: {
          line: 110,
          column: 118
        }
      },
      "35": {
        start: {
          line: 111,
          column: 16
        },
        end: {
          line: 111,
          column: 114
        }
      },
      "36": {
        start: {
          line: 114,
          column: 16
        },
        end: {
          line: 114,
          column: 65
        }
      },
      "37": {
        start: {
          line: 115,
          column: 16
        },
        end: {
          line: 115,
          column: 61
        }
      },
      "38": {
        start: {
          line: 116,
          column: 16
        },
        end: {
          line: 116,
          column: 95
        }
      },
      "39": {
        start: {
          line: 117,
          column: 16
        },
        end: {
          line: 117,
          column: 91
        }
      },
      "40": {
        start: {
          line: 119,
          column: 48
        },
        end: {
          line: 122,
          column: 14
        }
      },
      "41": {
        start: {
          line: 123,
          column: 32
        },
        end: {
          line: 128,
          column: 13
        }
      },
      "42": {
        start: {
          line: 129,
          column: 12
        },
        end: {
          line: 139,
          column: 14
        }
      },
      "43": {
        start: {
          line: 143,
          column: 12
        },
        end: {
          line: 143,
          column: 68
        }
      },
      "44": {
        start: {
          line: 144,
          column: 12
        },
        end: {
          line: 144,
          column: 24
        }
      },
      "45": {
        start: {
          line: 149,
          column: 8
        },
        end: {
          line: 237,
          column: 9
        }
      },
      "46": {
        start: {
          line: 150,
          column: 52
        },
        end: {
          line: 154,
          column: 14
        }
      },
      "47": {
        start: {
          line: 155,
          column: 29
        },
        end: {
          line: 155,
          column: 31
        }
      },
      "48": {
        start: {
          line: 157,
          column: 12
        },
        end: {
          line: 186,
          column: 15
        }
      },
      "49": {
        start: {
          line: 158,
          column: 16
        },
        end: {
          line: 185,
          column: 17
        }
      },
      "50": {
        start: {
          line: 159,
          column: 20
        },
        end: {
          line: 170,
          column: 23
        }
      },
      "51": {
        start: {
          line: 172,
          column: 21
        },
        end: {
          line: 185,
          column: 17
        }
      },
      "52": {
        start: {
          line: 173,
          column: 20
        },
        end: {
          line: 184,
          column: 23
        }
      },
      "53": {
        start: {
          line: 188,
          column: 12
        },
        end: {
          line: 199,
          column: 13
        }
      },
      "54": {
        start: {
          line: 189,
          column: 16
        },
        end: {
          line: 198,
          column: 19
        }
      },
      "55": {
        start: {
          line: 201,
          column: 12
        },
        end: {
          line: 214,
          column: 15
        }
      },
      "56": {
        start: {
          line: 202,
          column: 16
        },
        end: {
          line: 213,
          column: 17
        }
      },
      "57": {
        start: {
          line: 203,
          column: 20
        },
        end: {
          line: 212,
          column: 23
        }
      },
      "58": {
        start: {
          line: 216,
          column: 12
        },
        end: {
          line: 227,
          column: 13
        }
      },
      "59": {
        start: {
          line: 217,
          column: 16
        },
        end: {
          line: 226,
          column: 19
        }
      },
      "60": {
        start: {
          line: 228,
          column: 12
        },
        end: {
          line: 231,
          column: 15
        }
      },
      "61": {
        start: {
          line: 229,
          column: 38
        },
        end: {
          line: 229,
          column: 68
        }
      },
      "62": {
        start: {
          line: 230,
          column: 16
        },
        end: {
          line: 230,
          column: 77
        }
      },
      "63": {
        start: {
          line: 235,
          column: 12
        },
        end: {
          line: 235,
          column: 63
        }
      },
      "64": {
        start: {
          line: 236,
          column: 12
        },
        end: {
          line: 236,
          column: 24
        }
      },
      "65": {
        start: {
          line: 241,
          column: 25
        },
        end: {
          line: 246,
          column: 32
        }
      },
      "66": {
        start: {
          line: 247,
          column: 8
        },
        end: {
          line: 247,
          column: 64
        }
      },
      "67": {
        start: {
          line: 250,
          column: 25
        },
        end: {
          line: 255,
          column: 32
        }
      },
      "68": {
        start: {
          line: 256,
          column: 8
        },
        end: {
          line: 256,
          column: 68
        }
      },
      "69": {
        start: {
          line: 259,
          column: 25
        },
        end: {
          line: 264,
          column: 32
        }
      },
      "70": {
        start: {
          line: 265,
          column: 8
        },
        end: {
          line: 265,
          column: 69
        }
      },
      "71": {
        start: {
          line: 268,
          column: 25
        },
        end: {
          line: 273,
          column: 32
        }
      },
      "72": {
        start: {
          line: 274,
          column: 8
        },
        end: {
          line: 274,
          column: 75
        }
      },
      "73": {
        start: {
          line: 277,
          column: 26
        },
        end: {
          line: 277,
          column: 28
        }
      },
      "74": {
        start: {
          line: 278,
          column: 8
        },
        end: {
          line: 281,
          column: 11
        }
      },
      "75": {
        start: {
          line: 279,
          column: 24
        },
        end: {
          line: 279,
          column: 87
        }
      },
      "76": {
        start: {
          line: 280,
          column: 12
        },
        end: {
          line: 280,
          column: 75
        }
      },
      "77": {
        start: {
          line: 283,
          column: 23
        },
        end: {
          line: 283,
          column: 25
        }
      },
      "78": {
        start: {
          line: 284,
          column: 21
        },
        end: {
          line: 284,
          column: 63
        }
      },
      "79": {
        start: {
          line: 285,
          column: 8
        },
        end: {
          line: 288,
          column: 9
        }
      },
      "80": {
        start: {
          line: 285,
          column: 21
        },
        end: {
          line: 285,
          column: 29
        }
      },
      "81": {
        start: {
          line: 286,
          column: 24
        },
        end: {
          line: 286,
          column: 100
        }
      },
      "82": {
        start: {
          line: 287,
          column: 12
        },
        end: {
          line: 287,
          column: 57
        }
      },
      "83": {
        start: {
          line: 289,
          column: 8
        },
        end: {
          line: 289,
          column: 22
        }
      },
      "84": {
        start: {
          line: 293,
          column: 25
        },
        end: {
          line: 338,
          column: 9
        }
      },
      "85": {
        start: {
          line: 339,
          column: 8
        },
        end: {
          line: 339,
          column: 54
        }
      },
      "86": {
        start: {
          line: 343,
          column: 8
        },
        end: {
          line: 347,
          column: 10
        }
      },
      "87": {
        start: {
          line: 351,
          column: 8
        },
        end: {
          line: 355,
          column: 10
        }
      },
      "88": {
        start: {
          line: 359,
          column: 8
        },
        end: {
          line: 362,
          column: 10
        }
      },
      "89": {
        start: {
          line: 366,
          column: 8
        },
        end: {
          line: 371,
          column: 10
        }
      },
      "90": {
        start: {
          line: 374,
          column: 0
        },
        end: {
          line: 374,
          column: 50
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 9,
            column: 4
          },
          end: {
            line: 9,
            column: 5
          }
        },
        loc: {
          start: {
            line: 9,
            column: 53
          },
          end: {
            line: 59,
            column: 5
          }
        },
        line: 9
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 21,
            column: 56
          },
          end: {
            line: 21,
            column: 57
          }
        },
        loc: {
          start: {
            line: 21,
            column: 66
          },
          end: {
            line: 23,
            column: 13
          }
        },
        line: 21
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 61,
            column: 4
          },
          end: {
            line: 61,
            column: 5
          }
        },
        loc: {
          start: {
            line: 61,
            column: 36
          },
          end: {
            line: 76,
            column: 5
          }
        },
        line: 61
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 69,
            column: 37
          },
          end: {
            line: 69,
            column: 38
          }
        },
        loc: {
          start: {
            line: 69,
            column: 47
          },
          end: {
            line: 69,
            column: 92
          }
        },
        line: 69
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 78,
            column: 4
          },
          end: {
            line: 78,
            column: 5
          }
        },
        loc: {
          start: {
            line: 78,
            column: 40
          },
          end: {
            line: 101,
            column: 5
          }
        },
        line: 78
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 103,
            column: 4
          },
          end: {
            line: 103,
            column: 5
          }
        },
        loc: {
          start: {
            line: 103,
            column: 60
          },
          end: {
            line: 146,
            column: 5
          }
        },
        line: 103
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 148,
            column: 4
          },
          end: {
            line: 148,
            column: 5
          }
        },
        loc: {
          start: {
            line: 148,
            column: 38
          },
          end: {
            line: 238,
            column: 5
          }
        },
        line: 148
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 157,
            column: 29
          },
          end: {
            line: 157,
            column: 30
          }
        },
        loc: {
          start: {
            line: 157,
            column: 39
          },
          end: {
            line: 186,
            column: 13
          }
        },
        line: 157
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 201,
            column: 59
          },
          end: {
            line: 201,
            column: 60
          }
        },
        loc: {
          start: {
            line: 201,
            column: 86
          },
          end: {
            line: 214,
            column: 13
          }
        },
        line: 201
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 228,
            column: 33
          },
          end: {
            line: 228,
            column: 34
          }
        },
        loc: {
          start: {
            line: 228,
            column: 43
          },
          end: {
            line: 231,
            column: 13
          }
        },
        line: 228
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 240,
            column: 4
          },
          end: {
            line: 240,
            column: 5
          }
        },
        loc: {
          start: {
            line: 240,
            column: 46
          },
          end: {
            line: 248,
            column: 5
          }
        },
        line: 240
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 249,
            column: 4
          },
          end: {
            line: 249,
            column: 5
          }
        },
        loc: {
          start: {
            line: 249,
            column: 46
          },
          end: {
            line: 257,
            column: 5
          }
        },
        line: 249
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 258,
            column: 4
          },
          end: {
            line: 258,
            column: 5
          }
        },
        loc: {
          start: {
            line: 258,
            column: 42
          },
          end: {
            line: 266,
            column: 5
          }
        },
        line: 258
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 267,
            column: 4
          },
          end: {
            line: 267,
            column: 5
          }
        },
        loc: {
          start: {
            line: 267,
            column: 44
          },
          end: {
            line: 275,
            column: 5
          }
        },
        line: 267
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 276,
            column: 4
          },
          end: {
            line: 276,
            column: 5
          }
        },
        loc: {
          start: {
            line: 276,
            column: 49
          },
          end: {
            line: 290,
            column: 5
          }
        },
        line: 276
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 278,
            column: 21
          },
          end: {
            line: 278,
            column: 22
          }
        },
        loc: {
          start: {
            line: 278,
            column: 31
          },
          end: {
            line: 281,
            column: 9
          }
        },
        line: 278
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 291,
            column: 4
          },
          end: {
            line: 291,
            column: 5
          }
        },
        loc: {
          start: {
            line: 291,
            column: 45
          },
          end: {
            line: 340,
            column: 5
          }
        },
        line: 291
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 341,
            column: 4
          },
          end: {
            line: 341,
            column: 5
          }
        },
        loc: {
          start: {
            line: 341,
            column: 44
          },
          end: {
            line: 348,
            column: 5
          }
        },
        line: 341
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 349,
            column: 4
          },
          end: {
            line: 349,
            column: 5
          }
        },
        loc: {
          start: {
            line: 349,
            column: 37
          },
          end: {
            line: 356,
            column: 5
          }
        },
        line: 349
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 357,
            column: 4
          },
          end: {
            line: 357,
            column: 5
          }
        },
        loc: {
          start: {
            line: 357,
            column: 32
          },
          end: {
            line: 363,
            column: 5
          }
        },
        line: 357
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 364,
            column: 4
          },
          end: {
            line: 364,
            column: 5
          }
        },
        loc: {
          start: {
            line: 364,
            column: 56
          },
          end: {
            line: 372,
            column: 5
          }
        },
        line: 364
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 9,
            column: 37
          },
          end: {
            line: 9,
            column: 51
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 9,
            column: 46
          },
          end: {
            line: 9,
            column: 51
          }
        }],
        line: 9
      },
      "1": {
        loc: {
          start: {
            line: 10,
            column: 21
          },
          end: {
            line: 10,
            column: 69
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 10,
            column: 39
          },
          end: {
            line: 10,
            column: 40
          }
        }, {
          start: {
            line: 10,
            column: 43
          },
          end: {
            line: 10,
            column: 69
          }
        }],
        line: 10
      },
      "2": {
        loc: {
          start: {
            line: 10,
            column: 43
          },
          end: {
            line: 10,
            column: 69
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 10,
            column: 62
          },
          end: {
            line: 10,
            column: 64
          }
        }, {
          start: {
            line: 10,
            column: 67
          },
          end: {
            line: 10,
            column: 69
          }
        }],
        line: 10
      },
      "3": {
        loc: {
          start: {
            line: 103,
            column: 36
          },
          end: {
            line: 103,
            column: 58
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 103,
            column: 52
          },
          end: {
            line: 103,
            column: 58
          }
        }],
        line: 103
      },
      "4": {
        loc: {
          start: {
            line: 107,
            column: 12
          },
          end: {
            line: 118,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 107,
            column: 12
          },
          end: {
            line: 118,
            column: 13
          }
        }, {
          start: {
            line: 113,
            column: 17
          },
          end: {
            line: 118,
            column: 13
          }
        }],
        line: 107
      },
      "5": {
        loc: {
          start: {
            line: 131,
            column: 27
          },
          end: {
            line: 131,
            column: 81
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 131,
            column: 54
          },
          end: {
            line: 131,
            column: 69
          }
        }, {
          start: {
            line: 131,
            column: 72
          },
          end: {
            line: 131,
            column: 81
          }
        }],
        line: 131
      },
      "6": {
        loc: {
          start: {
            line: 135,
            column: 27
          },
          end: {
            line: 135,
            column: 89
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 135,
            column: 54
          },
          end: {
            line: 135,
            column: 72
          }
        }, {
          start: {
            line: 135,
            column: 75
          },
          end: {
            line: 135,
            column: 89
          }
        }],
        line: 135
      },
      "7": {
        loc: {
          start: {
            line: 158,
            column: 16
          },
          end: {
            line: 185,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 158,
            column: 16
          },
          end: {
            line: 185,
            column: 17
          }
        }, {
          start: {
            line: 172,
            column: 21
          },
          end: {
            line: 185,
            column: 17
          }
        }],
        line: 158
      },
      "8": {
        loc: {
          start: {
            line: 172,
            column: 21
          },
          end: {
            line: 185,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 172,
            column: 21
          },
          end: {
            line: 185,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 172
      },
      "9": {
        loc: {
          start: {
            line: 188,
            column: 12
          },
          end: {
            line: 199,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 188,
            column: 12
          },
          end: {
            line: 199,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 188
      },
      "10": {
        loc: {
          start: {
            line: 202,
            column: 16
          },
          end: {
            line: 213,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 202,
            column: 16
          },
          end: {
            line: 213,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 202
      },
      "11": {
        loc: {
          start: {
            line: 216,
            column: 12
          },
          end: {
            line: 227,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 216,
            column: 12
          },
          end: {
            line: 227,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 216
      },
      "12": {
        loc: {
          start: {
            line: 247,
            column: 39
          },
          end: {
            line: 247,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 247,
            column: 39
          },
          end: {
            line: 247,
            column: 43
          }
        }, {
          start: {
            line: 247,
            column: 47
          },
          end: {
            line: 247,
            column: 49
          }
        }],
        line: 247
      },
      "13": {
        loc: {
          start: {
            line: 256,
            column: 39
          },
          end: {
            line: 256,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 256,
            column: 39
          },
          end: {
            line: 256,
            column: 43
          }
        }, {
          start: {
            line: 256,
            column: 47
          },
          end: {
            line: 256,
            column: 49
          }
        }],
        line: 256
      },
      "14": {
        loc: {
          start: {
            line: 265,
            column: 39
          },
          end: {
            line: 265,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 265,
            column: 39
          },
          end: {
            line: 265,
            column: 43
          }
        }, {
          start: {
            line: 265,
            column: 47
          },
          end: {
            line: 265,
            column: 49
          }
        }],
        line: 265
      },
      "15": {
        loc: {
          start: {
            line: 274,
            column: 39
          },
          end: {
            line: 274,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 274,
            column: 39
          },
          end: {
            line: 274,
            column: 43
          }
        }, {
          start: {
            line: 274,
            column: 47
          },
          end: {
            line: 274,
            column: 49
          }
        }],
        line: 274
      },
      "16": {
        loc: {
          start: {
            line: 276,
            column: 36
          },
          end: {
            line: 276,
            column: 47
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 276,
            column: 46
          },
          end: {
            line: 276,
            column: 47
          }
        }],
        line: 276
      },
      "17": {
        loc: {
          start: {
            line: 280,
            column: 30
          },
          end: {
            line: 280,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 280,
            column: 30
          },
          end: {
            line: 280,
            column: 44
          }
        }, {
          start: {
            line: 280,
            column: 48
          },
          end: {
            line: 280,
            column: 49
          }
        }],
        line: 280
      },
      "18": {
        loc: {
          start: {
            line: 287,
            column: 35
          },
          end: {
            line: 287,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 287,
            column: 35
          },
          end: {
            line: 287,
            column: 49
          }
        }, {
          start: {
            line: 287,
            column: 53
          },
          end: {
            line: 287,
            column: 54
          }
        }],
        line: 287
      },
      "19": {
        loc: {
          start: {
            line: 339,
            column: 15
          },
          end: {
            line: 339,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 339,
            column: 15
          },
          end: {
            line: 339,
            column: 31
          }
        }, {
          start: {
            line: 339,
            column: 35
          },
          end: {
            line: 339,
            column: 53
          }
        }],
        line: 339
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0]
    },
    inputSourceMap: {
      file: "/workspaces/MyFitHero/src/lib/services/analyticsService.ts",
      mappings: "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",
      names: [],
      sources: ["/workspaces/MyFitHero/src/lib/services/analyticsService.ts"],
      sourcesContent: ["import { supabase } from '@/lib/supabase';\nimport { format, subDays, startOfWeek, endOfWeek, startOfMonth, endOfMonth } from 'date-fns';\nimport { fr } from 'date-fns/locale';\n\n// Types pour les analytics\nexport interface AnalyticsData {\n  labels: string[];\n  datasets: Array<{\n    label: string;\n    data: number[];\n    color: string;\n    pillar: string;\n  }>;\n}\n\nexport interface PillarProgress {\n  pillar: string;\n  current_value: number;\n  target_value: number;\n  progress_percentage: number;\n  trend: 'up' | 'down' | 'stable';\n  trend_percentage: number;\n  last_7_days: number[];\n  color: string;\n  icon: string;\n}\n\nexport interface PerformanceMetrics {\n  consistency_score: number;\n  improvement_rate: number;\n  streak_days: number;\n  total_activities: number;\n  weekly_average: number;\n  best_day: string;\n  challenges_completed: number;\n  level_progress: number;\n}\n\nexport interface ComparisonData {\n  current_period: {\n    label: string;\n    hydration: number;\n    nutrition: number;\n    sleep: number;\n    workout: number;\n  };\n  previous_period: {\n    label: string;\n    hydration: number;\n    nutrition: number;\n    sleep: number;\n    workout: number;\n  };\n  improvement: {\n    hydration: number;\n    nutrition: number;\n    sleep: number;\n    workout: number;\n  };\n}\n\nexport interface DetailedInsight {\n  type: 'achievement' | 'improvement' | 'warning' | 'suggestion';\n  pillar: string;\n  title: string;\n  description: string;\n  value?: number;\n  target?: number;\n  action_needed?: boolean;\n  priority: 'low' | 'medium' | 'high';\n  icon: string;\n  color: string;\n}\n\nclass AnalyticsService {\n  // R\xE9cup\xE9ration des donn\xE9es multi-piliers sur une p\xE9riode\n  async getMultiPillarData(\n    userId: string,\n    period: '7d' | '30d' | '90d' = '30d'\n  ): Promise<AnalyticsData> {\n    const days = period === '7d' ? 7 : period === '30d' ? 30 : 90;\n    const startDate = subDays(new Date(), days);\n\n    try {\n      // R\xE9cup\xE9ration parall\xE8le des donn\xE9es de tous les piliers\n      const [hydrationData, nutritionData, sleepData, workoutData] = await Promise.all([\n        this.getHydrationData(userId, startDate),\n        this.getNutritionData(userId, startDate),\n        this.getSleepData(userId, startDate),\n        this.getWorkoutData(userId, startDate),\n      ]);\n\n      // G\xE9n\xE9ration des labels de dates\n      const labels = Array.from({ length: days }, (_, i) => {\n        return format(subDays(new Date(), days - 1 - i), 'dd/MM', { locale: fr });\n      });\n\n      return {\n        labels,\n        datasets: [\n          {\n            label: 'Hydratation',\n            data: hydrationData,\n            color: '#06b6d4',\n            pillar: 'hydration',\n          },\n          {\n            label: 'Nutrition',\n            data: nutritionData,\n            color: '#10b981',\n            pillar: 'nutrition',\n          },\n          {\n            label: 'Sommeil',\n            data: sleepData,\n            color: '#8b5cf6',\n            pillar: 'sleep',\n          },\n          {\n            label: 'Entra\xEEnement',\n            data: workoutData,\n            color: '#ef4444',\n            pillar: 'workout',\n          },\n        ],\n      };\n    } catch (error: any) {\n      // Erreur silencieuse\n      console.error('Error fetching multi-pillar data:', error);\n      throw error;\n    }\n  }\n\n  // Analyse des progr\xE8s par pilier avec tendances\n  async getPillarProgress(userId: string): Promise<PillarProgress[]> {\n    try {\n      const pillars = ['hydration', 'nutrition', 'sleep', 'workout'];\n      const progressData: PillarProgress[] = [];\n\n      for (const pillar of pillars) {\n        const data = await this.getPillarAnalytics(userId, pillar);\n        progressData.push(data);\n      }\n\n      return progressData.sort((a, b) => b.progress_percentage - a.progress_percentage);\n    } catch (error: any) {\n      // Erreur silencieuse\n      console.error('Error fetching pillar progress:', error);\n      throw error;\n    }\n  }\n\n  // M\xE9triques de performance globales\n  async getPerformanceMetrics(userId: string): Promise<PerformanceMetrics> {\n    try {\n      const [consistency, activities, streaks] = await Promise.all([\n        this.calculateConsistencyScore(userId),\n        this.getTotalActivities(userId),\n        this.getStreakData(userId),\n      ]);\n\n      return {\n        consistency_score: consistency.score,\n        improvement_rate: consistency.improvement_rate,\n        streak_days: streaks.current_streak,\n        total_activities: activities.total,\n        weekly_average: activities.weekly_average,\n        best_day: streaks.best_day,\n        challenges_completed: activities.challenges,\n        level_progress: consistency.level_progress,\n      };\n    } catch (error: any) {\n      // Erreur silencieuse\n      console.error('Error fetching performance metrics:', error);\n      throw error;\n    }\n  }\n\n  // Comparaison entre p\xE9riodes\n  async getComparisonData(\n    userId: string,\n    currentPeriod: 'week' | 'month' = 'week'\n  ): Promise<ComparisonData> {\n    try {\n      const now = new Date();\n      let currentStart: Date, currentEnd: Date, previousStart: Date, previousEnd: Date;\n\n      if (currentPeriod === 'week') {\n        currentStart = startOfWeek(now, { locale: fr });\n        currentEnd = endOfWeek(now, { locale: fr });\n        previousStart = startOfWeek(subDays(now, 7), { locale: fr });\n        previousEnd = endOfWeek(subDays(now, 7), { locale: fr });\n      } else {\n        currentStart = startOfMonth(now);\n        currentEnd = endOfMonth(now);\n        previousStart = startOfMonth(subDays(now, 30));\n        previousEnd = endOfMonth(subDays(now, 30));\n      }\n\n      const [currentData, previousData] = await Promise.all([\n        this.getPeriodAverages(userId, currentStart, currentEnd),\n        this.getPeriodAverages(userId, previousStart, previousEnd),\n      ]);\n\n      const improvement = {\n        hydration:\n          ((currentData.hydration - previousData.hydration) / previousData.hydration) * 100,\n        nutrition:\n          ((currentData.nutrition - previousData.nutrition) / previousData.nutrition) * 100,\n        sleep: ((currentData.sleep - previousData.sleep) / previousData.sleep) * 100,\n        workout: ((currentData.workout - previousData.workout) / previousData.workout) * 100,\n      };\n\n      return {\n        current_period: {\n          label: currentPeriod === 'week' ? 'Cette semaine' : 'Ce mois',\n          ...currentData,\n        },\n        previous_period: {\n          label: currentPeriod === 'week' ? 'Semaine derni\xE8re' : 'Mois dernier',\n          ...previousData,\n        },\n        improvement,\n      };\n    } catch (error: any) {\n      // Erreur silencieuse\n      console.error('Error fetching comparison data:', error);\n      throw error;\n    }\n  }\n\n  // Insights d\xE9taill\xE9s avec recommandations\n  async getDetailedInsights(userId: string): Promise<DetailedInsight[]> {\n    try {\n      const [progress, metrics, comparison] = await Promise.all([\n        this.getPillarProgress(userId),\n        this.getPerformanceMetrics(userId),\n        this.getComparisonData(userId),\n      ]);\n\n      const insights: DetailedInsight[] = [];\n\n      // Analyse des progr\xE8s par pilier\n      progress.forEach(pillar => {\n        if (pillar.progress_percentage >= 90) {\n          insights.push({\n            type: 'achievement',\n            pillar: pillar.pillar,\n            title: `Excellent progr\xE8s en ${pillar.pillar}`,\n            description: `Vous avez atteint ${pillar.progress_percentage}% de vos objectifs !`,\n            value: pillar.current_value,\n            target: pillar.target_value,\n            priority: 'low',\n            icon: '\uD83C\uDFC6',\n            color: '#10b981',\n            action_needed: false,\n          });\n        } else if (pillar.progress_percentage < 50) {\n          insights.push({\n            type: 'warning',\n            pillar: pillar.pillar,\n            title: `Attention au ${pillar.pillar}`,\n            description: `Seulement ${pillar.progress_percentage}% d'objectifs atteints cette semaine.`,\n            value: pillar.current_value,\n            target: pillar.target_value,\n            priority: 'high',\n            icon: '\u26A0\uFE0F',\n            color: '#ef4444',\n            action_needed: true,\n          });\n        }\n      });\n\n      // Analyse de la consistance\n      if (metrics.consistency_score > 80) {\n        insights.push({\n          type: 'achievement',\n          pillar: 'general',\n          title: 'Consistance exceptionnelle',\n          description: `Score de consistance de ${metrics.consistency_score}% - continuez !`,\n          priority: 'low',\n          icon: '\uD83D\uDD25',\n          color: '#f59e0b',\n          action_needed: false,\n        });\n      }\n\n      // Analyse des am\xE9liorations\n      Object.entries(comparison.improvement).forEach(([pillar, improvement]) => {\n        if (improvement > 20) {\n          insights.push({\n            type: 'improvement',\n            pillar,\n            title: `Super am\xE9lioration en ${pillar}`,\n            description: `+${improvement.toFixed(1)}% par rapport \xE0 la semaine derni\xE8re`,\n            priority: 'medium',\n            icon: '\uD83D\uDCC8',\n            color: '#06b6d4',\n            action_needed: false,\n          });\n        }\n      });\n\n      // Suggestions bas\xE9es sur les donn\xE9es\n      if (metrics.streak_days < 3) {\n        insights.push({\n          type: 'suggestion',\n          pillar: 'general',\n          title: 'Construisez votre streak',\n          description:\n            'Maintenez vos habitudes 3 jours de suite pour cr\xE9er une dynamique positive.',\n          priority: 'medium',\n          icon: '\uD83C\uDFAF',\n          color: '#8b5cf6',\n          action_needed: true,\n        });\n      }\n\n      return insights.sort((a, b) => {\n        const priorityOrder = { high: 3, medium: 2, low: 1 };\n        return priorityOrder[b.priority] - priorityOrder[a.priority];\n      });\n    } catch (error: any) {\n      // Erreur silencieuse\n      console.error('Error generating insights:', error);\n      throw error;\n    }\n  }\n\n  // Helpers priv\xE9s pour r\xE9cup\xE9rer les donn\xE9es sp\xE9cifiques\n\n  private async getHydrationData(userId: string, startDate: Date): Promise<number[]> {\n    const { data } = await supabase\n      .from('hydration_logs')\n      .select('amount_ml, created_at')\n      .eq('user_id', userId)\n      .gte('created_at', startDate.toISOString())\n      .order('created_at');\n\n    return this.aggregateDataByDay(data || [], 'amount_ml');\n  }\n\n  private async getNutritionData(userId: string, startDate: Date): Promise<number[]> {\n    const { data } = await supabase\n      .from('nutrition_logs')\n      .select('calories, created_at')\n      .eq('user_id', userId)\n      .gte('created_at', startDate.toISOString())\n      .order('created_at');\n\n    return this.aggregateDataByDay(data || [], 'calories', 100); // Normalisation par 100 calories\n  }\n\n  private async getSleepData(userId: string, startDate: Date): Promise<number[]> {\n    const { data } = await supabase\n      .from('sleep_logs')\n      .select('duration_hours, created_at')\n      .eq('user_id', userId)\n      .gte('created_at', startDate.toISOString())\n      .order('created_at');\n\n    return this.aggregateDataByDay(data || [], 'duration_hours');\n  }\n\n  private async getWorkoutData(userId: string, startDate: Date): Promise<number[]> {\n    const { data } = await supabase\n      .from('workout_logs')\n      .select('duration_minutes, created_at')\n      .eq('user_id', userId)\n      .gte('created_at', startDate.toISOString())\n      .order('created_at');\n\n    return this.aggregateDataByDay(data || [], 'duration_minutes', 10); // Normalisation par 10 minutes\n  }\n\n  private aggregateDataByDay(data: unknown[], field: string, divisor: number = 1): number[] {\n    const dailyData: { [key: string]: number } = {};\n\n    data.forEach((item: any) => {\n      const day = format(new Date((item as any).created_at), 'yyyy-MM-dd');\n      dailyData[day] = (dailyData[day] || 0) + (item as any)[field] / divisor;\n    });\n\n    // Remplir les jours manquants avec 0\n    const result: number[] = [];\n    const days = Math.max(Object.keys(dailyData).length, 7);\n\n    for (let i = days - 1; i >= 0; i--) {\n      const day = format(subDays(new Date(), i), 'yyyy-MM-dd');\n      result.push(Math.round(dailyData[day] || 0));\n    }\n\n    return result;\n  }\n\n  private async getPillarAnalytics(userId: string, pillar: string): Promise<PillarProgress> {\n    // Simulation des donn\xE9es - \xC0 remplacer par de vraies requ\xEAtes\n    const mockData: { [key: string]: PillarProgress } = {\n      hydration: {\n        pillar: 'Hydratation',\n        current_value: 2.1,\n        target_value: 2.5,\n        progress_percentage: 84,\n        trend: 'up',\n        trend_percentage: 12,\n        last_7_days: [1.8, 2.0, 2.3, 2.1, 2.4, 2.2, 2.1],\n        color: '#06b6d4',\n        icon: '\uD83D\uDCA7',\n      },\n      nutrition: {\n        pillar: 'Nutrition',\n        current_value: 1850,\n        target_value: 2000,\n        progress_percentage: 92,\n        trend: 'stable',\n        trend_percentage: 2,\n        last_7_days: [1800, 1900, 1850, 1950, 1880, 1870, 1850],\n        color: '#10b981',\n        icon: '\uD83C\uDF4E',\n      },\n      sleep: {\n        pillar: 'Sommeil',\n        current_value: 7.2,\n        target_value: 8.0,\n        progress_percentage: 90,\n        trend: 'up',\n        trend_percentage: 8,\n        last_7_days: [7.0, 7.5, 6.8, 7.2, 7.8, 7.1, 7.2],\n        color: '#8b5cf6',\n        icon: '\uD83D\uDE34',\n      },\n      workout: {\n        pillar: 'Entra\xEEnement',\n        current_value: 45,\n        target_value: 60,\n        progress_percentage: 75,\n        trend: 'down',\n        trend_percentage: -5,\n        last_7_days: [60, 45, 30, 50, 40, 35, 45],\n        color: '#ef4444',\n        icon: '\uD83D\uDCAA',\n      },\n    };\n\n    return mockData[pillar] || mockData.hydration;\n  }\n\n  private async calculateConsistencyScore(userId: string): Promise<{\n    score: number;\n    improvement_rate: number;\n    level_progress: number;\n  }> {\n    // Simulation - \xC0 remplacer par de vrais calculs\n    return {\n      score: 78,\n      improvement_rate: 15,\n      level_progress: 65,\n    };\n  }\n\n  private async getTotalActivities(userId: string): Promise<{\n    total: number;\n    weekly_average: number;\n    challenges: number;\n  }> {\n    // Simulation - \xC0 remplacer par de vraies requ\xEAtes\n    return {\n      total: 156,\n      weekly_average: 22,\n      challenges: 8,\n    };\n  }\n\n  private async getStreakData(userId: string): Promise<{\n    current_streak: number;\n    best_day: string;\n  }> {\n    // Simulation - \xC0 remplacer par de vrais calculs\n    return {\n      current_streak: 12,\n      best_day: 'Mercredi',\n    };\n  }\n\n  private async getPeriodAverages(\n    userId: string,\n    startDate: Date,\n    endDate: Date\n  ): Promise<{\n    hydration: number;\n    nutrition: number;\n    sleep: number;\n    workout: number;\n  }> {\n    // Simulation - \xC0 remplacer par de vraies requ\xEAtes\n    return {\n      hydration: 2.1,\n      nutrition: 1850,\n      sleep: 7.2,\n      workout: 45,\n    };\n  }\n}\n\nexport const analyticsService = new AnalyticsService();\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "4b7e49df5f923045aad351f777cee4285e0c85c6"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_q1fd2zjv1 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_q1fd2zjv1();
cov_q1fd2zjv1().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_q1fd2zjv1().s[1]++;
exports.analyticsService = void 0;
const supabase_1 =
/* istanbul ignore next */
(cov_q1fd2zjv1().s[2]++, require("@/lib/supabase"));
const date_fns_1 =
/* istanbul ignore next */
(cov_q1fd2zjv1().s[3]++, require("date-fns"));
const locale_1 =
/* istanbul ignore next */
(cov_q1fd2zjv1().s[4]++, require("date-fns/locale"));
class AnalyticsService {
  // Récupération des données multi-piliers sur une période
  async getMultiPillarData(userId, period =
  /* istanbul ignore next */
  (cov_q1fd2zjv1().b[0][0]++, '30d')) {
    /* istanbul ignore next */
    cov_q1fd2zjv1().f[0]++;
    const days =
    /* istanbul ignore next */
    (cov_q1fd2zjv1().s[5]++, period === '7d' ?
    /* istanbul ignore next */
    (cov_q1fd2zjv1().b[1][0]++, 7) :
    /* istanbul ignore next */
    (cov_q1fd2zjv1().b[1][1]++, period === '30d' ?
    /* istanbul ignore next */
    (cov_q1fd2zjv1().b[2][0]++, 30) :
    /* istanbul ignore next */
    (cov_q1fd2zjv1().b[2][1]++, 90)));
    const startDate =
    /* istanbul ignore next */
    (cov_q1fd2zjv1().s[6]++, (0, date_fns_1.subDays)(new Date(), days));
    /* istanbul ignore next */
    cov_q1fd2zjv1().s[7]++;
    try {
      // Récupération parallèle des données de tous les piliers
      const [hydrationData, nutritionData, sleepData, workoutData] =
      /* istanbul ignore next */
      (cov_q1fd2zjv1().s[8]++, await Promise.all([this.getHydrationData(userId, startDate), this.getNutritionData(userId, startDate), this.getSleepData(userId, startDate), this.getWorkoutData(userId, startDate)]));
      // Génération des labels de dates
      const labels =
      /* istanbul ignore next */
      (cov_q1fd2zjv1().s[9]++, Array.from({
        length: days
      }, (_, i) => {
        /* istanbul ignore next */
        cov_q1fd2zjv1().f[1]++;
        cov_q1fd2zjv1().s[10]++;
        return (0, date_fns_1.format)((0, date_fns_1.subDays)(new Date(), days - 1 - i), 'dd/MM', {
          locale: locale_1.fr
        });
      }));
      /* istanbul ignore next */
      cov_q1fd2zjv1().s[11]++;
      return {
        labels,
        datasets: [{
          label: 'Hydratation',
          data: hydrationData,
          color: '#06b6d4',
          pillar: 'hydration'
        }, {
          label: 'Nutrition',
          data: nutritionData,
          color: '#10b981',
          pillar: 'nutrition'
        }, {
          label: 'Sommeil',
          data: sleepData,
          color: '#8b5cf6',
          pillar: 'sleep'
        }, {
          label: 'Entraînement',
          data: workoutData,
          color: '#ef4444',
          pillar: 'workout'
        }]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_q1fd2zjv1().s[12]++;
      // Erreur silencieuse
      console.error('Error fetching multi-pillar data:', error);
      /* istanbul ignore next */
      cov_q1fd2zjv1().s[13]++;
      throw error;
    }
  }
  // Analyse des progrès par pilier avec tendances
  async getPillarProgress(userId) {
    /* istanbul ignore next */
    cov_q1fd2zjv1().f[2]++;
    cov_q1fd2zjv1().s[14]++;
    try {
      const pillars =
      /* istanbul ignore next */
      (cov_q1fd2zjv1().s[15]++, ['hydration', 'nutrition', 'sleep', 'workout']);
      const progressData =
      /* istanbul ignore next */
      (cov_q1fd2zjv1().s[16]++, []);
      /* istanbul ignore next */
      cov_q1fd2zjv1().s[17]++;
      for (const pillar of pillars) {
        const data =
        /* istanbul ignore next */
        (cov_q1fd2zjv1().s[18]++, await this.getPillarAnalytics(userId, pillar));
        /* istanbul ignore next */
        cov_q1fd2zjv1().s[19]++;
        progressData.push(data);
      }
      /* istanbul ignore next */
      cov_q1fd2zjv1().s[20]++;
      return progressData.sort((a, b) => {
        /* istanbul ignore next */
        cov_q1fd2zjv1().f[3]++;
        cov_q1fd2zjv1().s[21]++;
        return b.progress_percentage - a.progress_percentage;
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_q1fd2zjv1().s[22]++;
      // Erreur silencieuse
      console.error('Error fetching pillar progress:', error);
      /* istanbul ignore next */
      cov_q1fd2zjv1().s[23]++;
      throw error;
    }
  }
  // Métriques de performance globales
  async getPerformanceMetrics(userId) {
    /* istanbul ignore next */
    cov_q1fd2zjv1().f[4]++;
    cov_q1fd2zjv1().s[24]++;
    try {
      const [consistency, activities, streaks] =
      /* istanbul ignore next */
      (cov_q1fd2zjv1().s[25]++, await Promise.all([this.calculateConsistencyScore(userId), this.getTotalActivities(userId), this.getStreakData(userId)]));
      /* istanbul ignore next */
      cov_q1fd2zjv1().s[26]++;
      return {
        consistency_score: consistency.score,
        improvement_rate: consistency.improvement_rate,
        streak_days: streaks.current_streak,
        total_activities: activities.total,
        weekly_average: activities.weekly_average,
        best_day: streaks.best_day,
        challenges_completed: activities.challenges,
        level_progress: consistency.level_progress
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_q1fd2zjv1().s[27]++;
      // Erreur silencieuse
      console.error('Error fetching performance metrics:', error);
      /* istanbul ignore next */
      cov_q1fd2zjv1().s[28]++;
      throw error;
    }
  }
  // Comparaison entre périodes
  async getComparisonData(userId, currentPeriod =
  /* istanbul ignore next */
  (cov_q1fd2zjv1().b[3][0]++, 'week')) {
    /* istanbul ignore next */
    cov_q1fd2zjv1().f[5]++;
    cov_q1fd2zjv1().s[29]++;
    try {
      const now =
      /* istanbul ignore next */
      (cov_q1fd2zjv1().s[30]++, new Date());
      let currentStart, currentEnd, previousStart, previousEnd;
      /* istanbul ignore next */
      cov_q1fd2zjv1().s[31]++;
      if (currentPeriod === 'week') {
        /* istanbul ignore next */
        cov_q1fd2zjv1().b[4][0]++;
        cov_q1fd2zjv1().s[32]++;
        currentStart = (0, date_fns_1.startOfWeek)(now, {
          locale: locale_1.fr
        });
        /* istanbul ignore next */
        cov_q1fd2zjv1().s[33]++;
        currentEnd = (0, date_fns_1.endOfWeek)(now, {
          locale: locale_1.fr
        });
        /* istanbul ignore next */
        cov_q1fd2zjv1().s[34]++;
        previousStart = (0, date_fns_1.startOfWeek)((0, date_fns_1.subDays)(now, 7), {
          locale: locale_1.fr
        });
        /* istanbul ignore next */
        cov_q1fd2zjv1().s[35]++;
        previousEnd = (0, date_fns_1.endOfWeek)((0, date_fns_1.subDays)(now, 7), {
          locale: locale_1.fr
        });
      } else {
        /* istanbul ignore next */
        cov_q1fd2zjv1().b[4][1]++;
        cov_q1fd2zjv1().s[36]++;
        currentStart = (0, date_fns_1.startOfMonth)(now);
        /* istanbul ignore next */
        cov_q1fd2zjv1().s[37]++;
        currentEnd = (0, date_fns_1.endOfMonth)(now);
        /* istanbul ignore next */
        cov_q1fd2zjv1().s[38]++;
        previousStart = (0, date_fns_1.startOfMonth)((0, date_fns_1.subDays)(now, 30));
        /* istanbul ignore next */
        cov_q1fd2zjv1().s[39]++;
        previousEnd = (0, date_fns_1.endOfMonth)((0, date_fns_1.subDays)(now, 30));
      }
      const [currentData, previousData] =
      /* istanbul ignore next */
      (cov_q1fd2zjv1().s[40]++, await Promise.all([this.getPeriodAverages(userId, currentStart, currentEnd), this.getPeriodAverages(userId, previousStart, previousEnd)]));
      const improvement =
      /* istanbul ignore next */
      (cov_q1fd2zjv1().s[41]++, {
        hydration: (currentData.hydration - previousData.hydration) / previousData.hydration * 100,
        nutrition: (currentData.nutrition - previousData.nutrition) / previousData.nutrition * 100,
        sleep: (currentData.sleep - previousData.sleep) / previousData.sleep * 100,
        workout: (currentData.workout - previousData.workout) / previousData.workout * 100
      });
      /* istanbul ignore next */
      cov_q1fd2zjv1().s[42]++;
      return {
        current_period: {
          label: currentPeriod === 'week' ?
          /* istanbul ignore next */
          (cov_q1fd2zjv1().b[5][0]++, 'Cette semaine') :
          /* istanbul ignore next */
          (cov_q1fd2zjv1().b[5][1]++, 'Ce mois'),
          ...currentData
        },
        previous_period: {
          label: currentPeriod === 'week' ?
          /* istanbul ignore next */
          (cov_q1fd2zjv1().b[6][0]++, 'Semaine dernière') :
          /* istanbul ignore next */
          (cov_q1fd2zjv1().b[6][1]++, 'Mois dernier'),
          ...previousData
        },
        improvement
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_q1fd2zjv1().s[43]++;
      // Erreur silencieuse
      console.error('Error fetching comparison data:', error);
      /* istanbul ignore next */
      cov_q1fd2zjv1().s[44]++;
      throw error;
    }
  }
  // Insights détaillés avec recommandations
  async getDetailedInsights(userId) {
    /* istanbul ignore next */
    cov_q1fd2zjv1().f[6]++;
    cov_q1fd2zjv1().s[45]++;
    try {
      const [progress, metrics, comparison] =
      /* istanbul ignore next */
      (cov_q1fd2zjv1().s[46]++, await Promise.all([this.getPillarProgress(userId), this.getPerformanceMetrics(userId), this.getComparisonData(userId)]));
      const insights =
      /* istanbul ignore next */
      (cov_q1fd2zjv1().s[47]++, []);
      // Analyse des progrès par pilier
      /* istanbul ignore next */
      cov_q1fd2zjv1().s[48]++;
      progress.forEach(pillar => {
        /* istanbul ignore next */
        cov_q1fd2zjv1().f[7]++;
        cov_q1fd2zjv1().s[49]++;
        if (pillar.progress_percentage >= 90) {
          /* istanbul ignore next */
          cov_q1fd2zjv1().b[7][0]++;
          cov_q1fd2zjv1().s[50]++;
          insights.push({
            type: 'achievement',
            pillar: pillar.pillar,
            title: `Excellent progrès en ${pillar.pillar}`,
            description: `Vous avez atteint ${pillar.progress_percentage}% de vos objectifs !`,
            value: pillar.current_value,
            target: pillar.target_value,
            priority: 'low',
            icon: '🏆',
            color: '#10b981',
            action_needed: false
          });
        } else {
          /* istanbul ignore next */
          cov_q1fd2zjv1().b[7][1]++;
          cov_q1fd2zjv1().s[51]++;
          if (pillar.progress_percentage < 50) {
            /* istanbul ignore next */
            cov_q1fd2zjv1().b[8][0]++;
            cov_q1fd2zjv1().s[52]++;
            insights.push({
              type: 'warning',
              pillar: pillar.pillar,
              title: `Attention au ${pillar.pillar}`,
              description: `Seulement ${pillar.progress_percentage}% d'objectifs atteints cette semaine.`,
              value: pillar.current_value,
              target: pillar.target_value,
              priority: 'high',
              icon: '⚠️',
              color: '#ef4444',
              action_needed: true
            });
          } else
          /* istanbul ignore next */
          {
            cov_q1fd2zjv1().b[8][1]++;
          }
        }
      });
      // Analyse de la consistance
      /* istanbul ignore next */
      cov_q1fd2zjv1().s[53]++;
      if (metrics.consistency_score > 80) {
        /* istanbul ignore next */
        cov_q1fd2zjv1().b[9][0]++;
        cov_q1fd2zjv1().s[54]++;
        insights.push({
          type: 'achievement',
          pillar: 'general',
          title: 'Consistance exceptionnelle',
          description: `Score de consistance de ${metrics.consistency_score}% - continuez !`,
          priority: 'low',
          icon: '🔥',
          color: '#f59e0b',
          action_needed: false
        });
      } else
      /* istanbul ignore next */
      {
        cov_q1fd2zjv1().b[9][1]++;
      }
      // Analyse des améliorations
      cov_q1fd2zjv1().s[55]++;
      Object.entries(comparison.improvement).forEach(([pillar, improvement]) => {
        /* istanbul ignore next */
        cov_q1fd2zjv1().f[8]++;
        cov_q1fd2zjv1().s[56]++;
        if (improvement > 20) {
          /* istanbul ignore next */
          cov_q1fd2zjv1().b[10][0]++;
          cov_q1fd2zjv1().s[57]++;
          insights.push({
            type: 'improvement',
            pillar,
            title: `Super amélioration en ${pillar}`,
            description: `+${improvement.toFixed(1)}% par rapport à la semaine dernière`,
            priority: 'medium',
            icon: '📈',
            color: '#06b6d4',
            action_needed: false
          });
        } else
        /* istanbul ignore next */
        {
          cov_q1fd2zjv1().b[10][1]++;
        }
      });
      // Suggestions basées sur les données
      /* istanbul ignore next */
      cov_q1fd2zjv1().s[58]++;
      if (metrics.streak_days < 3) {
        /* istanbul ignore next */
        cov_q1fd2zjv1().b[11][0]++;
        cov_q1fd2zjv1().s[59]++;
        insights.push({
          type: 'suggestion',
          pillar: 'general',
          title: 'Construisez votre streak',
          description: 'Maintenez vos habitudes 3 jours de suite pour créer une dynamique positive.',
          priority: 'medium',
          icon: '🎯',
          color: '#8b5cf6',
          action_needed: true
        });
      } else
      /* istanbul ignore next */
      {
        cov_q1fd2zjv1().b[11][1]++;
      }
      cov_q1fd2zjv1().s[60]++;
      return insights.sort((a, b) => {
        /* istanbul ignore next */
        cov_q1fd2zjv1().f[9]++;
        const priorityOrder =
        /* istanbul ignore next */
        (cov_q1fd2zjv1().s[61]++, {
          high: 3,
          medium: 2,
          low: 1
        });
        /* istanbul ignore next */
        cov_q1fd2zjv1().s[62]++;
        return priorityOrder[b.priority] - priorityOrder[a.priority];
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_q1fd2zjv1().s[63]++;
      // Erreur silencieuse
      console.error('Error generating insights:', error);
      /* istanbul ignore next */
      cov_q1fd2zjv1().s[64]++;
      throw error;
    }
  }
  // Helpers privés pour récupérer les données spécifiques
  async getHydrationData(userId, startDate) {
    /* istanbul ignore next */
    cov_q1fd2zjv1().f[10]++;
    const {
      data
    } =
    /* istanbul ignore next */
    (cov_q1fd2zjv1().s[65]++, await supabase_1.supabase.from('hydration_logs').select('amount_ml, created_at').eq('user_id', userId).gte('created_at', startDate.toISOString()).order('created_at'));
    /* istanbul ignore next */
    cov_q1fd2zjv1().s[66]++;
    return this.aggregateDataByDay(
    /* istanbul ignore next */
    (cov_q1fd2zjv1().b[12][0]++, data) ||
    /* istanbul ignore next */
    (cov_q1fd2zjv1().b[12][1]++, []), 'amount_ml');
  }
  async getNutritionData(userId, startDate) {
    /* istanbul ignore next */
    cov_q1fd2zjv1().f[11]++;
    const {
      data
    } =
    /* istanbul ignore next */
    (cov_q1fd2zjv1().s[67]++, await supabase_1.supabase.from('nutrition_logs').select('calories, created_at').eq('user_id', userId).gte('created_at', startDate.toISOString()).order('created_at'));
    /* istanbul ignore next */
    cov_q1fd2zjv1().s[68]++;
    return this.aggregateDataByDay(
    /* istanbul ignore next */
    (cov_q1fd2zjv1().b[13][0]++, data) ||
    /* istanbul ignore next */
    (cov_q1fd2zjv1().b[13][1]++, []), 'calories', 100); // Normalisation par 100 calories
  }
  async getSleepData(userId, startDate) {
    /* istanbul ignore next */
    cov_q1fd2zjv1().f[12]++;
    const {
      data
    } =
    /* istanbul ignore next */
    (cov_q1fd2zjv1().s[69]++, await supabase_1.supabase.from('sleep_logs').select('duration_hours, created_at').eq('user_id', userId).gte('created_at', startDate.toISOString()).order('created_at'));
    /* istanbul ignore next */
    cov_q1fd2zjv1().s[70]++;
    return this.aggregateDataByDay(
    /* istanbul ignore next */
    (cov_q1fd2zjv1().b[14][0]++, data) ||
    /* istanbul ignore next */
    (cov_q1fd2zjv1().b[14][1]++, []), 'duration_hours');
  }
  async getWorkoutData(userId, startDate) {
    /* istanbul ignore next */
    cov_q1fd2zjv1().f[13]++;
    const {
      data
    } =
    /* istanbul ignore next */
    (cov_q1fd2zjv1().s[71]++, await supabase_1.supabase.from('workout_logs').select('duration_minutes, created_at').eq('user_id', userId).gte('created_at', startDate.toISOString()).order('created_at'));
    /* istanbul ignore next */
    cov_q1fd2zjv1().s[72]++;
    return this.aggregateDataByDay(
    /* istanbul ignore next */
    (cov_q1fd2zjv1().b[15][0]++, data) ||
    /* istanbul ignore next */
    (cov_q1fd2zjv1().b[15][1]++, []), 'duration_minutes', 10); // Normalisation par 10 minutes
  }
  aggregateDataByDay(data, field, divisor =
  /* istanbul ignore next */
  (cov_q1fd2zjv1().b[16][0]++, 1)) {
    /* istanbul ignore next */
    cov_q1fd2zjv1().f[14]++;
    const dailyData =
    /* istanbul ignore next */
    (cov_q1fd2zjv1().s[73]++, {});
    /* istanbul ignore next */
    cov_q1fd2zjv1().s[74]++;
    data.forEach(item => {
      /* istanbul ignore next */
      cov_q1fd2zjv1().f[15]++;
      const day =
      /* istanbul ignore next */
      (cov_q1fd2zjv1().s[75]++, (0, date_fns_1.format)(new Date(item.created_at), 'yyyy-MM-dd'));
      /* istanbul ignore next */
      cov_q1fd2zjv1().s[76]++;
      dailyData[day] = (
      /* istanbul ignore next */
      (cov_q1fd2zjv1().b[17][0]++, dailyData[day]) ||
      /* istanbul ignore next */
      (cov_q1fd2zjv1().b[17][1]++, 0)) + item[field] / divisor;
    });
    // Remplir les jours manquants avec 0
    const result =
    /* istanbul ignore next */
    (cov_q1fd2zjv1().s[77]++, []);
    const days =
    /* istanbul ignore next */
    (cov_q1fd2zjv1().s[78]++, Math.max(Object.keys(dailyData).length, 7));
    /* istanbul ignore next */
    cov_q1fd2zjv1().s[79]++;
    for (let i =
    /* istanbul ignore next */
    (cov_q1fd2zjv1().s[80]++, days - 1); i >= 0; i--) {
      const day =
      /* istanbul ignore next */
      (cov_q1fd2zjv1().s[81]++, (0, date_fns_1.format)((0, date_fns_1.subDays)(new Date(), i), 'yyyy-MM-dd'));
      /* istanbul ignore next */
      cov_q1fd2zjv1().s[82]++;
      result.push(Math.round(
      /* istanbul ignore next */
      (cov_q1fd2zjv1().b[18][0]++, dailyData[day]) ||
      /* istanbul ignore next */
      (cov_q1fd2zjv1().b[18][1]++, 0)));
    }
    /* istanbul ignore next */
    cov_q1fd2zjv1().s[83]++;
    return result;
  }
  async getPillarAnalytics(userId, pillar) {
    /* istanbul ignore next */
    cov_q1fd2zjv1().f[16]++;
    // Simulation des données - À remplacer par de vraies requêtes
    const mockData =
    /* istanbul ignore next */
    (cov_q1fd2zjv1().s[84]++, {
      hydration: {
        pillar: 'Hydratation',
        current_value: 2.1,
        target_value: 2.5,
        progress_percentage: 84,
        trend: 'up',
        trend_percentage: 12,
        last_7_days: [1.8, 2.0, 2.3, 2.1, 2.4, 2.2, 2.1],
        color: '#06b6d4',
        icon: '💧'
      },
      nutrition: {
        pillar: 'Nutrition',
        current_value: 1850,
        target_value: 2000,
        progress_percentage: 92,
        trend: 'stable',
        trend_percentage: 2,
        last_7_days: [1800, 1900, 1850, 1950, 1880, 1870, 1850],
        color: '#10b981',
        icon: '🍎'
      },
      sleep: {
        pillar: 'Sommeil',
        current_value: 7.2,
        target_value: 8.0,
        progress_percentage: 90,
        trend: 'up',
        trend_percentage: 8,
        last_7_days: [7.0, 7.5, 6.8, 7.2, 7.8, 7.1, 7.2],
        color: '#8b5cf6',
        icon: '😴'
      },
      workout: {
        pillar: 'Entraînement',
        current_value: 45,
        target_value: 60,
        progress_percentage: 75,
        trend: 'down',
        trend_percentage: -5,
        last_7_days: [60, 45, 30, 50, 40, 35, 45],
        color: '#ef4444',
        icon: '💪'
      }
    });
    /* istanbul ignore next */
    cov_q1fd2zjv1().s[85]++;
    return /* istanbul ignore next */(cov_q1fd2zjv1().b[19][0]++, mockData[pillar]) ||
    /* istanbul ignore next */
    (cov_q1fd2zjv1().b[19][1]++, mockData.hydration);
  }
  async calculateConsistencyScore(userId) {
    /* istanbul ignore next */
    cov_q1fd2zjv1().f[17]++;
    cov_q1fd2zjv1().s[86]++;
    // Simulation - À remplacer par de vrais calculs
    return {
      score: 78,
      improvement_rate: 15,
      level_progress: 65
    };
  }
  async getTotalActivities(userId) {
    /* istanbul ignore next */
    cov_q1fd2zjv1().f[18]++;
    cov_q1fd2zjv1().s[87]++;
    // Simulation - À remplacer par de vraies requêtes
    return {
      total: 156,
      weekly_average: 22,
      challenges: 8
    };
  }
  async getStreakData(userId) {
    /* istanbul ignore next */
    cov_q1fd2zjv1().f[19]++;
    cov_q1fd2zjv1().s[88]++;
    // Simulation - À remplacer par de vrais calculs
    return {
      current_streak: 12,
      best_day: 'Mercredi'
    };
  }
  async getPeriodAverages(userId, startDate, endDate) {
    /* istanbul ignore next */
    cov_q1fd2zjv1().f[20]++;
    cov_q1fd2zjv1().s[89]++;
    // Simulation - À remplacer par de vraies requêtes
    return {
      hydration: 2.1,
      nutrition: 1850,
      sleep: 7.2,
      workout: 45
    };
  }
}
/* istanbul ignore next */
cov_q1fd2zjv1().s[90]++;
exports.analyticsService = new AnalyticsService();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,