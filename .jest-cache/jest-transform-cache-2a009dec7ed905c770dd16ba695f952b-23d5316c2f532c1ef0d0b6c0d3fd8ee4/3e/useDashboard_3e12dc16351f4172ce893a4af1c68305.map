{"version":3,"names":["cov_8tdu2akbm","actualCoverage","s","react_1","require","useAuth_1","sonner_1","useDashboard","f","user","useAuth","state","setState","useState","metrics","totalWorkouts","weeklyWorkouts","totalCalories","weeklyCalories","averageSleep","hydrationLevel","weeklyProgress","monthlyProgress","streakDays","completedGoals","fitnessScore","recoveryScore","nutritionScore","consistencyScore","insights","weeklyTrends","achievements","quickActions","widgets","goals","socialComparisons","weather","loading","error","lastUpdated","Date","toISOString","fetchDashboardData","useCallback","id","b","prev","trends","Promise","all","fetchUserMetrics","fetchSmartInsights","fetchWeeklyTrends","fetchUserAchievements","fetchPersonalizedGoals","toast","resolve","setTimeout","type","priority","title","message","actionText","actionUrl","icon","timestamp","category","day","workouts","calories","sleep","recovery","nutrition","description","unlockedAt","rarity","now","targetValue","currentValue","unit","deadline","aiGenerated","refreshData","success","markInsightAsRead","insightId","filter","insight","completeGoal","goalId","goal","useEffect","isLoading","exports"],"sources":["/workspaces/MyFitHero/src/features/dashboard/hooks/useDashboard.ts"],"sourcesContent":["import { useCallback, useEffect, useState } from 'react';\nimport { DashboardState, DashboardMetrics, SmartInsight, WeeklyTrend, Achievement, PersonalizedGoal } from '../types';\nimport { useAuth } from '@/features/auth/hooks/useAuth';\nimport { toast } from 'sonner';\n\nexport const useDashboard = () => {\n  const { user } = useAuth();\n  \n  const [state, setState] = useState<DashboardState>({\n    metrics: {\n      totalWorkouts: 0,\n      weeklyWorkouts: 0,\n      totalCalories: 0,\n      weeklyCalories: 0,\n      averageSleep: 0,\n      hydrationLevel: 0,\n      weeklyProgress: 0,\n      monthlyProgress: 0,\n      streakDays: 0,\n      completedGoals: 0,\n      fitnessScore: 0,\n      recoveryScore: 0,\n      nutritionScore: 0,\n      consistencyScore: 0,\n    },\n    insights: [],\n    weeklyTrends: [],\n    achievements: [],\n    quickActions: [],\n    widgets: [],\n    goals: [],\n    socialComparisons: [],\n    weather: null,\n    loading: true,\n    error: null,\n    lastUpdated: new Date().toISOString(),\n  });\n\n  // Fetch comprehensive dashboard data\n  const fetchDashboardData = useCallback(async () => {\n    if (!user?.id) return;\n    \n    setState(prev => ({ ...prev, loading: true, error: null }));\n    \n    try {\n      // Simulate AI-powered data aggregation\n      const [metrics, insights, trends, achievements, goals] = await Promise.all([\n        fetchUserMetrics(),\n        fetchSmartInsights(),\n        fetchWeeklyTrends(),\n        fetchUserAchievements(),\n        fetchPersonalizedGoals(),\n      ]);\n\n      setState(prev => ({\n        ...prev,\n        metrics,\n        insights,\n        weeklyTrends: trends,\n        achievements,\n        goals,\n        loading: false,\n        lastUpdated: new Date().toISOString(),\n      }));\n    } catch (error: any) {\n      setState(prev => ({\n        ...prev,\n        error: 'Erreur lors du chargement du dashboard',\n        loading: false,\n      }));\n      \n      toast.error(\"Impossible de charger les donn√©es du dashboard\");\n    }\n  }, [user?.id, toast]);\n\n  // Mock advanced metrics calculation\n  const fetchUserMetrics = async (): Promise<DashboardMetrics> => {\n    // Simulate API call with realistic data\n    await new Promise(resolve => setTimeout(resolve, 800));\n    \n    return {\n      totalWorkouts: 127,\n      weeklyWorkouts: 5,\n      totalCalories: 24680,\n      weeklyCalories: 3420,\n      averageSleep: 7.3,\n      hydrationLevel: 85,\n      weeklyProgress: 78,\n      monthlyProgress: 65,\n      streakDays: 12,\n      completedGoals: 8,\n      fitnessScore: 82, // AI-calculated comprehensive score\n      recoveryScore: 76,\n      nutritionScore: 88,\n      consistencyScore: 91,\n    };\n  };\n\n  // AI-powered insights generation\n  const fetchSmartInsights = async (): Promise<SmartInsight[]> => {\n    await new Promise(resolve => setTimeout(resolve, 600));\n    \n    return [\n      {\n        id: '1',\n        type: 'achievement',\n        priority: 'high',\n        title: 'üî• S√©rie record !',\n        message: 'Vous venez de battre votre record avec 12 jours cons√©cutifs d\\'entra√Ænement !',\n        actionText: 'Voir les d√©tails',\n        actionUrl: '/achievements',\n        icon: 'Trophy',\n        timestamp: new Date().toISOString(),\n        category: 'workout',\n      },\n      {\n        id: '2',\n        type: 'recommendation',\n        priority: 'medium',\n        title: 'üí° Optimisation d√©tect√©e',\n        message: 'Vos performances sont meilleures les mardis. Planifiez vos entra√Ænements intensifs ce jour.',\n        actionText: 'Planifier',\n        actionUrl: '/workout/schedule',\n        icon: 'Brain',\n        timestamp: new Date().toISOString(),\n        category: 'workout',\n      },\n      {\n        id: '3',\n        type: 'alert',\n        priority: 'medium',\n        title: 'üò¥ R√©cup√©ration importante',\n        message: 'Votre score de r√©cup√©ration est √† 76%. Un jour de repos pourrait optimiser vos performances.',\n        actionText: 'Voir conseils',\n        actionUrl: '/recovery',\n        icon: 'Moon',\n        timestamp: new Date().toISOString(),\n        category: 'recovery',\n      },\n    ];\n  };\n\n  // Weekly performance trends\n  const fetchWeeklyTrends = async (): Promise<WeeklyTrend[]> => {\n    await new Promise(resolve => setTimeout(resolve, 400));\n    \n    return [\n      { day: 'Lun', workouts: 1, calories: 420, sleep: 7.5, recovery: 85, nutrition: 90 },\n      { day: 'Mar', workouts: 1, calories: 580, sleep: 7.2, recovery: 78, nutrition: 85 },\n      { day: 'Mer', workouts: 0, calories: 0, sleep: 8.1, recovery: 92, nutrition: 88 },\n      { day: 'Jeu', workouts: 1, calories: 520, sleep: 6.8, recovery: 72, nutrition: 82 },\n      { day: 'Ven', workouts: 1, calories: 490, sleep: 7.4, recovery: 80, nutrition: 87 },\n      { day: 'Sam', workouts: 1, calories: 630, sleep: 7.9, recovery: 88, nutrition: 91 },\n      { day: 'Dim', workouts: 0, calories: 180, sleep: 8.5, recovery: 95, nutrition: 89 },\n    ];\n  };\n\n  // User achievements with gamification\n  const fetchUserAchievements = async (): Promise<Achievement[]> => {\n    await new Promise(resolve => setTimeout(resolve, 500));\n    \n    return [\n      {\n        id: '1',\n        title: 'Guerrier de la constance',\n        description: '10 jours d\\'entra√Ænement cons√©cutifs',\n        icon: 'Sword',\n        unlockedAt: new Date().toISOString(),\n        rarity: 'epic',\n      },\n      {\n        id: '2',\n        title: 'Ma√Ætre de l\\'hydratation',\n        description: 'Objectif hydratation atteint 7 jours de suite',\n        icon: 'Droplets',\n        unlockedAt: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString(),\n        rarity: 'rare',\n      },\n      {\n        id: '3',\n        title: 'Machine √† calories',\n        description: 'Plus de 500 calories br√ªl√©es en une s√©ance',\n        icon: 'Zap',\n        unlockedAt: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000).toISOString(),\n        rarity: 'common',\n      },\n    ];\n  };\n\n  // AI-generated personalized goals\n  const fetchPersonalizedGoals = async (): Promise<PersonalizedGoal[]> => {\n    await new Promise(resolve => setTimeout(resolve, 700));\n    \n    return [\n      {\n        id: '1',\n        title: 'Objectif Cardio Intelligent',\n        description: 'Bas√© sur vos performances, visez 4 s√©ances cardio cette semaine',\n        targetValue: 4,\n        currentValue: 2,\n        unit: 's√©ances',\n        deadline: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000).toISOString(),\n        priority: 'high',\n        category: 'workout',\n        aiGenerated: true,\n      },\n      {\n        id: '2',\n        title: 'Optimisation Sommeil',\n        description: 'Votre r√©cup√©ration serait optimale avec 7.5h de sommeil minimum',\n        targetValue: 7.5,\n        currentValue: 7.1,\n        unit: 'heures',\n        deadline: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(),\n        priority: 'medium',\n        category: 'sleep',\n        aiGenerated: true,\n      },\n    ];\n  };\n\n  // Refresh dashboard data\n  const refreshData = useCallback(() => {\n    fetchDashboardData();\n    toast.success(\"Votre dashboard a √©t√© mis √† jour\");\n  }, [fetchDashboardData]);\n\n  // Mark insight as read\n  const markInsightAsRead = useCallback((insightId: string) => {\n    setState(prev => ({\n      ...prev,\n      insights: prev.insights.filter(insight => insight.id !== insightId),\n    }));\n  }, []);\n\n  // Complete a goal\n  const completeGoal = useCallback((goalId: string) => {\n    setState(prev => ({\n      ...prev,\n      goals: prev.goals.filter(goal => goal.id !== goalId),\n      metrics: {\n        ...prev.metrics,\n        completedGoals: prev.metrics.completedGoals + 1,\n      },\n    }));\n    \n    toast.success(\"üéâ F√©licitations pour avoir atteint votre objectif !\");\n  }, []);\n\n  // Initialize dashboard\n  useEffect(() => {\n    if (user?.id) {\n      fetchDashboardData();\n    }\n  }, [user?.id, fetchDashboardData]);\n\n  return {\n    ...state,\n    refreshData,\n    markInsightAsRead,\n    completeGoal,\n    isLoading: state.loading,\n  };\n};"],"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","ignoreList":[]}