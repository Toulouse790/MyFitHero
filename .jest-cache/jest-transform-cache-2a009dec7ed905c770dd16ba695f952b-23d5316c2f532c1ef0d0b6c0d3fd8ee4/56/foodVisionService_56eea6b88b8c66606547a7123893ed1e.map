{"version":3,"names":["cov_n8o04o6k0","actualCoverage","s","supabase_1","require","FoodVisionService","analyzeFoodWithOpenAI","request","f","startTime","Date","now","prompt","b","getDefaultPrompt","response","fetch","API_BASE","method","headers","getAuthToken","body","JSON","stringify","model","OPENAI_MODEL","messages","role","content","type","text","image_url","url","image","max_tokens","ok","Error","status","data","json","result","parse","choices","message","processing_time_ms","error","console","analyzeFoodWithGoogle","features","maxResults","parseGoogleVisionResponse","fetchUSDANutrition","query","foodName","pageSize","requireAllWords","bestMatch","findBestNutritionMatch","foods","formatUSDANutrition","weight_grams","fetchNutritionixData","formatNutritionixData","analyzeFood","options","visionProvider","nutritionProvider","visionResult","nutritionResult","dataSource","saveAnalysisResult","image_hash","hashImage","detected_food","confidence","nutrition_data","vision_provider","nutrition_provider","labels","labelAnnotations","foodLabels","filter","label","isFoodRelated","description","length","primaryFood","normalizeFoodName","score","details","estimated_portion","additional_items","slice","map","foodKeywords","some","keyword","toLowerCase","includes","name","replace","l","toUpperCase","trim","searchTerm","exactMatch","find","food","weightGrams","nutrients","foodNutrients","getNutrient","nutrientId","nutrient","n","id","amount","factor","calories","Math","round","protein","carbs","fat","fiber","sugar","sodium","portion_size","usda_id","fdcId","toString","source","verified","serving_weight_grams","nf_calories","nf_protein","nf_total_carbohydrate","nf_total_fat","nf_dietary_fiber","nf_sugars","nf_sodium","supabase","from","insert","created_at","toISOString","warn","base64Image","encoder","TextEncoder","encode","hashBuffer","crypto","subtle","digest","hashArray","Array","Uint8Array","padStart","join","session","auth","getSession","access_token","exports","Object","defineProperty","default"],"sources":["/workspaces/MyFitHero/src/features/nutrition/services/foodVisionService.ts"],"sourcesContent":["import { supabase } from '@/lib/supabase';\n\n// Types pour l'analyse IA\nexport interface FoodAnalysisRequest {\n  image: string; // base64\n  prompt?: string;\n  model?: 'openai-vision' | 'google-vision' | 'anthropic-vision';\n}\n\nexport interface FoodAnalysisResponse {\n  foodName: string;\n  confidence: number;\n  details: {\n    estimated_portion: string;\n    preparation_method?: string;\n    additional_items?: string[];\n    ingredients?: string[];\n    cuisine_type?: string;\n  };\n  processing_time_ms: number;\n}\n\nexport interface NutritionDataRequest {\n  foodName: string;\n  dataSource: 'usda' | 'nutritionix' | 'edamam';\n  portion?: string;\n  weight_grams?: number;\n}\n\nexport interface NutritionDataResponse {\n  calories: number;\n  protein: number;\n  carbs: number;\n  fat: number;\n  fiber?: number;\n  sugar?: number;\n  sodium?: number;\n  portion_size: string;\n  weight_grams: number;\n  usda_id?: string;\n  source: string;\n  verified: boolean;\n}\n\n/**\n * Service d'analyse d'images alimentaires avec IA\n */\nexport class FoodVisionService {\n  private static readonly API_BASE = '/api/nutrition';\n  private static readonly OPENAI_MODEL = 'gpt-4-vision-preview';\n  \n  /**\n   * Analyser une image alimentaire avec OpenAI Vision\n   */\n  static async analyzeFoodWithOpenAI(request: FoodAnalysisRequest): Promise<FoodAnalysisResponse> {\n    const startTime = Date.now();\n    \n    try {\n      const prompt = request.prompt || this.getDefaultPrompt();\n      \n      const response = await fetch(`${this.API_BASE}/analyze-openai`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${await this.getAuthToken()}`\n        },\n        body: JSON.stringify({\n          model: this.OPENAI_MODEL,\n          messages: [\n            {\n              role: 'user',\n              content: [\n                {\n                  type: 'text',\n                  text: prompt\n                },\n                {\n                  type: 'image_url',\n                  image_url: {\n                    url: `data:image/jpeg;base64,${request.image}`\n                  }\n                }\n              ]\n            }\n          ],\n          max_tokens: 500\n        })\n      });\n\n      if (!response.ok) {\n        throw new Error(`OpenAI API error: ${response.status}`);\n      }\n\n      const data = await response.json();\n      const result = JSON.parse(data.choices[0].message.content);\n      \n      return {\n        ...result,\n        processing_time_ms: Date.now() - startTime\n      };\n      \n    } catch (error) {\n      console.error('OpenAI analysis error:', error);\n      throw new Error('Failed to analyze food with OpenAI Vision');\n    }\n  }\n\n  /**\n   * Analyser une image alimentaire avec Google Vision\n   */\n  static async analyzeFoodWithGoogle(request: FoodAnalysisRequest): Promise<FoodAnalysisResponse> {\n    const startTime = Date.now();\n    \n    try {\n      const response = await fetch(`${this.API_BASE}/analyze-google`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${await this.getAuthToken()}`\n        },\n        body: JSON.stringify({\n          image: {\n            content: request.image\n          },\n          features: [\n            {\n              type: 'LABEL_DETECTION',\n              maxResults: 10\n            },\n            {\n              type: 'TEXT_DETECTION',\n              maxResults: 5\n            }\n          ]\n        })\n      });\n\n      if (!response.ok) {\n        throw new Error(`Google Vision API error: ${response.status}`);\n      }\n\n      const data = await response.json();\n      const result = this.parseGoogleVisionResponse(data);\n      \n      return {\n        ...result,\n        processing_time_ms: Date.now() - startTime\n      };\n      \n    } catch (error) {\n      console.error('Google Vision analysis error:', error);\n      throw new Error('Failed to analyze food with Google Vision');\n    }\n  }\n\n  /**\n   * Récupérer les données nutritionnelles depuis l'USDA\n   */\n  static async fetchUSDANutrition(request: NutritionDataRequest): Promise<NutritionDataResponse> {\n    try {\n      const response = await fetch(`${this.API_BASE}/usda-lookup`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${await this.getAuthToken()}`\n        },\n        body: JSON.stringify({\n          query: request.foodName,\n          pageSize: 5,\n          requireAllWords: false\n        })\n      });\n\n      if (!response.ok) {\n        throw new Error(`USDA API error: ${response.status}`);\n      }\n\n      const data = await response.json();\n      const bestMatch = this.findBestNutritionMatch(data.foods, request.foodName);\n      \n      if (!bestMatch) {\n        throw new Error('No nutrition data found for this food');\n      }\n\n      return this.formatUSDANutrition(bestMatch, request.weight_grams || 100);\n      \n    } catch (error) {\n      console.error('USDA nutrition error:', error);\n      throw new Error('Failed to fetch nutrition data from USDA');\n    }\n  }\n\n  /**\n   * Récupérer les données nutritionnelles depuis Nutritionix\n   */\n  static async fetchNutritionixData(request: NutritionDataRequest): Promise<NutritionDataResponse> {\n    try {\n      const response = await fetch(`${this.API_BASE}/nutritionix-lookup`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${await this.getAuthToken()}`\n        },\n        body: JSON.stringify({\n          query: request.foodName\n        })\n      });\n\n      if (!response.ok) {\n        throw new Error(`Nutritionix API error: ${response.status}`);\n      }\n\n      const data = await response.json();\n      return this.formatNutritionixData(data.foods[0], request.weight_grams || 100);\n      \n    } catch (error) {\n      console.error('Nutritionix nutrition error:', error);\n      throw new Error('Failed to fetch nutrition data from Nutritionix');\n    }\n  }\n\n  /**\n   * Service complet d'analyse alimentaire\n   */\n  static async analyzeFood(\n    image: string, \n    options: {\n      visionProvider?: 'openai' | 'google';\n      nutritionProvider?: 'usda' | 'nutritionix';\n      portion?: string;\n      weight_grams?: number;\n    } = {}\n  ): Promise<FoodAnalysisResponse & NutritionDataResponse> {\n    const {\n      visionProvider = 'openai',\n      nutritionProvider = 'usda',\n      weight_grams = 100\n    } = options;\n\n    try {\n      // Étape 1: Analyse de l'image\n      const visionResult = visionProvider === 'openai' \n        ? await this.analyzeFoodWithOpenAI({ image })\n        : await this.analyzeFoodWithGoogle({ image });\n\n      // Étape 2: Récupération des données nutritionnelles\n      const nutritionResult = nutritionProvider === 'usda'\n        ? await this.fetchUSDANutrition({ \n            foodName: visionResult.foodName, \n            dataSource: 'usda',\n            weight_grams \n          })\n        : await this.fetchNutritionixData({ \n            foodName: visionResult.foodName, \n            dataSource: 'nutritionix',\n            weight_grams \n          });\n\n      // Étape 3: Sauvegarder dans Supabase pour amélioration continue\n      await this.saveAnalysisResult({\n        image_hash: await this.hashImage(image),\n        detected_food: visionResult.foodName,\n        confidence: visionResult.confidence,\n        nutrition_data: nutritionResult,\n        vision_provider: visionProvider,\n        nutrition_provider: nutritionProvider,\n        processing_time_ms: visionResult.processing_time_ms\n      });\n\n      return {\n        ...visionResult,\n        ...nutritionResult\n      };\n\n    } catch (error) {\n      console.error('Complete food analysis error:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Obtenir le prompt par défaut pour l'analyse alimentaire\n   */\n  private static getDefaultPrompt(): string {\n    return `Analyze this food image and identify the food items. Return a JSON response with:\n{\n  \"foodName\": \"primary food item name (be specific, e.g., 'grilled chicken breast' not just 'chicken')\",\n  \"confidence\": 0.95,\n  \"details\": {\n    \"estimated_portion\": \"portion description (e.g., '1 medium apple', '6 oz chicken breast')\",\n    \"preparation_method\": \"cooking method if visible (e.g., 'grilled', 'fried', 'raw')\",\n    \"additional_items\": [\"list of other items if multiple foods visible\"],\n    \"ingredients\": [\"visible ingredients if applicable\"],\n    \"cuisine_type\": \"cuisine type if identifiable\"\n  }\n}\n\nFocus on foods common in American diet. Be precise about portion sizes and preparation methods.\nIf multiple foods are visible, identify the primary/largest item as the main foodName.\nConfidence should reflect how certain you are about the identification (0.0 to 1.0).`;\n  }\n\n  /**\n   * Parser la réponse de Google Vision\n   */\n  private static parseGoogleVisionResponse(data: any): Omit<FoodAnalysisResponse, 'processing_time_ms'> {\n    const labels = data.labelAnnotations || [];\n    const foodLabels = labels.filter((label: any) => \n      this.isFoodRelated(label.description)\n    );\n\n    if (foodLabels.length === 0) {\n      throw new Error('No food items detected in the image');\n    }\n\n    const primaryFood = foodLabels[0];\n    \n    return {\n      foodName: this.normalizeFoodName(primaryFood.description),\n      confidence: primaryFood.score,\n      details: {\n        estimated_portion: '1 serving',\n        additional_items: foodLabels.slice(1, 3).map((label: any) => label.description)\n      }\n    };\n  }\n\n  /**\n   * Vérifier si un label est lié à la nourriture\n   */\n  private static isFoodRelated(label: string): boolean {\n    const foodKeywords = [\n      'food', 'dish', 'meal', 'fruit', 'vegetable', 'meat', 'chicken', 'beef', \n      'fish', 'bread', 'pasta', 'rice', 'salad', 'soup', 'sandwich', 'pizza',\n      'burger', 'apple', 'banana', 'tomato', 'carrot', 'broccoli', 'cheese'\n    ];\n    \n    return foodKeywords.some(keyword => \n      label.toLowerCase().includes(keyword)\n    );\n  }\n\n  /**\n   * Normaliser le nom d'un aliment\n   */\n  private static normalizeFoodName(name: string): string {\n    return name.toLowerCase()\n      .replace(/\\b\\w/g, l => l.toUpperCase())\n      .trim();\n  }\n\n  /**\n   * Trouver la meilleure correspondance nutritionnelle\n   */\n  private static findBestNutritionMatch(foods: any[], searchTerm: string): any {\n    if (!foods || foods.length === 0) return null;\n    \n    // Prioriser les correspondances exactes\n    const exactMatch = foods.find(food => \n      food.description.toLowerCase() === searchTerm.toLowerCase()\n    );\n    \n    if (exactMatch) return exactMatch;\n    \n    // Sinon, prendre le premier résultat (meilleur score de l'API)\n    return foods[0];\n  }\n\n  /**\n   * Formater les données nutritionnelles USDA\n   */\n  private static formatUSDANutrition(food: any, weightGrams: number): NutritionDataResponse {\n    const nutrients = food.foodNutrients || [];\n    \n    const getNutrient = (nutrientId: number) => {\n      const nutrient = nutrients.find((n: any) => n.nutrient.id === nutrientId);\n      return nutrient ? nutrient.amount : 0;\n    };\n\n    // Convertir pour le poids spécifié (USDA donne pour 100g)\n    const factor = weightGrams / 100;\n\n    return {\n      calories: Math.round(getNutrient(1008) * factor), // Energy\n      protein: Math.round(getNutrient(1003) * factor * 10) / 10, // Protein\n      carbs: Math.round(getNutrient(1005) * factor * 10) / 10, // Carbs\n      fat: Math.round(getNutrient(1004) * factor * 10) / 10, // Fat\n      fiber: Math.round(getNutrient(1079) * factor * 10) / 10, // Fiber\n      sugar: Math.round(getNutrient(2000) * factor * 10) / 10, // Sugars\n      sodium: Math.round(getNutrient(1093) * factor), // Sodium\n      portion_size: `${weightGrams}g`,\n      weight_grams: weightGrams,\n      usda_id: food.fdcId?.toString(),\n      source: 'USDA FoodData Central',\n      verified: true\n    };\n  }\n\n  /**\n   * Formater les données Nutritionix\n   */\n  private static formatNutritionixData(food: any, weightGrams: number): NutritionDataResponse {\n    const factor = weightGrams / (food.serving_weight_grams || 100);\n\n    return {\n      calories: Math.round(food.nf_calories * factor),\n      protein: Math.round(food.nf_protein * factor * 10) / 10,\n      carbs: Math.round(food.nf_total_carbohydrate * factor * 10) / 10,\n      fat: Math.round(food.nf_total_fat * factor * 10) / 10,\n      fiber: Math.round((food.nf_dietary_fiber || 0) * factor * 10) / 10,\n      sugar: Math.round((food.nf_sugars || 0) * factor * 10) / 10,\n      sodium: Math.round((food.nf_sodium || 0) * factor),\n      portion_size: `${weightGrams}g`,\n      weight_grams: weightGrams,\n      source: 'Nutritionix',\n      verified: true\n    };\n  }\n\n  /**\n   * Sauvegarder le résultat d'analyse\n   */\n  private static async saveAnalysisResult(data: any): Promise<void> {\n    try {\n      await supabase.from('food_analysis_logs').insert([{\n        ...data,\n        created_at: new Date().toISOString()\n      }]);\n    } catch (error) {\n      console.warn('Failed to save analysis result:', error);\n      // Non-bloquant\n    }\n  }\n\n  /**\n   * Générer un hash de l'image\n   */\n  private static async hashImage(base64Image: string): Promise<string> {\n    const encoder = new TextEncoder();\n    const data = encoder.encode(base64Image);\n    const hashBuffer = await crypto.subtle.digest('SHA-256', data);\n    const hashArray = Array.from(new Uint8Array(hashBuffer));\n    return hashArray.map(b => b.toString(16).padStart(2, '0')).join('');\n  }\n\n  /**\n   * Obtenir le token d'authentification\n   */\n  private static async getAuthToken(): Promise<string> {\n    const { data: { session } } = await supabase.auth.getSession();\n    return session?.access_token || '';\n  }\n}\n\nexport default FoodVisionService;"],"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","ignoreList":[]}