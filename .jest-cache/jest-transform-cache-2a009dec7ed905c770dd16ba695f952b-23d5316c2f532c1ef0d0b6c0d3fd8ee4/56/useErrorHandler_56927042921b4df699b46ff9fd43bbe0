79983ca76db66f234ab99f1c53d24220
"use strict";

/* istanbul ignore next */
function cov_1c2x07a2ws() {
  var path = "/workspaces/MyFitHero/src/features/auth/hooks/useErrorHandler.ts";
  var hash = "65dbda99ae74a094aa005cdb263a6e12f4a05b96";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/MyFitHero/src/features/auth/hooks/useErrorHandler.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 28
        }
      },
      "2": {
        start: {
          line: 4,
          column: 0
        },
        end: {
          line: 4,
          column: 42
        }
      },
      "3": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 50
        }
      },
      "4": {
        start: {
          line: 6,
          column: 16
        },
        end: {
          line: 6,
          column: 32
        }
      },
      "5": {
        start: {
          line: 7,
          column: 26
        },
        end: {
          line: 7,
          column: 54
        }
      },
      "6": {
        start: {
          line: 13,
          column: 85
        },
        end: {
          line: 13,
          column: 92
        }
      },
      "7": {
        start: {
          line: 14,
          column: 44
        },
        end: {
          line: 14,
          column: 84
        }
      },
      "8": {
        start: {
          line: 16,
          column: 24
        },
        end: {
          line: 22,
          column: 24
        }
      },
      "9": {
        start: {
          line: 16,
          column: 78
        },
        end: {
          line: 22,
          column: 5
        }
      },
      "10": {
        start: {
          line: 24,
          column: 24
        },
        end: {
          line: 56,
          column: 62
        }
      },
      "11": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 40,
          column: 9
        }
      },
      "12": {
        start: {
          line: 27,
          column: 12
        },
        end: {
          line: 30,
          column: 15
        }
      },
      "13": {
        start: {
          line: 32,
          column: 13
        },
        end: {
          line: 40,
          column: 9
        }
      },
      "14": {
        start: {
          line: 33,
          column: 12
        },
        end: {
          line: 33,
          column: 70
        }
      },
      "15": {
        start: {
          line: 36,
          column: 12
        },
        end: {
          line: 39,
          column: 15
        }
      },
      "16": {
        start: {
          line: 42,
          column: 8
        },
        end: {
          line: 44,
          column: 9
        }
      },
      "17": {
        start: {
          line: 43,
          column: 12
        },
        end: {
          line: 43,
          column: 59
        }
      },
      "18": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 48,
          column: 9
        }
      },
      "19": {
        start: {
          line: 47,
          column: 12
        },
        end: {
          line: 47,
          column: 30
        }
      },
      "20": {
        start: {
          line: 50,
          column: 8
        },
        end: {
          line: 52,
          column: 9
        }
      },
      "21": {
        start: {
          line: 54,
          column: 8
        },
        end: {
          line: 54,
          column: 35
        }
      },
      "22": {
        start: {
          line: 55,
          column: 8
        },
        end: {
          line: 55,
          column: 24
        }
      },
      "23": {
        start: {
          line: 58,
          column: 27
        },
        end: {
          line: 96,
          column: 10
        }
      },
      "24": {
        start: {
          line: 59,
          column: 8
        },
        end: {
          line: 95,
          column: 9
        }
      },
      "25": {
        start: {
          line: 61,
          column: 12
        },
        end: {
          line: 68,
          column: 13
        }
      },
      "26": {
        start: {
          line: 62,
          column: 16
        },
        end: {
          line: 67,
          column: 18
        }
      },
      "27": {
        start: {
          line: 70,
          column: 12
        },
        end: {
          line: 79,
          column: 13
        }
      },
      "28": {
        start: {
          line: 71,
          column: 33
        },
        end: {
          line: 71,
          column: 47
        }
      },
      "29": {
        start: {
          line: 72,
          column: 16
        },
        end: {
          line: 78,
          column: 18
        }
      },
      "30": {
        start: {
          line: 81,
          column: 12
        },
        end: {
          line: 89,
          column: 13
        }
      },
      "31": {
        start: {
          line: 82,
          column: 38
        },
        end: {
          line: 82,
          column: 43
        }
      },
      "32": {
        start: {
          line: 83,
          column: 16
        },
        end: {
          line: 88,
          column: 18
        }
      },
      "33": {
        start: {
          line: 90,
          column: 12
        },
        end: {
          line: 90,
          column: 24
        }
      },
      "34": {
        start: {
          line: 94,
          column: 12
        },
        end: {
          line: 94,
          column: 24
        }
      },
      "35": {
        start: {
          line: 98,
          column: 35
        },
        end: {
          line: 105,
          column: 10
        }
      },
      "36": {
        start: {
          line: 99,
          column: 8
        },
        end: {
          line: 100,
          column: 22
        }
      },
      "37": {
        start: {
          line: 100,
          column: 12
        },
        end: {
          line: 100,
          column: 22
        }
      },
      "38": {
        start: {
          line: 101,
          column: 8
        },
        end: {
          line: 103,
          column: 9
        }
      },
      "39": {
        start: {
          line: 102,
          column: 12
        },
        end: {
          line: 102,
          column: 62
        }
      },
      "40": {
        start: {
          line: 104,
          column: 8
        },
        end: {
          line: 104,
          column: 88
        }
      },
      "41": {
        start: {
          line: 104,
          column: 66
        },
        end: {
          line: 104,
          column: 73
        }
      },
      "42": {
        start: {
          line: 107,
          column: 22
        },
        end: {
          line: 117,
          column: 33
        }
      },
      "43": {
        start: {
          line: 108,
          column: 8
        },
        end: {
          line: 116,
          column: 9
        }
      },
      "44": {
        start: {
          line: 109,
          column: 12
        },
        end: {
          line: 109,
          column: 25
        }
      },
      "45": {
        start: {
          line: 110,
          column: 12
        },
        end: {
          line: 110,
          column: 35
        }
      },
      "46": {
        start: {
          line: 114,
          column: 12
        },
        end: {
          line: 114,
          column: 31
        }
      },
      "47": {
        start: {
          line: 115,
          column: 12
        },
        end: {
          line: 115,
          column: 24
        }
      },
      "48": {
        start: {
          line: 118,
          column: 4
        },
        end: {
          line: 126,
          column: 6
        }
      },
      "49": {
        start: {
          line: 129,
          column: 32
        },
        end: {
          line: 129,
          column: 57
        }
      },
      "50": {
        start: {
          line: 130,
          column: 26
        },
        end: {
          line: 132,
          column: 10
        }
      },
      "51": {
        start: {
          line: 131,
          column: 8
        },
        end: {
          line: 131,
          column: 59
        }
      },
      "52": {
        start: {
          line: 131,
          column: 27
        },
        end: {
          line: 131,
          column: 56
        }
      },
      "53": {
        start: {
          line: 133,
          column: 28
        },
        end: {
          line: 139,
          column: 10
        }
      },
      "54": {
        start: {
          line: 134,
          column: 8
        },
        end: {
          line: 138,
          column: 11
        }
      },
      "55": {
        start: {
          line: 135,
          column: 30
        },
        end: {
          line: 135,
          column: 41
        }
      },
      "56": {
        start: {
          line: 136,
          column: 12
        },
        end: {
          line: 136,
          column: 36
        }
      },
      "57": {
        start: {
          line: 137,
          column: 12
        },
        end: {
          line: 137,
          column: 29
        }
      },
      "58": {
        start: {
          line: 140,
          column: 27
        },
        end: {
          line: 142,
          column: 10
        }
      },
      "59": {
        start: {
          line: 141,
          column: 8
        },
        end: {
          line: 141,
          column: 22
        }
      },
      "60": {
        start: {
          line: 143,
          column: 35
        },
        end: {
          line: 149,
          column: 10
        }
      },
      "61": {
        start: {
          line: 144,
          column: 25
        },
        end: {
          line: 147,
          column: 14
        }
      },
      "62": {
        start: {
          line: 145,
          column: 12
        },
        end: {
          line: 145,
          column: 45
        }
      },
      "63": {
        start: {
          line: 146,
          column: 12
        },
        end: {
          line: 146,
          column: 23
        }
      },
      "64": {
        start: {
          line: 148,
          column: 8
        },
        end: {
          line: 148,
          column: 28
        }
      },
      "65": {
        start: {
          line: 150,
          column: 22
        },
        end: {
          line: 150,
          column: 52
        }
      },
      "66": {
        start: {
          line: 151,
          column: 26
        },
        end: {
          line: 153,
          column: 16
        }
      },
      "67": {
        start: {
          line: 152,
          column: 8
        },
        end: {
          line: 152,
          column: 29
        }
      },
      "68": {
        start: {
          line: 154,
          column: 4
        },
        end: {
          line: 162,
          column: 6
        }
      },
      "69": {
        start: {
          line: 165,
          column: 0
        },
        end: {
          line: 209,
          column: 2
        }
      },
      "70": {
        start: {
          line: 168,
          column: 8
        },
        end: {
          line: 171,
          column: 52
        }
      },
      "71": {
        start: {
          line: 175,
          column: 8
        },
        end: {
          line: 178,
          column: 9
        }
      },
      "72": {
        start: {
          line: 176,
          column: 27
        },
        end: {
          line: 176,
          column: 39
        }
      },
      "73": {
        start: {
          line: 177,
          column: 12
        },
        end: {
          line: 177,
          column: 52
        }
      },
      "74": {
        start: {
          line: 179,
          column: 8
        },
        end: {
          line: 179,
          column: 21
        }
      },
      "75": {
        start: {
          line: 183,
          column: 8
        },
        end: {
          line: 185,
          column: 9
        }
      },
      "76": {
        start: {
          line: 184,
          column: 12
        },
        end: {
          line: 184,
          column: 40
        }
      },
      "77": {
        start: {
          line: 186,
          column: 8
        },
        end: {
          line: 186,
          column: 21
        }
      },
      "78": {
        start: {
          line: 190,
          column: 8
        },
        end: {
          line: 191,
          column: 25
        }
      },
      "79": {
        start: {
          line: 191,
          column: 12
        },
        end: {
          line: 191,
          column: 25
        }
      },
      "80": {
        start: {
          line: 192,
          column: 8
        },
        end: {
          line: 193,
          column: 33
        }
      },
      "81": {
        start: {
          line: 193,
          column: 12
        },
        end: {
          line: 193,
          column: 33
        }
      },
      "82": {
        start: {
          line: 194,
          column: 8
        },
        end: {
          line: 199,
          column: 9
        }
      },
      "83": {
        start: {
          line: 195,
          column: 12
        },
        end: {
          line: 196,
          column: 45
        }
      },
      "84": {
        start: {
          line: 196,
          column: 16
        },
        end: {
          line: 196,
          column: 45
        }
      },
      "85": {
        start: {
          line: 197,
          column: 12
        },
        end: {
          line: 198,
          column: 43
        }
      },
      "86": {
        start: {
          line: 198,
          column: 16
        },
        end: {
          line: 198,
          column: 43
        }
      },
      "87": {
        start: {
          line: 200,
          column: 8
        },
        end: {
          line: 200,
          column: 50
        }
      },
      "88": {
        start: {
          line: 203,
          column: 54
        },
        end: {
          line: 208,
          column: 5
        }
      },
      "89": {
        start: {
          line: 210,
          column: 0
        },
        end: {
          line: 210,
          column: 34
        }
      }
    },
    fnMap: {
      "0": {
        name: "useErrorHandler",
        decl: {
          start: {
            line: 12,
            column: 9
          },
          end: {
            line: 12,
            column: 24
          }
        },
        loc: {
          start: {
            line: 12,
            column: 39
          },
          end: {
            line: 127,
            column: 1
          }
        },
        line: 12
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 16,
            column: 49
          },
          end: {
            line: 16,
            column: 50
          }
        },
        loc: {
          start: {
            line: 16,
            column: 78
          },
          end: {
            line: 22,
            column: 5
          }
        },
        line: 16
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 24,
            column: 49
          },
          end: {
            line: 24,
            column: 50
          }
        },
        loc: {
          start: {
            line: 24,
            column: 69
          },
          end: {
            line: 56,
            column: 5
          }
        },
        line: 24
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 58,
            column: 52
          },
          end: {
            line: 58,
            column: 53
          }
        },
        loc: {
          start: {
            line: 58,
            column: 63
          },
          end: {
            line: 96,
            column: 5
          }
        },
        line: 58
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 98,
            column: 60
          },
          end: {
            line: 98,
            column: 61
          }
        },
        loc: {
          start: {
            line: 98,
            column: 72
          },
          end: {
            line: 105,
            column: 5
          }
        },
        line: 98
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 104,
            column: 52
          },
          end: {
            line: 104,
            column: 53
          }
        },
        loc: {
          start: {
            line: 104,
            column: 66
          },
          end: {
            line: 104,
            column: 73
          }
        },
        line: 104
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 107,
            column: 47
          },
          end: {
            line: 107,
            column: 48
          }
        },
        loc: {
          start: {
            line: 107,
            column: 66
          },
          end: {
            line: 117,
            column: 5
          }
        },
        line: 107
      },
      "7": {
        name: "useFormErrorHandler",
        decl: {
          start: {
            line: 128,
            column: 9
          },
          end: {
            line: 128,
            column: 28
          }
        },
        loc: {
          start: {
            line: 128,
            column: 31
          },
          end: {
            line: 163,
            column: 1
          }
        },
        line: 128
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 130,
            column: 51
          },
          end: {
            line: 130,
            column: 52
          }
        },
        loc: {
          start: {
            line: 130,
            column: 71
          },
          end: {
            line: 132,
            column: 5
          }
        },
        line: 130
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 131,
            column: 18
          },
          end: {
            line: 131,
            column: 19
          }
        },
        loc: {
          start: {
            line: 131,
            column: 27
          },
          end: {
            line: 131,
            column: 56
          }
        },
        line: 131
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 133,
            column: 53
          },
          end: {
            line: 133,
            column: 54
          }
        },
        loc: {
          start: {
            line: 133,
            column: 64
          },
          end: {
            line: 139,
            column: 5
          }
        },
        line: 133
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 134,
            column: 18
          },
          end: {
            line: 134,
            column: 19
          }
        },
        loc: {
          start: {
            line: 134,
            column: 26
          },
          end: {
            line: 138,
            column: 9
          }
        },
        line: 134
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 140,
            column: 52
          },
          end: {
            line: 140,
            column: 53
          }
        },
        loc: {
          start: {
            line: 140,
            column: 58
          },
          end: {
            line: 142,
            column: 5
          }
        },
        line: 140
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 143,
            column: 60
          },
          end: {
            line: 143,
            column: 61
          }
        },
        loc: {
          start: {
            line: 143,
            column: 82
          },
          end: {
            line: 149,
            column: 5
          }
        },
        line: 143
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 144,
            column: 49
          },
          end: {
            line: 144,
            column: 50
          }
        },
        loc: {
          start: {
            line: 144,
            column: 65
          },
          end: {
            line: 147,
            column: 9
          }
        },
        line: 144
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 151,
            column: 51
          },
          end: {
            line: 151,
            column: 52
          }
        },
        loc: {
          start: {
            line: 151,
            column: 62
          },
          end: {
            line: 153,
            column: 5
          }
        },
        line: 151
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 167,
            column: 20
          },
          end: {
            line: 167,
            column: 21
          }
        },
        loc: {
          start: {
            line: 167,
            column: 31
          },
          end: {
            line: 172,
            column: 5
          }
        },
        line: 167
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 174,
            column: 17
          },
          end: {
            line: 174,
            column: 18
          }
        },
        loc: {
          start: {
            line: 174,
            column: 28
          },
          end: {
            line: 180,
            column: 5
          }
        },
        line: 174
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 182,
            column: 23
          },
          end: {
            line: 182,
            column: 24
          }
        },
        loc: {
          start: {
            line: 182,
            column: 34
          },
          end: {
            line: 187,
            column: 5
          }
        },
        line: 182
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 189,
            column: 20
          },
          end: {
            line: 189,
            column: 21
          }
        },
        loc: {
          start: {
            line: 189,
            column: 31
          },
          end: {
            line: 201,
            column: 5
          }
        },
        line: 189
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 203,
            column: 25
          },
          end: {
            line: 203,
            column: 26
          }
        },
        loc: {
          start: {
            line: 203,
            column: 54
          },
          end: {
            line: 208,
            column: 5
          }
        },
        line: 203
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 12,
            column: 25
          },
          end: {
            line: 12,
            column: 37
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 12,
            column: 35
          },
          end: {
            line: 12,
            column: 37
          }
        }],
        line: 12
      },
      "1": {
        loc: {
          start: {
            line: 13,
            column: 21
          },
          end: {
            line: 13,
            column: 37
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 13,
            column: 33
          },
          end: {
            line: 13,
            column: 37
          }
        }],
        line: 13
      },
      "2": {
        loc: {
          start: {
            line: 13,
            column: 39
          },
          end: {
            line: 13,
            column: 56
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 13,
            column: 51
          },
          end: {
            line: 13,
            column: 56
          }
        }],
        line: 13
      },
      "3": {
        loc: {
          start: {
            line: 26,
            column: 8
          },
          end: {
            line: 40,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 26,
            column: 8
          },
          end: {
            line: 40,
            column: 9
          }
        }, {
          start: {
            line: 32,
            column: 13
          },
          end: {
            line: 40,
            column: 9
          }
        }],
        line: 26
      },
      "4": {
        loc: {
          start: {
            line: 27,
            column: 35
          },
          end: {
            line: 27,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 27,
            column: 35
          },
          end: {
            line: 27,
            column: 45
          }
        }, {
          start: {
            line: 27,
            column: 49
          },
          end: {
            line: 27,
            column: 63
          }
        }],
        line: 27
      },
      "5": {
        loc: {
          start: {
            line: 32,
            column: 13
          },
          end: {
            line: 40,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 32,
            column: 13
          },
          end: {
            line: 40,
            column: 9
          }
        }, {
          start: {
            line: 35,
            column: 13
          },
          end: {
            line: 40,
            column: 9
          }
        }],
        line: 32
      },
      "6": {
        loc: {
          start: {
            line: 42,
            column: 8
          },
          end: {
            line: 44,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 42,
            column: 8
          },
          end: {
            line: 44,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 42
      },
      "7": {
        loc: {
          start: {
            line: 46,
            column: 8
          },
          end: {
            line: 48,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 46,
            column: 8
          },
          end: {
            line: 48,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 46
      },
      "8": {
        loc: {
          start: {
            line: 50,
            column: 8
          },
          end: {
            line: 52,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 50,
            column: 8
          },
          end: {
            line: 52,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 50
      },
      "9": {
        loc: {
          start: {
            line: 61,
            column: 12
          },
          end: {
            line: 68,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 61,
            column: 12
          },
          end: {
            line: 68,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 61
      },
      "10": {
        loc: {
          start: {
            line: 66,
            column: 31
          },
          end: {
            line: 66,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 66,
            column: 31
          },
          end: {
            line: 66,
            column: 64
          }
        }, {
          start: {
            line: 66,
            column: 68
          },
          end: {
            line: 66,
            column: 77
          }
        }],
        line: 66
      },
      "11": {
        loc: {
          start: {
            line: 70,
            column: 12
          },
          end: {
            line: 79,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 70,
            column: 12
          },
          end: {
            line: 79,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 70
      },
      "12": {
        loc: {
          start: {
            line: 70,
            column: 16
          },
          end: {
            line: 70,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 70,
            column: 16
          },
          end: {
            line: 70,
            column: 21
          }
        }, {
          start: {
            line: 70,
            column: 25
          },
          end: {
            line: 70,
            column: 50
          }
        }, {
          start: {
            line: 70,
            column: 54
          },
          end: {
            line: 70,
            column: 73
          }
        }],
        line: 70
      },
      "13": {
        loc: {
          start: {
            line: 73,
            column: 28
          },
          end: {
            line: 73,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 73,
            column: 28
          },
          end: {
            line: 73,
            column: 44
          }
        }, {
          start: {
            line: 73,
            column: 48
          },
          end: {
            line: 73,
            column: 49
          }
        }],
        line: 73
      },
      "14": {
        loc: {
          start: {
            line: 74,
            column: 32
          },
          end: {
            line: 74,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 74,
            column: 32
          },
          end: {
            line: 74,
            column: 52
          }
        }, {
          start: {
            line: 74,
            column: 56
          },
          end: {
            line: 74,
            column: 65
          }
        }],
        line: 74
      },
      "15": {
        loc: {
          start: {
            line: 75,
            column: 29
          },
          end: {
            line: 75,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 75,
            column: 29
          },
          end: {
            line: 75,
            column: 52
          }
        }, {
          start: {
            line: 75,
            column: 56
          },
          end: {
            line: 75,
            column: 68
          }
        }],
        line: 75
      },
      "16": {
        loc: {
          start: {
            line: 76,
            column: 28
          },
          end: {
            line: 76,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 76,
            column: 28
          },
          end: {
            line: 76,
            column: 50
          }
        }, {
          start: {
            line: 76,
            column: 54
          },
          end: {
            line: 76,
            column: 56
          }
        }],
        line: 76
      },
      "17": {
        loc: {
          start: {
            line: 81,
            column: 12
          },
          end: {
            line: 89,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 81,
            column: 12
          },
          end: {
            line: 89,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 81
      },
      "18": {
        loc: {
          start: {
            line: 81,
            column: 16
          },
          end: {
            line: 81,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 81,
            column: 16
          },
          end: {
            line: 81,
            column: 21
          }
        }, {
          start: {
            line: 81,
            column: 25
          },
          end: {
            line: 81,
            column: 50
          }
        }, {
          start: {
            line: 81,
            column: 54
          },
          end: {
            line: 81,
            column: 69
          }
        }],
        line: 81
      },
      "19": {
        loc: {
          start: {
            line: 84,
            column: 28
          },
          end: {
            line: 84,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 84,
            column: 28
          },
          end: {
            line: 84,
            column: 48
          }
        }, {
          start: {
            line: 84,
            column: 52
          },
          end: {
            line: 84,
            column: 55
          }
        }],
        line: 84
      },
      "20": {
        loc: {
          start: {
            line: 85,
            column: 32
          },
          end: {
            line: 85,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 85,
            column: 32
          },
          end: {
            line: 85,
            column: 56
          }
        }, {
          start: {
            line: 85,
            column: 60
          },
          end: {
            line: 85,
            column: 76
          }
        }],
        line: 85
      },
      "21": {
        loc: {
          start: {
            line: 86,
            column: 29
          },
          end: {
            line: 86,
            column: 81
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 86,
            column: 29
          },
          end: {
            line: 86,
            column: 50
          }
        }, {
          start: {
            line: 86,
            column: 54
          },
          end: {
            line: 86,
            column: 81
          }
        }],
        line: 86
      },
      "22": {
        loc: {
          start: {
            line: 99,
            column: 8
          },
          end: {
            line: 100,
            column: 22
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 99,
            column: 8
          },
          end: {
            line: 100,
            column: 22
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 99
      },
      "23": {
        loc: {
          start: {
            line: 101,
            column: 8
          },
          end: {
            line: 103,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 101,
            column: 8
          },
          end: {
            line: 103,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 101
      },
      "24": {
        loc: {
          start: {
            line: 168,
            column: 16
          },
          end: {
            line: 171,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 168,
            column: 16
          },
          end: {
            line: 168,
            column: 38
          }
        }, {
          start: {
            line: 169,
            column: 13
          },
          end: {
            line: 169,
            column: 44
          }
        }, {
          start: {
            line: 170,
            column: 16
          },
          end: {
            line: 170,
            column: 49
          }
        }, {
          start: {
            line: 171,
            column: 16
          },
          end: {
            line: 171,
            column: 49
          }
        }],
        line: 168
      },
      "25": {
        loc: {
          start: {
            line: 175,
            column: 8
          },
          end: {
            line: 178,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 175,
            column: 8
          },
          end: {
            line: 178,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 175
      },
      "26": {
        loc: {
          start: {
            line: 175,
            column: 12
          },
          end: {
            line: 175,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 175,
            column: 12
          },
          end: {
            line: 175,
            column: 17
          }
        }, {
          start: {
            line: 175,
            column: 21
          },
          end: {
            line: 175,
            column: 46
          }
        }, {
          start: {
            line: 175,
            column: 50
          },
          end: {
            line: 175,
            column: 67
          }
        }],
        line: 175
      },
      "27": {
        loc: {
          start: {
            line: 177,
            column: 19
          },
          end: {
            line: 177,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 177,
            column: 19
          },
          end: {
            line: 177,
            column: 33
          }
        }, {
          start: {
            line: 177,
            column: 37
          },
          end: {
            line: 177,
            column: 51
          }
        }],
        line: 177
      },
      "28": {
        loc: {
          start: {
            line: 183,
            column: 8
          },
          end: {
            line: 185,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 183,
            column: 8
          },
          end: {
            line: 185,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 183
      },
      "29": {
        loc: {
          start: {
            line: 183,
            column: 12
          },
          end: {
            line: 183,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 183,
            column: 12
          },
          end: {
            line: 183,
            column: 17
          }
        }, {
          start: {
            line: 183,
            column: 21
          },
          end: {
            line: 183,
            column: 46
          }
        }, {
          start: {
            line: 183,
            column: 50
          },
          end: {
            line: 183,
            column: 67
          }
        }],
        line: 183
      },
      "30": {
        loc: {
          start: {
            line: 190,
            column: 8
          },
          end: {
            line: 191,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 190,
            column: 8
          },
          end: {
            line: 191,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 190
      },
      "31": {
        loc: {
          start: {
            line: 192,
            column: 8
          },
          end: {
            line: 193,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 192,
            column: 8
          },
          end: {
            line: 193,
            column: 33
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 192
      },
      "32": {
        loc: {
          start: {
            line: 194,
            column: 8
          },
          end: {
            line: 199,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 194,
            column: 8
          },
          end: {
            line: 199,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 194
      },
      "33": {
        loc: {
          start: {
            line: 194,
            column: 12
          },
          end: {
            line: 194,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 194,
            column: 12
          },
          end: {
            line: 194,
            column: 17
          }
        }, {
          start: {
            line: 194,
            column: 21
          },
          end: {
            line: 194,
            column: 46
          }
        }],
        line: 194
      },
      "34": {
        loc: {
          start: {
            line: 195,
            column: 12
          },
          end: {
            line: 196,
            column: 45
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 195,
            column: 12
          },
          end: {
            line: 196,
            column: 45
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 195
      },
      "35": {
        loc: {
          start: {
            line: 197,
            column: 12
          },
          end: {
            line: 198,
            column: 43
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 197,
            column: 12
          },
          end: {
            line: 198,
            column: 43
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 197
      },
      "36": {
        loc: {
          start: {
            line: 204,
            column: 14
          },
          end: {
            line: 204,
            column: 38
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 204,
            column: 14
          },
          end: {
            line: 204,
            column: 18
          }
        }, {
          start: {
            line: 204,
            column: 22
          },
          end: {
            line: 204,
            column: 38
          }
        }],
        line: 204
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0
    },
    b: {
      "0": [0],
      "1": [0],
      "2": [0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0, 0, 0],
      "25": [0, 0],
      "26": [0, 0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0]
    },
    inputSourceMap: {
      file: "/workspaces/MyFitHero/src/features/auth/hooks/useErrorHandler.ts",
      mappings: "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",
      names: [],
      sources: ["/workspaces/MyFitHero/src/features/auth/hooks/useErrorHandler.ts"],
      sourcesContent: ["import React, { useState, useCallback } from 'react';\nimport { useLoadingState } from './useLoadingState';\n\n// Types d'erreurs standardis\xE9s\nexport interface AppError {\n  code: string;\n  message: string;\n  details?: any;\n  timestamp: string;\n  context?: string;\n}\n\nexport interface ValidationError {\n  field: string;\n  message: string;\n  value?: any;\n}\n\nexport interface ApiError {\n  status: number;\n  statusText: string;\n  message: string;\n  errors?: ValidationError[];\n  requestId?: string;\n}\n\n// Types pour le hook\nexport interface UseErrorHandlerOptions {\n  onError?: (error: AppError) => void;\n  logErrors?: boolean;\n  showToast?: boolean;\n  context?: string;\n}\n\nexport interface UseErrorHandlerReturn {\n  error: string | undefined;\n  clearError: () => void;\n  handleError: (error: unknown, context?: string) => AppError;\n  handleApiError: (error: unknown) => ApiError | undefined;\n  handleValidationErrors: (errors: ValidationError[]) => string;\n  wrapAsync: <T>(asyncFn: () => Promise<T>) => Promise<T | null>;\n  createError: (code: string, message: string, details?: any) => AppError;\n}\n\n/**\n * Hook personnalis\xE9 pour la gestion unifi\xE9e des erreurs\n * \xC9limine la duplication des try/catch et normalise les erreurs\n */\nexport function useErrorHandler(options: UseErrorHandlerOptions = {}): UseErrorHandlerReturn {\n  const { onError, logErrors = true, showToast = false, context: globalContext } = options;\n  const { error, setError, clearError } = useLoadingState();\n\n  // Normalise une erreur en AppError\n  const createError = useCallback(\n    (code: string, message: string, details?: any): AppError => ({\n      code,\n      message,\n      details,\n      timestamp: new Date().toISOString(),\n      context: globalContext,\n    }),\n    [globalContext]\n  );\n\n  // G\xE8re une erreur g\xE9n\xE9rique\n  const handleError = useCallback(\n    (error: unknown, context?: string): AppError => {\n      let appError: AppError;\n\n      if (error instanceof Error) {\n        appError = createError(error.name || 'UnknownError', error.message, {\n          stack: error.stack,\n          context,\n        });\n      } else if (typeof error === 'string') {\n        appError = createError('StringError', error, { context });\n      } else {\n        appError = createError('UnknownError', 'Une erreur inconnue est survenue', {\n          originalError: error,\n          context,\n        });\n      }\n\n      // Log l'erreur si activ\xE9\n      if (logErrors) {\n        console.error('\uD83D\uDEA8 Erreur captur\xE9e:', appError);\n      }\n\n      // Callback personnalis\xE9\n      if (onError) {\n        onError(appError);\n      }\n\n      // Toast si activ\xE9 (n\xE9cessite une int\xE9gration avec le syst\xE8me de toast)\n      if (showToast) {\n        // toast.error(appError.message);\n      }\n\n      // Mettre \xE0 jour l'\xE9tat local\n      setError(appError.message);\n\n      return appError;\n    },\n    [createError, logErrors, onError, showToast, setError]\n  );\n\n  // G\xE8re sp\xE9cifiquement les erreurs d'API\n  const handleApiError = useCallback((error: unknown): ApiError | undefined => {\n    try {\n      // Erreur Fetch\n      if (error instanceof Response) {\n        return {\n          status: error.status,\n          statusText: error.statusText,\n          message: `Erreur ${error.status}: ${error.statusText}`,\n          requestId: error.headers.get('x-request-id') || undefined,\n        };\n      }\n\n      // Erreur avec structure API\n      if (error && typeof error === 'object' && 'response' in error) {\n        const response = (error as any).response;\n        return {\n          status: response?.status || 0,\n          statusText: response?.statusText || 'Unknown',\n          message: response?.data?.message || 'Erreur API',\n          errors: response?.data?.errors || [],\n          requestId: response?.headers?.['x-request-id'],\n        };\n      }\n\n      // Erreur Supabase\n      if (error && typeof error === 'object' && 'code' in error) {\n        const supabaseError = error as any;\n        return {\n          status: supabaseError.status || 500,\n          statusText: supabaseError.statusText || 'Supabase Error',\n          message: supabaseError.message || 'Erreur de base de donn\xE9es',\n          requestId: supabaseError.request_id,\n        };\n      }\n\n      return null;\n    } catch (error: any) {\n      // Erreur silencieuse\n      return null;\n    }\n  }, []);\n\n  // G\xE8re les erreurs de validation\n  const handleValidationErrors = useCallback((errors: ValidationError[]): string => {\n    if (errors.length === 0) return '';\n\n    if (errors.length === 1) {\n      return `${errors[0].field}: ${errors[0].message}`;\n    }\n\n    return `Erreurs de validation: ${errors.map((e, index) => e.field).join(', ')}`;\n  }, []);\n\n  // Wrapper pour les fonctions async\n  const wrapAsync = useCallback(\n    async <T>(asyncFn: () => Promise<T>): Promise<T | null> => {\n      try {\n        clearError();\n        return await asyncFn();\n      } catch (error: any) {\n      // Erreur silencieuse\n        handleError(error);\n        return null;\n      }\n    },\n    [clearError, handleError]\n  );\n\n  return {\n    error,\n    clearError,\n    handleError,\n    handleApiError,\n    handleValidationErrors,\n    wrapAsync,\n    createError,\n  };\n}\n\n// Hook sp\xE9cialis\xE9 pour les erreurs de formulaire\nexport interface UseFormErrorHandlerReturn {\n  errors: Record<string, string>;\n  setFieldError: (field: string, message: string) => void;\n  clearFieldError: (field: string) => void;\n  clearAllErrors: () => void;\n  handleValidationErrors: (validationErrors: ValidationError[]) => void;\n  hasErrors: boolean;\n  getFieldError: (field: string) => string | undefined;\n}\n\nexport function useFormErrorHandler(): UseFormErrorHandlerReturn {\n  const [errors, setErrors] = useState<Record<string, string>>({});\n\n  const setFieldError = useCallback((field: string, message: string) => {\n    setErrors(prev => ({ ...prev, [field]: message }));\n  }, []);\n\n  const clearFieldError = useCallback((field: string) => {\n    setErrors(prev => {\n      const newErrors = { ...prev };\n      delete newErrors[field];\n      return newErrors;\n    });\n  }, []);\n\n  const clearAllErrors = useCallback(() => {\n    setErrors({});\n  }, []);\n\n  const handleValidationErrors = useCallback((validationErrors: ValidationError[]) => {\n    const errorMap = validationErrors.reduce(\n      (acc, error) => {\n        acc[error.field] = error.message;\n        return acc;\n      },\n      {} as Record<string, string>\n    );\n\n    setErrors(errorMap);\n  }, []);\n\n  const hasErrors = Object.keys(errors).length > 0;\n\n  const getFieldError = useCallback(\n    (field: string) => {\n      return errors[field];\n    },\n    [errors]\n  );\n\n  return {\n    errors,\n    setFieldError,\n    clearFieldError,\n    clearAllErrors,\n    handleValidationErrors,\n    hasErrors,\n    getFieldError,\n  };\n}\n\n// Utilitaires d'erreur\nexport const ErrorUtils = {\n  // V\xE9rifie si c'est une erreur r\xE9seau\n  isNetworkError: (error: unknown): boolean => {\n    return (\n      error instanceof Error &&\n      (error.message.includes('fetch') ||\n        error.message.includes('network') ||\n        error.message.includes('offline'))\n    );\n  },\n\n  // V\xE9rifie si c'est une erreur d'autorisation\n  isAuthError: (error: unknown): boolean => {\n    if (error && typeof error === 'object' && 'status' in error) {\n      const status = (error as any).status;\n      return status === 401 || status === 403;\n    }\n    return false;\n  },\n\n  // V\xE9rifie si c'est une erreur de validation\n  isValidationError: (error: unknown): boolean => {\n    if (error && typeof error === 'object' && 'status' in error) {\n      return (error as any).status === 422;\n    }\n    return false;\n  },\n\n  // Extrait le message d'erreur le plus utile\n  extractMessage: (error: unknown): string => {\n    if (typeof error === 'string') return error;\n    if (error instanceof Error) return error.message;\n    if (error && typeof error === 'object') {\n      if ('message' in error) return String(error.message);\n      if ('error' in error) return String(error.error);\n    }\n    return 'Une erreur inconnue est survenue';\n  },\n\n  // Cr\xE9e une erreur standardis\xE9e\n  createStandardError: (message: string, code?: string, details?: any): AppError => ({\n    code: code || 'STANDARD_ERROR',\n    message,\n    details,\n    timestamp: new Date().toISOString(),\n  }),\n};\n\nexport default useErrorHandler;\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "65dbda99ae74a094aa005cdb263a6e12f4a05b96"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1c2x07a2ws = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1c2x07a2ws();
cov_1c2x07a2ws().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1c2x07a2ws().s[1]++;
exports.ErrorUtils = void 0;
/* istanbul ignore next */
cov_1c2x07a2ws().s[2]++;
exports.useErrorHandler = useErrorHandler;
/* istanbul ignore next */
cov_1c2x07a2ws().s[3]++;
exports.useFormErrorHandler = useFormErrorHandler;
const react_1 =
/* istanbul ignore next */
(cov_1c2x07a2ws().s[4]++, require("react"));
const useLoadingState_1 =
/* istanbul ignore next */
(cov_1c2x07a2ws().s[5]++, require("./useLoadingState"));
/**
 * Hook personnalisé pour la gestion unifiée des erreurs
 * Élimine la duplication des try/catch et normalise les erreurs
 */
function useErrorHandler(options =
/* istanbul ignore next */
(cov_1c2x07a2ws().b[0][0]++, {})) {
  /* istanbul ignore next */
  cov_1c2x07a2ws().f[0]++;
  const {
    onError,
    logErrors =
    /* istanbul ignore next */
    (cov_1c2x07a2ws().b[1][0]++, true),
    showToast =
    /* istanbul ignore next */
    (cov_1c2x07a2ws().b[2][0]++, false),
    context: globalContext
  } =
  /* istanbul ignore next */
  (cov_1c2x07a2ws().s[6]++, options);
  const {
    error,
    setError,
    clearError
  } =
  /* istanbul ignore next */
  (cov_1c2x07a2ws().s[7]++, (0, useLoadingState_1.useLoadingState)());
  // Normalise une erreur en AppError
  const createError =
  /* istanbul ignore next */
  (cov_1c2x07a2ws().s[8]++, (0, react_1.useCallback)((code, message, details) => {
    /* istanbul ignore next */
    cov_1c2x07a2ws().f[1]++;
    cov_1c2x07a2ws().s[9]++;
    return {
      code,
      message,
      details,
      timestamp: new Date().toISOString(),
      context: globalContext
    };
  }, [globalContext]));
  // Gère une erreur générique
  const handleError =
  /* istanbul ignore next */
  (cov_1c2x07a2ws().s[10]++, (0, react_1.useCallback)((error, context) => {
    /* istanbul ignore next */
    cov_1c2x07a2ws().f[2]++;
    let appError;
    /* istanbul ignore next */
    cov_1c2x07a2ws().s[11]++;
    if (error instanceof Error) {
      /* istanbul ignore next */
      cov_1c2x07a2ws().b[3][0]++;
      cov_1c2x07a2ws().s[12]++;
      appError = createError(
      /* istanbul ignore next */
      (cov_1c2x07a2ws().b[4][0]++, error.name) ||
      /* istanbul ignore next */
      (cov_1c2x07a2ws().b[4][1]++, 'UnknownError'), error.message, {
        stack: error.stack,
        context
      });
    } else {
      /* istanbul ignore next */
      cov_1c2x07a2ws().b[3][1]++;
      cov_1c2x07a2ws().s[13]++;
      if (typeof error === 'string') {
        /* istanbul ignore next */
        cov_1c2x07a2ws().b[5][0]++;
        cov_1c2x07a2ws().s[14]++;
        appError = createError('StringError', error, {
          context
        });
      } else {
        /* istanbul ignore next */
        cov_1c2x07a2ws().b[5][1]++;
        cov_1c2x07a2ws().s[15]++;
        appError = createError('UnknownError', 'Une erreur inconnue est survenue', {
          originalError: error,
          context
        });
      }
    }
    // Log l'erreur si activé
    /* istanbul ignore next */
    cov_1c2x07a2ws().s[16]++;
    if (logErrors) {
      /* istanbul ignore next */
      cov_1c2x07a2ws().b[6][0]++;
      cov_1c2x07a2ws().s[17]++;
      console.error('🚨 Erreur capturée:', appError);
    } else
    /* istanbul ignore next */
    {
      cov_1c2x07a2ws().b[6][1]++;
    }
    // Callback personnalisé
    cov_1c2x07a2ws().s[18]++;
    if (onError) {
      /* istanbul ignore next */
      cov_1c2x07a2ws().b[7][0]++;
      cov_1c2x07a2ws().s[19]++;
      onError(appError);
    } else
    /* istanbul ignore next */
    {
      cov_1c2x07a2ws().b[7][1]++;
    }
    // Toast si activé (nécessite une intégration avec le système de toast)
    cov_1c2x07a2ws().s[20]++;
    if (showToast) {
      /* istanbul ignore next */
      cov_1c2x07a2ws().b[8][0]++;
    } // toast.error(appError.message);
    else
    /* istanbul ignore next */
    {
      cov_1c2x07a2ws().b[8][1]++;
    }
    // Mettre à jour l'état local
    cov_1c2x07a2ws().s[21]++;
    setError(appError.message);
    /* istanbul ignore next */
    cov_1c2x07a2ws().s[22]++;
    return appError;
  }, [createError, logErrors, onError, showToast, setError]));
  // Gère spécifiquement les erreurs d'API
  const handleApiError =
  /* istanbul ignore next */
  (cov_1c2x07a2ws().s[23]++, (0, react_1.useCallback)(error => {
    /* istanbul ignore next */
    cov_1c2x07a2ws().f[3]++;
    cov_1c2x07a2ws().s[24]++;
    try {
      /* istanbul ignore next */
      cov_1c2x07a2ws().s[25]++;
      // Erreur Fetch
      if (error instanceof Response) {
        /* istanbul ignore next */
        cov_1c2x07a2ws().b[9][0]++;
        cov_1c2x07a2ws().s[26]++;
        return {
          status: error.status,
          statusText: error.statusText,
          message: `Erreur ${error.status}: ${error.statusText}`,
          requestId:
          /* istanbul ignore next */
          (cov_1c2x07a2ws().b[10][0]++, error.headers.get('x-request-id')) ||
          /* istanbul ignore next */
          (cov_1c2x07a2ws().b[10][1]++, undefined)
        };
      } else
      /* istanbul ignore next */
      {
        cov_1c2x07a2ws().b[9][1]++;
      }
      // Erreur avec structure API
      cov_1c2x07a2ws().s[27]++;
      if (
      /* istanbul ignore next */
      (cov_1c2x07a2ws().b[12][0]++, error) &&
      /* istanbul ignore next */
      (cov_1c2x07a2ws().b[12][1]++, typeof error === 'object') &&
      /* istanbul ignore next */
      (cov_1c2x07a2ws().b[12][2]++, 'response' in error)) {
        /* istanbul ignore next */
        cov_1c2x07a2ws().b[11][0]++;
        const response =
        /* istanbul ignore next */
        (cov_1c2x07a2ws().s[28]++, error.response);
        /* istanbul ignore next */
        cov_1c2x07a2ws().s[29]++;
        return {
          status:
          /* istanbul ignore next */
          (cov_1c2x07a2ws().b[13][0]++, response?.status) ||
          /* istanbul ignore next */
          (cov_1c2x07a2ws().b[13][1]++, 0),
          statusText:
          /* istanbul ignore next */
          (cov_1c2x07a2ws().b[14][0]++, response?.statusText) ||
          /* istanbul ignore next */
          (cov_1c2x07a2ws().b[14][1]++, 'Unknown'),
          message:
          /* istanbul ignore next */
          (cov_1c2x07a2ws().b[15][0]++, response?.data?.message) ||
          /* istanbul ignore next */
          (cov_1c2x07a2ws().b[15][1]++, 'Erreur API'),
          errors:
          /* istanbul ignore next */
          (cov_1c2x07a2ws().b[16][0]++, response?.data?.errors) ||
          /* istanbul ignore next */
          (cov_1c2x07a2ws().b[16][1]++, []),
          requestId: response?.headers?.['x-request-id']
        };
      } else
      /* istanbul ignore next */
      {
        cov_1c2x07a2ws().b[11][1]++;
      }
      // Erreur Supabase
      cov_1c2x07a2ws().s[30]++;
      if (
      /* istanbul ignore next */
      (cov_1c2x07a2ws().b[18][0]++, error) &&
      /* istanbul ignore next */
      (cov_1c2x07a2ws().b[18][1]++, typeof error === 'object') &&
      /* istanbul ignore next */
      (cov_1c2x07a2ws().b[18][2]++, 'code' in error)) {
        /* istanbul ignore next */
        cov_1c2x07a2ws().b[17][0]++;
        const supabaseError =
        /* istanbul ignore next */
        (cov_1c2x07a2ws().s[31]++, error);
        /* istanbul ignore next */
        cov_1c2x07a2ws().s[32]++;
        return {
          status:
          /* istanbul ignore next */
          (cov_1c2x07a2ws().b[19][0]++, supabaseError.status) ||
          /* istanbul ignore next */
          (cov_1c2x07a2ws().b[19][1]++, 500),
          statusText:
          /* istanbul ignore next */
          (cov_1c2x07a2ws().b[20][0]++, supabaseError.statusText) ||
          /* istanbul ignore next */
          (cov_1c2x07a2ws().b[20][1]++, 'Supabase Error'),
          message:
          /* istanbul ignore next */
          (cov_1c2x07a2ws().b[21][0]++, supabaseError.message) ||
          /* istanbul ignore next */
          (cov_1c2x07a2ws().b[21][1]++, 'Erreur de base de données'),
          requestId: supabaseError.request_id
        };
      } else
      /* istanbul ignore next */
      {
        cov_1c2x07a2ws().b[17][1]++;
      }
      cov_1c2x07a2ws().s[33]++;
      return null;
    } catch (error) {
      /* istanbul ignore next */
      cov_1c2x07a2ws().s[34]++;
      // Erreur silencieuse
      return null;
    }
  }, []));
  // Gère les erreurs de validation
  const handleValidationErrors =
  /* istanbul ignore next */
  (cov_1c2x07a2ws().s[35]++, (0, react_1.useCallback)(errors => {
    /* istanbul ignore next */
    cov_1c2x07a2ws().f[4]++;
    cov_1c2x07a2ws().s[36]++;
    if (errors.length === 0) {
      /* istanbul ignore next */
      cov_1c2x07a2ws().b[22][0]++;
      cov_1c2x07a2ws().s[37]++;
      return '';
    } else
    /* istanbul ignore next */
    {
      cov_1c2x07a2ws().b[22][1]++;
    }
    cov_1c2x07a2ws().s[38]++;
    if (errors.length === 1) {
      /* istanbul ignore next */
      cov_1c2x07a2ws().b[23][0]++;
      cov_1c2x07a2ws().s[39]++;
      return `${errors[0].field}: ${errors[0].message}`;
    } else
    /* istanbul ignore next */
    {
      cov_1c2x07a2ws().b[23][1]++;
    }
    cov_1c2x07a2ws().s[40]++;
    return `Erreurs de validation: ${errors.map((e, index) => {
      /* istanbul ignore next */
      cov_1c2x07a2ws().f[5]++;
      cov_1c2x07a2ws().s[41]++;
      return e.field;
    }).join(', ')}`;
  }, []));
  // Wrapper pour les fonctions async
  const wrapAsync =
  /* istanbul ignore next */
  (cov_1c2x07a2ws().s[42]++, (0, react_1.useCallback)(async asyncFn => {
    /* istanbul ignore next */
    cov_1c2x07a2ws().f[6]++;
    cov_1c2x07a2ws().s[43]++;
    try {
      /* istanbul ignore next */
      cov_1c2x07a2ws().s[44]++;
      clearError();
      /* istanbul ignore next */
      cov_1c2x07a2ws().s[45]++;
      return await asyncFn();
    } catch (error) {
      /* istanbul ignore next */
      cov_1c2x07a2ws().s[46]++;
      // Erreur silencieuse
      handleError(error);
      /* istanbul ignore next */
      cov_1c2x07a2ws().s[47]++;
      return null;
    }
  }, [clearError, handleError]));
  /* istanbul ignore next */
  cov_1c2x07a2ws().s[48]++;
  return {
    error,
    clearError,
    handleError,
    handleApiError,
    handleValidationErrors,
    wrapAsync,
    createError
  };
}
function useFormErrorHandler() {
  /* istanbul ignore next */
  cov_1c2x07a2ws().f[7]++;
  const [errors, setErrors] =
  /* istanbul ignore next */
  (cov_1c2x07a2ws().s[49]++, (0, react_1.useState)({}));
  const setFieldError =
  /* istanbul ignore next */
  (cov_1c2x07a2ws().s[50]++, (0, react_1.useCallback)((field, message) => {
    /* istanbul ignore next */
    cov_1c2x07a2ws().f[8]++;
    cov_1c2x07a2ws().s[51]++;
    setErrors(prev => {
      /* istanbul ignore next */
      cov_1c2x07a2ws().f[9]++;
      cov_1c2x07a2ws().s[52]++;
      return {
        ...prev,
        [field]: message
      };
    });
  }, []));
  const clearFieldError =
  /* istanbul ignore next */
  (cov_1c2x07a2ws().s[53]++, (0, react_1.useCallback)(field => {
    /* istanbul ignore next */
    cov_1c2x07a2ws().f[10]++;
    cov_1c2x07a2ws().s[54]++;
    setErrors(prev => {
      /* istanbul ignore next */
      cov_1c2x07a2ws().f[11]++;
      const newErrors =
      /* istanbul ignore next */
      (cov_1c2x07a2ws().s[55]++, {
        ...prev
      });
      /* istanbul ignore next */
      cov_1c2x07a2ws().s[56]++;
      delete newErrors[field];
      /* istanbul ignore next */
      cov_1c2x07a2ws().s[57]++;
      return newErrors;
    });
  }, []));
  const clearAllErrors =
  /* istanbul ignore next */
  (cov_1c2x07a2ws().s[58]++, (0, react_1.useCallback)(() => {
    /* istanbul ignore next */
    cov_1c2x07a2ws().f[12]++;
    cov_1c2x07a2ws().s[59]++;
    setErrors({});
  }, []));
  const handleValidationErrors =
  /* istanbul ignore next */
  (cov_1c2x07a2ws().s[60]++, (0, react_1.useCallback)(validationErrors => {
    /* istanbul ignore next */
    cov_1c2x07a2ws().f[13]++;
    const errorMap =
    /* istanbul ignore next */
    (cov_1c2x07a2ws().s[61]++, validationErrors.reduce((acc, error) => {
      /* istanbul ignore next */
      cov_1c2x07a2ws().f[14]++;
      cov_1c2x07a2ws().s[62]++;
      acc[error.field] = error.message;
      /* istanbul ignore next */
      cov_1c2x07a2ws().s[63]++;
      return acc;
    }, {}));
    /* istanbul ignore next */
    cov_1c2x07a2ws().s[64]++;
    setErrors(errorMap);
  }, []));
  const hasErrors =
  /* istanbul ignore next */
  (cov_1c2x07a2ws().s[65]++, Object.keys(errors).length > 0);
  const getFieldError =
  /* istanbul ignore next */
  (cov_1c2x07a2ws().s[66]++, (0, react_1.useCallback)(field => {
    /* istanbul ignore next */
    cov_1c2x07a2ws().f[15]++;
    cov_1c2x07a2ws().s[67]++;
    return errors[field];
  }, [errors]));
  /* istanbul ignore next */
  cov_1c2x07a2ws().s[68]++;
  return {
    errors,
    setFieldError,
    clearFieldError,
    clearAllErrors,
    handleValidationErrors,
    hasErrors,
    getFieldError
  };
}
// Utilitaires d'erreur
/* istanbul ignore next */
cov_1c2x07a2ws().s[69]++;
exports.ErrorUtils = {
  // Vérifie si c'est une erreur réseau
  isNetworkError: error => {
    /* istanbul ignore next */
    cov_1c2x07a2ws().f[16]++;
    cov_1c2x07a2ws().s[70]++;
    return /* istanbul ignore next */(cov_1c2x07a2ws().b[24][0]++, error instanceof Error) && (
    /* istanbul ignore next */
    (cov_1c2x07a2ws().b[24][1]++, error.message.includes('fetch')) ||
    /* istanbul ignore next */
    (cov_1c2x07a2ws().b[24][2]++, error.message.includes('network')) ||
    /* istanbul ignore next */
    (cov_1c2x07a2ws().b[24][3]++, error.message.includes('offline')));
  },
  // Vérifie si c'est une erreur d'autorisation
  isAuthError: error => {
    /* istanbul ignore next */
    cov_1c2x07a2ws().f[17]++;
    cov_1c2x07a2ws().s[71]++;
    if (
    /* istanbul ignore next */
    (cov_1c2x07a2ws().b[26][0]++, error) &&
    /* istanbul ignore next */
    (cov_1c2x07a2ws().b[26][1]++, typeof error === 'object') &&
    /* istanbul ignore next */
    (cov_1c2x07a2ws().b[26][2]++, 'status' in error)) {
      /* istanbul ignore next */
      cov_1c2x07a2ws().b[25][0]++;
      const status =
      /* istanbul ignore next */
      (cov_1c2x07a2ws().s[72]++, error.status);
      /* istanbul ignore next */
      cov_1c2x07a2ws().s[73]++;
      return /* istanbul ignore next */(cov_1c2x07a2ws().b[27][0]++, status === 401) ||
      /* istanbul ignore next */
      (cov_1c2x07a2ws().b[27][1]++, status === 403);
    } else
    /* istanbul ignore next */
    {
      cov_1c2x07a2ws().b[25][1]++;
    }
    cov_1c2x07a2ws().s[74]++;
    return false;
  },
  // Vérifie si c'est une erreur de validation
  isValidationError: error => {
    /* istanbul ignore next */
    cov_1c2x07a2ws().f[18]++;
    cov_1c2x07a2ws().s[75]++;
    if (
    /* istanbul ignore next */
    (cov_1c2x07a2ws().b[29][0]++, error) &&
    /* istanbul ignore next */
    (cov_1c2x07a2ws().b[29][1]++, typeof error === 'object') &&
    /* istanbul ignore next */
    (cov_1c2x07a2ws().b[29][2]++, 'status' in error)) {
      /* istanbul ignore next */
      cov_1c2x07a2ws().b[28][0]++;
      cov_1c2x07a2ws().s[76]++;
      return error.status === 422;
    } else
    /* istanbul ignore next */
    {
      cov_1c2x07a2ws().b[28][1]++;
    }
    cov_1c2x07a2ws().s[77]++;
    return false;
  },
  // Extrait le message d'erreur le plus utile
  extractMessage: error => {
    /* istanbul ignore next */
    cov_1c2x07a2ws().f[19]++;
    cov_1c2x07a2ws().s[78]++;
    if (typeof error === 'string') {
      /* istanbul ignore next */
      cov_1c2x07a2ws().b[30][0]++;
      cov_1c2x07a2ws().s[79]++;
      return error;
    } else
    /* istanbul ignore next */
    {
      cov_1c2x07a2ws().b[30][1]++;
    }
    cov_1c2x07a2ws().s[80]++;
    if (error instanceof Error) {
      /* istanbul ignore next */
      cov_1c2x07a2ws().b[31][0]++;
      cov_1c2x07a2ws().s[81]++;
      return error.message;
    } else
    /* istanbul ignore next */
    {
      cov_1c2x07a2ws().b[31][1]++;
    }
    cov_1c2x07a2ws().s[82]++;
    if (
    /* istanbul ignore next */
    (cov_1c2x07a2ws().b[33][0]++, error) &&
    /* istanbul ignore next */
    (cov_1c2x07a2ws().b[33][1]++, typeof error === 'object')) {
      /* istanbul ignore next */
      cov_1c2x07a2ws().b[32][0]++;
      cov_1c2x07a2ws().s[83]++;
      if ('message' in error) {
        /* istanbul ignore next */
        cov_1c2x07a2ws().b[34][0]++;
        cov_1c2x07a2ws().s[84]++;
        return String(error.message);
      } else
      /* istanbul ignore next */
      {
        cov_1c2x07a2ws().b[34][1]++;
      }
      cov_1c2x07a2ws().s[85]++;
      if ('error' in error) {
        /* istanbul ignore next */
        cov_1c2x07a2ws().b[35][0]++;
        cov_1c2x07a2ws().s[86]++;
        return String(error.error);
      } else
      /* istanbul ignore next */
      {
        cov_1c2x07a2ws().b[35][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_1c2x07a2ws().b[32][1]++;
    }
    cov_1c2x07a2ws().s[87]++;
    return 'Une erreur inconnue est survenue';
  },
  // Crée une erreur standardisée
  createStandardError: (message, code, details) => {
    /* istanbul ignore next */
    cov_1c2x07a2ws().f[20]++;
    cov_1c2x07a2ws().s[88]++;
    return {
      code:
      /* istanbul ignore next */
      (cov_1c2x07a2ws().b[36][0]++, code) ||
      /* istanbul ignore next */
      (cov_1c2x07a2ws().b[36][1]++, 'STANDARD_ERROR'),
      message,
      details,
      timestamp: new Date().toISOString()
    };
  }
};
/* istanbul ignore next */
cov_1c2x07a2ws().s[89]++;
exports.default = useErrorHandler;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,