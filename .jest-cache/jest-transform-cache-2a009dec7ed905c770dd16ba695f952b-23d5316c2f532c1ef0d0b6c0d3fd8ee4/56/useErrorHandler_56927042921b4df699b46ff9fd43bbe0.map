{"version":3,"names":["cov_1c2x07a2ws","actualCoverage","s","exports","useErrorHandler","useFormErrorHandler","react_1","require","useLoadingState_1","options","b","f","onError","logErrors","showToast","context","globalContext","error","setError","clearError","useLoadingState","createError","useCallback","code","message","details","timestamp","Date","toISOString","handleError","appError","Error","name","stack","originalError","console","handleApiError","Response","status","statusText","requestId","headers","get","undefined","response","data","errors","supabaseError","request_id","handleValidationErrors","length","field","map","e","index","join","wrapAsync","asyncFn","setErrors","useState","setFieldError","prev","clearFieldError","newErrors","clearAllErrors","validationErrors","errorMap","reduce","acc","hasErrors","Object","keys","getFieldError","ErrorUtils","isNetworkError","includes","isAuthError","isValidationError","extractMessage","String","createStandardError","default"],"sources":["/workspaces/MyFitHero/src/features/auth/hooks/useErrorHandler.ts"],"sourcesContent":["import React, { useState, useCallback } from 'react';\nimport { useLoadingState } from './useLoadingState';\n\n// Types d'erreurs standardis√©s\nexport interface AppError {\n  code: string;\n  message: string;\n  details?: any;\n  timestamp: string;\n  context?: string;\n}\n\nexport interface ValidationError {\n  field: string;\n  message: string;\n  value?: any;\n}\n\nexport interface ApiError {\n  status: number;\n  statusText: string;\n  message: string;\n  errors?: ValidationError[];\n  requestId?: string;\n}\n\n// Types pour le hook\nexport interface UseErrorHandlerOptions {\n  onError?: (error: AppError) => void;\n  logErrors?: boolean;\n  showToast?: boolean;\n  context?: string;\n}\n\nexport interface UseErrorHandlerReturn {\n  error: string | undefined;\n  clearError: () => void;\n  handleError: (error: unknown, context?: string) => AppError;\n  handleApiError: (error: unknown) => ApiError | undefined;\n  handleValidationErrors: (errors: ValidationError[]) => string;\n  wrapAsync: <T>(asyncFn: () => Promise<T>) => Promise<T | null>;\n  createError: (code: string, message: string, details?: any) => AppError;\n}\n\n/**\n * Hook personnalis√© pour la gestion unifi√©e des erreurs\n * √âlimine la duplication des try/catch et normalise les erreurs\n */\nexport function useErrorHandler(options: UseErrorHandlerOptions = {}): UseErrorHandlerReturn {\n  const { onError, logErrors = true, showToast = false, context: globalContext } = options;\n  const { error, setError, clearError } = useLoadingState();\n\n  // Normalise une erreur en AppError\n  const createError = useCallback(\n    (code: string, message: string, details?: any): AppError => ({\n      code,\n      message,\n      details,\n      timestamp: new Date().toISOString(),\n      context: globalContext,\n    }),\n    [globalContext]\n  );\n\n  // G√®re une erreur g√©n√©rique\n  const handleError = useCallback(\n    (error: unknown, context?: string): AppError => {\n      let appError: AppError;\n\n      if (error instanceof Error) {\n        appError = createError(error.name || 'UnknownError', error.message, {\n          stack: error.stack,\n          context,\n        });\n      } else if (typeof error === 'string') {\n        appError = createError('StringError', error, { context });\n      } else {\n        appError = createError('UnknownError', 'Une erreur inconnue est survenue', {\n          originalError: error,\n          context,\n        });\n      }\n\n      // Log l'erreur si activ√©\n      if (logErrors) {\n        console.error('üö® Erreur captur√©e:', appError);\n      }\n\n      // Callback personnalis√©\n      if (onError) {\n        onError(appError);\n      }\n\n      // Toast si activ√© (n√©cessite une int√©gration avec le syst√®me de toast)\n      if (showToast) {\n        // toast.error(appError.message);\n      }\n\n      // Mettre √† jour l'√©tat local\n      setError(appError.message);\n\n      return appError;\n    },\n    [createError, logErrors, onError, showToast, setError]\n  );\n\n  // G√®re sp√©cifiquement les erreurs d'API\n  const handleApiError = useCallback((error: unknown): ApiError | undefined => {\n    try {\n      // Erreur Fetch\n      if (error instanceof Response) {\n        return {\n          status: error.status,\n          statusText: error.statusText,\n          message: `Erreur ${error.status}: ${error.statusText}`,\n          requestId: error.headers.get('x-request-id') || undefined,\n        };\n      }\n\n      // Erreur avec structure API\n      if (error && typeof error === 'object' && 'response' in error) {\n        const response = (error as any).response;\n        return {\n          status: response?.status || 0,\n          statusText: response?.statusText || 'Unknown',\n          message: response?.data?.message || 'Erreur API',\n          errors: response?.data?.errors || [],\n          requestId: response?.headers?.['x-request-id'],\n        };\n      }\n\n      // Erreur Supabase\n      if (error && typeof error === 'object' && 'code' in error) {\n        const supabaseError = error as any;\n        return {\n          status: supabaseError.status || 500,\n          statusText: supabaseError.statusText || 'Supabase Error',\n          message: supabaseError.message || 'Erreur de base de donn√©es',\n          requestId: supabaseError.request_id,\n        };\n      }\n\n      return null;\n    } catch (error: any) {\n      // Erreur silencieuse\n      return null;\n    }\n  }, []);\n\n  // G√®re les erreurs de validation\n  const handleValidationErrors = useCallback((errors: ValidationError[]): string => {\n    if (errors.length === 0) return '';\n\n    if (errors.length === 1) {\n      return `${errors[0].field}: ${errors[0].message}`;\n    }\n\n    return `Erreurs de validation: ${errors.map((e, index) => e.field).join(', ')}`;\n  }, []);\n\n  // Wrapper pour les fonctions async\n  const wrapAsync = useCallback(\n    async <T>(asyncFn: () => Promise<T>): Promise<T | null> => {\n      try {\n        clearError();\n        return await asyncFn();\n      } catch (error: any) {\n      // Erreur silencieuse\n        handleError(error);\n        return null;\n      }\n    },\n    [clearError, handleError]\n  );\n\n  return {\n    error,\n    clearError,\n    handleError,\n    handleApiError,\n    handleValidationErrors,\n    wrapAsync,\n    createError,\n  };\n}\n\n// Hook sp√©cialis√© pour les erreurs de formulaire\nexport interface UseFormErrorHandlerReturn {\n  errors: Record<string, string>;\n  setFieldError: (field: string, message: string) => void;\n  clearFieldError: (field: string) => void;\n  clearAllErrors: () => void;\n  handleValidationErrors: (validationErrors: ValidationError[]) => void;\n  hasErrors: boolean;\n  getFieldError: (field: string) => string | undefined;\n}\n\nexport function useFormErrorHandler(): UseFormErrorHandlerReturn {\n  const [errors, setErrors] = useState<Record<string, string>>({});\n\n  const setFieldError = useCallback((field: string, message: string) => {\n    setErrors(prev => ({ ...prev, [field]: message }));\n  }, []);\n\n  const clearFieldError = useCallback((field: string) => {\n    setErrors(prev => {\n      const newErrors = { ...prev };\n      delete newErrors[field];\n      return newErrors;\n    });\n  }, []);\n\n  const clearAllErrors = useCallback(() => {\n    setErrors({});\n  }, []);\n\n  const handleValidationErrors = useCallback((validationErrors: ValidationError[]) => {\n    const errorMap = validationErrors.reduce(\n      (acc, error) => {\n        acc[error.field] = error.message;\n        return acc;\n      },\n      {} as Record<string, string>\n    );\n\n    setErrors(errorMap);\n  }, []);\n\n  const hasErrors = Object.keys(errors).length > 0;\n\n  const getFieldError = useCallback(\n    (field: string) => {\n      return errors[field];\n    },\n    [errors]\n  );\n\n  return {\n    errors,\n    setFieldError,\n    clearFieldError,\n    clearAllErrors,\n    handleValidationErrors,\n    hasErrors,\n    getFieldError,\n  };\n}\n\n// Utilitaires d'erreur\nexport const ErrorUtils = {\n  // V√©rifie si c'est une erreur r√©seau\n  isNetworkError: (error: unknown): boolean => {\n    return (\n      error instanceof Error &&\n      (error.message.includes('fetch') ||\n        error.message.includes('network') ||\n        error.message.includes('offline'))\n    );\n  },\n\n  // V√©rifie si c'est une erreur d'autorisation\n  isAuthError: (error: unknown): boolean => {\n    if (error && typeof error === 'object' && 'status' in error) {\n      const status = (error as any).status;\n      return status === 401 || status === 403;\n    }\n    return false;\n  },\n\n  // V√©rifie si c'est une erreur de validation\n  isValidationError: (error: unknown): boolean => {\n    if (error && typeof error === 'object' && 'status' in error) {\n      return (error as any).status === 422;\n    }\n    return false;\n  },\n\n  // Extrait le message d'erreur le plus utile\n  extractMessage: (error: unknown): string => {\n    if (typeof error === 'string') return error;\n    if (error instanceof Error) return error.message;\n    if (error && typeof error === 'object') {\n      if ('message' in error) return String(error.message);\n      if ('error' in error) return String(error.error);\n    }\n    return 'Une erreur inconnue est survenue';\n  },\n\n  // Cr√©e une erreur standardis√©e\n  createStandardError: (message: string, code?: string, details?: any): AppError => ({\n    code: code || 'STANDARD_ERROR',\n    message,\n    details,\n    timestamp: new Date().toISOString(),\n  }),\n};\n\nexport default useErrorHandler;\n"],"mappingsqDQ;IAAAA,cAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,cAAA;AAAAA,cAAA,GAAAE,CAAA;;;;;;;;;AALRC,OAAA,CAAAC,eAAA,GAAAA,eAAA;AAwIC;AAAAJ,cAAA,GAAAE,CAAA;AAaDC,OAAA,CAAAE,mBAAA,GAAAA,mBAAA;AArMA,MAAAC,OAAA;AAAA;AAAA,CAAAN,cAAA,GAAAE,CAAA,OAAAK,OAAA;AACA,MAAAC,iBAAA;AAAA;AAAA,CAAAR,cAAA,GAAAE,CAAA,OAAAK,OAAA;AA2CA;;;;AAIA,SAAgBH,eAAeA,CAACK,OAAA;AAAA;AAAA,CAAAT,cAAA,GAAAU,CAAA,UAAkC,EAAE;EAAA;EAAAV,cAAA,GAAAW,CAAA;EAClE,MAAM;IAAEC,OAAO;IAAEC,SAAS;IAAA;IAAA,CAAAb,cAAA,GAAAU,CAAA,UAAG,IAAI;IAAEI,SAAS;IAAA;IAAA,CAAAd,cAAA,GAAAU,CAAA,UAAG,KAAK;IAAEK,OAAO,EAAEC;EAAa,CAAE;EAAA;EAAA,CAAAhB,cAAA,GAAAE,CAAA,OAAGO,OAAO;EACxF,MAAM;IAAEQ,KAAK;IAAEC,QAAQ;IAAEC;EAAU,CAAE;EAAA;EAAA,CAAAnB,cAAA,GAAAE,CAAA,OAAG,IAAAM,iBAAA,CAAAY,eAAe,GAAE;EAEzD;EACA,MAAMC,WAAW;EAAA;EAAA,CAAArB,cAAA,GAAAE,CAAA,OAAG,IAAAI,OAAA,CAAAgB,WAAW,EAC7B,CAACC,IAAY,EAAEC,OAAe,EAAEC,OAAa,KAAgB;IAAA;IAAAzB,cAAA,GAAAW,CAAA;IAAAX,cAAA,GAAAE,CAAA;IAAA;MAC3DqB,IAAI;MACJC,OAAO;MACPC,OAAO;MACPC,SAAS,EAAE,IAAIC,IAAI,EAAE,CAACC,WAAW,EAAE;MACnCb,OAAO,EAAEC;KACV;GAAC,EACF,CAACA,aAAa,CAAC,CAChB;EAED;EACA,MAAMa,WAAW;EAAA;EAAA,CAAA7B,cAAA,GAAAE,CAAA,QAAG,IAAAI,OAAA,CAAAgB,WAAW,EAC7B,CAACL,KAAc,EAAEF,OAAgB,KAAc;IAAA;IAAAf,cAAA,GAAAW,CAAA;IAC7C,IAAImB,QAAkB;IAAC;IAAA9B,cAAA,GAAAE,CAAA;IAEvB,IAAIe,KAAK,YAAYc,KAAK,EAAE;MAAA;MAAA/B,cAAA,GAAAU,CAAA;MAAAV,cAAA,GAAAE,CAAA;MAC1B4B,QAAQ,GAAGT,WAAW;MAAC;MAAA,CAAArB,cAAA,GAAAU,CAAA,UAAAO,KAAK,CAACe,IAAI;MAAA;MAAA,CAAAhC,cAAA,GAAAU,CAAA,UAAI,cAAc,GAAEO,KAAK,CAACO,OAAO,EAAE;QAClES,KAAK,EAAEhB,KAAK,CAACgB,KAAK;QAClBlB;OACD,CAAC;IACJ,CAAC,MAAM;MAAA;MAAAf,cAAA,GAAAU,CAAA;MAAAV,cAAA,GAAAE,CAAA;MAAA,IAAI,OAAOe,KAAK,KAAK,QAAQ,EAAE;QAAA;QAAAjB,cAAA,GAAAU,CAAA;QAAAV,cAAA,GAAAE,CAAA;QACpC4B,QAAQ,GAAGT,WAAW,CAAC,aAAa,EAAEJ,KAAK,EAAE;UAAEF;QAAO,CAAE,CAAC;MAC3D,CAAC,MAAM;QAAA;QAAAf,cAAA,GAAAU,CAAA;QAAAV,cAAA,GAAAE,CAAA;QACL4B,QAAQ,GAAGT,WAAW,CAAC,cAAc,EAAE,kCAAkC,EAAE;UACzEa,aAAa,EAAEjB,KAAK;UACpBF;SACD,CAAC;MACJ;IAAA;IAEA;IAAA;IAAAf,cAAA,GAAAE,CAAA;IACA,IAAIW,SAAS,EAAE;MAAA;MAAAb,cAAA,GAAAU,CAAA;MAAAV,cAAA,GAAAE,CAAA;MACbiC,OAAO,CAAClB,KAAK,CAAC,qBAAqB,EAAEa,QAAQ,CAAC;IAChD,CAAC;IAAA;IAAA;MAAA9B,cAAA,GAAAU,CAAA;IAAA;IAED;IAAAV,cAAA,GAAAE,CAAA;IACA,IAAIU,OAAO,EAAE;MAAA;MAAAZ,cAAA,GAAAU,CAAA;MAAAV,cAAA,GAAAE,CAAA;MACXU,OAAO,CAACkB,QAAQ,CAAC;IACnB,CAAC;IAAA;IAAA;MAAA9B,cAAA,GAAAU,CAAA;IAAA;IAED;IAAAV,cAAA,GAAAE,CAAA;IACA,IAAIY,SAAS,EAAE;MAAA;MAAAd,cAAA,GAAAU,CAAA;IAEf,CAAC,CADC;IAAA;IAAA;IAAA;MAAAV,cAAA,GAAAU,CAAA;IAAA;IAGF;IAAAV,cAAA,GAAAE,CAAA;IACAgB,QAAQ,CAACY,QAAQ,CAACN,OAAO,CAAC;IAAC;IAAAxB,cAAA,GAAAE,CAAA;IAE3B,OAAO4B,QAAQ;EACjB,CAAC,EACD,CAACT,WAAW,EAAER,SAAS,EAAED,OAAO,EAAEE,SAAS,EAAEI,QAAQ,CAAC,CACvD;EAED;EACA,MAAMkB,cAAc;EAAA;EAAA,CAAApC,cAAA,GAAAE,CAAA,QAAG,IAAAI,OAAA,CAAAgB,WAAW,EAAEL,KAAc,IAA0B;IAAA;IAAAjB,cAAA,GAAAW,CAAA;IAAAX,cAAA,GAAAE,CAAA;IAC1E,IAAI;MAAA;MAAAF,cAAA,GAAAE,CAAA;MACF;MACA,IAAIe,KAAK,YAAYoB,QAAQ,EAAE;QAAA;QAAArC,cAAA,GAAAU,CAAA;QAAAV,cAAA,GAAAE,CAAA;QAC7B,OAAO;UACLoC,MAAM,EAAErB,KAAK,CAACqB,MAAM;UACpBC,UAAU,EAAEtB,KAAK,CAACsB,UAAU;UAC5Bf,OAAO,EAAE,UAAUP,KAAK,CAACqB,MAAM,KAAKrB,KAAK,CAACsB,UAAU,EAAE;UACtDC,SAAS;UAAE;UAAA,CAAAxC,cAAA,GAAAU,CAAA,WAAAO,KAAK,CAACwB,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;UAAA;UAAA,CAAA1C,cAAA,GAAAU,CAAA,WAAIiC,SAAS;SAC1D;MACH,CAAC;MAAA;MAAA;QAAA3C,cAAA,GAAAU,CAAA;MAAA;MAED;MAAAV,cAAA,GAAAE,CAAA;MACA;MAAI;MAAA,CAAAF,cAAA,GAAAU,CAAA,WAAAO,KAAK;MAAA;MAAA,CAAAjB,cAAA,GAAAU,CAAA,WAAI,OAAOO,KAAK,KAAK,QAAQ;MAAA;MAAA,CAAAjB,cAAA,GAAAU,CAAA,WAAI,UAAU,IAAIO,KAAK,GAAE;QAAA;QAAAjB,cAAA,GAAAU,CAAA;QAC7D,MAAMkC,QAAQ;QAAA;QAAA,CAAA5C,cAAA,GAAAE,CAAA,QAAIe,KAAa,CAAC2B,QAAQ;QAAC;QAAA5C,cAAA,GAAAE,CAAA;QACzC,OAAO;UACLoC,MAAM;UAAE;UAAA,CAAAtC,cAAA,GAAAU,CAAA,WAAAkC,QAAQ,EAAEN,MAAM;UAAA;UAAA,CAAAtC,cAAA,GAAAU,CAAA,WAAI,CAAC;UAC7B6B,UAAU;UAAE;UAAA,CAAAvC,cAAA,GAAAU,CAAA,WAAAkC,QAAQ,EAAEL,UAAU;UAAA;UAAA,CAAAvC,cAAA,GAAAU,CAAA,WAAI,SAAS;UAC7Cc,OAAO;UAAE;UAAA,CAAAxB,cAAA,GAAAU,CAAA,WAAAkC,QAAQ,EAAEC,IAAI,EAAErB,OAAO;UAAA;UAAA,CAAAxB,cAAA,GAAAU,CAAA,WAAI,YAAY;UAChDoC,MAAM;UAAE;UAAA,CAAA9C,cAAA,GAAAU,CAAA,WAAAkC,QAAQ,EAAEC,IAAI,EAAEC,MAAM;UAAA;UAAA,CAAA9C,cAAA,GAAAU,CAAA,WAAI,EAAE;UACpC8B,SAAS,EAAEI,QAAQ,EAAEH,OAAO,GAAG,cAAc;SAC9C;MACH,CAAC;MAAA;MAAA;QAAAzC,cAAA,GAAAU,CAAA;MAAA;MAED;MAAAV,cAAA,GAAAE,CAAA;MACA;MAAI;MAAA,CAAAF,cAAA,GAAAU,CAAA,WAAAO,KAAK;MAAA;MAAA,CAAAjB,cAAA,GAAAU,CAAA,WAAI,OAAOO,KAAK,KAAK,QAAQ;MAAA;MAAA,CAAAjB,cAAA,GAAAU,CAAA,WAAI,MAAM,IAAIO,KAAK,GAAE;QAAA;QAAAjB,cAAA,GAAAU,CAAA;QACzD,MAAMqC,aAAa;QAAA;QAAA,CAAA/C,cAAA,GAAAE,CAAA,QAAGe,KAAY;QAAC;QAAAjB,cAAA,GAAAE,CAAA;QACnC,OAAO;UACLoC,MAAM;UAAE;UAAA,CAAAtC,cAAA,GAAAU,CAAA,WAAAqC,aAAa,CAACT,MAAM;UAAA;UAAA,CAAAtC,cAAA,GAAAU,CAAA,WAAI,GAAG;UACnC6B,UAAU;UAAE;UAAA,CAAAvC,cAAA,GAAAU,CAAA,WAAAqC,aAAa,CAACR,UAAU;UAAA;UAAA,CAAAvC,cAAA,GAAAU,CAAA,WAAI,gBAAgB;UACxDc,OAAO;UAAE;UAAA,CAAAxB,cAAA,GAAAU,CAAA,WAAAqC,aAAa,CAACvB,OAAO;UAAA;UAAA,CAAAxB,cAAA,GAAAU,CAAA,WAAI,2BAA2B;UAC7D8B,SAAS,EAAEO,aAAa,CAACC;SAC1B;MACH,CAAC;MAAA;MAAA;QAAAhD,cAAA,GAAAU,CAAA;MAAA;MAAAV,cAAA,GAAAE,CAAA;MAED,OAAO,IAAI;IACb,CAAC,CAAC,OAAOe,KAAU,EAAE;MAAA;MAAAjB,cAAA,GAAAE,CAAA;MACnB;MACA,OAAO,IAAI;IACb;EACF,CAAC,EAAE,EAAE,CAAC;EAEN;EACA,MAAM+C,sBAAsB;EAAA;EAAA,CAAAjD,cAAA,GAAAE,CAAA,QAAG,IAAAI,OAAA,CAAAgB,WAAW,EAAEwB,MAAyB,IAAY;IAAA;IAAA9C,cAAA,GAAAW,CAAA;IAAAX,cAAA,GAAAE,CAAA;IAC/E,IAAI4C,MAAM,CAACI,MAAM,KAAK,CAAC,EAAE;MAAA;MAAAlD,cAAA,GAAAU,CAAA;MAAAV,cAAA,GAAAE,CAAA;MAAA,OAAO,EAAE;IAAA,CAAC;IAAA;IAAA;MAAAF,cAAA,GAAAU,CAAA;IAAA;IAAAV,cAAA,GAAAE,CAAA;IAEnC,IAAI4C,MAAM,CAACI,MAAM,KAAK,CAAC,EAAE;MAAA;MAAAlD,cAAA,GAAAU,CAAA;MAAAV,cAAA,GAAAE,CAAA;MACvB,OAAO,GAAG4C,MAAM,CAAC,CAAC,CAAC,CAACK,KAAK,KAAKL,MAAM,CAAC,CAAC,CAAC,CAACtB,OAAO,EAAE;IACnD,CAAC;IAAA;IAAA;MAAAxB,cAAA,GAAAU,CAAA;IAAA;IAAAV,cAAA,GAAAE,CAAA;IAED,OAAO,0BAA0B4C,MAAM,CAACM,GAAG,CAAC,CAACC,CAAC,EAAEC,KAAK,KAAK;MAAA;MAAAtD,cAAA,GAAAW,CAAA;MAAAX,cAAA,GAAAE,CAAA;MAAA,OAAAmD,CAAC,CAACF,KAAK;IAAL,CAAK,CAAC,CAACI,IAAI,CAAC,IAAI,CAAC,EAAE;EACjF,CAAC,EAAE,EAAE,CAAC;EAEN;EACA,MAAMC,SAAS;EAAA;EAAA,CAAAxD,cAAA,GAAAE,CAAA,QAAG,IAAAI,OAAA,CAAAgB,WAAW,EAC3B,MAAUmC,OAAyB,IAAuB;IAAA;IAAAzD,cAAA,GAAAW,CAAA;IAAAX,cAAA,GAAAE,CAAA;IACxD,IAAI;MAAA;MAAAF,cAAA,GAAAE,CAAA;MACFiB,UAAU,EAAE;MAAC;MAAAnB,cAAA,GAAAE,CAAA;MACb,OAAO,MAAMuD,OAAO,EAAE;IACxB,CAAC,CAAC,OAAOxC,KAAU,EAAE;MAAA;MAAAjB,cAAA,GAAAE,CAAA;MACrB;MACE2B,WAAW,CAACZ,KAAK,CAAC;MAAC;MAAAjB,cAAA,GAAAE,CAAA;MACnB,OAAO,IAAI;IACb;EACF,CAAC,EACD,CAACiB,UAAU,EAAEU,WAAW,CAAC,CAC1B;EAAC;EAAA7B,cAAA,GAAAE,CAAA;EAEF,OAAO;IACLe,KAAK;IACLE,UAAU;IACVU,WAAW;IACXO,cAAc;IACda,sBAAsB;IACtBO,SAAS;IACTnC;GACD;AACH;AAaA,SAAgBhB,mBAAmBA,CAAA;EAAA;EAAAL,cAAA,GAAAW,CAAA;EACjC,MAAM,CAACmC,MAAM,EAAEY,SAAS,CAAC;EAAA;EAAA,CAAA1D,cAAA,GAAAE,CAAA,QAAG,IAAAI,OAAA,CAAAqD,QAAQ,EAAyB,EAAE,CAAC;EAEhE,MAAMC,aAAa;EAAA;EAAA,CAAA5D,cAAA,GAAAE,CAAA,QAAG,IAAAI,OAAA,CAAAgB,WAAW,EAAC,CAAC6B,KAAa,EAAE3B,OAAe,KAAI;IAAA;IAAAxB,cAAA,GAAAW,CAAA;IAAAX,cAAA,GAAAE,CAAA;IACnEwD,SAAS,CAACG,IAAI,IAAK;MAAA;MAAA7D,cAAA,GAAAW,CAAA;MAAAX,cAAA,GAAAE,CAAA;MAAA;QAAE,GAAG2D,IAAI;QAAE,CAACV,KAAK,GAAG3B;MAAO,CAAE;IAAF,CAAG,CAAC;EACpD,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMsC,eAAe;EAAA;EAAA,CAAA9D,cAAA,GAAAE,CAAA,QAAG,IAAAI,OAAA,CAAAgB,WAAW,EAAE6B,KAAa,IAAI;IAAA;IAAAnD,cAAA,GAAAW,CAAA;IAAAX,cAAA,GAAAE,CAAA;IACpDwD,SAAS,CAACG,IAAI,IAAG;MAAA;MAAA7D,cAAA,GAAAW,CAAA;MACf,MAAMoD,SAAS;MAAA;MAAA,CAAA/D,cAAA,GAAAE,CAAA,QAAG;QAAE,GAAG2D;MAAI,CAAE;MAAC;MAAA7D,cAAA,GAAAE,CAAA;MAC9B,OAAO6D,SAAS,CAACZ,KAAK,CAAC;MAAC;MAAAnD,cAAA,GAAAE,CAAA;MACxB,OAAO6D,SAAS;IAClB,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,cAAc;EAAA;EAAA,CAAAhE,cAAA,GAAAE,CAAA,QAAG,IAAAI,OAAA,CAAAgB,WAAW,EAAC,MAAK;IAAA;IAAAtB,cAAA,GAAAW,CAAA;IAAAX,cAAA,GAAAE,CAAA;IACtCwD,SAAS,CAAC,EAAE,CAAC;EACf,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMT,sBAAsB;EAAA;EAAA,CAAAjD,cAAA,GAAAE,CAAA,QAAG,IAAAI,OAAA,CAAAgB,WAAW,EAAE2C,gBAAmC,IAAI;IAAA;IAAAjE,cAAA,GAAAW,CAAA;IACjF,MAAMuD,QAAQ;IAAA;IAAA,CAAAlE,cAAA,GAAAE,CAAA,QAAG+D,gBAAgB,CAACE,MAAM,CACtC,CAACC,GAAG,EAAEnD,KAAK,KAAI;MAAA;MAAAjB,cAAA,GAAAW,CAAA;MAAAX,cAAA,GAAAE,CAAA;MACbkE,GAAG,CAACnD,KAAK,CAACkC,KAAK,CAAC,GAAGlC,KAAK,CAACO,OAAO;MAAC;MAAAxB,cAAA,GAAAE,CAAA;MACjC,OAAOkE,GAAG;IACZ,CAAC,EACD,EAA4B,CAC7B;IAAC;IAAApE,cAAA,GAAAE,CAAA;IAEFwD,SAAS,CAACQ,QAAQ,CAAC;EACrB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMG,SAAS;EAAA;EAAA,CAAArE,cAAA,GAAAE,CAAA,QAAGoE,MAAM,CAACC,IAAI,CAACzB,MAAM,CAAC,CAACI,MAAM,GAAG,CAAC;EAEhD,MAAMsB,aAAa;EAAA;EAAA,CAAAxE,cAAA,GAAAE,CAAA,QAAG,IAAAI,OAAA,CAAAgB,WAAW,EAC9B6B,KAAa,IAAI;IAAA;IAAAnD,cAAA,GAAAW,CAAA;IAAAX,cAAA,GAAAE,CAAA;IAChB,OAAO4C,MAAM,CAACK,KAAK,CAAC;EACtB,CAAC,EACD,CAACL,MAAM,CAAC,CACT;EAAC;EAAA9C,cAAA,GAAAE,CAAA;EAEF,OAAO;IACL4C,MAAM;IACNc,aAAa;IACbE,eAAe;IACfE,cAAc;IACdf,sBAAsB;IACtBoB,SAAS;IACTG;GACD;AACH;AAEA;AAAA;AAAAxE,cAAA,GAAAE,CAAA;AACaC,OAAA,CAAAsE,UAAU,GAAG;EACxB;EACAC,cAAc,EAAGzD,KAAc,IAAa;IAAA;IAAAjB,cAAA,GAAAW,CAAA;IAAAX,cAAA,GAAAE,CAAA;IAC1C,OACE,2BAAAF,cAAA,GAAAU,CAAA,WAAAO,KAAK,YAAYc,KAAK;IACrB;IAAA,CAAA/B,cAAA,GAAAU,CAAA,WAAAO,KAAK,CAACO,OAAO,CAACmD,QAAQ,CAAC,OAAO,CAAC;IAAA;IAAA,CAAA3E,cAAA,GAAAU,CAAA,WAC9BO,KAAK,CAACO,OAAO,CAACmD,QAAQ,CAAC,SAAS,CAAC;IAAA;IAAA,CAAA3E,cAAA,GAAAU,CAAA,WACjCO,KAAK,CAACO,OAAO,CAACmD,QAAQ,CAAC,SAAS,CAAC,EAAC;EAExC,CAAC;EAED;EACAC,WAAW,EAAG3D,KAAc,IAAa;IAAA;IAAAjB,cAAA,GAAAW,CAAA;IAAAX,cAAA,GAAAE,CAAA;IACvC;IAAI;IAAA,CAAAF,cAAA,GAAAU,CAAA,WAAAO,KAAK;IAAA;IAAA,CAAAjB,cAAA,GAAAU,CAAA,WAAI,OAAOO,KAAK,KAAK,QAAQ;IAAA;IAAA,CAAAjB,cAAA,GAAAU,CAAA,WAAI,QAAQ,IAAIO,KAAK,GAAE;MAAA;MAAAjB,cAAA,GAAAU,CAAA;MAC3D,MAAM4B,MAAM;MAAA;MAAA,CAAAtC,cAAA,GAAAE,CAAA,QAAIe,KAAa,CAACqB,MAAM;MAAC;MAAAtC,cAAA,GAAAE,CAAA;MACrC,OAAO,2BAAAF,cAAA,GAAAU,CAAA,WAAA4B,MAAM,KAAK,GAAG;MAAA;MAAA,CAAAtC,cAAA,GAAAU,CAAA,WAAI4B,MAAM,KAAK,GAAG;IACzC,CAAC;IAAA;IAAA;MAAAtC,cAAA,GAAAU,CAAA;IAAA;IAAAV,cAAA,GAAAE,CAAA;IACD,OAAO,KAAK;EACd,CAAC;EAED;EACA2E,iBAAiB,EAAG5D,KAAc,IAAa;IAAA;IAAAjB,cAAA,GAAAW,CAAA;IAAAX,cAAA,GAAAE,CAAA;IAC7C;IAAI;IAAA,CAAAF,cAAA,GAAAU,CAAA,WAAAO,KAAK;IAAA;IAAA,CAAAjB,cAAA,GAAAU,CAAA,WAAI,OAAOO,KAAK,KAAK,QAAQ;IAAA;IAAA,CAAAjB,cAAA,GAAAU,CAAA,WAAI,QAAQ,IAAIO,KAAK,GAAE;MAAA;MAAAjB,cAAA,GAAAU,CAAA;MAAAV,cAAA,GAAAE,CAAA;MAC3D,OAAQe,KAAa,CAACqB,MAAM,KAAK,GAAG;IACtC,CAAC;IAAA;IAAA;MAAAtC,cAAA,GAAAU,CAAA;IAAA;IAAAV,cAAA,GAAAE,CAAA;IACD,OAAO,KAAK;EACd,CAAC;EAED;EACA4E,cAAc,EAAG7D,KAAc,IAAY;IAAA;IAAAjB,cAAA,GAAAW,CAAA;IAAAX,cAAA,GAAAE,CAAA;IACzC,IAAI,OAAOe,KAAK,KAAK,QAAQ,EAAE;MAAA;MAAAjB,cAAA,GAAAU,CAAA;MAAAV,cAAA,GAAAE,CAAA;MAAA,OAAOe,KAAK;IAAA,CAAC;IAAA;IAAA;MAAAjB,cAAA,GAAAU,CAAA;IAAA;IAAAV,cAAA,GAAAE,CAAA;IAC5C,IAAIe,KAAK,YAAYc,KAAK,EAAE;MAAA;MAAA/B,cAAA,GAAAU,CAAA;MAAAV,cAAA,GAAAE,CAAA;MAAA,OAAOe,KAAK,CAACO,OAAO;IAAA,CAAC;IAAA;IAAA;MAAAxB,cAAA,GAAAU,CAAA;IAAA;IAAAV,cAAA,GAAAE,CAAA;IACjD;IAAI;IAAA,CAAAF,cAAA,GAAAU,CAAA,WAAAO,KAAK;IAAA;IAAA,CAAAjB,cAAA,GAAAU,CAAA,WAAI,OAAOO,KAAK,KAAK,QAAQ,GAAE;MAAA;MAAAjB,cAAA,GAAAU,CAAA;MAAAV,cAAA,GAAAE,CAAA;MACtC,IAAI,SAAS,IAAIe,KAAK,EAAE;QAAA;QAAAjB,cAAA,GAAAU,CAAA;QAAAV,cAAA,GAAAE,CAAA;QAAA,OAAO6E,MAAM,CAAC9D,KAAK,CAACO,OAAO,CAAC;MAAA,CAAC;MAAA;MAAA;QAAAxB,cAAA,GAAAU,CAAA;MAAA;MAAAV,cAAA,GAAAE,CAAA;MACrD,IAAI,OAAO,IAAIe,KAAK,EAAE;QAAA;QAAAjB,cAAA,GAAAU,CAAA;QAAAV,cAAA,GAAAE,CAAA;QAAA,OAAO6E,MAAM,CAAC9D,KAAK,CAACA,KAAK,CAAC;MAAA,CAAC;MAAA;MAAA;QAAAjB,cAAA,GAAAU,CAAA;MAAA;IACnD,CAAC;IAAA;IAAA;MAAAV,cAAA,GAAAU,CAAA;IAAA;IAAAV,cAAA,GAAAE,CAAA;IACD,OAAO,kCAAkC;EAC3C,CAAC;EAED;EACA8E,mBAAmB,EAAEA,CAACxD,OAAe,EAAED,IAAa,EAAEE,OAAa,KAAgB;IAAA;IAAAzB,cAAA,GAAAW,CAAA;IAAAX,cAAA,GAAAE,CAAA;IAAA;MACjFqB,IAAI;MAAE;MAAA,CAAAvB,cAAA,GAAAU,CAAA,WAAAa,IAAI;MAAA;MAAA,CAAAvB,cAAA,GAAAU,CAAA,WAAI,gBAAgB;MAC9Bc,OAAO;MACPC,OAAO;MACPC,SAAS,EAAE,IAAIC,IAAI,EAAE,CAACC,WAAW;KAClC;;CACF;AAAC;AAAA5B,cAAA,GAAAE,CAAA;AAEFC,OAAA,CAAA8E,OAAA,GAAe7E,eAAe","ignoreList":[]}