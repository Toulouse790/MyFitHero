{"version":3,"names":["mockFoodVisionService_1","cov_2mqv5ryxf5","s","require","FoodAnalysisService","convertToBase64","file","f","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","base64","split","onerror","error","analyzeFoodImage","base64Image","response","fetch","method","headers","body","JSON","stringify","image","prompt","ok","b","Error","status","json","console","fetchNutritionData","foodName","dataSource","nutritionData","calories","protein","carbs","fat","fiber","sugar","sodium","portion_size","weight_grams","validateImage","type","startsWith","size","scanFood","isDevelopment","process","env","NODE_ENV","mockResult","MockFoodVisionService","simulateAnalysis","name","confidence","analysisResult","exports"],"sources":["/workspaces/MyFitHero/src/features/nutrition/components/FoodAnalysisService.tsx"],"sourcesContent":["// src/features/nutrition/components/FoodAnalysisService.tsx\nimport React from 'react';\nimport { MockFoodVisionService } from '@/features/nutrition/services/mockFoodVisionService';\n\n// Types pour le service d'analyse\ninterface FoodScanResult {\n  name: string;\n  calories: number;\n  protein: number;\n  carbs: number;\n  fat: number;\n  fiber?: number;\n  sugar?: number;\n  sodium?: number;\n  confidence: number;\n  alternatives?: any[];\n  portion_size?: string;\n  weight_grams?: number;\n}\n\ninterface ScanError {\n  message: string;\n  type: 'network' | 'analysis' | 'upload' | 'camera';\n}\n\n// Service d'analyse alimentaire\nexport class FoodAnalysisService {\n  // Convertir image en base64\n  static async convertToBase64(file: File): Promise<string> {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.readAsDataURL(file);\n      reader.onload = () => {\n        const result = reader.result as string;\n        // Retourner seulement la partie base64 sans le préfixe\n        const base64 = result.split(',')[1];\n        resolve(base64);\n      };\n      reader.onerror = error => reject(error);\n    });\n  }\n\n  // Analyser l'image alimentaire avec IA\n  static async analyzeFoodImage(base64Image: string): Promise<{ foodName: string; confidence: number; details?: any }> {\n    try {\n      const response = await fetch('/api/analyze-food', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          image: base64Image,\n          prompt: `Analyze this food image and identify the food items. Return a JSON response with:\n          {\n            \"foodName\": \"primary food item name\",\n            \"confidence\": 0.95,\n            \"details\": {\n              \"estimated_portion\": \"description\",\n              \"preparation_method\": \"if visible\",\n              \"additional_items\": [\"list of other items if multiple\"]\n            }\n          }\n          \n          Be specific about the food type (e.g., \"grilled chicken breast\" not just \"chicken\").\n          Focus on foods common in American diet.`\n        })\n      });\n\n      if (!response.ok) {\n        throw new Error(`API Error: ${response.status}`);\n      }\n\n      return await response.json();\n    } catch (error: any) {\n      console.error('Food analysis error:', error);\n      throw new Error('Failed to analyze food image');\n    }\n  }\n\n  // Récupérer les données nutritionnelles USDA\n  static async fetchNutritionData(foodName: string): Promise<Omit<FoodScanResult, 'name' | 'confidence' | 'alternatives'>> {\n    try {\n      const response = await fetch('/api/nutrition-data', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          foodName,\n          dataSource: 'usda'\n        })\n      });\n\n      if (!response.ok) {\n        throw new Error(`Nutrition API Error: ${response.status}`);\n      }\n\n      const nutritionData = await response.json();\n      \n      return {\n        calories: nutritionData.calories || 0,\n        protein: nutritionData.protein || 0,\n        carbs: nutritionData.carbs || 0,\n        fat: nutritionData.fat || 0,\n        fiber: nutritionData.fiber || 0,\n        sugar: nutritionData.sugar || 0,\n        sodium: nutritionData.sodium || 0,\n        portion_size: nutritionData.portion_size || '100g',\n        weight_grams: nutritionData.weight_grams || 100\n      };\n    } catch (error: any) {\n      console.error('Nutrition data error:', error);\n      throw new Error('Failed to fetch nutrition data');\n    }\n  }\n\n  // Valider l'image\n  static validateImage(file: File): void {\n    if (!file.type.startsWith('image/')) {\n      throw new Error('Veuillez sélectionner une image valide');\n    }\n\n    if (file.size > 5 * 1024 * 1024) { // 5MB max\n      throw new Error('La taille de l\\'image doit être inférieure à 5MB');\n    }\n  }\n\n  // Scanner une image alimentaire\n  static async scanFood(image: File): Promise<FoodScanResult> {\n    // Validation de l'image\n    this.validateImage(image);\n\n    const isDevelopment = process.env.NODE_ENV === 'development';\n    \n    if (isDevelopment) {\n      // Mode développement : utiliser le service de simulation\n      const mockResult = await MockFoodVisionService.simulateAnalysis();\n      return {\n        name: mockResult.foodName,\n        confidence: mockResult.confidence,\n        calories: mockResult.calories,\n        protein: mockResult.protein,\n        carbs: mockResult.carbs,\n        fat: mockResult.fat,\n        fiber: mockResult.fiber,\n        sugar: mockResult.sugar,\n        sodium: mockResult.sodium,\n        portion_size: mockResult.portion_size,\n        weight_grams: mockResult.weight_grams\n      };\n    } else {\n      // Production : utiliser les vraies APIs\n      const base64 = await this.convertToBase64(image);\n      const analysisResult = await this.analyzeFoodImage(base64);\n      const nutritionData = await this.fetchNutritionData(analysisResult.foodName);\n      \n      return {\n        name: analysisResult.foodName,\n        confidence: analysisResult.confidence,\n        ...nutritionData\n      };\n    }\n  }\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,MAAAA,uBAAA;AA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","ignoreList":[]}