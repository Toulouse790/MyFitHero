209035a415fb6854e7d8f2609c7c72e5
"use strict";

/* istanbul ignore next */
function cov_2mqv5ryxf5() {
  var path = "/workspaces/MyFitHero/src/features/nutrition/components/FoodAnalysisService.tsx";
  var hash = "3d0863e2d6d4f73c413bc4e20e1f5b650c464555";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/MyFitHero/src/features/nutrition/components/FoodAnalysisService.tsx",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 37
        }
      },
      "2": {
        start: {
          line: 4,
          column: 32
        },
        end: {
          line: 4,
          column: 94
        }
      },
      "3": {
        start: {
          line: 9,
          column: 8
        },
        end: {
          line: 19,
          column: 11
        }
      },
      "4": {
        start: {
          line: 10,
          column: 27
        },
        end: {
          line: 10,
          column: 43
        }
      },
      "5": {
        start: {
          line: 11,
          column: 12
        },
        end: {
          line: 11,
          column: 39
        }
      },
      "6": {
        start: {
          line: 12,
          column: 12
        },
        end: {
          line: 17,
          column: 14
        }
      },
      "7": {
        start: {
          line: 13,
          column: 31
        },
        end: {
          line: 13,
          column: 44
        }
      },
      "8": {
        start: {
          line: 15,
          column: 31
        },
        end: {
          line: 15,
          column: 51
        }
      },
      "9": {
        start: {
          line: 16,
          column: 16
        },
        end: {
          line: 16,
          column: 32
        }
      },
      "10": {
        start: {
          line: 18,
          column: 12
        },
        end: {
          line: 18,
          column: 52
        }
      },
      "11": {
        start: {
          line: 18,
          column: 38
        },
        end: {
          line: 18,
          column: 51
        }
      },
      "12": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 54,
          column: 9
        }
      },
      "13": {
        start: {
          line: 24,
          column: 29
        },
        end: {
          line: 45,
          column: 14
        }
      },
      "14": {
        start: {
          line: 46,
          column: 12
        },
        end: {
          line: 48,
          column: 13
        }
      },
      "15": {
        start: {
          line: 47,
          column: 16
        },
        end: {
          line: 47,
          column: 65
        }
      },
      "16": {
        start: {
          line: 49,
          column: 12
        },
        end: {
          line: 49,
          column: 41
        }
      },
      "17": {
        start: {
          line: 52,
          column: 12
        },
        end: {
          line: 52,
          column: 57
        }
      },
      "18": {
        start: {
          line: 53,
          column: 12
        },
        end: {
          line: 53,
          column: 60
        }
      },
      "19": {
        start: {
          line: 58,
          column: 8
        },
        end: {
          line: 88,
          column: 9
        }
      },
      "20": {
        start: {
          line: 59,
          column: 29
        },
        end: {
          line: 68,
          column: 14
        }
      },
      "21": {
        start: {
          line: 69,
          column: 12
        },
        end: {
          line: 71,
          column: 13
        }
      },
      "22": {
        start: {
          line: 70,
          column: 16
        },
        end: {
          line: 70,
          column: 75
        }
      },
      "23": {
        start: {
          line: 72,
          column: 34
        },
        end: {
          line: 72,
          column: 55
        }
      },
      "24": {
        start: {
          line: 73,
          column: 12
        },
        end: {
          line: 83,
          column: 14
        }
      },
      "25": {
        start: {
          line: 86,
          column: 12
        },
        end: {
          line: 86,
          column: 58
        }
      },
      "26": {
        start: {
          line: 87,
          column: 12
        },
        end: {
          line: 87,
          column: 62
        }
      },
      "27": {
        start: {
          line: 92,
          column: 8
        },
        end: {
          line: 94,
          column: 9
        }
      },
      "28": {
        start: {
          line: 93,
          column: 12
        },
        end: {
          line: 93,
          column: 70
        }
      },
      "29": {
        start: {
          line: 95,
          column: 8
        },
        end: {
          line: 97,
          column: 9
        }
      },
      "30": {
        start: {
          line: 96,
          column: 12
        },
        end: {
          line: 96,
          column: 80
        }
      },
      "31": {
        start: {
          line: 102,
          column: 8
        },
        end: {
          line: 102,
          column: 34
        }
      },
      "32": {
        start: {
          line: 103,
          column: 30
        },
        end: {
          line: 103,
          column: 68
        }
      },
      "33": {
        start: {
          line: 104,
          column: 8
        },
        end: {
          line: 131,
          column: 9
        }
      },
      "34": {
        start: {
          line: 106,
          column: 31
        },
        end: {
          line: 106,
          column: 101
        }
      },
      "35": {
        start: {
          line: 107,
          column: 12
        },
        end: {
          line: 119,
          column: 14
        }
      },
      "36": {
        start: {
          line: 123,
          column: 27
        },
        end: {
          line: 123,
          column: 60
        }
      },
      "37": {
        start: {
          line: 124,
          column: 35
        },
        end: {
          line: 124,
          column: 70
        }
      },
      "38": {
        start: {
          line: 125,
          column: 34
        },
        end: {
          line: 125,
          column: 88
        }
      },
      "39": {
        start: {
          line: 126,
          column: 12
        },
        end: {
          line: 130,
          column: 14
        }
      },
      "40": {
        start: {
          line: 134,
          column: 0
        },
        end: {
          line: 134,
          column: 50
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 8,
            column: 4
          },
          end: {
            line: 8,
            column: 5
          }
        },
        loc: {
          start: {
            line: 8,
            column: 39
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 8
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 9,
            column: 27
          },
          end: {
            line: 9,
            column: 28
          }
        },
        loc: {
          start: {
            line: 9,
            column: 48
          },
          end: {
            line: 19,
            column: 9
          }
        },
        line: 9
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 12,
            column: 28
          },
          end: {
            line: 12,
            column: 29
          }
        },
        loc: {
          start: {
            line: 12,
            column: 34
          },
          end: {
            line: 17,
            column: 13
          }
        },
        line: 12
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 18,
            column: 29
          },
          end: {
            line: 18,
            column: 30
          }
        },
        loc: {
          start: {
            line: 18,
            column: 38
          },
          end: {
            line: 18,
            column: 51
          }
        },
        line: 18
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 22,
            column: 4
          },
          end: {
            line: 22,
            column: 5
          }
        },
        loc: {
          start: {
            line: 22,
            column: 47
          },
          end: {
            line: 55,
            column: 5
          }
        },
        line: 22
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 57,
            column: 4
          },
          end: {
            line: 57,
            column: 5
          }
        },
        loc: {
          start: {
            line: 57,
            column: 46
          },
          end: {
            line: 89,
            column: 5
          }
        },
        line: 57
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 91,
            column: 4
          },
          end: {
            line: 91,
            column: 5
          }
        },
        loc: {
          start: {
            line: 91,
            column: 31
          },
          end: {
            line: 98,
            column: 5
          }
        },
        line: 91
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 100,
            column: 4
          },
          end: {
            line: 100,
            column: 5
          }
        },
        loc: {
          start: {
            line: 100,
            column: 33
          },
          end: {
            line: 132,
            column: 5
          }
        },
        line: 100
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 46,
            column: 12
          },
          end: {
            line: 48,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 46,
            column: 12
          },
          end: {
            line: 48,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 46
      },
      "1": {
        loc: {
          start: {
            line: 69,
            column: 12
          },
          end: {
            line: 71,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 69,
            column: 12
          },
          end: {
            line: 71,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 69
      },
      "2": {
        loc: {
          start: {
            line: 74,
            column: 26
          },
          end: {
            line: 74,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 74,
            column: 26
          },
          end: {
            line: 74,
            column: 48
          }
        }, {
          start: {
            line: 74,
            column: 52
          },
          end: {
            line: 74,
            column: 53
          }
        }],
        line: 74
      },
      "3": {
        loc: {
          start: {
            line: 75,
            column: 25
          },
          end: {
            line: 75,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 75,
            column: 25
          },
          end: {
            line: 75,
            column: 46
          }
        }, {
          start: {
            line: 75,
            column: 50
          },
          end: {
            line: 75,
            column: 51
          }
        }],
        line: 75
      },
      "4": {
        loc: {
          start: {
            line: 76,
            column: 23
          },
          end: {
            line: 76,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 76,
            column: 23
          },
          end: {
            line: 76,
            column: 42
          }
        }, {
          start: {
            line: 76,
            column: 46
          },
          end: {
            line: 76,
            column: 47
          }
        }],
        line: 76
      },
      "5": {
        loc: {
          start: {
            line: 77,
            column: 21
          },
          end: {
            line: 77,
            column: 43
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 77,
            column: 21
          },
          end: {
            line: 77,
            column: 38
          }
        }, {
          start: {
            line: 77,
            column: 42
          },
          end: {
            line: 77,
            column: 43
          }
        }],
        line: 77
      },
      "6": {
        loc: {
          start: {
            line: 78,
            column: 23
          },
          end: {
            line: 78,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 78,
            column: 23
          },
          end: {
            line: 78,
            column: 42
          }
        }, {
          start: {
            line: 78,
            column: 46
          },
          end: {
            line: 78,
            column: 47
          }
        }],
        line: 78
      },
      "7": {
        loc: {
          start: {
            line: 79,
            column: 23
          },
          end: {
            line: 79,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 79,
            column: 23
          },
          end: {
            line: 79,
            column: 42
          }
        }, {
          start: {
            line: 79,
            column: 46
          },
          end: {
            line: 79,
            column: 47
          }
        }],
        line: 79
      },
      "8": {
        loc: {
          start: {
            line: 80,
            column: 24
          },
          end: {
            line: 80,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 80,
            column: 24
          },
          end: {
            line: 80,
            column: 44
          }
        }, {
          start: {
            line: 80,
            column: 48
          },
          end: {
            line: 80,
            column: 49
          }
        }],
        line: 80
      },
      "9": {
        loc: {
          start: {
            line: 81,
            column: 30
          },
          end: {
            line: 81,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 81,
            column: 30
          },
          end: {
            line: 81,
            column: 56
          }
        }, {
          start: {
            line: 81,
            column: 60
          },
          end: {
            line: 81,
            column: 66
          }
        }],
        line: 81
      },
      "10": {
        loc: {
          start: {
            line: 82,
            column: 30
          },
          end: {
            line: 82,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 82,
            column: 30
          },
          end: {
            line: 82,
            column: 56
          }
        }, {
          start: {
            line: 82,
            column: 60
          },
          end: {
            line: 82,
            column: 63
          }
        }],
        line: 82
      },
      "11": {
        loc: {
          start: {
            line: 92,
            column: 8
          },
          end: {
            line: 94,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 92,
            column: 8
          },
          end: {
            line: 94,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 92
      },
      "12": {
        loc: {
          start: {
            line: 95,
            column: 8
          },
          end: {
            line: 97,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 95,
            column: 8
          },
          end: {
            line: 97,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 95
      },
      "13": {
        loc: {
          start: {
            line: 104,
            column: 8
          },
          end: {
            line: 131,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 104,
            column: 8
          },
          end: {
            line: 131,
            column: 9
          }
        }, {
          start: {
            line: 121,
            column: 13
          },
          end: {
            line: 131,
            column: 9
          }
        }],
        line: 104
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0]
    },
    inputSourceMap: {
      file: "/workspaces/MyFitHero/src/features/nutrition/components/FoodAnalysisService.tsx",
      mappings: "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",
      names: [],
      sources: ["/workspaces/MyFitHero/src/features/nutrition/components/FoodAnalysisService.tsx"],
      sourcesContent: ["// src/features/nutrition/components/FoodAnalysisService.tsx\nimport React from 'react';\nimport { MockFoodVisionService } from '@/features/nutrition/services/mockFoodVisionService';\n\n// Types pour le service d'analyse\ninterface FoodScanResult {\n  name: string;\n  calories: number;\n  protein: number;\n  carbs: number;\n  fat: number;\n  fiber?: number;\n  sugar?: number;\n  sodium?: number;\n  confidence: number;\n  alternatives?: any[];\n  portion_size?: string;\n  weight_grams?: number;\n}\n\ninterface ScanError {\n  message: string;\n  type: 'network' | 'analysis' | 'upload' | 'camera';\n}\n\n// Service d'analyse alimentaire\nexport class FoodAnalysisService {\n  // Convertir image en base64\n  static async convertToBase64(file: File): Promise<string> {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.readAsDataURL(file);\n      reader.onload = () => {\n        const result = reader.result as string;\n        // Retourner seulement la partie base64 sans le pr\xE9fixe\n        const base64 = result.split(',')[1];\n        resolve(base64);\n      };\n      reader.onerror = error => reject(error);\n    });\n  }\n\n  // Analyser l'image alimentaire avec IA\n  static async analyzeFoodImage(base64Image: string): Promise<{ foodName: string; confidence: number; details?: any }> {\n    try {\n      const response = await fetch('/api/analyze-food', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          image: base64Image,\n          prompt: `Analyze this food image and identify the food items. Return a JSON response with:\n          {\n            \"foodName\": \"primary food item name\",\n            \"confidence\": 0.95,\n            \"details\": {\n              \"estimated_portion\": \"description\",\n              \"preparation_method\": \"if visible\",\n              \"additional_items\": [\"list of other items if multiple\"]\n            }\n          }\n          \n          Be specific about the food type (e.g., \"grilled chicken breast\" not just \"chicken\").\n          Focus on foods common in American diet.`\n        })\n      });\n\n      if (!response.ok) {\n        throw new Error(`API Error: ${response.status}`);\n      }\n\n      return await response.json();\n    } catch (error: any) {\n      console.error('Food analysis error:', error);\n      throw new Error('Failed to analyze food image');\n    }\n  }\n\n  // R\xE9cup\xE9rer les donn\xE9es nutritionnelles USDA\n  static async fetchNutritionData(foodName: string): Promise<Omit<FoodScanResult, 'name' | 'confidence' | 'alternatives'>> {\n    try {\n      const response = await fetch('/api/nutrition-data', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          foodName,\n          dataSource: 'usda'\n        })\n      });\n\n      if (!response.ok) {\n        throw new Error(`Nutrition API Error: ${response.status}`);\n      }\n\n      const nutritionData = await response.json();\n      \n      return {\n        calories: nutritionData.calories || 0,\n        protein: nutritionData.protein || 0,\n        carbs: nutritionData.carbs || 0,\n        fat: nutritionData.fat || 0,\n        fiber: nutritionData.fiber || 0,\n        sugar: nutritionData.sugar || 0,\n        sodium: nutritionData.sodium || 0,\n        portion_size: nutritionData.portion_size || '100g',\n        weight_grams: nutritionData.weight_grams || 100\n      };\n    } catch (error: any) {\n      console.error('Nutrition data error:', error);\n      throw new Error('Failed to fetch nutrition data');\n    }\n  }\n\n  // Valider l'image\n  static validateImage(file: File): void {\n    if (!file.type.startsWith('image/')) {\n      throw new Error('Veuillez s\xE9lectionner une image valide');\n    }\n\n    if (file.size > 5 * 1024 * 1024) { // 5MB max\n      throw new Error('La taille de l\\'image doit \xEAtre inf\xE9rieure \xE0 5MB');\n    }\n  }\n\n  // Scanner une image alimentaire\n  static async scanFood(image: File): Promise<FoodScanResult> {\n    // Validation de l'image\n    this.validateImage(image);\n\n    const isDevelopment = process.env.NODE_ENV === 'development';\n    \n    if (isDevelopment) {\n      // Mode d\xE9veloppement : utiliser le service de simulation\n      const mockResult = await MockFoodVisionService.simulateAnalysis();\n      return {\n        name: mockResult.foodName,\n        confidence: mockResult.confidence,\n        calories: mockResult.calories,\n        protein: mockResult.protein,\n        carbs: mockResult.carbs,\n        fat: mockResult.fat,\n        fiber: mockResult.fiber,\n        sugar: mockResult.sugar,\n        sodium: mockResult.sodium,\n        portion_size: mockResult.portion_size,\n        weight_grams: mockResult.weight_grams\n      };\n    } else {\n      // Production : utiliser les vraies APIs\n      const base64 = await this.convertToBase64(image);\n      const analysisResult = await this.analyzeFoodImage(base64);\n      const nutritionData = await this.fetchNutritionData(analysisResult.foodName);\n      \n      return {\n        name: analysisResult.foodName,\n        confidence: analysisResult.confidence,\n        ...nutritionData\n      };\n    }\n  }\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "3d0863e2d6d4f73c413bc4e20e1f5b650c464555"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2mqv5ryxf5 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2mqv5ryxf5();
cov_2mqv5ryxf5().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2mqv5ryxf5().s[1]++;
exports.FoodAnalysisService = void 0;
const mockFoodVisionService_1 =
/* istanbul ignore next */
(cov_2mqv5ryxf5().s[2]++, require("@/features/nutrition/services/mockFoodVisionService"));
// Service d'analyse alimentaire
class FoodAnalysisService {
  // Convertir image en base64
  static async convertToBase64(file) {
    /* istanbul ignore next */
    cov_2mqv5ryxf5().f[0]++;
    cov_2mqv5ryxf5().s[3]++;
    return new Promise((resolve, reject) => {
      /* istanbul ignore next */
      cov_2mqv5ryxf5().f[1]++;
      const reader =
      /* istanbul ignore next */
      (cov_2mqv5ryxf5().s[4]++, new FileReader());
      /* istanbul ignore next */
      cov_2mqv5ryxf5().s[5]++;
      reader.readAsDataURL(file);
      /* istanbul ignore next */
      cov_2mqv5ryxf5().s[6]++;
      reader.onload = () => {
        /* istanbul ignore next */
        cov_2mqv5ryxf5().f[2]++;
        const result =
        /* istanbul ignore next */
        (cov_2mqv5ryxf5().s[7]++, reader.result);
        // Retourner seulement la partie base64 sans le préfixe
        const base64 =
        /* istanbul ignore next */
        (cov_2mqv5ryxf5().s[8]++, result.split(',')[1]);
        /* istanbul ignore next */
        cov_2mqv5ryxf5().s[9]++;
        resolve(base64);
      };
      /* istanbul ignore next */
      cov_2mqv5ryxf5().s[10]++;
      reader.onerror = error => {
        /* istanbul ignore next */
        cov_2mqv5ryxf5().f[3]++;
        cov_2mqv5ryxf5().s[11]++;
        return reject(error);
      };
    });
  }
  // Analyser l'image alimentaire avec IA
  static async analyzeFoodImage(base64Image) {
    /* istanbul ignore next */
    cov_2mqv5ryxf5().f[4]++;
    cov_2mqv5ryxf5().s[12]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_2mqv5ryxf5().s[13]++, await fetch('/api/analyze-food', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          image: base64Image,
          prompt: `Analyze this food image and identify the food items. Return a JSON response with:
          {
            "foodName": "primary food item name",
            "confidence": 0.95,
            "details": {
              "estimated_portion": "description",
              "preparation_method": "if visible",
              "additional_items": ["list of other items if multiple"]
            }
          }
          
          Be specific about the food type (e.g., "grilled chicken breast" not just "chicken").
          Focus on foods common in American diet.`
        })
      }));
      /* istanbul ignore next */
      cov_2mqv5ryxf5().s[14]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_2mqv5ryxf5().b[0][0]++;
        cov_2mqv5ryxf5().s[15]++;
        throw new Error(`API Error: ${response.status}`);
      } else
      /* istanbul ignore next */
      {
        cov_2mqv5ryxf5().b[0][1]++;
      }
      cov_2mqv5ryxf5().s[16]++;
      return await response.json();
    } catch (error) {
      /* istanbul ignore next */
      cov_2mqv5ryxf5().s[17]++;
      console.error('Food analysis error:', error);
      /* istanbul ignore next */
      cov_2mqv5ryxf5().s[18]++;
      throw new Error('Failed to analyze food image');
    }
  }
  // Récupérer les données nutritionnelles USDA
  static async fetchNutritionData(foodName) {
    /* istanbul ignore next */
    cov_2mqv5ryxf5().f[5]++;
    cov_2mqv5ryxf5().s[19]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_2mqv5ryxf5().s[20]++, await fetch('/api/nutrition-data', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          foodName,
          dataSource: 'usda'
        })
      }));
      /* istanbul ignore next */
      cov_2mqv5ryxf5().s[21]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_2mqv5ryxf5().b[1][0]++;
        cov_2mqv5ryxf5().s[22]++;
        throw new Error(`Nutrition API Error: ${response.status}`);
      } else
      /* istanbul ignore next */
      {
        cov_2mqv5ryxf5().b[1][1]++;
      }
      const nutritionData =
      /* istanbul ignore next */
      (cov_2mqv5ryxf5().s[23]++, await response.json());
      /* istanbul ignore next */
      cov_2mqv5ryxf5().s[24]++;
      return {
        calories:
        /* istanbul ignore next */
        (cov_2mqv5ryxf5().b[2][0]++, nutritionData.calories) ||
        /* istanbul ignore next */
        (cov_2mqv5ryxf5().b[2][1]++, 0),
        protein:
        /* istanbul ignore next */
        (cov_2mqv5ryxf5().b[3][0]++, nutritionData.protein) ||
        /* istanbul ignore next */
        (cov_2mqv5ryxf5().b[3][1]++, 0),
        carbs:
        /* istanbul ignore next */
        (cov_2mqv5ryxf5().b[4][0]++, nutritionData.carbs) ||
        /* istanbul ignore next */
        (cov_2mqv5ryxf5().b[4][1]++, 0),
        fat:
        /* istanbul ignore next */
        (cov_2mqv5ryxf5().b[5][0]++, nutritionData.fat) ||
        /* istanbul ignore next */
        (cov_2mqv5ryxf5().b[5][1]++, 0),
        fiber:
        /* istanbul ignore next */
        (cov_2mqv5ryxf5().b[6][0]++, nutritionData.fiber) ||
        /* istanbul ignore next */
        (cov_2mqv5ryxf5().b[6][1]++, 0),
        sugar:
        /* istanbul ignore next */
        (cov_2mqv5ryxf5().b[7][0]++, nutritionData.sugar) ||
        /* istanbul ignore next */
        (cov_2mqv5ryxf5().b[7][1]++, 0),
        sodium:
        /* istanbul ignore next */
        (cov_2mqv5ryxf5().b[8][0]++, nutritionData.sodium) ||
        /* istanbul ignore next */
        (cov_2mqv5ryxf5().b[8][1]++, 0),
        portion_size:
        /* istanbul ignore next */
        (cov_2mqv5ryxf5().b[9][0]++, nutritionData.portion_size) ||
        /* istanbul ignore next */
        (cov_2mqv5ryxf5().b[9][1]++, '100g'),
        weight_grams:
        /* istanbul ignore next */
        (cov_2mqv5ryxf5().b[10][0]++, nutritionData.weight_grams) ||
        /* istanbul ignore next */
        (cov_2mqv5ryxf5().b[10][1]++, 100)
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_2mqv5ryxf5().s[25]++;
      console.error('Nutrition data error:', error);
      /* istanbul ignore next */
      cov_2mqv5ryxf5().s[26]++;
      throw new Error('Failed to fetch nutrition data');
    }
  }
  // Valider l'image
  static validateImage(file) {
    /* istanbul ignore next */
    cov_2mqv5ryxf5().f[6]++;
    cov_2mqv5ryxf5().s[27]++;
    if (!file.type.startsWith('image/')) {
      /* istanbul ignore next */
      cov_2mqv5ryxf5().b[11][0]++;
      cov_2mqv5ryxf5().s[28]++;
      throw new Error('Veuillez sélectionner une image valide');
    } else
    /* istanbul ignore next */
    {
      cov_2mqv5ryxf5().b[11][1]++;
    }
    cov_2mqv5ryxf5().s[29]++;
    if (file.size > 5 * 1024 * 1024) {
      /* istanbul ignore next */
      cov_2mqv5ryxf5().b[12][0]++;
      cov_2mqv5ryxf5().s[30]++;
      // 5MB max
      throw new Error('La taille de l\'image doit être inférieure à 5MB');
    } else
    /* istanbul ignore next */
    {
      cov_2mqv5ryxf5().b[12][1]++;
    }
  }
  // Scanner une image alimentaire
  static async scanFood(image) {
    /* istanbul ignore next */
    cov_2mqv5ryxf5().f[7]++;
    cov_2mqv5ryxf5().s[31]++;
    // Validation de l'image
    this.validateImage(image);
    const isDevelopment =
    /* istanbul ignore next */
    (cov_2mqv5ryxf5().s[32]++, process.env.NODE_ENV === 'development');
    /* istanbul ignore next */
    cov_2mqv5ryxf5().s[33]++;
    if (isDevelopment) {
      /* istanbul ignore next */
      cov_2mqv5ryxf5().b[13][0]++;
      // Mode développement : utiliser le service de simulation
      const mockResult =
      /* istanbul ignore next */
      (cov_2mqv5ryxf5().s[34]++, await mockFoodVisionService_1.MockFoodVisionService.simulateAnalysis());
      /* istanbul ignore next */
      cov_2mqv5ryxf5().s[35]++;
      return {
        name: mockResult.foodName,
        confidence: mockResult.confidence,
        calories: mockResult.calories,
        protein: mockResult.protein,
        carbs: mockResult.carbs,
        fat: mockResult.fat,
        fiber: mockResult.fiber,
        sugar: mockResult.sugar,
        sodium: mockResult.sodium,
        portion_size: mockResult.portion_size,
        weight_grams: mockResult.weight_grams
      };
    } else {
      /* istanbul ignore next */
      cov_2mqv5ryxf5().b[13][1]++;
      // Production : utiliser les vraies APIs
      const base64 =
      /* istanbul ignore next */
      (cov_2mqv5ryxf5().s[36]++, await this.convertToBase64(image));
      const analysisResult =
      /* istanbul ignore next */
      (cov_2mqv5ryxf5().s[37]++, await this.analyzeFoodImage(base64));
      const nutritionData =
      /* istanbul ignore next */
      (cov_2mqv5ryxf5().s[38]++, await this.fetchNutritionData(analysisResult.foodName));
      /* istanbul ignore next */
      cov_2mqv5ryxf5().s[39]++;
      return {
        name: analysisResult.foodName,
        confidence: analysisResult.confidence,
        ...nutritionData
      };
    }
  }
}
/* istanbul ignore next */
cov_2mqv5ryxf5().s[40]++;
exports.FoodAnalysisService = FoodAnalysisService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,