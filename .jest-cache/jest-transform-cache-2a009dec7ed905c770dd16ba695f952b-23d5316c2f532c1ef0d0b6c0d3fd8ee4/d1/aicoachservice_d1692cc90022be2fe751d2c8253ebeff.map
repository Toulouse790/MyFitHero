{"version":3,"names":["cov_c8o3865tw","actualCoverage","s","AICoachService","getCoachingSession","userId","topic","f","Promise","resolve","setTimeout","sessionId","Date","now","userProfile","getUserProfile","session","id","type","determineSessionType","messages","role","content","generateWelcomeMessage","timestamp","recommendations","generateRecommendations","actionPlan","generateActionPlan","createdAt","updatedAt","status","metadata","userLevel","b","level","sport","goals","sessionDuration","sessions","set","error","console","Error","submitQuestion","question","context","questionAnalysis","analyzeQuestion","response","generatePersonalizedResponse","has","get","push","answer","getPersonalizedPlan","profile","planId","planType","determinePlanType","phases","generatePlanPhases","generatePlanGoals","progressMetrics","generateProgressMetrics","plan","title","generatePlanTitle","description","generatePlanDescription","duration","calculatePlanDuration","adaptations","generatePlanAdaptations","lastUpdated","analyzeProgress","data","overallScore","calculateOverallScore","metrics","categoryScores","analyzeCategoryProgress","activities","achievements","identifyAchievements","challenges","identifyChallenges","feedback","generateProgressRecommendations","analysis","period","nextSteps","generateNextSteps","motivationalMessage","generateMotivationalMessage","availability","equipment","age","experience","topicMap","toLowerCase","workout","nutrition","recovery","mental","general","sessionType","baseRecommendations","category","priority","reasoning","expectedBenefit","timeframe","difficulty","resources","task","deadline","estimatedDuration","workoutKeywords","nutritionKeywords","recoveryKeywords","intent","some","kw","includes","entities","complexity","length","urgency","responses","suggestions","followUpQuestions","relatedTopics","default","name","startWeek","endWeek","focus","milestones","metric","currentValue","targetValue","unit","frequency","target","benchmarks","value","label","Math","floor","random","score","trend","insights","earnedAt","impact","celebrationLevel","severity","solutions","preventionTips","exports","Object","defineProperty","Map"],"sources":["/workspaces/MyFitHero/src/features/ai-coach/services/ai-coach.service.ts"],"sourcesContent":["import { Activity, Bell } from 'lucide-react';\nexport interface CoachingSession {\n  id: string;\n  userId: string;\n  topic: string;\n  type: 'workout' | 'nutrition' | 'recovery' | 'mental' | 'general';\n  messages: CoachingMessage[];\n  recommendations: Recommendation[];\n  actionPlan: ActionItem[];\n  createdAt: Date;\n  updatedAt: Date;\n  status: 'active' | 'completed' | 'paused';\n  metadata: {\n    userLevel: string;\n    sport?: string;\n    goals: string[];\n    sessionDuration: number;\n  };\n}\n\nexport interface CoachingMessage {\n  id: string;\n  role: 'user' | 'coach';\n  content: string;\n  timestamp: Date;\n  type: 'text' | 'suggestion' | 'warning' | 'encouragement';\n  attachments?: {\n    type: 'exercise' | 'nutrition' | 'image' | 'video';\n    data: unknown;\n  }[];\n}\n\nexport interface Recommendation {\n  id: string;\n  category: 'immediate' | 'short-term' | 'long-term';\n  priority: 'low' | 'medium' | 'high' | 'critical';\n  title: string;\n  description: string;\n  reasoning: string;\n  expectedBenefit: string;\n  timeframe: string;\n  difficulty: 'easy' | 'moderate' | 'challenging';\n  resources?: string[];\n}\n\nexport interface ActionItem {\n  id: string;\n  task: string;\n  deadline: Date;\n  priority: 'low' | 'medium' | 'high';\n  status: 'pending' | 'in-progress' | 'completed';\n  category: string;\n  estimatedDuration: number; // en minutes\n  dependencies?: string[];\n}\n\nexport interface PersonalizedPlan {\n  id: string;\n  userId: string;\n  type: 'workout' | 'nutrition' | 'recovery' | 'comprehensive';\n  title: string;\n  description: string;\n  duration: string; // \"4 weeks\", \"12 weeks\", etc.\n  phases: PlanPhase[];\n  goals: PlanGoal[];\n  progressMetrics: ProgressMetric[];\n  adaptations: PlanAdaptation[];\n  createdAt: Date;\n  lastUpdated: Date;\n}\n\nexport interface PlanPhase {\n  id: string;\n  name: string;\n  description: string;\n  startWeek: number;\n  endWeek: number;\n  focus: string[];\n  sessions: PlanSession[];\n  milestones: Milestone[];\n}\n\nexport interface PlanSession {\n  id: string;\n  name: string;\n  type: string;\n  duration: number;\n  intensity: 'low' | 'moderate' | 'high' | 'very-high';\n  description: string;\n  exercises?: Exercise[];\n  nutritionGuidelines?: NutritionGuideline[];\n  recoveryProtocol?: RecoveryProtocol;\n}\n\nexport interface Exercise {\n  id: string;\n  name: string;\n  category: string;\n  muscleGroups: string[];\n  equipment: string[];\n  sets?: number;\n  reps?: number | string;\n  duration?: number;\n  rest?: number;\n  intensity?: string;\n  instructions: string[];\n  progressions: string[];\n  regressions: string[];\n  safetyNotes: string[];\n}\n\nexport interface PlanGoal {\n  id: string;\n  description: string;\n  metric: string;\n  currentValue: number;\n  targetValue: number;\n  timeframe: string;\n  priority: 'primary' | 'secondary';\n}\n\nexport interface ProgressMetric {\n  id: string;\n  name: string;\n  unit: string;\n  frequency: 'daily' | 'weekly' | 'monthly';\n  target?: number;\n  benchmarks: { value: number; label: string }[];\n}\n\nexport interface ProgressAnalysis {\n  id: string;\n  userId: string;\n  period: {\n    start: Date;\n    end: Date;\n  };\n  overallScore: number; // 0-100\n  categoryScores: {\n    category: string;\n    score: number;\n    trend: 'improving' | 'stable' | 'declining';\n    insights: string[];\n  }[];\n  achievements: Achievement[];\n  challenges: Challenge[];\n  recommendations: Recommendation[];\n  nextSteps: ActionItem[];\n  motivationalMessage: string;\n}\n\nexport interface Achievement {\n  id: string;\n  title: string;\n  description: string;\n  category: string;\n  earnedAt: Date;\n  impact: 'small' | 'medium' | 'large';\n  celebrationLevel: 'badge' | 'milestone' | 'breakthrough';\n}\n\nexport interface Challenge {\n  id: string;\n  title: string;\n  description: string;\n  category: string;\n  severity: 'minor' | 'moderate' | 'significant';\n  solutions: string[];\n  preventionTips: string[];\n}\n\nexport class AICoachService {\n  private static readonly API_BASE = '/api/ai-coach';\n  private static sessions: Map<string, CoachingSession> = new Map();\n\n  /**\n   * Récupère une session de coaching personnalisée\n   */\n  static async getCoachingSession(userId: string, topic: string): Promise<CoachingSession> {\n    try {\n      // Simuler un appel API\n      await new Promise(resolve => setTimeout(resolve, 500));\n\n      const sessionId = `session-${userId}-${topic}-${Date.now()}`;\n      \n      // Analyser le profil utilisateur (simulation)\n      const userProfile = await this.getUserProfile(userId);\n      \n      // Créer une session personnalisée\n      const session: CoachingSession = {\n        id: sessionId,\n        userId,\n        topic,\n        type: this.determineSessionType(topic),\n        messages: [\n          {\n            id: `msg-${Date.now()}`,\n            role: 'coach',\n            content: this.generateWelcomeMessage(topic, userProfile),\n            timestamp: new Date(),\n            type: 'text'\n          }\n        ],\n        recommendations: await this.generateRecommendations(topic, userProfile),\n        actionPlan: await this.generateActionPlan(topic, userProfile),\n        createdAt: new Date(),\n        updatedAt: new Date(),\n        status: 'active',\n        metadata: {\n          userLevel: userProfile.level || 'beginner',\n          sport: userProfile.sport,\n          goals: userProfile.goals || [],\n          sessionDuration: 0\n        }\n      };\n\n      this.sessions.set(sessionId, session);\n      return session;\n\n    } catch (error: any) {\n      console.error('Erreur lors de la création de la session de coaching:', error);\n      throw new Error('Impossible de créer la session de coaching');\n    }\n  }\n\n  /**\n   * Soumet une question et obtient une réponse personnalisée\n   */\n  static async submitQuestion(question: string, context: {\n    userId: string;\n    sessionId?: string;\n    userProfile?: unknown;\n    currentActivity?: string;\n  }): Promise<{\n    answer: string;\n    suggestions: string[];\n    followUpQuestions: string[];\n    relatedTopics: string[];\n    actionItems?: ActionItem[];\n  }> {\n    try {\n      await new Promise(resolve => setTimeout(resolve, 300));\n\n      const userProfile = context.userProfile || await this.getUserProfile(context.userId);\n      \n      // Analyser la question\n      const questionAnalysis = this.analyzeQuestion(question);\n      \n      // Générer une réponse personnalisée\n      const response = await this.generatePersonalizedResponse(\n        question, \n        questionAnalysis, \n        userProfile,\n        context\n      );\n\n      // Mettre à jour la session si elle existe\n      if (context.sessionId && this.sessions.has(context.sessionId)) {\n        const session = this.sessions.get(context.sessionId)!;\n        session.messages.push(\n          {\n            id: `msg-user-${Date.now()}`,\n            role: 'user',\n            content: question,\n            timestamp: new Date(),\n            type: 'text'\n          },\n          {\n            id: `msg-coach-${Date.now()}`,\n            role: 'coach',\n            content: response.answer,\n            timestamp: new Date(),\n            type: 'text'\n          }\n        );\n        session.updatedAt = new Date();\n      }\n\n      return response;\n\n    } catch (error: any) {\n      console.error('Erreur lors du traitement de la question:', error);\n      throw new Error('Impossible de traiter votre question');\n    }\n  }\n\n  /**\n   * Génère un plan personnalisé complet\n   */\n  static async getPersonalizedPlan(profile: {\n    userId: string;\n    sport?: string;\n    goals: string[];\n    level: string;\n    availability: string;\n    equipment: string[];\n    healthConditions?: string[];\n    preferences?: unknown;\n  }): Promise<PersonalizedPlan> {\n    try {\n      await new Promise(resolve => setTimeout(resolve, 800));\n\n      const planId = `plan-${profile.userId}-${Date.now()}`;\n      \n      // Déterminer le type de plan optimal\n      const planType = this.determinePlanType(profile);\n      \n      // Générer les phases du plan\n      const phases = await this.generatePlanPhases(profile, planType);\n      \n      // Définir les objectifs mesurables\n      const goals = this.generatePlanGoals(profile);\n      \n      // Créer les métriques de suivi\n      const progressMetrics = this.generateProgressMetrics(profile, planType);\n\n      const plan: PersonalizedPlan = {\n        id: planId,\n        userId: profile.userId,\n        type: planType,\n        title: this.generatePlanTitle(profile, planType),\n        description: this.generatePlanDescription(profile, planType),\n        duration: this.calculatePlanDuration(profile),\n        phases,\n        goals,\n        progressMetrics,\n        adaptations: await this.generatePlanAdaptations(profile),\n        createdAt: new Date(),\n        lastUpdated: new Date()\n      };\n\n      return plan;\n\n    } catch (error: any) {\n      console.error('Erreur lors de la génération du plan:', error);\n      throw new Error('Impossible de générer votre plan personnalisé');\n    }\n  }\n\n  /**\n   * Analyse les progrès et génère des insights\n   */\n  static async analyzeProgress(data: {\n    userId: string;\n    period: { start: Date; end: Date };\n    metrics: { [key: string]: number[] };\n    activities: unknown[];\n    feedback?: string[];\n  }): Promise<ProgressAnalysis> {\n    try {\n      await new Promise(resolve => setTimeout(resolve, 600));\n\n      const userProfile = await this.getUserProfile(data.userId);\n      \n      // Calculer le score global\n      const overallScore = this.calculateOverallScore(data.metrics);\n      \n      // Analyser par catégorie\n      const categoryScores = this.analyzeCategoryProgress(data.metrics, data.activities);\n      \n      // Identifier les réussites\n      const achievements = this.identifyAchievements(data.metrics, data.activities, userProfile);\n      \n      // Identifier les défis\n      const challenges = this.identifyChallenges(data.metrics, data.feedback);\n      \n      // Générer des recommandations\n      const recommendations = await this.generateProgressRecommendations(\n        categoryScores, \n        achievements, \n        challenges,\n        userProfile\n      );\n\n      const analysis: ProgressAnalysis = {\n        id: `analysis-${data.userId}-${Date.now()}`,\n        userId: data.userId,\n        period: data.period,\n        overallScore,\n        categoryScores,\n        achievements,\n        challenges,\n        recommendations,\n        nextSteps: await this.generateNextSteps(recommendations, userProfile),\n        motivationalMessage: this.generateMotivationalMessage(overallScore, achievements, userProfile)\n      };\n\n      return analysis;\n\n    } catch (error: any) {\n      console.error('Erreur lors de l\\'analyse des progrès:', error);\n      throw new Error('Impossible d\\'analyser vos progrès');\n    }\n  }\n\n  // Méthodes utilitaires privées\n\n  private static async getUserProfile(userId: string) {\n    // Simulation de récupération du profil utilisateur\n    return {\n      id: userId,\n      level: 'intermediate',\n      sport: 'running',\n      goals: ['improve-endurance', 'lose-weight'],\n      availability: '3-4-sessions',\n      equipment: ['minimal'],\n      age: 28,\n      experience: '2 years'\n    };\n  }\n\n  private static determineSessionType(topic: string): CoachingSession['type'] {\n    const topicMap: { [key: string]: CoachingSession['type'] } = {\n      'entrainement': 'workout',\n      'workout': 'workout',\n      'musculation': 'workout',\n      'nutrition': 'nutrition',\n      'alimentation': 'nutrition',\n      'recuperation': 'recovery',\n      'repos': 'recovery',\n      'mental': 'mental',\n      'motivation': 'mental',\n      'stress': 'mental'\n    };\n\n    return topicMap[topic.toLowerCase()] || 'general';\n  }\n\n  private static generateWelcomeMessage(topic: string, userProfile: unknown): string {\n    const messages = {\n      workout: \"Salut ! 💪 Prêt(e) pour optimiser ton entraînement ? Je vais t'aider à créer une session parfaitement adaptée à tes objectifs.\",\n      nutrition: \"Hello ! 🥗 Parlons nutrition ! Je suis là pour t'accompagner vers une alimentation qui booste tes performances.\",\n      recovery: \"Coucou ! 😴 La récupération est aussi importante que l'entraînement. Voyons comment optimiser ton repos.\",\n      mental: \"Salut ! 🧠 Le mental, c'est 50% de la performance. Je suis là pour renforcer ta motivation et ta confiance.\",\n      general: \"Hello ! 🌟 Je suis ton coach IA personnel. Comment puis-je t'aider à atteindre tes objectifs aujourd'hui ?\"\n    };\n\n    const sessionType = this.determineSessionType(topic);\n    return messages[sessionType] || messages.general;\n  }\n\n  private static async generateRecommendations(topic: string, userProfile: unknown): Promise<Recommendation[]> {\n    // Générer des recommandations basées sur le topic et le profil\n    const baseRecommendations: Recommendation[] = [\n      {\n        id: `rec-${Date.now()}-1`,\n        category: 'immediate',\n        priority: 'high',\n        title: 'Échauffement dynamique',\n        description: 'Commence toujours par 10 minutes d\\'échauffement progressif',\n        reasoning: 'Prévient les blessures et optimise les performances',\n        expectedBenefit: 'Réduction de 60% du risque de blessure',\n        timeframe: 'À chaque séance',\n        difficulty: 'easy',\n        resources: ['Guide échauffement', 'Vidéos techniques']\n      },\n      {\n        id: `rec-${Date.now()}-2`,\n        category: 'short-term',\n        priority: 'medium',\n        title: 'Progression graduée',\n        description: 'Augmente l\\'intensité de 10% chaque semaine maximum',\n        reasoning: 'Adaptation physiologique optimale sans surmenage',\n        expectedBenefit: 'Progrès constants et durables',\n        timeframe: '2-4 semaines',\n        difficulty: 'moderate'\n      }\n    ];\n\n    return baseRecommendations;\n  }\n\n  private static async generateActionPlan(topic: string, userProfile: unknown): Promise<ActionItem[]> {\n    return [\n      {\n        id: `action-${Date.now()}-1`,\n        task: 'Planifier 3 séances cette semaine',\n        deadline: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000),\n        priority: 'high',\n        status: 'pending',\n        category: 'planning',\n        estimatedDuration: 15\n      },\n      {\n        id: `action-${Date.now()}-2`,\n        task: 'Mesurer les progrès de la semaine',\n        deadline: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000),\n        priority: 'medium',\n        status: 'pending',\n        category: 'tracking',\n        estimatedDuration: 10\n      }\n    ];\n  }\n\n  private static analyzeQuestion(question: string): {\n    intent: string;\n    entities: string[];\n    complexity: 'simple' | 'moderate' | 'complex';\n    urgency: 'low' | 'medium' | 'high';\n  } {\n    // Analyse simple basée sur des mots-clés\n    const workoutKeywords = ['entrainement', 'exercice', 'muscle', 'cardio', 'force'];\n    const nutritionKeywords = ['nutrition', 'alimentation', 'repas', 'calories', 'proteines'];\n    const recoveryKeywords = ['recuperation', 'repos', 'sommeil', 'fatigue', 'douleur'];\n    \n    let intent = 'general';\n    if (workoutKeywords.some(kw => question.toLowerCase().includes(kw))) intent = 'workout';\n    if (nutritionKeywords.some(kw => question.toLowerCase().includes(kw))) intent = 'nutrition';\n    if (recoveryKeywords.some(kw => question.toLowerCase().includes(kw))) intent = 'recovery';\n\n    return {\n      intent,\n      entities: [],\n      complexity: question.length > 100 ? 'complex' : question.length > 50 ? 'moderate' : 'simple',\n      urgency: question.includes('urgent') || question.includes('douleur') ? 'high' : 'medium'\n    };\n  }\n\n  private static async generatePersonalizedResponse(\n    question: string, \n    analysis: unknown, \n    userProfile: unknown,\n    context: unknown\n  ) {\n    // Générer une réponse personnalisée intelligente\n    const responses = {\n      workout: {\n        answer: \"Excellente question sur l'entraînement ! Basé sur ton profil, voici ce que je recommande...\",\n        suggestions: [\n          \"Commence par un échauffement de 10 minutes\",\n          \"Focus sur la technique avant l'intensité\",\n          \"Intègre 48h de repos entre les séances intense\"\n        ],\n        followUpQuestions: [\n          \"As-tu des douleurs actuellement ?\",\n          \"Quel est ton objectif principal ?\",\n          \"Combien de temps as-tu pour t'entraîner ?\"\n        ],\n        relatedTopics: [\"Nutrition post-entraînement\", \"Récupération active\", \"Planification hebdomadaire\"]\n      },\n      default: {\n        answer: \"Merci pour ta question ! Je vais t'aider à y répondre de manière personnalisée...\",\n        suggestions: [\"Voyons ensemble les meilleures options pour toi\"],\n        followUpQuestions: [\"Peux-tu me donner plus de détails ?\"],\n        relatedTopics: [\"Conseils généraux\", \"Ressources utiles\"]\n      }\n    };\n\n    return responses.default; // Simplification pour l'exemple\n  }\n\n  private static determinePlanType(profile: unknown): PersonalizedPlan['type'] {\n    // Logique pour déterminer le type de plan optimal\n    return 'comprehensive';\n  }\n\n  private static async generatePlanPhases(profile: unknown, planType: string): Promise<PlanPhase[]> {\n    // Générer les phases du plan\n    return [\n      {\n        id: `phase-1-${Date.now()}`,\n        name: 'Phase d\\'adaptation',\n        description: 'Période d\\'adaptation et d\\'apprentissage des mouvements de base',\n        startWeek: 1,\n        endWeek: 4,\n        focus: ['Technique', 'Adaptation', 'Habitudes'],\n        sessions: [],\n        milestones: []\n      }\n    ];\n  }\n\n  private static generatePlanGoals(profile: unknown): PlanGoal[] {\n    return [\n      {\n        id: `goal-${Date.now()}`,\n        description: 'Améliorer l\\'endurance cardiovasculaire',\n        metric: 'VO2 max estimé',\n        currentValue: 35,\n        targetValue: 42,\n        timeframe: '12 semaines',\n        priority: 'primary'\n      }\n    ];\n  }\n\n  private static generateProgressMetrics(profile: unknown, planType: string): ProgressMetric[] {\n    return [\n      {\n        id: `metric-${Date.now()}`,\n        name: 'Fréquence cardiaque au repos',\n        unit: 'bpm',\n        frequency: 'weekly',\n        target: 60,\n        benchmarks: [\n          { value: 80, label: 'Débutant' },\n          { value: 70, label: 'Intermédiaire' },\n          { value: 60, label: 'Avancé' }\n        ]\n      }\n    ];\n  }\n\n  private static async generatePlanAdaptations(profile: unknown): Promise<PlanAdaptation[]> {\n    return [];\n  }\n\n  private static generatePlanTitle(profile: unknown, planType: string): string {\n    return 'Plan Personnalisé MyFitHero';\n  }\n\n  private static generatePlanDescription(profile: unknown, planType: string): string {\n    return 'Un programme complet adapté à vos objectifs et contraintes';\n  }\n\n  private static calculatePlanDuration(profile: unknown): string {\n    return '12 semaines';\n  }\n\n  private static calculateOverallScore(metrics: { [key: string]: number[] }): number {\n    // Calcul du score global basé sur les métriques\n    return Math.floor(Math.random() * 40) + 60; // Score entre 60-100 pour l'exemple\n  }\n\n  private static analyzeCategoryProgress(metrics: unknown, activities: unknown) {\n    return [\n      {\n        category: 'Endurance',\n        score: 75,\n        trend: 'improving' as const,\n        insights: ['Progression constante sur les 3 dernières semaines']\n      }\n    ];\n  }\n\n  private static identifyAchievements(metrics: unknown, activities: unknown, userProfile: unknown): Achievement[] {\n    return [\n      {\n        id: `achievement-${Date.now()}`,\n        title: 'Régularité exemplaire',\n        description: 'Tu as maintenu 3 séances par semaine pendant 4 semaines consécutives',\n        category: 'consistency',\n        earnedAt: new Date(),\n        impact: 'medium',\n        celebrationLevel: 'milestone'\n      }\n    ];\n  }\n\n  private static identifyChallenges(metrics: unknown, feedback: unknown): Challenge[] {\n    return [\n      {\n        id: `challenge-${Date.now()}`,\n        title: 'Plateau de performance',\n        description: 'Tes temps de course stagnent depuis 2 semaines',\n        category: 'performance',\n        severity: 'moderate',\n        solutions: ['Varier les intensités', 'Intégrer du fractionné', 'Vérifier la récupération'],\n        preventionTips: ['Planification progressive', 'Écoute du corps']\n      }\n    ];\n  }\n\n  private static async generateProgressRecommendations(\n    categoryScores: unknown, \n    achievements: unknown, \n    challenges: unknown,\n    userProfile: unknown\n  ): Promise<Recommendation[]> {\n    return [\n      {\n        id: `rec-progress-${Date.now()}`,\n        category: 'short-term',\n        priority: 'high',\n        title: 'Intensifier l\\'entraînement',\n        description: 'Ajouter une séance de fractionné par semaine',\n        reasoning: 'Tes progrès montrent que tu es prêt(e) pour plus d\\'intensité',\n        expectedBenefit: 'Amélioration de 10-15% des performances',\n        timeframe: '3-4 semaines',\n        difficulty: 'moderate'\n      }\n    ];\n  }\n\n  private static async generateNextSteps(recommendations: Recommendation[], userProfile: unknown): Promise<ActionItem[]> {\n    return [\n      {\n        id: `next-${Date.now()}`,\n        task: 'Planifier une séance de fractionné cette semaine',\n        deadline: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000),\n        priority: 'high',\n        status: 'pending',\n        category: 'workout',\n        estimatedDuration: 45\n      }\n    ];\n  }\n\n  private static generateMotivationalMessage(overallScore: number, achievements: Achievement[], userProfile: unknown): string {\n    if (overallScore >= 80) {\n      return \"🔥 Tu es en feu ! Tes efforts payent vraiment. Continue comme ça, tu es sur la bonne voie pour dépasser tous tes objectifs !\";\n    } else if (overallScore >= 60) {\n      return \"💪 Belle progression ! Tu as posé de solides bases. Quelques ajustements et tu vas exploser tes records !\";\n    } else {\n      return \"🌟 Chaque pas compte ! Tu as commencé le plus dur. Reste concentré(e) sur tes objectifs, les résultats arrivent !\";\n    }\n  }\n}\n\n// Types additionnels\ninterface NutritionGuideline {\n  meal: string;\n  timing: string;\n  macros: { protein: number; carbs: number; fats: number };\n  suggestions: string[];\n}\n\ninterface RecoveryProtocol {\n  techniques: string[];\n  duration: number;\n  timing: string;\n  equipment?: string[];\n}\n\ninterface Milestone {\n  id: string;\n  name: string;\n  description: string;\n  targetWeek: number;\n  metric: string;\n  targetValue: number;\n}\n\ninterface PlanAdaptation {\n  id: string;\n  condition: string;\n  modification: string;\n  reasoning: string;\n}\n"],"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","ignoreList":[]}