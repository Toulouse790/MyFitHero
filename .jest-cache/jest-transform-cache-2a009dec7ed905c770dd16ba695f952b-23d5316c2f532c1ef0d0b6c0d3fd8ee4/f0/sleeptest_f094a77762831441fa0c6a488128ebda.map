{"file":"/workspaces/MyFitHero/src/__tests__/unit/features/sleep.test.tsx","mappings":"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","names":[],"sources":["/workspaces/MyFitHero/src/__tests__/unit/features/sleep.test.tsx"],"sourcesContent":["/**\n * TESTS UNITAIRES EXHAUSTIFS - MODULE SLEEP  \n * Tests pour l'analyse du sommeil et optimisation\n */\n\nimport { render, screen, fireEvent } from '@testing-library/react';\n\n// Interfaces pour les tests sleep\ninterface SleepEntry {\n  id: string;\n  user_id: string;\n  date: string;\n  bedtime: string;\n  wake_time: string;\n  total_sleep_hours: number;\n  sleep_efficiency: number; // %\n  deep_sleep_minutes: number;\n  light_sleep_minutes: number;\n  rem_sleep_minutes: number;\n  awake_minutes: number;\n  sleep_quality_rating: number; // 1-10\n  factors?: {\n    caffeine_hours_before?: number;\n    alcohol_consumed?: boolean;\n    screen_time_before_bed?: number;\n    room_temperature?: number;\n    exercise_hours_before?: number;\n    stress_level?: number; // 1-10\n  };\n}\n\ninterface SleepGoals {\n  target_sleep_hours: number;\n  target_bedtime: string;\n  target_wake_time: string;\n  target_sleep_efficiency: number;\n}\n\ndescribe('😴 SLEEP MODULE - Tests Unitaires Exhaustifs', () => {\n  describe('Analyse de la qualité du sommeil', () => {\n    it('calcule correctement le score de qualité du sommeil', () => {\n      const calculateSleepScore = (entry: SleepEntry): number => {\n        let score = 0;\n        \n        // Durée (40% du score)\n        const durationScore = Math.min((entry.total_sleep_hours / 8) * 40, 40);\n        \n        // Efficacité (30% du score)\n        const efficiencyScore = (entry.sleep_efficiency / 100) * 30;\n        \n        // Sommeil profond (20% du score) - Optimal: 15-20% du temps total\n        const deepSleepPercentage = (entry.deep_sleep_minutes / (entry.total_sleep_hours * 60)) * 100;\n        const deepScore = deepSleepPercentage >= 15 && deepSleepPercentage <= 20 ? 20 : \n                         deepSleepPercentage > 10 ? 15 : 10;\n        \n        // Qualité subjective (10% du score)\n        const subjectiveScore = (entry.sleep_quality_rating / 10) * 10;\n        \n        score = durationScore + efficiencyScore + deepScore + subjectiveScore;\n        return Math.round(score);\n      };\n\n      const excellentSleep: SleepEntry = {\n        id: '1',\n        user_id: 'user-123',\n        date: '2024-01-15',\n        bedtime: '22:30',\n        wake_time: '06:30',\n        total_sleep_hours: 8,\n        sleep_efficiency: 92,\n        deep_sleep_minutes: 80, // ~17% de 480min\n        light_sleep_minutes: 280,\n        rem_sleep_minutes: 120,\n        awake_minutes: 20,\n        sleep_quality_rating: 9\n      };\n\n      const poorSleep: SleepEntry = {\n        id: '2',\n        user_id: 'user-123',\n        date: '2024-01-16',\n        bedtime: '23:45',\n        wake_time: '06:00',\n        total_sleep_hours: 6.25,\n        sleep_efficiency: 75,\n        deep_sleep_minutes: 35, // ~9% seulement\n        light_sleep_minutes: 200,\n        rem_sleep_minutes: 90,\n        awake_minutes: 50,\n        sleep_quality_rating: 4\n      };\n\n      const excellentScore = calculateSleepScore(excellentSleep);\n      const poorScore = calculateSleepScore(poorSleep);\n\n      expect(excellentScore).toBeGreaterThanOrEqual(85); // Excellent sommeil\n      expect(poorScore).toBeLessThan(70); // Mauvais sommeil\n      expect(excellentScore).toBeGreaterThan(poorScore);\n    });\n\n    it('identifie les patterns de sommeil et tendances', () => {\n      const analyzeSleepPatterns = (entries: SleepEntry[]) => {\n        if (entries.length < 7) return { insufficient_data: true };\n\n        const patterns = {\n          average_bedtime: '',\n          average_wake_time: '',\n          average_duration: 0,\n          consistency_score: 0,\n          weekend_vs_weekday: { bedtime_diff: 0, duration_diff: 0 }\n        };\n\n        // Calculer moyenne des heures de coucher\n        const bedtimes = entries.map(e => {\n          const [hours, minutes] = e.bedtime.split(':').map(Number);\n          return hours + minutes / 60;\n        });\n        const avgBedtime = bedtimes.reduce((a, b) => a + b, 0) / bedtimes.length;\n        patterns.average_bedtime = `${Math.floor(avgBedtime)}:${Math.round((avgBedtime % 1) * 60).toString().padStart(2, '0')}`;\n\n        // Calculer la régularité (score basé sur écart-type)\n        const bedtimeVariance = bedtimes.reduce((sum, time) => sum + Math.pow(time - avgBedtime, 2), 0) / bedtimes.length;\n        const stdDev = Math.sqrt(bedtimeVariance);\n        patterns.consistency_score = Math.max(0, 100 - (stdDev * 20)); // Moins de variance = meilleure régularité\n\n        // Durée moyenne\n        patterns.average_duration = entries.reduce((sum, e) => sum + e.total_sleep_hours, 0) / entries.length;\n\n        return patterns;\n      };\n\n      const consistentWeek: SleepEntry[] = Array(7).fill(null).map((_, i) => ({\n        id: `${i}`,\n        user_id: 'user-123',\n        date: `2024-01-${15 + i}`,\n        bedtime: '22:30', // Très régulier\n        wake_time: '06:30',\n        total_sleep_hours: 8,\n        sleep_efficiency: 90,\n        deep_sleep_minutes: 80,\n        light_sleep_minutes: 280,\n        rem_sleep_minutes: 120,\n        awake_minutes: 20,\n        sleep_quality_rating: 8\n      }));\n\n      const inconsistentWeek: SleepEntry[] = [\n        { ...consistentWeek[0], bedtime: '21:30' },\n        { ...consistentWeek[1], bedtime: '23:45' },\n        { ...consistentWeek[2], bedtime: '22:00' },\n        { ...consistentWeek[3], bedtime: '00:15' },\n        { ...consistentWeek[4], bedtime: '22:15' },\n        { ...consistentWeek[5], bedtime: '23:30' },\n        { ...consistentWeek[6], bedtime: '21:45' }\n      ];\n\n      const consistentPatterns = analyzeSleepPatterns(consistentWeek);\n      const inconsistentPatterns = analyzeSleepPatterns(inconsistentWeek);\n\n      expect(consistentPatterns.consistency_score).toBeGreaterThan(90);\n      expect(inconsistentPatterns.consistency_score).toBeLessThan(70);\n      expect(consistentPatterns.average_bedtime).toBe('22:30');\n    });\n\n    it('corrèle les facteurs externes avec la qualité du sommeil', () => {\n      const analyzeSleepFactors = (entries: SleepEntry[]) => {\n        const correlations = {\n          caffeine_impact: 0,\n          exercise_impact: 0,\n          screen_impact: 0,\n          stress_impact: 0\n        };\n\n        const entriesWithFactors = entries.filter(e => e.factors);\n        \n        if (entriesWithFactors.length < 3) return correlations;\n\n        // Analyse impact caféine\n        const caffeineEntries = entriesWithFactors.filter(e => e.factors?.caffeine_hours_before !== undefined);\n        if (caffeineEntries.length >= 2) {\n          const lateCaffeineEntries = caffeineEntries.filter(e => e.factors!.caffeine_hours_before! < 6);\n          const earlyCaffeineEntries = caffeineEntries.filter(e => e.factors!.caffeine_hours_before! >= 6);\n          \n          if (lateCaffeineEntries.length > 0 && earlyCaffeineEntries.length > 0) {\n            const lateAvgQuality = lateCaffeineEntries.reduce((sum, e) => sum + e.sleep_quality_rating, 0) / lateCaffeineEntries.length;\n            const earlyAvgQuality = earlyCaffeineEntries.reduce((sum, e) => sum + e.sleep_quality_rating, 0) / earlyCaffeineEntries.length;\n            correlations.caffeine_impact = earlyAvgQuality - lateAvgQuality; // Positif = caféine tard nuit à la qualité\n          }\n        }\n\n        // Analyse impact exercice\n        const exerciseEntries = entriesWithFactors.filter(e => e.factors?.exercise_hours_before !== undefined);\n        if (exerciseEntries.length >= 2) {\n          const lateExerciseEntries = exerciseEntries.filter(e => e.factors!.exercise_hours_before! < 3);\n          const earlyExerciseEntries = exerciseEntries.filter(e => e.factors!.exercise_hours_before! >= 4);\n          \n          if (lateExerciseEntries.length > 0 && earlyExerciseEntries.length > 0) {\n            const lateAvgQuality = lateExerciseEntries.reduce((sum, e) => sum + e.sleep_quality_rating, 0) / lateExerciseEntries.length;\n            const earlyAvgQuality = earlyExerciseEntries.reduce((sum, e) => sum + e.sleep_quality_rating, 0) / earlyExerciseEntries.length;\n            correlations.exercise_impact = earlyAvgQuality - lateAvgQuality;\n          }\n        }\n\n        return correlations;\n      };\n\n      const entriesWithFactors: SleepEntry[] = [\n        {\n          id: '1', user_id: 'user-123', date: '2024-01-15',\n          bedtime: '22:30', wake_time: '06:30', total_sleep_hours: 8,\n          sleep_efficiency: 92, deep_sleep_minutes: 80, light_sleep_minutes: 280,\n          rem_sleep_minutes: 120, awake_minutes: 20, sleep_quality_rating: 8,\n          factors: { caffeine_hours_before: 8, exercise_hours_before: 5 }\n        },\n        {\n          id: '2', user_id: 'user-123', date: '2024-01-16',\n          bedtime: '23:00', wake_time: '06:30', total_sleep_hours: 7.5,\n          sleep_efficiency: 78, deep_sleep_minutes: 60, light_sleep_minutes: 240,\n          rem_sleep_minutes: 100, awake_minutes: 50, sleep_quality_rating: 5,\n          factors: { caffeine_hours_before: 3, exercise_hours_before: 1 }\n        },\n        {\n          id: '3', user_id: 'user-123', date: '2024-01-17',\n          bedtime: '22:15', wake_time: '06:30', total_sleep_hours: 8.25,\n          sleep_efficiency: 90, deep_sleep_minutes: 85, light_sleep_minutes: 290,\n          rem_sleep_minutes: 130, awake_minutes: 15, sleep_quality_rating: 9,\n          factors: { caffeine_hours_before: 10, exercise_hours_before: 6 }\n        }\n      ];\n\n      const correlations = analyzeSleepFactors(entriesWithFactors);\n\n      expect(correlations.caffeine_impact).toBeGreaterThan(0); // Caféine tard impact négatif\n      expect(correlations.exercise_impact).toBeGreaterThan(0); // Exercice tard impact négatif\n    });\n  });\n\n  describe('Optimisation et recommandations', () => {\n    it('génère des recommandations personnalisées pour améliorer le sommeil', () => {\n      const generateSleepRecommendations = (\n        recentEntries: SleepEntry[],\n        goals: SleepGoals\n      ) => {\n        const recommendations = [];\n        \n        if (recentEntries.length === 0) return recommendations;\n\n        const avgDuration = recentEntries.reduce((sum, e) => sum + e.total_sleep_hours, 0) / recentEntries.length;\n        const avgEfficiency = recentEntries.reduce((sum, e) => sum + e.sleep_efficiency, 0) / recentEntries.length;\n        const avgDeepSleep = recentEntries.reduce((sum, e) => sum + e.deep_sleep_minutes, 0) / recentEntries.length;\n\n        // Durée insuffisante\n        if (avgDuration < goals.target_sleep_hours - 0.5) {\n          recommendations.push({\n            category: 'duration',\n            priority: 'high',\n            title: 'Augmenter la durée de sommeil',\n            description: `Votre moyenne de ${avgDuration.toFixed(1)}h est inférieure à votre objectif de ${goals.target_sleep_hours}h`,\n            suggestions: [\n              'Se coucher 30 minutes plus tôt',\n              'Créer une routine de coucher relaxante',\n              'Éviter les écrans 1h avant le coucher'\n            ]\n          });\n        }\n\n        // Efficacité faible\n        if (avgEfficiency < 85) {\n          recommendations.push({\n            category: 'efficiency',\n            priority: 'medium',\n            title: 'Améliorer l\\'efficacité du sommeil',\n            description: `Votre efficacité de ${avgEfficiency.toFixed(1)}% peut être améliorée`,\n            suggestions: [\n              'Maintenir une température de chambre fraîche (16-19°C)',\n              'Investir dans un matelas et oreillers de qualité',\n              'Pratiquer la méditation ou relaxation avant le coucher'\n            ]\n          });\n        }\n\n        // Sommeil profond insuffisant\n        if (avgDeepSleep < 60) {\n          recommendations.push({\n            category: 'deep_sleep',\n            priority: 'medium',\n            title: 'Augmenter le sommeil profond',\n            description: `${avgDeepSleep.toFixed(0)} minutes de sommeil profond, optimum: 90-120min`,\n            suggestions: [\n              'Éviter l\\'alcool 3h avant le coucher',\n              'Faire de l\\'exercice régulièrement (mais pas tard le soir)',\n              'Maintenir un horaire de sommeil régulier'\n            ]\n          });\n        }\n\n        return recommendations;\n      };\n\n      const poorSleepEntries: SleepEntry[] = [\n        {\n          id: '1', user_id: 'user-123', date: '2024-01-15',\n          bedtime: '23:30', wake_time: '06:00', total_sleep_hours: 6.5,\n          sleep_efficiency: 75, deep_sleep_minutes: 45, light_sleep_minutes: 200,\n          rem_sleep_minutes: 90, awake_minutes: 60, sleep_quality_rating: 4\n        }\n      ];\n\n      const goals: SleepGoals = {\n        target_sleep_hours: 8,\n        target_bedtime: '22:30',\n        target_wake_time: '06:30',\n        target_sleep_efficiency: 90\n      };\n\n      const recommendations = generateSleepRecommendations(poorSleepEntries, goals);\n\n      expect(recommendations).toEqual(\n        expect.arrayContaining([\n          expect.objectContaining({\n            category: 'duration',\n            priority: 'high'\n          }),\n          expect.objectContaining({\n            category: 'efficiency',\n            priority: 'medium'\n          }),\n          expect.objectContaining({\n            category: 'deep_sleep',\n            priority: 'medium'\n          })\n        ])\n      );\n    });\n\n    it('optimise l\\'horaire de sommeil basé sur le chronotype', () => {\n      const optimizeSleepSchedule = (\n        chronotype: 'morning' | 'evening' | 'intermediate',\n        constraints: { wake_time?: string, work_start?: string, commute_time?: number }\n      ) => {\n        const recommendations = {\n          optimal_bedtime: '',\n          optimal_wake_time: '',\n          sleep_window: '',\n          tips: [] as string[]\n        };\n\n        // Déterminer l'heure de réveil idéale\n        if (constraints.work_start && constraints.commute_time) {\n          const workHour = parseInt(constraints.work_start.split(':')[0]);\n          const workMinute = parseInt(constraints.work_start.split(':')[1]);\n          const wakeHour = workHour - Math.ceil(constraints.commute_time / 60) - 1;\n          recommendations.optimal_wake_time = `${wakeHour.toString().padStart(2, '0')}:00`;\n        } else if (constraints.wake_time) {\n          recommendations.optimal_wake_time = constraints.wake_time;\n        } else {\n          // Heure de réveil par défaut selon chronotype\n          recommendations.optimal_wake_time = chronotype === 'morning' ? '06:00' : \n                                           chronotype === 'evening' ? '08:00' : '07:00';\n        }\n\n        // Calculer l'heure de coucher (8h avant le réveil)\n        const wakeHour = parseInt(recommendations.optimal_wake_time.split(':')[0]);\n        const bedHour = wakeHour - 8;\n        const adjustedBedHour = bedHour < 0 ? 24 + bedHour : bedHour;\n        recommendations.optimal_bedtime = `${adjustedBedHour.toString().padStart(2, '0')}:00`;\n\n        // Fenêtre de sommeil idéale\n        recommendations.sleep_window = `${recommendations.optimal_bedtime} - ${recommendations.optimal_wake_time}`;\n\n        // Conseils spécifiques au chronotype\n        if (chronotype === 'morning') {\n          recommendations.tips = [\n            'Exposez-vous à la lumière naturelle dès le réveil',\n            'Évitez la caféine après 14h',\n            'Profitez de votre pic de productivité matinal'\n          ];\n        } else if (chronotype === 'evening') {\n          recommendations.tips = [\n            'Utilisez des lunettes anti-lumière bleue le soir',\n            'Créez un environnement sombre 2h avant le coucher',\n            'Planifiez les tâches importantes en fin de journée'\n          ];\n        }\n\n        return recommendations;\n      };\n\n      const morningPersonSchedule = optimizeSleepSchedule('morning', {\n        work_start: '08:00',\n        commute_time: 30\n      });\n\n      const eveningPersonSchedule = optimizeSleepSchedule('evening', {\n        work_start: '09:00',\n        commute_time: 45\n      });\n\n      expect(morningPersonSchedule.optimal_wake_time).toBe('06:00');\n      expect(morningPersonSchedule.optimal_bedtime).toBe('22:00');\n      expect(morningPersonSchedule.tips).toContain('Exposez-vous à la lumière naturelle dès le réveil');\n\n      expect(eveningPersonSchedule.optimal_wake_time).toBe('07:00');\n      expect(eveningPersonSchedule.optimal_bedtime).toBe('23:00');\n      expect(eveningPersonSchedule.tips).toContain('Utilisez des lunettes anti-lumière bleue le soir');\n    });\n  });\n\n  describe('Intégration avec d\\'autres modules', () => {\n    it('synchronise avec les données de workout pour optimiser la récupération', () => {\n      const optimizeSleepForRecovery = (\n        workoutData: { type: string, intensity: string, duration: number, time: string },\n        currentSleepPlan: SleepGoals\n      ) => {\n        const adjustments = { ...currentSleepPlan };\n\n        // Entraînement intense = besoin de plus de sommeil\n        if (workoutData.intensity === 'high' || workoutData.duration > 90) {\n          // Ajouter 30min au sommeil cible\n          adjustments.target_sleep_hours = Math.min(currentSleepPlan.target_sleep_hours + 0.5, 9.5);\n        }\n\n        // Entraînement tardif = ajuster l'heure de coucher\n        const workoutHour = parseInt(workoutData.time.split(':')[0]);\n        if (workoutHour >= 19) { // 19h ou plus tard\n          // Repousser le coucher de 1h pour permettre la récupération\n          const currentBedHour = parseInt(currentSleepPlan.target_bedtime.split(':')[0]);\n          const adjustedBedHour = Math.min(currentBedHour + 1, 23);\n          adjustments.target_bedtime = `${adjustedBedHour.toString().padStart(2, '0')}:00`;\n        }\n\n        return {\n          adjustments,\n          recommendations: [\n            'Privilégier le sommeil profond après un entraînement intense',\n            'Éviter les écrans 2h après l\\'entraînement pour faciliter la récupération',\n            'Maintenir la chambre à 16-18°C pour optimiser la récupération'\n          ]\n        };\n      };\n\n      const intenseWorkout = {\n        type: 'strength',\n        intensity: 'high',\n        duration: 120,\n        time: '20:00'\n      };\n\n      const baseSleepPlan: SleepGoals = {\n        target_sleep_hours: 8,\n        target_bedtime: '22:00',\n        target_wake_time: '06:00',\n        target_sleep_efficiency: 90\n      };\n\n      const optimizedPlan = optimizeSleepForRecovery(intenseWorkout, baseSleepPlan);\n\n      expect(optimizedPlan.adjustments.target_sleep_hours).toBe(8.5); // +30min\n      expect(optimizedPlan.adjustments.target_bedtime).toBe('23:00'); // +1h pour entraînement tardif\n      expect(optimizedPlan.recommendations).toContain('Privilégier le sommeil profond après un entraînement intense');\n    });\n\n    it('intègre les données nutritionnelles pour optimiser le sommeil', () => {\n      const optimizeSleepNutrition = (\n        nutritionData: {\n          last_meal_time: string,\n          caffeine_intake: number,\n          alcohol_consumed: boolean,\n          fluid_intake_evening: number\n        },\n        target_bedtime: string\n      ) => {\n        const recommendations = [];\n        const bedtimeHour = parseInt(target_bedtime.split(':')[0]);\n        const lastMealHour = parseInt(nutritionData.last_meal_time.split(':')[0]);\n\n        // Dernière prise alimentaire trop proche du coucher\n        const hoursDiff = bedtimeHour - lastMealHour;\n        if (hoursDiff < 2) {\n          recommendations.push({\n            category: 'meal_timing',\n            message: 'Terminer le dîner au moins 2h avant le coucher',\n            impact: 'Améliore la digestion et la qualité du sommeil'\n          });\n        }\n\n        // Caféine trop tardive\n        if (nutritionData.caffeine_intake > 0) {\n          recommendations.push({\n            category: 'caffeine',\n            message: 'Éviter la caféine après 14h pour un sommeil optimal',\n            impact: 'Réduit le temps d\\'endormissement'\n          });\n        }\n\n        // Alcool consommé\n        if (nutritionData.alcohol_consumed) {\n          recommendations.push({\n            category: 'alcohol',\n            message: 'L\\'alcool perturbe les cycles de sommeil, particulièrement le REM',\n            impact: 'Réduit la qualité du sommeil malgré un endormissement plus rapide'\n          });\n        }\n\n        // Hydratation excessive en soirée\n        if (nutritionData.fluid_intake_evening > 500) { // >500ml\n          recommendations.push({\n            category: 'hydration',\n            message: 'Limiter les liquides 2h avant le coucher',\n            impact: 'Réduit les réveils nocturnes'\n          });\n        }\n\n        return recommendations;\n      };\n\n      const problematicNutrition = {\n        last_meal_time: '21:30',\n        caffeine_intake: 150,\n        alcohol_consumed: true,\n        fluid_intake_evening: 750\n      };\n\n      const recommendations = optimizeSleepNutrition(problematicNutrition, '22:30');\n\n      expect(recommendations).toHaveLength(4); // Tous les problèmes détectés\n      expect(recommendations[0].category).toBe('meal_timing');\n      expect(recommendations[1].category).toBe('caffeine');\n      expect(recommendations[2].category).toBe('alcohol');\n      expect(recommendations[3].category).toBe('hydration');\n    });\n  });\n});"],"version":3}