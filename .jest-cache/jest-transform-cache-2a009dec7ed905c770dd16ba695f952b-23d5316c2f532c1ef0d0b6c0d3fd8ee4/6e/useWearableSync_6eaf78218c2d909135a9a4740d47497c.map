{"version":3,"names":["cov_1g2njqdyj7","actualCoverage","s","react_1","require","use_toast_1","useWearableSync","f","isLoading","setIsLoading","useState","lastSyncTime","setLastSyncTime","syncError","setSyncError","toast","useToast","isAppleHealthAvailable","useCallback","b","window","webkit","messageHandlers","healthKit","isGoogleFitAvailable","gapi","client","fitness","syncAppleHealth","Promise","resolve","setTimeout","mockHealthData","steps","Math","floor","random","heartRate","Array","from","length","sleepSessions","id","startTime","Date","now","endTime","duration","quality","deepSleepDuration","remSleepDuration","awakenings","lastSync","caloriesBurned","distance","activeMinutes","title","description","variant","error","errorMessage","Error","message","syncGoogleFit","mockFitData","syncAll","results","allSettled","appleResult","googleResult","status","appleData","value","googleData","combinedData","max","scheduleSync","intervalMinutes","interval","setInterval","console","clearInterval","getCachedData","cachedData","localStorage","getItem","parsed","JSON","parse","map","session","cacheData","data","setItem","stringify","exports"],"sources":["/workspaces/MyFitHero/src/features/wearables/hooks/useWearableSync.ts"],"sourcesContent":["import React, { useState, useCallback } from 'react';\nimport { useToast } from '@/shared/hooks/use-toast';\n\nexport interface SleepSession {\n  id: string;\n  startTime: Date;\n  endTime: Date;\n  duration: number; // en minutes\n  quality: 'poor' | 'fair' | 'good' | 'excellent';\n  deepSleepDuration?: number;\n  remSleepDuration?: number;\n  awakenings?: number;\n}\n\nexport interface WearableData {\n  steps: number;\n  heartRate: number[]; // Array of heart rate readings\n  sleepSessions: SleepSession[];\n  lastSync: Date;\n  caloriesBurned?: number;\n  distance?: number; // en mètres\n  activeMinutes?: number;\n}\n\nexport interface HealthKitData {\n  steps: number;\n  heartRate: number[];\n  sleepData: {\n    bedTime: Date;\n    wakeTime: Date;\n    sleepDuration: number;\n    sleepQuality: number; // 0-1 scale\n  }[];\n  workouts: {\n    type: string;\n    startTime: Date;\n    endTime: Date;\n    calories: number;\n    distance?: number;\n  }[];\n}\n\nexport interface GoogleFitData {\n  steps: number;\n  heartRate: number[];\n  sleepSessions: {\n    startTime: Date;\n    endTime: Date;\n    sleepType: string;\n  }[];\n  activities: {\n    type: string;\n    startTime: Date;\n    endTime: Date;\n    calories: number;\n  }[];\n}\n\nexport const useWearableSync = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [lastSyncTime, setLastSyncTime] = useState<Date | null>(null);\n  const [syncError, setSyncError] = useState<string | null>(null);\n  const { toast } = useToast();\n\n  // Vérifier si Apple Health est disponible\n  const isAppleHealthAvailable = useCallback((): boolean => {\n    // Dans un environnement réel, cela vérifierait la disponibilité d'Apple Health\n    // @ts-expect-error - Accessing webkit API\n    return (\n      typeof window !== 'undefined' && window.webkit && window.webkit.messageHandlers?.healthKit\n    );\n  }, []);\n\n  // Vérifier si Google Fit est disponible\n  const isGoogleFitAvailable = useCallback((): boolean => {\n    // Dans un environnement réel, cela vérifierait la disponibilité de Google Fit\n    // @ts-expect-error - Accessing gapi client\n    return typeof window !== 'undefined' && window.gapi && window.gapi.client?.fitness;\n  }, []);\n\n  // Synchroniser avec Apple Health\n  const syncAppleHealth = useCallback(async (): Promise<WearableData | null> => {\n    if (!isAppleHealthAvailable()) {\n      setSyncError(\"Apple Health n'est pas disponible sur cet appareil\");\n      return null;\n    }\n\n    try {\n      setIsLoading(true);\n      setSyncError(null);\n\n      // Simuler l'appel à Apple Health (dans un vrai projet, cela utiliserait HealthKit)\n      await new Promise(resolve => setTimeout(resolve, 2000));\n\n      // Données simulées (dans un vrai projet, cela viendrait d'Apple Health)\n      const mockHealthData: WearableData = {\n        steps: Math.floor(Math.random() * 10000) + 5000,\n        heartRate: Array.from({ length: 10 }, () => Math.floor(Math.random() * 40) + 60),\n        sleepSessions: [\n          {\n            id: '1',\n            startTime: new Date(Date.now() - 8 * 60 * 60 * 1000), // 8h ago\n            endTime: new Date(Date.now() - 30 * 60 * 1000), // 30min ago\n            duration: 450, // 7.5 heures\n            quality: 'good',\n            deepSleepDuration: 120,\n            remSleepDuration: 90,\n            awakenings: 2,\n          },\n        ],\n        lastSync: new Date(),\n        caloriesBurned: Math.floor(Math.random() * 500) + 200,\n        distance: Math.floor(Math.random() * 5000) + 2000,\n        activeMinutes: Math.floor(Math.random() * 120) + 30,\n      };\n\n      setLastSyncTime(new Date());\n\n      toast({\n        title: 'Synchronisation réussie',\n        description: 'Données Apple Health synchronisées avec succès',\n        variant: 'default',\n      });\n\n      return mockHealthData;\n    } catch (error) {\n      // Erreur silencieuse\n      const errorMessage =\n        error instanceof Error ? error.message : 'Erreur de synchronisation Apple Health';\n      setSyncError(errorMessage);\n\n      toast({\n        title: 'Erreur de synchronisation',\n        description: errorMessage,\n        variant: 'destructive',\n      });\n\n      return null;\n    } finally {\n      setIsLoading(false);\n    }\n  }, [isAppleHealthAvailable, toast]);\n\n  // Synchroniser avec Google Fit\n  const syncGoogleFit = useCallback(async (): Promise<WearableData | null> => {\n    if (!isGoogleFitAvailable()) {\n      setSyncError(\"Google Fit n'est pas disponible sur cet appareil\");\n      return null;\n    }\n\n    try {\n      setIsLoading(true);\n      setSyncError(null);\n\n      // Simuler l'appel à Google Fit (dans un vrai projet, cela utiliserait l'API Google Fit)\n      await new Promise(resolve => setTimeout(resolve, 2000));\n\n      // Données simulées (dans un vrai projet, cela viendrait de Google Fit)\n      const mockFitData: WearableData = {\n        steps: Math.floor(Math.random() * 12000) + 4000,\n        heartRate: Array.from({ length: 12 }, () => Math.floor(Math.random() * 45) + 55),\n        sleepSessions: [\n          {\n            id: '2',\n            startTime: new Date(Date.now() - 9 * 60 * 60 * 1000), // 9h ago\n            endTime: new Date(Date.now() - 60 * 60 * 1000), // 1h ago\n            duration: 480, // 8 heures\n            quality: 'excellent',\n            deepSleepDuration: 150,\n            remSleepDuration: 110,\n            awakenings: 1,\n          },\n        ],\n        lastSync: new Date(),\n        caloriesBurned: Math.floor(Math.random() * 600) + 300,\n        distance: Math.floor(Math.random() * 6000) + 3000,\n        activeMinutes: Math.floor(Math.random() * 150) + 45,\n      };\n\n      setLastSyncTime(new Date());\n\n      toast({\n        title: 'Synchronisation réussie',\n        description: 'Données Google Fit synchronisées avec succès',\n        variant: 'default',\n      });\n\n      return mockFitData;\n    } catch (error) {\n      // Erreur silencieuse\n      const errorMessage =\n        error instanceof Error ? error.message : 'Erreur de synchronisation Google Fit';\n      setSyncError(errorMessage);\n\n      toast({\n        title: 'Erreur de synchronisation',\n        description: errorMessage,\n        variant: 'destructive',\n      });\n\n      return null;\n    } finally {\n      setIsLoading(false);\n    }\n  }, [isGoogleFitAvailable, toast]);\n\n  // Synchroniser automatiquement les deux sources\n  const syncAll = useCallback(async (): Promise<WearableData | null> => {\n    const results = await Promise.allSettled([syncAppleHealth(), syncGoogleFit()]);\n\n    const appleResult = results[0];\n    const googleResult = results[1];\n\n    // Combiner les données si les deux synchronisations réussissent\n    if (appleResult.status === 'fulfilled' && googleResult.status === 'fulfilled') {\n      const appleData = appleResult.value;\n      const googleData = googleResult.value;\n\n      if (appleData && googleData) {\n        // Fusionner les données (prioriser les données les plus récentes)\n        const combinedData: WearableData = {\n          steps: Math.max(appleData.steps, googleData.steps),\n          heartRate: [...appleData.heartRate, ...googleData.heartRate],\n          sleepSessions: [...appleData.sleepSessions, ...googleData.sleepSessions],\n          lastSync: new Date(),\n          caloriesBurned: Math.max(appleData.caloriesBurned || 0, googleData.caloriesBurned || 0),\n          distance: Math.max(appleData.distance || 0, googleData.distance || 0),\n          activeMinutes: Math.max(appleData.activeMinutes || 0, googleData.activeMinutes || 0),\n        };\n\n        return combinedData;\n      }\n    }\n\n    // Retourner les données disponibles\n    if (appleResult.status === 'fulfilled' && appleResult.value) {\n      return appleResult.value;\n    }\n    if (googleResult.status === 'fulfilled' && googleResult.value) {\n      return googleResult.value;\n    }\n\n    return null;\n  }, [syncAppleHealth, syncGoogleFit]);\n\n  // Programmer une synchronisation automatique\n  const scheduleSync = useCallback(\n    (intervalMinutes: number = 30) => {\n      const interval = setInterval(\n        async () => {\n          try {\n            await syncAll();\n          } catch (error) {\n      // Erreur silencieuse\n            console.error('Erreur lors de la synchronisation programmée:', error);\n          }\n        },\n        intervalMinutes * 60 * 1000\n      );\n\n      return () => clearInterval(interval);\n    },\n    [syncAll]\n  );\n\n  // Obtenir les données mises en cache\n  const getCachedData = useCallback((): WearableData | null => {\n    try {\n      const cachedData = localStorage.getItem('wearableData');\n      if (cachedData) {\n        const parsed = JSON.parse(cachedData);\n        return {\n          ...parsed,\n          lastSync: new Date(parsed.lastSync),\n          sleepSessions: parsed.sleepSessions.map((session: any) => ({\n            ...session,\n            startTime: new Date(session.startTime),\n            endTime: new Date(session.endTime),\n          })),\n        };\n      }\n    } catch (error) {\n      // Erreur silencieuse\n      console.error('Erreur lors de la lecture des données mises en cache:', error);\n    }\n    return null;\n  }, []);\n\n  // Sauvegarder les données en cache\n  const cacheData = useCallback((data: WearableData) => {\n    try {\n      localStorage.setItem('wearableData', JSON.stringify(data));\n    } catch (error) {\n      // Erreur silencieuse\n      console.error('Erreur lors de la sauvegarde des données en cache:', error);\n    }\n  }, []);\n\n  return {\n    isLoading,\n    lastSyncTime,\n    syncError,\n    isAppleHealthAvailable: isAppleHealthAvailable(),\n    isGoogleFitAvailable: isGoogleFitAvailable(),\n    syncAppleHealth,\n    syncGoogleFit,\n    syncAll,\n    scheduleSync,\n    getCachedData,\n    cacheData,\n  };\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}