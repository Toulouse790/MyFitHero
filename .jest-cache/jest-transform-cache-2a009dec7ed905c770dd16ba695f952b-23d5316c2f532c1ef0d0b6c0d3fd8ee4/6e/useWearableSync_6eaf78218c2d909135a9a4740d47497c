6682b9985d5ed979a452c6dee4cc9b21
"use strict";

/* istanbul ignore next */
function cov_1g2njqdyj7() {
  var path = "/workspaces/MyFitHero/src/features/wearables/hooks/useWearableSync.ts";
  var hash = "671b4268a86ec7d8db32f997d672e9c859ed0f02";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/MyFitHero/src/features/wearables/hooks/useWearableSync.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 33
        }
      },
      "2": {
        start: {
          line: 4,
          column: 16
        },
        end: {
          line: 4,
          column: 32
        }
      },
      "3": {
        start: {
          line: 5,
          column: 20
        },
        end: {
          line: 5,
          column: 55
        }
      },
      "4": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 224,
          column: 1
        }
      },
      "5": {
        start: {
          line: 7,
          column: 38
        },
        end: {
          line: 7,
          column: 66
        }
      },
      "6": {
        start: {
          line: 8,
          column: 44
        },
        end: {
          line: 8,
          column: 71
        }
      },
      "7": {
        start: {
          line: 9,
          column: 38
        },
        end: {
          line: 9,
          column: 65
        }
      },
      "8": {
        start: {
          line: 10,
          column: 22
        },
        end: {
          line: 10,
          column: 49
        }
      },
      "9": {
        start: {
          line: 12,
          column: 35
        },
        end: {
          line: 16,
          column: 10
        }
      },
      "10": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 15,
          column: 108
        }
      },
      "11": {
        start: {
          line: 18,
          column: 33
        },
        end: {
          line: 22,
          column: 10
        }
      },
      "12": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 21,
          column: 91
        }
      },
      "13": {
        start: {
          line: 24,
          column: 28
        },
        end: {
          line: 77,
          column: 39
        }
      },
      "14": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 28,
          column: 9
        }
      },
      "15": {
        start: {
          line: 26,
          column: 12
        },
        end: {
          line: 26,
          column: 79
        }
      },
      "16": {
        start: {
          line: 27,
          column: 12
        },
        end: {
          line: 27,
          column: 24
        }
      },
      "17": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 76,
          column: 9
        }
      },
      "18": {
        start: {
          line: 30,
          column: 12
        },
        end: {
          line: 30,
          column: 31
        }
      },
      "19": {
        start: {
          line: 31,
          column: 12
        },
        end: {
          line: 31,
          column: 31
        }
      },
      "20": {
        start: {
          line: 33,
          column: 12
        },
        end: {
          line: 33,
          column: 68
        }
      },
      "21": {
        start: {
          line: 33,
          column: 41
        },
        end: {
          line: 33,
          column: 66
        }
      },
      "22": {
        start: {
          line: 35,
          column: 35
        },
        end: {
          line: 54,
          column: 13
        }
      },
      "23": {
        start: {
          line: 37,
          column: 60
        },
        end: {
          line: 37,
          column: 95
        }
      },
      "24": {
        start: {
          line: 55,
          column: 12
        },
        end: {
          line: 55,
          column: 40
        }
      },
      "25": {
        start: {
          line: 56,
          column: 12
        },
        end: {
          line: 60,
          column: 15
        }
      },
      "26": {
        start: {
          line: 61,
          column: 12
        },
        end: {
          line: 61,
          column: 34
        }
      },
      "27": {
        start: {
          line: 65,
          column: 33
        },
        end: {
          line: 65,
          column: 114
        }
      },
      "28": {
        start: {
          line: 66,
          column: 12
        },
        end: {
          line: 66,
          column: 39
        }
      },
      "29": {
        start: {
          line: 67,
          column: 12
        },
        end: {
          line: 71,
          column: 15
        }
      },
      "30": {
        start: {
          line: 72,
          column: 12
        },
        end: {
          line: 72,
          column: 24
        }
      },
      "31": {
        start: {
          line: 75,
          column: 12
        },
        end: {
          line: 75,
          column: 32
        }
      },
      "32": {
        start: {
          line: 79,
          column: 26
        },
        end: {
          line: 132,
          column: 37
        }
      },
      "33": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 83,
          column: 9
        }
      },
      "34": {
        start: {
          line: 81,
          column: 12
        },
        end: {
          line: 81,
          column: 77
        }
      },
      "35": {
        start: {
          line: 82,
          column: 12
        },
        end: {
          line: 82,
          column: 24
        }
      },
      "36": {
        start: {
          line: 84,
          column: 8
        },
        end: {
          line: 131,
          column: 9
        }
      },
      "37": {
        start: {
          line: 85,
          column: 12
        },
        end: {
          line: 85,
          column: 31
        }
      },
      "38": {
        start: {
          line: 86,
          column: 12
        },
        end: {
          line: 86,
          column: 31
        }
      },
      "39": {
        start: {
          line: 88,
          column: 12
        },
        end: {
          line: 88,
          column: 68
        }
      },
      "40": {
        start: {
          line: 88,
          column: 41
        },
        end: {
          line: 88,
          column: 66
        }
      },
      "41": {
        start: {
          line: 90,
          column: 32
        },
        end: {
          line: 109,
          column: 13
        }
      },
      "42": {
        start: {
          line: 92,
          column: 60
        },
        end: {
          line: 92,
          column: 95
        }
      },
      "43": {
        start: {
          line: 110,
          column: 12
        },
        end: {
          line: 110,
          column: 40
        }
      },
      "44": {
        start: {
          line: 111,
          column: 12
        },
        end: {
          line: 115,
          column: 15
        }
      },
      "45": {
        start: {
          line: 116,
          column: 12
        },
        end: {
          line: 116,
          column: 31
        }
      },
      "46": {
        start: {
          line: 120,
          column: 33
        },
        end: {
          line: 120,
          column: 112
        }
      },
      "47": {
        start: {
          line: 121,
          column: 12
        },
        end: {
          line: 121,
          column: 39
        }
      },
      "48": {
        start: {
          line: 122,
          column: 12
        },
        end: {
          line: 126,
          column: 15
        }
      },
      "49": {
        start: {
          line: 127,
          column: 12
        },
        end: {
          line: 127,
          column: 24
        }
      },
      "50": {
        start: {
          line: 130,
          column: 12
        },
        end: {
          line: 130,
          column: 32
        }
      },
      "51": {
        start: {
          line: 134,
          column: 20
        },
        end: {
          line: 164,
          column: 40
        }
      },
      "52": {
        start: {
          line: 135,
          column: 24
        },
        end: {
          line: 135,
          column: 86
        }
      },
      "53": {
        start: {
          line: 136,
          column: 28
        },
        end: {
          line: 136,
          column: 38
        }
      },
      "54": {
        start: {
          line: 137,
          column: 29
        },
        end: {
          line: 137,
          column: 39
        }
      },
      "55": {
        start: {
          line: 139,
          column: 8
        },
        end: {
          line: 155,
          column: 9
        }
      },
      "56": {
        start: {
          line: 140,
          column: 30
        },
        end: {
          line: 140,
          column: 47
        }
      },
      "57": {
        start: {
          line: 141,
          column: 31
        },
        end: {
          line: 141,
          column: 49
        }
      },
      "58": {
        start: {
          line: 142,
          column: 12
        },
        end: {
          line: 154,
          column: 13
        }
      },
      "59": {
        start: {
          line: 144,
          column: 37
        },
        end: {
          line: 152,
          column: 17
        }
      },
      "60": {
        start: {
          line: 153,
          column: 16
        },
        end: {
          line: 153,
          column: 36
        }
      },
      "61": {
        start: {
          line: 157,
          column: 8
        },
        end: {
          line: 159,
          column: 9
        }
      },
      "62": {
        start: {
          line: 158,
          column: 12
        },
        end: {
          line: 158,
          column: 37
        }
      },
      "63": {
        start: {
          line: 160,
          column: 8
        },
        end: {
          line: 162,
          column: 9
        }
      },
      "64": {
        start: {
          line: 161,
          column: 12
        },
        end: {
          line: 161,
          column: 38
        }
      },
      "65": {
        start: {
          line: 163,
          column: 8
        },
        end: {
          line: 163,
          column: 20
        }
      },
      "66": {
        start: {
          line: 166,
          column: 25
        },
        end: {
          line: 177,
          column: 17
        }
      },
      "67": {
        start: {
          line: 167,
          column: 25
        },
        end: {
          line: 175,
          column: 39
        }
      },
      "68": {
        start: {
          line: 168,
          column: 12
        },
        end: {
          line: 174,
          column: 13
        }
      },
      "69": {
        start: {
          line: 169,
          column: 16
        },
        end: {
          line: 169,
          column: 32
        }
      },
      "70": {
        start: {
          line: 173,
          column: 16
        },
        end: {
          line: 173,
          column: 86
        }
      },
      "71": {
        start: {
          line: 176,
          column: 8
        },
        end: {
          line: 176,
          column: 45
        }
      },
      "72": {
        start: {
          line: 176,
          column: 21
        },
        end: {
          line: 176,
          column: 44
        }
      },
      "73": {
        start: {
          line: 179,
          column: 26
        },
        end: {
          line: 200,
          column: 10
        }
      },
      "74": {
        start: {
          line: 180,
          column: 8
        },
        end: {
          line: 198,
          column: 9
        }
      },
      "75": {
        start: {
          line: 181,
          column: 31
        },
        end: {
          line: 181,
          column: 67
        }
      },
      "76": {
        start: {
          line: 182,
          column: 12
        },
        end: {
          line: 193,
          column: 13
        }
      },
      "77": {
        start: {
          line: 183,
          column: 31
        },
        end: {
          line: 183,
          column: 53
        }
      },
      "78": {
        start: {
          line: 184,
          column: 16
        },
        end: {
          line: 192,
          column: 18
        }
      },
      "79": {
        start: {
          line: 187,
          column: 74
        },
        end: {
          line: 191,
          column: 21
        }
      },
      "80": {
        start: {
          line: 197,
          column: 12
        },
        end: {
          line: 197,
          column: 90
        }
      },
      "81": {
        start: {
          line: 199,
          column: 8
        },
        end: {
          line: 199,
          column: 20
        }
      },
      "82": {
        start: {
          line: 202,
          column: 22
        },
        end: {
          line: 210,
          column: 10
        }
      },
      "83": {
        start: {
          line: 203,
          column: 8
        },
        end: {
          line: 209,
          column: 9
        }
      },
      "84": {
        start: {
          line: 204,
          column: 12
        },
        end: {
          line: 204,
          column: 71
        }
      },
      "85": {
        start: {
          line: 208,
          column: 12
        },
        end: {
          line: 208,
          column: 87
        }
      },
      "86": {
        start: {
          line: 211,
          column: 4
        },
        end: {
          line: 223,
          column: 6
        }
      },
      "87": {
        start: {
          line: 225,
          column: 0
        },
        end: {
          line: 225,
          column: 42
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 6,
            column: 24
          },
          end: {
            line: 6,
            column: 25
          }
        },
        loc: {
          start: {
            line: 6,
            column: 30
          },
          end: {
            line: 224,
            column: 1
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 60
          },
          end: {
            line: 12,
            column: 61
          }
        },
        loc: {
          start: {
            line: 12,
            column: 66
          },
          end: {
            line: 16,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 18,
            column: 58
          },
          end: {
            line: 18,
            column: 59
          }
        },
        loc: {
          start: {
            line: 18,
            column: 64
          },
          end: {
            line: 22,
            column: 5
          }
        },
        line: 18
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 24,
            column: 53
          },
          end: {
            line: 24,
            column: 54
          }
        },
        loc: {
          start: {
            line: 24,
            column: 65
          },
          end: {
            line: 77,
            column: 5
          }
        },
        line: 24
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 33,
            column: 30
          },
          end: {
            line: 33,
            column: 31
          }
        },
        loc: {
          start: {
            line: 33,
            column: 41
          },
          end: {
            line: 33,
            column: 66
          }
        },
        line: 33
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 37,
            column: 54
          },
          end: {
            line: 37,
            column: 55
          }
        },
        loc: {
          start: {
            line: 37,
            column: 60
          },
          end: {
            line: 37,
            column: 95
          }
        },
        line: 37
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 79,
            column: 51
          },
          end: {
            line: 79,
            column: 52
          }
        },
        loc: {
          start: {
            line: 79,
            column: 63
          },
          end: {
            line: 132,
            column: 5
          }
        },
        line: 79
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 88,
            column: 30
          },
          end: {
            line: 88,
            column: 31
          }
        },
        loc: {
          start: {
            line: 88,
            column: 41
          },
          end: {
            line: 88,
            column: 66
          }
        },
        line: 88
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 92,
            column: 54
          },
          end: {
            line: 92,
            column: 55
          }
        },
        loc: {
          start: {
            line: 92,
            column: 60
          },
          end: {
            line: 92,
            column: 95
          }
        },
        line: 92
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 134,
            column: 45
          },
          end: {
            line: 134,
            column: 46
          }
        },
        loc: {
          start: {
            line: 134,
            column: 57
          },
          end: {
            line: 164,
            column: 5
          }
        },
        line: 134
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 166,
            column: 50
          },
          end: {
            line: 166,
            column: 51
          }
        },
        loc: {
          start: {
            line: 166,
            column: 76
          },
          end: {
            line: 177,
            column: 5
          }
        },
        line: 166
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 167,
            column: 37
          },
          end: {
            line: 167,
            column: 38
          }
        },
        loc: {
          start: {
            line: 167,
            column: 49
          },
          end: {
            line: 175,
            column: 9
          }
        },
        line: 167
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 176,
            column: 15
          },
          end: {
            line: 176,
            column: 16
          }
        },
        loc: {
          start: {
            line: 176,
            column: 21
          },
          end: {
            line: 176,
            column: 44
          }
        },
        line: 176
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 179,
            column: 51
          },
          end: {
            line: 179,
            column: 52
          }
        },
        loc: {
          start: {
            line: 179,
            column: 57
          },
          end: {
            line: 200,
            column: 5
          }
        },
        line: 179
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 187,
            column: 60
          },
          end: {
            line: 187,
            column: 61
          }
        },
        loc: {
          start: {
            line: 187,
            column: 74
          },
          end: {
            line: 191,
            column: 21
          }
        },
        line: 187
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 202,
            column: 47
          },
          end: {
            line: 202,
            column: 48
          }
        },
        loc: {
          start: {
            line: 202,
            column: 57
          },
          end: {
            line: 210,
            column: 5
          }
        },
        line: 202
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 15,
            column: 16
          },
          end: {
            line: 15,
            column: 106
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 15,
            column: 16
          },
          end: {
            line: 15,
            column: 45
          }
        }, {
          start: {
            line: 15,
            column: 49
          },
          end: {
            line: 15,
            column: 62
          }
        }, {
          start: {
            line: 15,
            column: 66
          },
          end: {
            line: 15,
            column: 106
          }
        }],
        line: 15
      },
      "1": {
        loc: {
          start: {
            line: 21,
            column: 15
          },
          end: {
            line: 21,
            column: 90
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 21,
            column: 15
          },
          end: {
            line: 21,
            column: 44
          }
        }, {
          start: {
            line: 21,
            column: 48
          },
          end: {
            line: 21,
            column: 59
          }
        }, {
          start: {
            line: 21,
            column: 63
          },
          end: {
            line: 21,
            column: 90
          }
        }],
        line: 21
      },
      "2": {
        loc: {
          start: {
            line: 25,
            column: 8
          },
          end: {
            line: 28,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 25,
            column: 8
          },
          end: {
            line: 28,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 25
      },
      "3": {
        loc: {
          start: {
            line: 65,
            column: 33
          },
          end: {
            line: 65,
            column: 114
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 65,
            column: 58
          },
          end: {
            line: 65,
            column: 71
          }
        }, {
          start: {
            line: 65,
            column: 74
          },
          end: {
            line: 65,
            column: 114
          }
        }],
        line: 65
      },
      "4": {
        loc: {
          start: {
            line: 80,
            column: 8
          },
          end: {
            line: 83,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 80,
            column: 8
          },
          end: {
            line: 83,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 80
      },
      "5": {
        loc: {
          start: {
            line: 120,
            column: 33
          },
          end: {
            line: 120,
            column: 112
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 120,
            column: 58
          },
          end: {
            line: 120,
            column: 71
          }
        }, {
          start: {
            line: 120,
            column: 74
          },
          end: {
            line: 120,
            column: 112
          }
        }],
        line: 120
      },
      "6": {
        loc: {
          start: {
            line: 139,
            column: 8
          },
          end: {
            line: 155,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 139,
            column: 8
          },
          end: {
            line: 155,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 139
      },
      "7": {
        loc: {
          start: {
            line: 139,
            column: 12
          },
          end: {
            line: 139,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 139,
            column: 12
          },
          end: {
            line: 139,
            column: 46
          }
        }, {
          start: {
            line: 139,
            column: 50
          },
          end: {
            line: 139,
            column: 85
          }
        }],
        line: 139
      },
      "8": {
        loc: {
          start: {
            line: 142,
            column: 12
          },
          end: {
            line: 154,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 142,
            column: 12
          },
          end: {
            line: 154,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 142
      },
      "9": {
        loc: {
          start: {
            line: 142,
            column: 16
          },
          end: {
            line: 142,
            column: 39
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 142,
            column: 16
          },
          end: {
            line: 142,
            column: 25
          }
        }, {
          start: {
            line: 142,
            column: 29
          },
          end: {
            line: 142,
            column: 39
          }
        }],
        line: 142
      },
      "10": {
        loc: {
          start: {
            line: 149,
            column: 45
          },
          end: {
            line: 149,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 149,
            column: 45
          },
          end: {
            line: 149,
            column: 69
          }
        }, {
          start: {
            line: 149,
            column: 73
          },
          end: {
            line: 149,
            column: 74
          }
        }],
        line: 149
      },
      "11": {
        loc: {
          start: {
            line: 149,
            column: 76
          },
          end: {
            line: 149,
            column: 106
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 149,
            column: 76
          },
          end: {
            line: 149,
            column: 101
          }
        }, {
          start: {
            line: 149,
            column: 105
          },
          end: {
            line: 149,
            column: 106
          }
        }],
        line: 149
      },
      "12": {
        loc: {
          start: {
            line: 150,
            column: 39
          },
          end: {
            line: 150,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 150,
            column: 39
          },
          end: {
            line: 150,
            column: 57
          }
        }, {
          start: {
            line: 150,
            column: 61
          },
          end: {
            line: 150,
            column: 62
          }
        }],
        line: 150
      },
      "13": {
        loc: {
          start: {
            line: 150,
            column: 64
          },
          end: {
            line: 150,
            column: 88
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 150,
            column: 64
          },
          end: {
            line: 150,
            column: 83
          }
        }, {
          start: {
            line: 150,
            column: 87
          },
          end: {
            line: 150,
            column: 88
          }
        }],
        line: 150
      },
      "14": {
        loc: {
          start: {
            line: 151,
            column: 44
          },
          end: {
            line: 151,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 151,
            column: 44
          },
          end: {
            line: 151,
            column: 67
          }
        }, {
          start: {
            line: 151,
            column: 71
          },
          end: {
            line: 151,
            column: 72
          }
        }],
        line: 151
      },
      "15": {
        loc: {
          start: {
            line: 151,
            column: 74
          },
          end: {
            line: 151,
            column: 103
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 151,
            column: 74
          },
          end: {
            line: 151,
            column: 98
          }
        }, {
          start: {
            line: 151,
            column: 102
          },
          end: {
            line: 151,
            column: 103
          }
        }],
        line: 151
      },
      "16": {
        loc: {
          start: {
            line: 157,
            column: 8
          },
          end: {
            line: 159,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 157,
            column: 8
          },
          end: {
            line: 159,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 157
      },
      "17": {
        loc: {
          start: {
            line: 157,
            column: 12
          },
          end: {
            line: 157,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 157,
            column: 12
          },
          end: {
            line: 157,
            column: 46
          }
        }, {
          start: {
            line: 157,
            column: 50
          },
          end: {
            line: 157,
            column: 67
          }
        }],
        line: 157
      },
      "18": {
        loc: {
          start: {
            line: 160,
            column: 8
          },
          end: {
            line: 162,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 160,
            column: 8
          },
          end: {
            line: 162,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 160
      },
      "19": {
        loc: {
          start: {
            line: 160,
            column: 12
          },
          end: {
            line: 160,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 160,
            column: 12
          },
          end: {
            line: 160,
            column: 47
          }
        }, {
          start: {
            line: 160,
            column: 51
          },
          end: {
            line: 160,
            column: 69
          }
        }],
        line: 160
      },
      "20": {
        loc: {
          start: {
            line: 166,
            column: 51
          },
          end: {
            line: 166,
            column: 71
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 166,
            column: 69
          },
          end: {
            line: 166,
            column: 71
          }
        }],
        line: 166
      },
      "21": {
        loc: {
          start: {
            line: 182,
            column: 12
          },
          end: {
            line: 193,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 182,
            column: 12
          },
          end: {
            line: 193,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 182
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0],
      "21": [0, 0]
    },
    inputSourceMap: {
      file: "/workspaces/MyFitHero/src/features/wearables/hooks/useWearableSync.ts",
      mappings: "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",
      names: [],
      sources: ["/workspaces/MyFitHero/src/features/wearables/hooks/useWearableSync.ts"],
      sourcesContent: ["import React, { useState, useCallback } from 'react';\nimport { useToast } from '@/shared/hooks/use-toast';\n\nexport interface SleepSession {\n  id: string;\n  startTime: Date;\n  endTime: Date;\n  duration: number; // en minutes\n  quality: 'poor' | 'fair' | 'good' | 'excellent';\n  deepSleepDuration?: number;\n  remSleepDuration?: number;\n  awakenings?: number;\n}\n\nexport interface WearableData {\n  steps: number;\n  heartRate: number[]; // Array of heart rate readings\n  sleepSessions: SleepSession[];\n  lastSync: Date;\n  caloriesBurned?: number;\n  distance?: number; // en m\xE8tres\n  activeMinutes?: number;\n}\n\nexport interface HealthKitData {\n  steps: number;\n  heartRate: number[];\n  sleepData: {\n    bedTime: Date;\n    wakeTime: Date;\n    sleepDuration: number;\n    sleepQuality: number; // 0-1 scale\n  }[];\n  workouts: {\n    type: string;\n    startTime: Date;\n    endTime: Date;\n    calories: number;\n    distance?: number;\n  }[];\n}\n\nexport interface GoogleFitData {\n  steps: number;\n  heartRate: number[];\n  sleepSessions: {\n    startTime: Date;\n    endTime: Date;\n    sleepType: string;\n  }[];\n  activities: {\n    type: string;\n    startTime: Date;\n    endTime: Date;\n    calories: number;\n  }[];\n}\n\nexport const useWearableSync = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [lastSyncTime, setLastSyncTime] = useState<Date | null>(null);\n  const [syncError, setSyncError] = useState<string | null>(null);\n  const { toast } = useToast();\n\n  // V\xE9rifier si Apple Health est disponible\n  const isAppleHealthAvailable = useCallback((): boolean => {\n    // Dans un environnement r\xE9el, cela v\xE9rifierait la disponibilit\xE9 d'Apple Health\n    // @ts-expect-error - Accessing webkit API\n    return (\n      typeof window !== 'undefined' && window.webkit && window.webkit.messageHandlers?.healthKit\n    );\n  }, []);\n\n  // V\xE9rifier si Google Fit est disponible\n  const isGoogleFitAvailable = useCallback((): boolean => {\n    // Dans un environnement r\xE9el, cela v\xE9rifierait la disponibilit\xE9 de Google Fit\n    // @ts-expect-error - Accessing gapi client\n    return typeof window !== 'undefined' && window.gapi && window.gapi.client?.fitness;\n  }, []);\n\n  // Synchroniser avec Apple Health\n  const syncAppleHealth = useCallback(async (): Promise<WearableData | null> => {\n    if (!isAppleHealthAvailable()) {\n      setSyncError(\"Apple Health n'est pas disponible sur cet appareil\");\n      return null;\n    }\n\n    try {\n      setIsLoading(true);\n      setSyncError(null);\n\n      // Simuler l'appel \xE0 Apple Health (dans un vrai projet, cela utiliserait HealthKit)\n      await new Promise(resolve => setTimeout(resolve, 2000));\n\n      // Donn\xE9es simul\xE9es (dans un vrai projet, cela viendrait d'Apple Health)\n      const mockHealthData: WearableData = {\n        steps: Math.floor(Math.random() * 10000) + 5000,\n        heartRate: Array.from({ length: 10 }, () => Math.floor(Math.random() * 40) + 60),\n        sleepSessions: [\n          {\n            id: '1',\n            startTime: new Date(Date.now() - 8 * 60 * 60 * 1000), // 8h ago\n            endTime: new Date(Date.now() - 30 * 60 * 1000), // 30min ago\n            duration: 450, // 7.5 heures\n            quality: 'good',\n            deepSleepDuration: 120,\n            remSleepDuration: 90,\n            awakenings: 2,\n          },\n        ],\n        lastSync: new Date(),\n        caloriesBurned: Math.floor(Math.random() * 500) + 200,\n        distance: Math.floor(Math.random() * 5000) + 2000,\n        activeMinutes: Math.floor(Math.random() * 120) + 30,\n      };\n\n      setLastSyncTime(new Date());\n\n      toast({\n        title: 'Synchronisation r\xE9ussie',\n        description: 'Donn\xE9es Apple Health synchronis\xE9es avec succ\xE8s',\n        variant: 'default',\n      });\n\n      return mockHealthData;\n    } catch (error) {\n      // Erreur silencieuse\n      const errorMessage =\n        error instanceof Error ? error.message : 'Erreur de synchronisation Apple Health';\n      setSyncError(errorMessage);\n\n      toast({\n        title: 'Erreur de synchronisation',\n        description: errorMessage,\n        variant: 'destructive',\n      });\n\n      return null;\n    } finally {\n      setIsLoading(false);\n    }\n  }, [isAppleHealthAvailable, toast]);\n\n  // Synchroniser avec Google Fit\n  const syncGoogleFit = useCallback(async (): Promise<WearableData | null> => {\n    if (!isGoogleFitAvailable()) {\n      setSyncError(\"Google Fit n'est pas disponible sur cet appareil\");\n      return null;\n    }\n\n    try {\n      setIsLoading(true);\n      setSyncError(null);\n\n      // Simuler l'appel \xE0 Google Fit (dans un vrai projet, cela utiliserait l'API Google Fit)\n      await new Promise(resolve => setTimeout(resolve, 2000));\n\n      // Donn\xE9es simul\xE9es (dans un vrai projet, cela viendrait de Google Fit)\n      const mockFitData: WearableData = {\n        steps: Math.floor(Math.random() * 12000) + 4000,\n        heartRate: Array.from({ length: 12 }, () => Math.floor(Math.random() * 45) + 55),\n        sleepSessions: [\n          {\n            id: '2',\n            startTime: new Date(Date.now() - 9 * 60 * 60 * 1000), // 9h ago\n            endTime: new Date(Date.now() - 60 * 60 * 1000), // 1h ago\n            duration: 480, // 8 heures\n            quality: 'excellent',\n            deepSleepDuration: 150,\n            remSleepDuration: 110,\n            awakenings: 1,\n          },\n        ],\n        lastSync: new Date(),\n        caloriesBurned: Math.floor(Math.random() * 600) + 300,\n        distance: Math.floor(Math.random() * 6000) + 3000,\n        activeMinutes: Math.floor(Math.random() * 150) + 45,\n      };\n\n      setLastSyncTime(new Date());\n\n      toast({\n        title: 'Synchronisation r\xE9ussie',\n        description: 'Donn\xE9es Google Fit synchronis\xE9es avec succ\xE8s',\n        variant: 'default',\n      });\n\n      return mockFitData;\n    } catch (error) {\n      // Erreur silencieuse\n      const errorMessage =\n        error instanceof Error ? error.message : 'Erreur de synchronisation Google Fit';\n      setSyncError(errorMessage);\n\n      toast({\n        title: 'Erreur de synchronisation',\n        description: errorMessage,\n        variant: 'destructive',\n      });\n\n      return null;\n    } finally {\n      setIsLoading(false);\n    }\n  }, [isGoogleFitAvailable, toast]);\n\n  // Synchroniser automatiquement les deux sources\n  const syncAll = useCallback(async (): Promise<WearableData | null> => {\n    const results = await Promise.allSettled([syncAppleHealth(), syncGoogleFit()]);\n\n    const appleResult = results[0];\n    const googleResult = results[1];\n\n    // Combiner les donn\xE9es si les deux synchronisations r\xE9ussissent\n    if (appleResult.status === 'fulfilled' && googleResult.status === 'fulfilled') {\n      const appleData = appleResult.value;\n      const googleData = googleResult.value;\n\n      if (appleData && googleData) {\n        // Fusionner les donn\xE9es (prioriser les donn\xE9es les plus r\xE9centes)\n        const combinedData: WearableData = {\n          steps: Math.max(appleData.steps, googleData.steps),\n          heartRate: [...appleData.heartRate, ...googleData.heartRate],\n          sleepSessions: [...appleData.sleepSessions, ...googleData.sleepSessions],\n          lastSync: new Date(),\n          caloriesBurned: Math.max(appleData.caloriesBurned || 0, googleData.caloriesBurned || 0),\n          distance: Math.max(appleData.distance || 0, googleData.distance || 0),\n          activeMinutes: Math.max(appleData.activeMinutes || 0, googleData.activeMinutes || 0),\n        };\n\n        return combinedData;\n      }\n    }\n\n    // Retourner les donn\xE9es disponibles\n    if (appleResult.status === 'fulfilled' && appleResult.value) {\n      return appleResult.value;\n    }\n    if (googleResult.status === 'fulfilled' && googleResult.value) {\n      return googleResult.value;\n    }\n\n    return null;\n  }, [syncAppleHealth, syncGoogleFit]);\n\n  // Programmer une synchronisation automatique\n  const scheduleSync = useCallback(\n    (intervalMinutes: number = 30) => {\n      const interval = setInterval(\n        async () => {\n          try {\n            await syncAll();\n          } catch (error) {\n      // Erreur silencieuse\n            console.error('Erreur lors de la synchronisation programm\xE9e:', error);\n          }\n        },\n        intervalMinutes * 60 * 1000\n      );\n\n      return () => clearInterval(interval);\n    },\n    [syncAll]\n  );\n\n  // Obtenir les donn\xE9es mises en cache\n  const getCachedData = useCallback((): WearableData | null => {\n    try {\n      const cachedData = localStorage.getItem('wearableData');\n      if (cachedData) {\n        const parsed = JSON.parse(cachedData);\n        return {\n          ...parsed,\n          lastSync: new Date(parsed.lastSync),\n          sleepSessions: parsed.sleepSessions.map((session: any) => ({\n            ...session,\n            startTime: new Date(session.startTime),\n            endTime: new Date(session.endTime),\n          })),\n        };\n      }\n    } catch (error) {\n      // Erreur silencieuse\n      console.error('Erreur lors de la lecture des donn\xE9es mises en cache:', error);\n    }\n    return null;\n  }, []);\n\n  // Sauvegarder les donn\xE9es en cache\n  const cacheData = useCallback((data: WearableData) => {\n    try {\n      localStorage.setItem('wearableData', JSON.stringify(data));\n    } catch (error) {\n      // Erreur silencieuse\n      console.error('Erreur lors de la sauvegarde des donn\xE9es en cache:', error);\n    }\n  }, []);\n\n  return {\n    isLoading,\n    lastSyncTime,\n    syncError,\n    isAppleHealthAvailable: isAppleHealthAvailable(),\n    isGoogleFitAvailable: isGoogleFitAvailable(),\n    syncAppleHealth,\n    syncGoogleFit,\n    syncAll,\n    scheduleSync,\n    getCachedData,\n    cacheData,\n  };\n};\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "671b4268a86ec7d8db32f997d672e9c859ed0f02"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1g2njqdyj7 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1g2njqdyj7();
cov_1g2njqdyj7().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1g2njqdyj7().s[1]++;
exports.useWearableSync = void 0;
const react_1 =
/* istanbul ignore next */
(cov_1g2njqdyj7().s[2]++, require("react"));
const use_toast_1 =
/* istanbul ignore next */
(cov_1g2njqdyj7().s[3]++, require("@/shared/hooks/use-toast"));
/* istanbul ignore next */
cov_1g2njqdyj7().s[4]++;
const useWearableSync = () => {
  /* istanbul ignore next */
  cov_1g2njqdyj7().f[0]++;
  const [isLoading, setIsLoading] =
  /* istanbul ignore next */
  (cov_1g2njqdyj7().s[5]++, (0, react_1.useState)(false));
  const [lastSyncTime, setLastSyncTime] =
  /* istanbul ignore next */
  (cov_1g2njqdyj7().s[6]++, (0, react_1.useState)(null));
  const [syncError, setSyncError] =
  /* istanbul ignore next */
  (cov_1g2njqdyj7().s[7]++, (0, react_1.useState)(null));
  const {
    toast
  } =
  /* istanbul ignore next */
  (cov_1g2njqdyj7().s[8]++, (0, use_toast_1.useToast)());
  // Vérifier si Apple Health est disponible
  const isAppleHealthAvailable =
  /* istanbul ignore next */
  (cov_1g2njqdyj7().s[9]++, (0, react_1.useCallback)(() => {
    /* istanbul ignore next */
    cov_1g2njqdyj7().f[1]++;
    cov_1g2njqdyj7().s[10]++;
    // Dans un environnement réel, cela vérifierait la disponibilité d'Apple Health
    // @ts-expect-error - Accessing webkit API
    return /* istanbul ignore next */(cov_1g2njqdyj7().b[0][0]++, typeof window !== 'undefined') &&
    /* istanbul ignore next */
    (cov_1g2njqdyj7().b[0][1]++, window.webkit) &&
    /* istanbul ignore next */
    (cov_1g2njqdyj7().b[0][2]++, window.webkit.messageHandlers?.healthKit);
  }, []));
  // Vérifier si Google Fit est disponible
  const isGoogleFitAvailable =
  /* istanbul ignore next */
  (cov_1g2njqdyj7().s[11]++, (0, react_1.useCallback)(() => {
    /* istanbul ignore next */
    cov_1g2njqdyj7().f[2]++;
    cov_1g2njqdyj7().s[12]++;
    // Dans un environnement réel, cela vérifierait la disponibilité de Google Fit
    // @ts-expect-error - Accessing gapi client
    return /* istanbul ignore next */(cov_1g2njqdyj7().b[1][0]++, typeof window !== 'undefined') &&
    /* istanbul ignore next */
    (cov_1g2njqdyj7().b[1][1]++, window.gapi) &&
    /* istanbul ignore next */
    (cov_1g2njqdyj7().b[1][2]++, window.gapi.client?.fitness);
  }, []));
  // Synchroniser avec Apple Health
  const syncAppleHealth =
  /* istanbul ignore next */
  (cov_1g2njqdyj7().s[13]++, (0, react_1.useCallback)(async () => {
    /* istanbul ignore next */
    cov_1g2njqdyj7().f[3]++;
    cov_1g2njqdyj7().s[14]++;
    if (!isAppleHealthAvailable()) {
      /* istanbul ignore next */
      cov_1g2njqdyj7().b[2][0]++;
      cov_1g2njqdyj7().s[15]++;
      setSyncError("Apple Health n'est pas disponible sur cet appareil");
      /* istanbul ignore next */
      cov_1g2njqdyj7().s[16]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_1g2njqdyj7().b[2][1]++;
    }
    cov_1g2njqdyj7().s[17]++;
    try {
      /* istanbul ignore next */
      cov_1g2njqdyj7().s[18]++;
      setIsLoading(true);
      /* istanbul ignore next */
      cov_1g2njqdyj7().s[19]++;
      setSyncError(null);
      // Simuler l'appel à Apple Health (dans un vrai projet, cela utiliserait HealthKit)
      /* istanbul ignore next */
      cov_1g2njqdyj7().s[20]++;
      await new Promise(resolve => {
        /* istanbul ignore next */
        cov_1g2njqdyj7().f[4]++;
        cov_1g2njqdyj7().s[21]++;
        return setTimeout(resolve, 2000);
      });
      // Données simulées (dans un vrai projet, cela viendrait d'Apple Health)
      const mockHealthData =
      /* istanbul ignore next */
      (cov_1g2njqdyj7().s[22]++, {
        steps: Math.floor(Math.random() * 10000) + 5000,
        heartRate: Array.from({
          length: 10
        }, () => {
          /* istanbul ignore next */
          cov_1g2njqdyj7().f[5]++;
          cov_1g2njqdyj7().s[23]++;
          return Math.floor(Math.random() * 40) + 60;
        }),
        sleepSessions: [{
          id: '1',
          startTime: new Date(Date.now() - 8 * 60 * 60 * 1000),
          // 8h ago
          endTime: new Date(Date.now() - 30 * 60 * 1000),
          // 30min ago
          duration: 450,
          // 7.5 heures
          quality: 'good',
          deepSleepDuration: 120,
          remSleepDuration: 90,
          awakenings: 2
        }],
        lastSync: new Date(),
        caloriesBurned: Math.floor(Math.random() * 500) + 200,
        distance: Math.floor(Math.random() * 5000) + 2000,
        activeMinutes: Math.floor(Math.random() * 120) + 30
      });
      /* istanbul ignore next */
      cov_1g2njqdyj7().s[24]++;
      setLastSyncTime(new Date());
      /* istanbul ignore next */
      cov_1g2njqdyj7().s[25]++;
      toast({
        title: 'Synchronisation réussie',
        description: 'Données Apple Health synchronisées avec succès',
        variant: 'default'
      });
      /* istanbul ignore next */
      cov_1g2njqdyj7().s[26]++;
      return mockHealthData;
    } catch (error) {
      // Erreur silencieuse
      const errorMessage =
      /* istanbul ignore next */
      (cov_1g2njqdyj7().s[27]++, error instanceof Error ?
      /* istanbul ignore next */
      (cov_1g2njqdyj7().b[3][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1g2njqdyj7().b[3][1]++, 'Erreur de synchronisation Apple Health'));
      /* istanbul ignore next */
      cov_1g2njqdyj7().s[28]++;
      setSyncError(errorMessage);
      /* istanbul ignore next */
      cov_1g2njqdyj7().s[29]++;
      toast({
        title: 'Erreur de synchronisation',
        description: errorMessage,
        variant: 'destructive'
      });
      /* istanbul ignore next */
      cov_1g2njqdyj7().s[30]++;
      return null;
    } finally {
      /* istanbul ignore next */
      cov_1g2njqdyj7().s[31]++;
      setIsLoading(false);
    }
  }, [isAppleHealthAvailable, toast]));
  // Synchroniser avec Google Fit
  const syncGoogleFit =
  /* istanbul ignore next */
  (cov_1g2njqdyj7().s[32]++, (0, react_1.useCallback)(async () => {
    /* istanbul ignore next */
    cov_1g2njqdyj7().f[6]++;
    cov_1g2njqdyj7().s[33]++;
    if (!isGoogleFitAvailable()) {
      /* istanbul ignore next */
      cov_1g2njqdyj7().b[4][0]++;
      cov_1g2njqdyj7().s[34]++;
      setSyncError("Google Fit n'est pas disponible sur cet appareil");
      /* istanbul ignore next */
      cov_1g2njqdyj7().s[35]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_1g2njqdyj7().b[4][1]++;
    }
    cov_1g2njqdyj7().s[36]++;
    try {
      /* istanbul ignore next */
      cov_1g2njqdyj7().s[37]++;
      setIsLoading(true);
      /* istanbul ignore next */
      cov_1g2njqdyj7().s[38]++;
      setSyncError(null);
      // Simuler l'appel à Google Fit (dans un vrai projet, cela utiliserait l'API Google Fit)
      /* istanbul ignore next */
      cov_1g2njqdyj7().s[39]++;
      await new Promise(resolve => {
        /* istanbul ignore next */
        cov_1g2njqdyj7().f[7]++;
        cov_1g2njqdyj7().s[40]++;
        return setTimeout(resolve, 2000);
      });
      // Données simulées (dans un vrai projet, cela viendrait de Google Fit)
      const mockFitData =
      /* istanbul ignore next */
      (cov_1g2njqdyj7().s[41]++, {
        steps: Math.floor(Math.random() * 12000) + 4000,
        heartRate: Array.from({
          length: 12
        }, () => {
          /* istanbul ignore next */
          cov_1g2njqdyj7().f[8]++;
          cov_1g2njqdyj7().s[42]++;
          return Math.floor(Math.random() * 45) + 55;
        }),
        sleepSessions: [{
          id: '2',
          startTime: new Date(Date.now() - 9 * 60 * 60 * 1000),
          // 9h ago
          endTime: new Date(Date.now() - 60 * 60 * 1000),
          // 1h ago
          duration: 480,
          // 8 heures
          quality: 'excellent',
          deepSleepDuration: 150,
          remSleepDuration: 110,
          awakenings: 1
        }],
        lastSync: new Date(),
        caloriesBurned: Math.floor(Math.random() * 600) + 300,
        distance: Math.floor(Math.random() * 6000) + 3000,
        activeMinutes: Math.floor(Math.random() * 150) + 45
      });
      /* istanbul ignore next */
      cov_1g2njqdyj7().s[43]++;
      setLastSyncTime(new Date());
      /* istanbul ignore next */
      cov_1g2njqdyj7().s[44]++;
      toast({
        title: 'Synchronisation réussie',
        description: 'Données Google Fit synchronisées avec succès',
        variant: 'default'
      });
      /* istanbul ignore next */
      cov_1g2njqdyj7().s[45]++;
      return mockFitData;
    } catch (error) {
      // Erreur silencieuse
      const errorMessage =
      /* istanbul ignore next */
      (cov_1g2njqdyj7().s[46]++, error instanceof Error ?
      /* istanbul ignore next */
      (cov_1g2njqdyj7().b[5][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1g2njqdyj7().b[5][1]++, 'Erreur de synchronisation Google Fit'));
      /* istanbul ignore next */
      cov_1g2njqdyj7().s[47]++;
      setSyncError(errorMessage);
      /* istanbul ignore next */
      cov_1g2njqdyj7().s[48]++;
      toast({
        title: 'Erreur de synchronisation',
        description: errorMessage,
        variant: 'destructive'
      });
      /* istanbul ignore next */
      cov_1g2njqdyj7().s[49]++;
      return null;
    } finally {
      /* istanbul ignore next */
      cov_1g2njqdyj7().s[50]++;
      setIsLoading(false);
    }
  }, [isGoogleFitAvailable, toast]));
  // Synchroniser automatiquement les deux sources
  const syncAll =
  /* istanbul ignore next */
  (cov_1g2njqdyj7().s[51]++, (0, react_1.useCallback)(async () => {
    /* istanbul ignore next */
    cov_1g2njqdyj7().f[9]++;
    const results =
    /* istanbul ignore next */
    (cov_1g2njqdyj7().s[52]++, await Promise.allSettled([syncAppleHealth(), syncGoogleFit()]));
    const appleResult =
    /* istanbul ignore next */
    (cov_1g2njqdyj7().s[53]++, results[0]);
    const googleResult =
    /* istanbul ignore next */
    (cov_1g2njqdyj7().s[54]++, results[1]);
    // Combiner les données si les deux synchronisations réussissent
    /* istanbul ignore next */
    cov_1g2njqdyj7().s[55]++;
    if (
    /* istanbul ignore next */
    (cov_1g2njqdyj7().b[7][0]++, appleResult.status === 'fulfilled') &&
    /* istanbul ignore next */
    (cov_1g2njqdyj7().b[7][1]++, googleResult.status === 'fulfilled')) {
      /* istanbul ignore next */
      cov_1g2njqdyj7().b[6][0]++;
      const appleData =
      /* istanbul ignore next */
      (cov_1g2njqdyj7().s[56]++, appleResult.value);
      const googleData =
      /* istanbul ignore next */
      (cov_1g2njqdyj7().s[57]++, googleResult.value);
      /* istanbul ignore next */
      cov_1g2njqdyj7().s[58]++;
      if (
      /* istanbul ignore next */
      (cov_1g2njqdyj7().b[9][0]++, appleData) &&
      /* istanbul ignore next */
      (cov_1g2njqdyj7().b[9][1]++, googleData)) {
        /* istanbul ignore next */
        cov_1g2njqdyj7().b[8][0]++;
        // Fusionner les données (prioriser les données les plus récentes)
        const combinedData =
        /* istanbul ignore next */
        (cov_1g2njqdyj7().s[59]++, {
          steps: Math.max(appleData.steps, googleData.steps),
          heartRate: [...appleData.heartRate, ...googleData.heartRate],
          sleepSessions: [...appleData.sleepSessions, ...googleData.sleepSessions],
          lastSync: new Date(),
          caloriesBurned: Math.max(
          /* istanbul ignore next */
          (cov_1g2njqdyj7().b[10][0]++, appleData.caloriesBurned) ||
          /* istanbul ignore next */
          (cov_1g2njqdyj7().b[10][1]++, 0),
          /* istanbul ignore next */
          (cov_1g2njqdyj7().b[11][0]++, googleData.caloriesBurned) ||
          /* istanbul ignore next */
          (cov_1g2njqdyj7().b[11][1]++, 0)),
          distance: Math.max(
          /* istanbul ignore next */
          (cov_1g2njqdyj7().b[12][0]++, appleData.distance) ||
          /* istanbul ignore next */
          (cov_1g2njqdyj7().b[12][1]++, 0),
          /* istanbul ignore next */
          (cov_1g2njqdyj7().b[13][0]++, googleData.distance) ||
          /* istanbul ignore next */
          (cov_1g2njqdyj7().b[13][1]++, 0)),
          activeMinutes: Math.max(
          /* istanbul ignore next */
          (cov_1g2njqdyj7().b[14][0]++, appleData.activeMinutes) ||
          /* istanbul ignore next */
          (cov_1g2njqdyj7().b[14][1]++, 0),
          /* istanbul ignore next */
          (cov_1g2njqdyj7().b[15][0]++, googleData.activeMinutes) ||
          /* istanbul ignore next */
          (cov_1g2njqdyj7().b[15][1]++, 0))
        });
        /* istanbul ignore next */
        cov_1g2njqdyj7().s[60]++;
        return combinedData;
      } else
      /* istanbul ignore next */
      {
        cov_1g2njqdyj7().b[8][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_1g2njqdyj7().b[6][1]++;
    }
    // Retourner les données disponibles
    cov_1g2njqdyj7().s[61]++;
    if (
    /* istanbul ignore next */
    (cov_1g2njqdyj7().b[17][0]++, appleResult.status === 'fulfilled') &&
    /* istanbul ignore next */
    (cov_1g2njqdyj7().b[17][1]++, appleResult.value)) {
      /* istanbul ignore next */
      cov_1g2njqdyj7().b[16][0]++;
      cov_1g2njqdyj7().s[62]++;
      return appleResult.value;
    } else
    /* istanbul ignore next */
    {
      cov_1g2njqdyj7().b[16][1]++;
    }
    cov_1g2njqdyj7().s[63]++;
    if (
    /* istanbul ignore next */
    (cov_1g2njqdyj7().b[19][0]++, googleResult.status === 'fulfilled') &&
    /* istanbul ignore next */
    (cov_1g2njqdyj7().b[19][1]++, googleResult.value)) {
      /* istanbul ignore next */
      cov_1g2njqdyj7().b[18][0]++;
      cov_1g2njqdyj7().s[64]++;
      return googleResult.value;
    } else
    /* istanbul ignore next */
    {
      cov_1g2njqdyj7().b[18][1]++;
    }
    cov_1g2njqdyj7().s[65]++;
    return null;
  }, [syncAppleHealth, syncGoogleFit]));
  // Programmer une synchronisation automatique
  const scheduleSync =
  /* istanbul ignore next */
  (cov_1g2njqdyj7().s[66]++, (0, react_1.useCallback)((intervalMinutes =
  /* istanbul ignore next */
  (cov_1g2njqdyj7().b[20][0]++, 30)) => {
    /* istanbul ignore next */
    cov_1g2njqdyj7().f[10]++;
    const interval =
    /* istanbul ignore next */
    (cov_1g2njqdyj7().s[67]++, setInterval(async () => {
      /* istanbul ignore next */
      cov_1g2njqdyj7().f[11]++;
      cov_1g2njqdyj7().s[68]++;
      try {
        /* istanbul ignore next */
        cov_1g2njqdyj7().s[69]++;
        await syncAll();
      } catch (error) {
        /* istanbul ignore next */
        cov_1g2njqdyj7().s[70]++;
        // Erreur silencieuse
        console.error('Erreur lors de la synchronisation programmée:', error);
      }
    }, intervalMinutes * 60 * 1000));
    /* istanbul ignore next */
    cov_1g2njqdyj7().s[71]++;
    return () => {
      /* istanbul ignore next */
      cov_1g2njqdyj7().f[12]++;
      cov_1g2njqdyj7().s[72]++;
      return clearInterval(interval);
    };
  }, [syncAll]));
  // Obtenir les données mises en cache
  const getCachedData =
  /* istanbul ignore next */
  (cov_1g2njqdyj7().s[73]++, (0, react_1.useCallback)(() => {
    /* istanbul ignore next */
    cov_1g2njqdyj7().f[13]++;
    cov_1g2njqdyj7().s[74]++;
    try {
      const cachedData =
      /* istanbul ignore next */
      (cov_1g2njqdyj7().s[75]++, localStorage.getItem('wearableData'));
      /* istanbul ignore next */
      cov_1g2njqdyj7().s[76]++;
      if (cachedData) {
        /* istanbul ignore next */
        cov_1g2njqdyj7().b[21][0]++;
        const parsed =
        /* istanbul ignore next */
        (cov_1g2njqdyj7().s[77]++, JSON.parse(cachedData));
        /* istanbul ignore next */
        cov_1g2njqdyj7().s[78]++;
        return {
          ...parsed,
          lastSync: new Date(parsed.lastSync),
          sleepSessions: parsed.sleepSessions.map(session => {
            /* istanbul ignore next */
            cov_1g2njqdyj7().f[14]++;
            cov_1g2njqdyj7().s[79]++;
            return {
              ...session,
              startTime: new Date(session.startTime),
              endTime: new Date(session.endTime)
            };
          })
        };
      } else
      /* istanbul ignore next */
      {
        cov_1g2njqdyj7().b[21][1]++;
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_1g2njqdyj7().s[80]++;
      // Erreur silencieuse
      console.error('Erreur lors de la lecture des données mises en cache:', error);
    }
    /* istanbul ignore next */
    cov_1g2njqdyj7().s[81]++;
    return null;
  }, []));
  // Sauvegarder les données en cache
  const cacheData =
  /* istanbul ignore next */
  (cov_1g2njqdyj7().s[82]++, (0, react_1.useCallback)(data => {
    /* istanbul ignore next */
    cov_1g2njqdyj7().f[15]++;
    cov_1g2njqdyj7().s[83]++;
    try {
      /* istanbul ignore next */
      cov_1g2njqdyj7().s[84]++;
      localStorage.setItem('wearableData', JSON.stringify(data));
    } catch (error) {
      /* istanbul ignore next */
      cov_1g2njqdyj7().s[85]++;
      // Erreur silencieuse
      console.error('Erreur lors de la sauvegarde des données en cache:', error);
    }
  }, []));
  /* istanbul ignore next */
  cov_1g2njqdyj7().s[86]++;
  return {
    isLoading,
    lastSyncTime,
    syncError,
    isAppleHealthAvailable: isAppleHealthAvailable(),
    isGoogleFitAvailable: isGoogleFitAvailable(),
    syncAppleHealth,
    syncGoogleFit,
    syncAll,
    scheduleSync,
    getCachedData,
    cacheData
  };
};
/* istanbul ignore next */
cov_1g2njqdyj7().s[87]++;
exports.useWearableSync = useWearableSync;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,