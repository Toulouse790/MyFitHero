4b5e9e9511616b9b395f1d0d4083298b
"use strict";

/**
 * SETUP GLOBAL JEST - CONFIGURATION ENTREPRISE
 * Initialisation avant tous les tests
 */

// Configuration globale pour fetch
global.fetch = require('jest-fetch-mock');

// Configuration pour les APIs Web
Object.defineProperty(window, 'matchMedia', {
  writable: true,
  value: jest.fn().mockImplementation(query => ({
    matches: false,
    media: query,
    onchange: null,
    addListener: jest.fn(),
    removeListener: jest.fn(),
    addEventListener: jest.fn(),
    removeEventListener: jest.fn(),
    dispatchEvent: jest.fn()
  }))
});

// Configuration pour localStorage
const localStorageMock = {
  getItem: jest.fn(),
  setItem: jest.fn(),
  removeItem: jest.fn(),
  clear: jest.fn()
};
global.localStorage = localStorageMock;

// Configuration pour sessionStorage
const sessionStorageMock = {
  getItem: jest.fn(),
  setItem: jest.fn(),
  removeItem: jest.fn(),
  clear: jest.fn()
};
global.sessionStorage = sessionStorageMock;

// Configuration pour IntersectionObserver
global.IntersectionObserver = class IntersectionObserver {
  constructor() {}
  disconnect() {}
  observe() {}
  unobserve() {}
};

// Configuration pour ResizeObserver
global.ResizeObserver = class ResizeObserver {
  constructor(cb) {
    this.cb = cb;
  }
  observe() {}
  unobserve() {}
  disconnect() {}
};

// Configuration pour WebSocket
global.WebSocket = class WebSocket {
  constructor() {}
  send() {}
  close() {}
};

// Suppression des logs en mode test (sauf erreurs)
console.log = jest.fn();
console.info = jest.fn();
console.warn = jest.fn();
module.exports = async () => {
  console.log('ðŸš€ Configuration globale des tests initialisÃ©e');
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJnbG9iYWwiLCJmZXRjaCIsInJlcXVpcmUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsIndpbmRvdyIsIndyaXRhYmxlIiwidmFsdWUiLCJqZXN0IiwiZm4iLCJtb2NrSW1wbGVtZW50YXRpb24iLCJxdWVyeSIsIm1hdGNoZXMiLCJtZWRpYSIsIm9uY2hhbmdlIiwiYWRkTGlzdGVuZXIiLCJyZW1vdmVMaXN0ZW5lciIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZGlzcGF0Y2hFdmVudCIsImxvY2FsU3RvcmFnZU1vY2siLCJnZXRJdGVtIiwic2V0SXRlbSIsInJlbW92ZUl0ZW0iLCJjbGVhciIsImxvY2FsU3RvcmFnZSIsInNlc3Npb25TdG9yYWdlTW9jayIsInNlc3Npb25TdG9yYWdlIiwiSW50ZXJzZWN0aW9uT2JzZXJ2ZXIiLCJjb25zdHJ1Y3RvciIsImRpc2Nvbm5lY3QiLCJvYnNlcnZlIiwidW5vYnNlcnZlIiwiUmVzaXplT2JzZXJ2ZXIiLCJjYiIsIldlYlNvY2tldCIsInNlbmQiLCJjbG9zZSIsImNvbnNvbGUiLCJsb2ciLCJpbmZvIiwid2FybiIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJqZXN0Lmdsb2JhbC1zZXR1cC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFNFVFVQIEdMT0JBTCBKRVNUIC0gQ09ORklHVVJBVElPTiBFTlRSRVBSSVNFXG4gKiBJbml0aWFsaXNhdGlvbiBhdmFudCB0b3VzIGxlcyB0ZXN0c1xuICovXG5cbi8vIENvbmZpZ3VyYXRpb24gZ2xvYmFsZSBwb3VyIGZldGNoXG5nbG9iYWwuZmV0Y2ggPSByZXF1aXJlKCdqZXN0LWZldGNoLW1vY2snKTtcblxuLy8gQ29uZmlndXJhdGlvbiBwb3VyIGxlcyBBUElzIFdlYlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdywgJ21hdGNoTWVkaWEnLCB7XG4gIHdyaXRhYmxlOiB0cnVlLFxuICB2YWx1ZTogamVzdC5mbigpLm1vY2tJbXBsZW1lbnRhdGlvbihxdWVyeSA9PiAoe1xuICAgIG1hdGNoZXM6IGZhbHNlLFxuICAgIG1lZGlhOiBxdWVyeSxcbiAgICBvbmNoYW5nZTogbnVsbCxcbiAgICBhZGRMaXN0ZW5lcjogamVzdC5mbigpLFxuICAgIHJlbW92ZUxpc3RlbmVyOiBqZXN0LmZuKCksXG4gICAgYWRkRXZlbnRMaXN0ZW5lcjogamVzdC5mbigpLFxuICAgIHJlbW92ZUV2ZW50TGlzdGVuZXI6IGplc3QuZm4oKSxcbiAgICBkaXNwYXRjaEV2ZW50OiBqZXN0LmZuKCksXG4gIH0pKSxcbn0pO1xuXG4vLyBDb25maWd1cmF0aW9uIHBvdXIgbG9jYWxTdG9yYWdlXG5jb25zdCBsb2NhbFN0b3JhZ2VNb2NrID0ge1xuICBnZXRJdGVtOiBqZXN0LmZuKCksXG4gIHNldEl0ZW06IGplc3QuZm4oKSxcbiAgcmVtb3ZlSXRlbTogamVzdC5mbigpLFxuICBjbGVhcjogamVzdC5mbigpLFxufTtcbmdsb2JhbC5sb2NhbFN0b3JhZ2UgPSBsb2NhbFN0b3JhZ2VNb2NrO1xuXG4vLyBDb25maWd1cmF0aW9uIHBvdXIgc2Vzc2lvblN0b3JhZ2VcbmNvbnN0IHNlc3Npb25TdG9yYWdlTW9jayA9IHtcbiAgZ2V0SXRlbTogamVzdC5mbigpLFxuICBzZXRJdGVtOiBqZXN0LmZuKCksXG4gIHJlbW92ZUl0ZW06IGplc3QuZm4oKSxcbiAgY2xlYXI6IGplc3QuZm4oKSxcbn07XG5nbG9iYWwuc2Vzc2lvblN0b3JhZ2UgPSBzZXNzaW9uU3RvcmFnZU1vY2s7XG5cbi8vIENvbmZpZ3VyYXRpb24gcG91ciBJbnRlcnNlY3Rpb25PYnNlcnZlclxuZ2xvYmFsLkludGVyc2VjdGlvbk9ic2VydmVyID0gY2xhc3MgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIge1xuICBjb25zdHJ1Y3RvcigpIHt9XG4gIGRpc2Nvbm5lY3QoKSB7fVxuICBvYnNlcnZlKCkge31cbiAgdW5vYnNlcnZlKCkge31cbn07XG5cbi8vIENvbmZpZ3VyYXRpb24gcG91ciBSZXNpemVPYnNlcnZlclxuZ2xvYmFsLlJlc2l6ZU9ic2VydmVyID0gY2xhc3MgUmVzaXplT2JzZXJ2ZXIge1xuICBjb25zdHJ1Y3RvcihjYikge1xuICAgIHRoaXMuY2IgPSBjYjtcbiAgfVxuICBvYnNlcnZlKCkge31cbiAgdW5vYnNlcnZlKCkge31cbiAgZGlzY29ubmVjdCgpIHt9XG59O1xuXG4vLyBDb25maWd1cmF0aW9uIHBvdXIgV2ViU29ja2V0XG5nbG9iYWwuV2ViU29ja2V0ID0gY2xhc3MgV2ViU29ja2V0IHtcbiAgY29uc3RydWN0b3IoKSB7fVxuICBzZW5kKCkge31cbiAgY2xvc2UoKSB7fVxufTtcblxuLy8gU3VwcHJlc3Npb24gZGVzIGxvZ3MgZW4gbW9kZSB0ZXN0IChzYXVmIGVycmV1cnMpXG5jb25zb2xlLmxvZyA9IGplc3QuZm4oKTtcbmNvbnNvbGUuaW5mbyA9IGplc3QuZm4oKTtcbmNvbnNvbGUud2FybiA9IGplc3QuZm4oKTtcblxubW9kdWxlLmV4cG9ydHMgPSBhc3luYyAoKSA9PiB7XG4gIGNvbnNvbGUubG9nKCfwn5qAIENvbmZpZ3VyYXRpb24gZ2xvYmFsZSBkZXMgdGVzdHMgaW5pdGlhbGlzw6llJyk7XG59OyJdLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBQSxNQUFNLENBQUNDLEtBQUssR0FBR0MsT0FBTyxDQUFDLGlCQUFpQixDQUFDOztBQUV6QztBQUNBQyxNQUFNLENBQUNDLGNBQWMsQ0FBQ0MsTUFBTSxFQUFFLFlBQVksRUFBRTtFQUMxQ0MsUUFBUSxFQUFFLElBQUk7RUFDZEMsS0FBSyxFQUFFQyxJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDLENBQUNDLGtCQUFrQixDQUFDQyxLQUFLLEtBQUs7SUFDNUNDLE9BQU8sRUFBRSxLQUFLO0lBQ2RDLEtBQUssRUFBRUYsS0FBSztJQUNaRyxRQUFRLEVBQUUsSUFBSTtJQUNkQyxXQUFXLEVBQUVQLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7SUFDdEJPLGNBQWMsRUFBRVIsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztJQUN6QlEsZ0JBQWdCLEVBQUVULElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7SUFDM0JTLG1CQUFtQixFQUFFVixJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO0lBQzlCVSxhQUFhLEVBQUVYLElBQUksQ0FBQ0MsRUFBRSxDQUFDO0VBQ3pCLENBQUMsQ0FBQztBQUNKLENBQUMsQ0FBQzs7QUFFRjtBQUNBLE1BQU1XLGdCQUFnQixHQUFHO0VBQ3ZCQyxPQUFPLEVBQUViLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7RUFDbEJhLE9BQU8sRUFBRWQsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztFQUNsQmMsVUFBVSxFQUFFZixJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO0VBQ3JCZSxLQUFLLEVBQUVoQixJQUFJLENBQUNDLEVBQUUsQ0FBQztBQUNqQixDQUFDO0FBQ0RULE1BQU0sQ0FBQ3lCLFlBQVksR0FBR0wsZ0JBQWdCOztBQUV0QztBQUNBLE1BQU1NLGtCQUFrQixHQUFHO0VBQ3pCTCxPQUFPLEVBQUViLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7RUFDbEJhLE9BQU8sRUFBRWQsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztFQUNsQmMsVUFBVSxFQUFFZixJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO0VBQ3JCZSxLQUFLLEVBQUVoQixJQUFJLENBQUNDLEVBQUUsQ0FBQztBQUNqQixDQUFDO0FBQ0RULE1BQU0sQ0FBQzJCLGNBQWMsR0FBR0Qsa0JBQWtCOztBQUUxQztBQUNBMUIsTUFBTSxDQUFDNEIsb0JBQW9CLEdBQUcsTUFBTUEsb0JBQW9CLENBQUM7RUFDdkRDLFdBQVdBLENBQUEsRUFBRyxDQUFDO0VBQ2ZDLFVBQVVBLENBQUEsRUFBRyxDQUFDO0VBQ2RDLE9BQU9BLENBQUEsRUFBRyxDQUFDO0VBQ1hDLFNBQVNBLENBQUEsRUFBRyxDQUFDO0FBQ2YsQ0FBQzs7QUFFRDtBQUNBaEMsTUFBTSxDQUFDaUMsY0FBYyxHQUFHLE1BQU1BLGNBQWMsQ0FBQztFQUMzQ0osV0FBV0EsQ0FBQ0ssRUFBRSxFQUFFO0lBQ2QsSUFBSSxDQUFDQSxFQUFFLEdBQUdBLEVBQUU7RUFDZDtFQUNBSCxPQUFPQSxDQUFBLEVBQUcsQ0FBQztFQUNYQyxTQUFTQSxDQUFBLEVBQUcsQ0FBQztFQUNiRixVQUFVQSxDQUFBLEVBQUcsQ0FBQztBQUNoQixDQUFDOztBQUVEO0FBQ0E5QixNQUFNLENBQUNtQyxTQUFTLEdBQUcsTUFBTUEsU0FBUyxDQUFDO0VBQ2pDTixXQUFXQSxDQUFBLEVBQUcsQ0FBQztFQUNmTyxJQUFJQSxDQUFBLEVBQUcsQ0FBQztFQUNSQyxLQUFLQSxDQUFBLEVBQUcsQ0FBQztBQUNYLENBQUM7O0FBRUQ7QUFDQUMsT0FBTyxDQUFDQyxHQUFHLEdBQUcvQixJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO0FBQ3ZCNkIsT0FBTyxDQUFDRSxJQUFJLEdBQUdoQyxJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO0FBQ3hCNkIsT0FBTyxDQUFDRyxJQUFJLEdBQUdqQyxJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO0FBRXhCaUMsTUFBTSxDQUFDQyxPQUFPLEdBQUcsWUFBWTtFQUMzQkwsT0FBTyxDQUFDQyxHQUFHLENBQUMsZ0RBQWdELENBQUM7QUFDL0QsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==