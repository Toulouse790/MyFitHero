{"file":"/workspaces/MyFitHero/src/setupTests.ts","mappings":"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","names":[],"sources":["/workspaces/MyFitHero/src/setupTests.ts"],"sourcesContent":["import '@testing-library/jest-dom';\n\nimport 'jest-axe/extend-expect';\n\n// Mocks globaux pour l'environnement de test (fetch, localStorage, etc.)\nimport fetchMock from 'jest-fetch-mock';\nfetchMock.enableMocks();\n\nObject.defineProperty(window, 'localStorage', { value: require('jest-localstorage-mock'), writable: true });\n\n// Ajoutez ici d'autres mocks globaux si besoin (Web Speech API, etc.)\n\n// Mock pour env.config.ts qui utilise import.meta.env\njest.mock('@/core/config/env.config', () => ({\n  env: {\n    SUPABASE_URL: 'https://test.supabase.co',\n    SUPABASE_ANON_KEY: 'test-anon-key',\n    NODE_ENV: 'test',\n    isProd: false,\n    isDev: false,\n    isTest: true,\n  },\n}));\n\n// Configuration globale pour les tests\nglobal.ResizeObserver = jest.fn().mockImplementation(() => ({\n  observe: jest.fn(),\n  unobserve: jest.fn(),\n  disconnect: jest.fn(),\n}));\n\nglobal.IntersectionObserver = jest.fn().mockImplementation(() => ({\n  observe: jest.fn(),\n  unobserve: jest.fn(),\n  disconnect: jest.fn(),\n  root: null,\n  rootMargin: '',\n  thresholds: [],\n}));\n\n// Mock pour window.matchMedia\nObject.defineProperty(window, 'matchMedia', {\n  writable: true,\n  value: jest.fn().mockImplementation(query => ({\n    matches: false,\n    media: query,\n    onchange: null,\n    addListener: jest.fn(), // deprecated\n    removeListener: jest.fn(), // deprecated\n    addEventListener: jest.fn(),\n    removeEventListener: jest.fn(),\n    dispatchEvent: jest.fn(),\n  })),\n});\n\n// Mock pour localStorage\nconst localStorageMock = {\n  getItem: jest.fn(),\n  setItem: jest.fn(),\n  removeItem: jest.fn(),\n  clear: jest.fn(),\n  length: 0,\n  key: jest.fn(),\n};\nglobal.localStorage = localStorageMock as any;\n\n// Mock pour sessionStorage\nconst sessionStorageMock = {\n  getItem: jest.fn(),\n  setItem: jest.fn(),\n  removeItem: jest.fn(),\n  clear: jest.fn(),\n  length: 0,\n  key: jest.fn(),\n};\nglobal.sessionStorage = sessionStorageMock as any;\n\n// Mock pour fetch\nglobal.fetch = jest.fn(() =>\n  Promise.resolve({\n    ok: true,\n    status: 200,\n    json: () => Promise.resolve({}),\n    text: () => Promise.resolve(''),\n  })\n) as jest.Mock;\n\n// Mock pour console pour éviter les logs pendant les tests\nconst originalError = console.error;\nconst originalWarn = console.warn;\n\nbeforeAll(() => {\n  console.error = (...args: any[]) => {\n    if (\n      typeof args[0] === 'string' &&\n      args[0].includes('Warning: ReactDOM.render is no longer supported')\n    ) {\n      return;\n    }\n    originalError.call(console, ...args);\n  };\n\n  console.warn = (...args: any[]) => {\n    if (\n      typeof args[0] === 'string' &&\n      (args[0].includes('componentWillReceiveProps') ||\n       args[0].includes('componentWillUpdate'))\n    ) {\n      return;\n    }\n    originalWarn.call(console, ...args);\n  };\n});\n\nafterAll(() => {\n  console.error = originalError;\n  console.warn = originalWarn;\n});\n\n// Configuration des timeouts par défaut\njest.setTimeout(10000);"],"version":3}