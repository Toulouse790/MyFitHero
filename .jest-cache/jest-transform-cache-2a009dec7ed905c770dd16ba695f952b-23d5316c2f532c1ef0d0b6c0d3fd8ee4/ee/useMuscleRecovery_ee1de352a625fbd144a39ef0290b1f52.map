{"version":3,"names":["cov_2x9vrri4a","actualCoverage","s","react_1","require","appStore_1","useMuscleRecovery","f","appStoreUser","appStore","muscleRecoveryData","setMuscleRecoveryData","useState","recoveryProfile","recommendations","setRecommendations","globalMetrics","setGlobalMetrics","isLoading","setIsLoading","error","setError","lastUpdated","setLastUpdated","refreshRecoveryData","useCallback","id","b","Date","toISOString","err","errorMessage","Error","message","console","updateRecoveryProfile","useEffect","getMuscleRecovery","muscleGroup","find","data","muscle_group","undefined","getRecoveryScore","overall_recovery_score","isReadyForWorkout","muscleGroups","every","muscle","recovery","recovery_percentage","getOptimalWorkoutType","optimal_workout_type","formatRecoveryStatus","status","statusMap","fully_recovered","mostly_recovered","partially_recovered","needs_recovery","overworked","getRecoveryColor","percentage","getNextWorkoutRecommendation","readyMuscles","ready_for_training","length","overallScore","join","exports"],"sources":["/workspaces/MyFitHero/src/features/workout/hooks/useMuscleRecovery.ts"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport { appStore } from '@/store/appStore';\nimport type {\n  MuscleRecoveryData,\n  UserRecoveryProfile,\n  RecoveryRecommendation,\n  GlobalRecoveryMetrics,\n  MuscleGroup,\n} from '@/features/workout/types/muscleRecovery';\n\ninterface UseMuscleRecoveryReturn {\n  // État\n  muscleRecoveryData: MuscleRecoveryData[];\n  recoveryProfile: UserRecoveryProfile | undefined;\n  recommendations: RecoveryRecommendation[];\n  globalMetrics: GlobalRecoveryMetrics | undefined;\n  isLoading: boolean;\n  error: string | undefined;\n  lastUpdated: string | undefined;\n\n  // Actions\n  refreshRecoveryData: () => Promise<void>;\n  updateRecoveryProfile: () => Promise<void>;\n  getMuscleRecovery: (muscleGroup: MuscleGroup) => MuscleRecoveryData | undefined;\n  getRecoveryScore: () => number;\n  isReadyForWorkout: (muscleGroups: MuscleGroup[]) => boolean;\n  getOptimalWorkoutType: () => string;\n\n  // Utilitaires\n  formatRecoveryStatus: (status: string) => string;\n  getRecoveryColor: (percentage: number) => string;\n  getNextWorkoutRecommendation: () => string;\n}\n\nexport const useMuscleRecovery = (): UseMuscleRecoveryReturn => {\n  const { appStoreUser } = appStore();\n\n  // État local\n  const [muscleRecoveryData, setMuscleRecoveryData] = useState<MuscleRecoveryData[]>([]);\n  const [recoveryProfile] = useState<UserRecoveryProfile | null>(null);\n  const [recommendations, setRecommendations] = useState<RecoveryRecommendation[]>([]);\n  const [globalMetrics, setGlobalMetrics] = useState<GlobalRecoveryMetrics | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [lastUpdated, setLastUpdated] = useState<string | null>(null);\n\n  // Fonction pour rafraîchir toutes les données de récupération\n  const refreshRecoveryData = useCallback(async () => {\n    if (!appStoreUser?.id) {\n      setError('Utilisateur non connecté');\n      return;\n    }\n\n    try {\n      setIsLoading(true);\n      setError(null);\n\n      // TODO: Implémenter la logique complète quand les services seront prêts\n      setMuscleRecoveryData([]);\n      setRecommendations([]);\n      setGlobalMetrics(null);\n      setLastUpdated(new Date().toISOString());\n    } catch (err) {\n      const errorMessage =\n        err instanceof Error ? err.message : 'Erreur lors du calcul de récupération';\n      setError(errorMessage);\n      console.error('Error refreshing recovery data:', err);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [appStoreUser?.id]);\n\n  // Fonction pour mettre à jour le profil de récupération\n  const updateRecoveryProfile = useCallback(async () => {\n    if (!appStoreUser?.id) return;\n\n    try {\n      setIsLoading(true);\n      // TODO: Implémenter la logique complète quand les services seront prêts\n    } catch (err) {\n      console.error('Error updating recovery profile:', err);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [appStoreUser?.id]);\n\n  // Charger les données au montage et quand l'utilisateur change\n  useEffect(() => {\n    if (appStoreUser?.id) {\n      refreshRecoveryData();\n    }\n  }, [appStoreUser?.id, refreshRecoveryData]);\n\n  // Fonctions utilitaires\n  const getMuscleRecovery = useCallback(\n    (muscleGroup: MuscleGroup): MuscleRecoveryData | undefined => {\n      return muscleRecoveryData.find(data => data.muscle_group === muscleGroup) || undefined;\n    },\n    [muscleRecoveryData]\n  );\n\n  const getRecoveryScore = useCallback((): number => {\n    return globalMetrics?.overall_recovery_score || 0;\n  }, [globalMetrics]);\n\n  const isReadyForWorkout = useCallback(\n    (muscleGroups: MuscleGroup[]): boolean => {\n      return muscleGroups.every(muscle => {\n        const recovery = getMuscleRecovery(muscle);\n        return recovery ? recovery.recovery_percentage > 70 : false;\n      });\n    },\n    [getMuscleRecovery]\n  );\n\n  const getOptimalWorkoutType = useCallback((): string => {\n    return globalMetrics?.optimal_workout_type || 'rest';\n  }, [globalMetrics]);\n\n  const formatRecoveryStatus = useCallback((status: string): string => {\n    const statusMap = {\n      fully_recovered: 'Complètement récupéré',\n      mostly_recovered: 'Bien récupéré',\n      partially_recovered: 'Partiellement récupéré',\n      needs_recovery: 'Besoin de récupération',\n      overworked: 'Surmené',\n    };\n    return statusMap[status as keyof typeof statusMap] || status;\n  }, []);\n\n  const getRecoveryColor = useCallback((percentage: number): string => {\n    if (percentage >= 90) return '#10B981'; // Vert\n    if (percentage >= 70) return '#F59E0B'; // Orange\n    if (percentage >= 50) return '#EF4444'; // Rouge\n    return '#DC2626'; // Rouge foncé\n  }, []);\n\n  const getNextWorkoutRecommendation = useCallback((): string => {\n    if (!globalMetrics) return 'Données en cours de calcul...';\n\n    const readyMuscles = globalMetrics.ready_for_training.length;\n    const overallScore = globalMetrics.overall_recovery_score;\n\n    if (overallScore < 40) {\n      return 'Repos complet recommandé. Concentrez-vous sur la récupération.';\n    } else if (overallScore < 60) {\n      return 'Entraînement léger uniquement. Cardio doux ou étirements.';\n    } else if (readyMuscles >= 6) {\n      return 'Vous pouvez faire un entraînement complet du corps.';\n    } else if (readyMuscles >= 4) {\n      return 'Entraînement en split (haut/bas du corps) recommandé.';\n    } else if (readyMuscles >= 2) {\n      return `Entraînement ciblé sur: ${globalMetrics.ready_for_training.join(', ')}`;\n    } else {\n      return 'Récupération active recommandée (marche, étirements).';\n    }\n  }, [globalMetrics]);\n\n  return {\n    // État\n    muscleRecoveryData,\n    recoveryProfile,\n    recommendations,\n    globalMetrics,\n    isLoading,\n    error,\n    lastUpdated,\n\n    // Actions\n    refreshRecoveryData,\n    updateRecoveryProfile,\n    getMuscleRecovery,\n    getRecoveryScore,\n    isReadyForWorkout,\n    getOptimalWorkoutType,\n\n    // Utilitaires\n    formatRecoveryStatus,\n    getRecoveryColor,\n    getNextWorkoutRecommendation,\n  };\n};\n"],"mappingsaAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,aAAA;AAAAA,aAAA,GAAAE,CAAA;;;;;;;AA9CF,MAAAC,OAAA;AAAA;AAAA,CAAAH,aAAA,GAAAE,CAAA,OAAAE,OAAA;AACA,MAAAC,UAAA;AAAA;AAAA,CAAAL,aAAA,GAAAE,CAAA,OAAAE,OAAA;AAA4C;AAAAJ,aAAA,GAAAE,CAAA;AAiCrC,MAAMI,iBAAiB,GAAGA,CAAA,KAA8B;EAAA;EAAAN,aAAA,GAAAO,CAAA;EAC7D,MAAM;IAAEC;EAAY,CAAE;EAAA;EAAA,CAAAR,aAAA,GAAAE,CAAA,OAAG,IAAAG,UAAA,CAAAI,QAAQ,GAAE;EAEnC;EACA,MAAM,CAACC,kBAAkB,EAAEC,qBAAqB,CAAC;EAAA;EAAA,CAAAX,aAAA,GAAAE,CAAA,OAAG,IAAAC,OAAA,CAAAS,QAAQ,EAAuB,EAAE,CAAC;EACtF,MAAM,CAACC,eAAe,CAAC;EAAA;EAAA,CAAAb,aAAA,GAAAE,CAAA,OAAG,IAAAC,OAAA,CAAAS,QAAQ,EAA6B,IAAI,CAAC;EACpE,MAAM,CAACE,eAAe,EAAEC,kBAAkB,CAAC;EAAA;EAAA,CAAAf,aAAA,GAAAE,CAAA,OAAG,IAAAC,OAAA,CAAAS,QAAQ,EAA2B,EAAE,CAAC;EACpF,MAAM,CAACI,aAAa,EAAEC,gBAAgB,CAAC;EAAA;EAAA,CAAAjB,aAAA,GAAAE,CAAA,OAAG,IAAAC,OAAA,CAAAS,QAAQ,EAA+B,IAAI,CAAC;EACtF,MAAM,CAACM,SAAS,EAAEC,YAAY,CAAC;EAAA;EAAA,CAAAnB,aAAA,GAAAE,CAAA,QAAG,IAAAC,OAAA,CAAAS,QAAQ,EAAC,KAAK,CAAC;EACjD,MAAM,CAACQ,KAAK,EAAEC,QAAQ,CAAC;EAAA;EAAA,CAAArB,aAAA,GAAAE,CAAA,QAAG,IAAAC,OAAA,CAAAS,QAAQ,EAAgB,IAAI,CAAC;EACvD,MAAM,CAACU,WAAW,EAAEC,cAAc,CAAC;EAAA;EAAA,CAAAvB,aAAA,GAAAE,CAAA,QAAG,IAAAC,OAAA,CAAAS,QAAQ,EAAgB,IAAI,CAAC;EAEnE;EACA,MAAMY,mBAAmB;EAAA;EAAA,CAAAxB,aAAA,GAAAE,CAAA,QAAG,IAAAC,OAAA,CAAAsB,WAAW,EAAC,YAAW;IAAA;IAAAzB,aAAA,GAAAO,CAAA;IAAAP,aAAA,GAAAE,CAAA;IACjD,IAAI,CAACM,YAAY,EAAEkB,EAAE,EAAE;MAAA;MAAA1B,aAAA,GAAA2B,CAAA;MAAA3B,aAAA,GAAAE,CAAA;MACrBmB,QAAQ,CAAC,0BAA0B,CAAC;MAAC;MAAArB,aAAA,GAAAE,CAAA;MACrC;IACF,CAAC;IAAA;IAAA;MAAAF,aAAA,GAAA2B,CAAA;IAAA;IAAA3B,aAAA,GAAAE,CAAA;IAED,IAAI;MAAA;MAAAF,aAAA,GAAAE,CAAA;MACFiB,YAAY,CAAC,IAAI,CAAC;MAAC;MAAAnB,aAAA,GAAAE,CAAA;MACnBmB,QAAQ,CAAC,IAAI,CAAC;MAEd;MAAA;MAAArB,aAAA,GAAAE,CAAA;MACAS,qBAAqB,CAAC,EAAE,CAAC;MAAC;MAAAX,aAAA,GAAAE,CAAA;MAC1Ba,kBAAkB,CAAC,EAAE,CAAC;MAAC;MAAAf,aAAA,GAAAE,CAAA;MACvBe,gBAAgB,CAAC,IAAI,CAAC;MAAC;MAAAjB,aAAA,GAAAE,CAAA;MACvBqB,cAAc,CAAC,IAAIK,IAAI,EAAE,CAACC,WAAW,EAAE,CAAC;IAC1C,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZ,MAAMC,YAAY;MAAA;MAAA,CAAA/B,aAAA,GAAAE,CAAA,QAChB4B,GAAG,YAAYE,KAAK;MAAA;MAAA,CAAAhC,aAAA,GAAA2B,CAAA,UAAGG,GAAG,CAACG,OAAO;MAAA;MAAA,CAAAjC,aAAA,GAAA2B,CAAA,UAAG,uCAAuC;MAAC;MAAA3B,aAAA,GAAAE,CAAA;MAC/EmB,QAAQ,CAACU,YAAY,CAAC;MAAC;MAAA/B,aAAA,GAAAE,CAAA;MACvBgC,OAAO,CAACd,KAAK,CAAC,iCAAiC,EAAEU,GAAG,CAAC;IACvD,CAAC,SAAS;MAAA;MAAA9B,aAAA,GAAAE,CAAA;MACRiB,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC,EAAE,CAACX,YAAY,EAAEkB,EAAE,CAAC,CAAC;EAEtB;EACA,MAAMS,qBAAqB;EAAA;EAAA,CAAAnC,aAAA,GAAAE,CAAA,QAAG,IAAAC,OAAA,CAAAsB,WAAW,EAAC,YAAW;IAAA;IAAAzB,aAAA,GAAAO,CAAA;IAAAP,aAAA,GAAAE,CAAA;IACnD,IAAI,CAACM,YAAY,EAAEkB,EAAE,EAAE;MAAA;MAAA1B,aAAA,GAAA2B,CAAA;MAAA3B,aAAA,GAAAE,CAAA;MAAA;IAAA,CAAO;IAAA;IAAA;MAAAF,aAAA,GAAA2B,CAAA;IAAA;IAAA3B,aAAA,GAAAE,CAAA;IAE9B,IAAI;MAAA;MAAAF,aAAA,GAAAE,CAAA;MACFiB,YAAY,CAAC,IAAI,CAAC;MAClB;IACF,CAAC,CAAC,OAAOW,GAAG,EAAE;MAAA;MAAA9B,aAAA,GAAAE,CAAA;MACZgC,OAAO,CAACd,KAAK,CAAC,kCAAkC,EAAEU,GAAG,CAAC;IACxD,CAAC,SAAS;MAAA;MAAA9B,aAAA,GAAAE,CAAA;MACRiB,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC,EAAE,CAACX,YAAY,EAAEkB,EAAE,CAAC,CAAC;EAEtB;EAAA;EAAA1B,aAAA,GAAAE,CAAA;EACA,IAAAC,OAAA,CAAAiC,SAAS,EAAC,MAAK;IAAA;IAAApC,aAAA,GAAAO,CAAA;IAAAP,aAAA,GAAAE,CAAA;IACb,IAAIM,YAAY,EAAEkB,EAAE,EAAE;MAAA;MAAA1B,aAAA,GAAA2B,CAAA;MAAA3B,aAAA,GAAAE,CAAA;MACpBsB,mBAAmB,EAAE;IACvB,CAAC;IAAA;IAAA;MAAAxB,aAAA,GAAA2B,CAAA;IAAA;EACH,CAAC,EAAE,CAACnB,YAAY,EAAEkB,EAAE,EAAEF,mBAAmB,CAAC,CAAC;EAE3C;EACA,MAAMa,iBAAiB;EAAA;EAAA,CAAArC,aAAA,GAAAE,CAAA,QAAG,IAAAC,OAAA,CAAAsB,WAAW,EAClCa,WAAwB,IAAoC;IAAA;IAAAtC,aAAA,GAAAO,CAAA;IAAAP,aAAA,GAAAE,CAAA;IAC3D,OAAO,2BAAAF,aAAA,GAAA2B,CAAA,UAAAjB,kBAAkB,CAAC6B,IAAI,CAACC,IAAI,IAAI;MAAA;MAAAxC,aAAA,GAAAO,CAAA;MAAAP,aAAA,GAAAE,CAAA;MAAA,OAAAsC,IAAI,CAACC,YAAY,KAAKH,WAAW;IAAX,CAAW,CAAC;IAAA;IAAA,CAAAtC,aAAA,GAAA2B,CAAA,UAAIe,SAAS;EACxF,CAAC,EACD,CAAChC,kBAAkB,CAAC,CACrB;EAED,MAAMiC,gBAAgB;EAAA;EAAA,CAAA3C,aAAA,GAAAE,CAAA,QAAG,IAAAC,OAAA,CAAAsB,WAAW,EAAC,MAAa;IAAA;IAAAzB,aAAA,GAAAO,CAAA;IAAAP,aAAA,GAAAE,CAAA;IAChD,OAAO,2BAAAF,aAAA,GAAA2B,CAAA,UAAAX,aAAa,EAAE4B,sBAAsB;IAAA;IAAA,CAAA5C,aAAA,GAAA2B,CAAA,UAAI,CAAC;EACnD,CAAC,EAAE,CAACX,aAAa,CAAC,CAAC;EAEnB,MAAM6B,iBAAiB;EAAA;EAAA,CAAA7C,aAAA,GAAAE,CAAA,QAAG,IAAAC,OAAA,CAAAsB,WAAW,EAClCqB,YAA2B,IAAa;IAAA;IAAA9C,aAAA,GAAAO,CAAA;IAAAP,aAAA,GAAAE,CAAA;IACvC,OAAO4C,YAAY,CAACC,KAAK,CAACC,MAAM,IAAG;MAAA;MAAAhD,aAAA,GAAAO,CAAA;MACjC,MAAM0C,QAAQ;MAAA;MAAA,CAAAjD,aAAA,GAAAE,CAAA,QAAGmC,iBAAiB,CAACW,MAAM,CAAC;MAAC;MAAAhD,aAAA,GAAAE,CAAA;MAC3C,OAAO+C,QAAQ;MAAA;MAAA,CAAAjD,aAAA,GAAA2B,CAAA,UAAGsB,QAAQ,CAACC,mBAAmB,GAAG,EAAE;MAAA;MAAA,CAAAlD,aAAA,GAAA2B,CAAA,UAAG,KAAK;IAC7D,CAAC,CAAC;EACJ,CAAC,EACD,CAACU,iBAAiB,CAAC,CACpB;EAED,MAAMc,qBAAqB;EAAA;EAAA,CAAAnD,aAAA,GAAAE,CAAA,QAAG,IAAAC,OAAA,CAAAsB,WAAW,EAAC,MAAa;IAAA;IAAAzB,aAAA,GAAAO,CAAA;IAAAP,aAAA,GAAAE,CAAA;IACrD,OAAO,2BAAAF,aAAA,GAAA2B,CAAA,UAAAX,aAAa,EAAEoC,oBAAoB;IAAA;IAAA,CAAApD,aAAA,GAAA2B,CAAA,UAAI,MAAM;EACtD,CAAC,EAAE,CAACX,aAAa,CAAC,CAAC;EAEnB,MAAMqC,oBAAoB;EAAA;EAAA,CAAArD,aAAA,GAAAE,CAAA,QAAG,IAAAC,OAAA,CAAAsB,WAAW,EAAE6B,MAAc,IAAY;IAAA;IAAAtD,aAAA,GAAAO,CAAA;IAClE,MAAMgD,SAAS;IAAA;IAAA,CAAAvD,aAAA,GAAAE,CAAA,QAAG;MAChBsD,eAAe,EAAE,uBAAuB;MACxCC,gBAAgB,EAAE,eAAe;MACjCC,mBAAmB,EAAE,wBAAwB;MAC7CC,cAAc,EAAE,wBAAwB;MACxCC,UAAU,EAAE;KACb;IAAC;IAAA5D,aAAA,GAAAE,CAAA;IACF,OAAO,2BAAAF,aAAA,GAAA2B,CAAA,UAAA4B,SAAS,CAACD,MAAgC,CAAC;IAAA;IAAA,CAAAtD,aAAA,GAAA2B,CAAA,UAAI2B,MAAM;EAC9D,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMO,gBAAgB;EAAA;EAAA,CAAA7D,aAAA,GAAAE,CAAA,QAAG,IAAAC,OAAA,CAAAsB,WAAW,EAAEqC,UAAkB,IAAY;IAAA;IAAA9D,aAAA,GAAAO,CAAA;IAAAP,aAAA,GAAAE,CAAA;IAClE,IAAI4D,UAAU,IAAI,EAAE,EAAE;MAAA;MAAA9D,aAAA,GAAA2B,CAAA;MAAA3B,aAAA,GAAAE,CAAA;MAAA,OAAO,SAAS;IAAA,CAAC;IAAA;IAAA;MAAAF,aAAA,GAAA2B,CAAA;IAAA,EAAC;IAAA3B,aAAA,GAAAE,CAAA;IACxC,IAAI4D,UAAU,IAAI,EAAE,EAAE;MAAA;MAAA9D,aAAA,GAAA2B,CAAA;MAAA3B,aAAA,GAAAE,CAAA;MAAA,OAAO,SAAS;IAAA,CAAC;IAAA;IAAA;MAAAF,aAAA,GAAA2B,CAAA;IAAA,EAAC;IAAA3B,aAAA,GAAAE,CAAA;IACxC,IAAI4D,UAAU,IAAI,EAAE,EAAE;MAAA;MAAA9D,aAAA,GAAA2B,CAAA;MAAA3B,aAAA,GAAAE,CAAA;MAAA,OAAO,SAAS;IAAA,CAAC;IAAA;IAAA;MAAAF,aAAA,GAAA2B,CAAA;IAAA,EAAC;IAAA3B,aAAA,GAAAE,CAAA;IACxC,OAAO,SAAS,CAAC,CAAC;EACpB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAM6D,4BAA4B;EAAA;EAAA,CAAA/D,aAAA,GAAAE,CAAA,QAAG,IAAAC,OAAA,CAAAsB,WAAW,EAAC,MAAa;IAAA;IAAAzB,aAAA,GAAAO,CAAA;IAAAP,aAAA,GAAAE,CAAA;IAC5D,IAAI,CAACc,aAAa,EAAE;MAAA;MAAAhB,aAAA,GAAA2B,CAAA;MAAA3B,aAAA,GAAAE,CAAA;MAAA,OAAO,+BAA+B;IAAA,CAAC;IAAA;IAAA;MAAAF,aAAA,GAAA2B,CAAA;IAAA;IAE3D,MAAMqC,YAAY;IAAA;IAAA,CAAAhE,aAAA,GAAAE,CAAA,QAAGc,aAAa,CAACiD,kBAAkB,CAACC,MAAM;IAC5D,MAAMC,YAAY;IAAA;IAAA,CAAAnE,aAAA,GAAAE,CAAA,QAAGc,aAAa,CAAC4B,sBAAsB;IAAC;IAAA5C,aAAA,GAAAE,CAAA;IAE1D,IAAIiE,YAAY,GAAG,EAAE,EAAE;MAAA;MAAAnE,aAAA,GAAA2B,CAAA;MAAA3B,aAAA,GAAAE,CAAA;MACrB,OAAO,gEAAgE;IACzE,CAAC,MAAM;MAAA;MAAAF,aAAA,GAAA2B,CAAA;MAAA3B,aAAA,GAAAE,CAAA;MAAA,IAAIiE,YAAY,GAAG,EAAE,EAAE;QAAA;QAAAnE,aAAA,GAAA2B,CAAA;QAAA3B,aAAA,GAAAE,CAAA;QAC5B,OAAO,2DAA2D;MACpE,CAAC,MAAM;QAAA;QAAAF,aAAA,GAAA2B,CAAA;QAAA3B,aAAA,GAAAE,CAAA;QAAA,IAAI8D,YAAY,IAAI,CAAC,EAAE;UAAA;UAAAhE,aAAA,GAAA2B,CAAA;UAAA3B,aAAA,GAAAE,CAAA;UAC5B,OAAO,qDAAqD;QAC9D,CAAC,MAAM;UAAA;UAAAF,aAAA,GAAA2B,CAAA;UAAA3B,aAAA,GAAAE,CAAA;UAAA,IAAI8D,YAAY,IAAI,CAAC,EAAE;YAAA;YAAAhE,aAAA,GAAA2B,CAAA;YAAA3B,aAAA,GAAAE,CAAA;YAC5B,OAAO,uDAAuD;UAChE,CAAC,MAAM;YAAA;YAAAF,aAAA,GAAA2B,CAAA;YAAA3B,aAAA,GAAAE,CAAA;YAAA,IAAI8D,YAAY,IAAI,CAAC,EAAE;cAAA;cAAAhE,aAAA,GAAA2B,CAAA;cAAA3B,aAAA,GAAAE,CAAA;cAC5B,OAAO,2BAA2Bc,aAAa,CAACiD,kBAAkB,CAACG,IAAI,CAAC,IAAI,CAAC,EAAE;YACjF,CAAC,MAAM;cAAA;cAAApE,aAAA,GAAA2B,CAAA;cAAA3B,aAAA,GAAAE,CAAA;cACL,OAAO,uDAAuD;YAChE;UAAA;QAAA;MAAA;IAAA;EACF,CAAC,EAAE,CAACc,aAAa,CAAC,CAAC;EAAC;EAAAhB,aAAA,GAAAE,CAAA;EAEpB,OAAO;IACL;IACAQ,kBAAkB;IAClBG,eAAe;IACfC,eAAe;IACfE,aAAa;IACbE,SAAS;IACTE,KAAK;IACLE,WAAW;IAEX;IACAE,mBAAmB;IACnBW,qBAAqB;IACrBE,iBAAiB;IACjBM,gBAAgB;IAChBE,iBAAiB;IACjBM,qBAAqB;IAErB;IACAE,oBAAoB;IACpBQ,gBAAgB;IAChBE;GACD;AACH,CAAC;AAAC;AAAA/D,aAAA,GAAAE,CAAA;AAnJWmE,OAAA,CAAA/D,iBAAiB,GAAAA,iBAAA","ignoreList":[]}