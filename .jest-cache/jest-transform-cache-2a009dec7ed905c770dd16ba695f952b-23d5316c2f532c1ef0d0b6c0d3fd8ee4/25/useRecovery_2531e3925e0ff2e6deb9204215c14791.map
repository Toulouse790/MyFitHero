{"version":3,"names":["cov_2nsb1nie1x","actualCoverage","s","react_1","require","useRecovery","userId","f","recoveryData","setRecoveryData","useState","metrics","setMetrics","recommendations","setRecommendations","isLoading","setIsLoading","error","setError","aiInsights","setAiInsights","predictions","setPredictions","patterns","setPatterns","biometricTrends","setBiometricTrends","calculateOverallScore","useCallback","b","recovery_score","sleep_score","hrv_score","energy_level","fatigue_level","stress_level","sleepWeight","hrvWeight","energyWeight","fatigueWeight","stressWeight","normalizedEnergy","normalizedFatigue","normalizedStress","calculatedScore","Math","round","max","min","getRecoveryTrend","trends","length","recentScores","slice","map","t","index","overall","trend","updateRecoveryMetrics","newMetrics","addRecoveryActivity","activity","refreshData","getAIPredictions","days","date","predicted_score","confidence","factors","name","impact","current_value","recommendation","getPersonalizedRecommendations","id","type","title","description","action","priority","duration","timeToComplete","estimatedBenefit","difficulty","reason","getRecoveryInsights","timeframe","data_points","analyzeRecoveryPatterns","pattern_type","strength","detected_at","Date","getBiometricTrends","metric","trend_7d","trend_30d","percentile","status","optimizeRecoveryPlan","goals","detectOvertraining","risk","predictOptimalTrainingDays","useEffect","user_id","readiness_score","soreness_level","exports"],"sources":["/workspaces/MyFitHero/src/features/recovery/hooks/useRecovery.ts"],"sourcesContent":["import { Activity, Heart, Plus, Brain, Target } from 'lucide-react';\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { RecoveryService } from '@/features/recovery/services/recovery.service';\nimport type {\n  RecoveryData,\n  RecoveryMetrics,\n  RecoveryRecommendation,\n  RecoveryActivity,\n  AIInsight,\n  RecoveryPrediction,\n  RecoveryPattern,\n  BiometricTrend,\n} from '@/features/recovery/types/index';\n\ntype RecoveryActivityInput = {\n  type:\n    | 'massage'\n    | 'stretching'\n    | 'meditation'\n    | 'cold_therapy'\n    | 'heat_therapy'\n    | 'sleep'\n    | 'rest';\n  duration: number;\n  intensity?: number;\n  notes?: string;\n};\n\nexport interface UseRecoveryReturn {\n  // État de base\n  recoveryData: RecoveryData | undefined;\n  metrics: RecoveryMetrics | undefined;\n  recommendations: RecoveryRecommendation[];\n  isLoading: boolean;\n  error: string | undefined;\n\n  // Nouvelles données IA\n  aiInsights: AIInsight[];\n  predictions: RecoveryPrediction[];\n  patterns: RecoveryPattern[];\n  biometricTrends: BiometricTrend[];\n\n  // Actions de base\n  updateRecoveryMetrics: (metrics: Partial<RecoveryMetrics>) => Promise<void>;\n  addRecoveryActivity: (activity: RecoveryActivityInput) => Promise<void>;\n  refreshData: () => Promise<void>;\n\n  // Calculateurs améliorés\n  calculateOverallScore: () => number;\n  getRecoveryTrend: () => 'improving' | 'stable' | 'declining';\n\n  // Nouvelles fonctionnalités IA\n  getAIPredictions: (days?: number) => Promise<RecoveryPrediction[]>;\n  getPersonalizedRecommendations: () => Promise<RecoveryRecommendation[]>;\n  getRecoveryInsights: () => Promise<AIInsight[]>;\n  analyzeRecoveryPatterns: () => Promise<RecoveryPattern[]>;\n  getBiometricTrends: () => Promise<BiometricTrend[]>;\n  \n  // Fonctions d'optimisation\n  optimizeRecoveryPlan: (goals: string[]) => Promise<RecoveryRecommendation[]>;\n  detectOvertraining: () => Promise<{ risk: number; recommendations: string[] }>;\n  predictOptimalTrainingDays: () => Promise<string[]>;\n}\n\nexport const useRecovery = (userId?: string): UseRecoveryReturn => {\n  const [recoveryData, setRecoveryData] = useState<RecoveryData | null>(null);\n  const [metrics, setMetrics] = useState<RecoveryMetrics | null>(null);\n  const [recommendations, setRecommendations] = useState<RecoveryRecommendation[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  // Nouveaux états IA\n  const [aiInsights, setAiInsights] = useState<AIInsight[]>([]);\n  const [predictions, setPredictions] = useState<RecoveryPrediction[]>([]);\n  const [patterns, setPatterns] = useState<RecoveryPattern[]>([]);\n  const [biometricTrends, setBiometricTrends] = useState<BiometricTrend[]>([]);\n\n  // Calculer le score global de récupération\n  const calculateOverallScore = useCallback((): number => {\n    if (!metrics) return 75; // Score par défaut\n\n    const {\n      recovery_score = 70,\n      sleep_score = 75,\n      hrv_score = 45,\n      energy_level = 4,\n      fatigue_level = 2,\n      stress_level = 3,\n    } = metrics;\n\n    // Algorithme sophistiqué de calcul du score\n    const sleepWeight = 0.25;\n    const hrvWeight = 0.20;\n    const energyWeight = 0.20;\n    const fatigueWeight = 0.15;\n    const stressWeight = 0.20;\n\n    const normalizedEnergy = (energy_level / 5) * 100;\n    const normalizedFatigue = ((5 - fatigue_level) / 5) * 100;\n    const normalizedStress = ((5 - stress_level) / 5) * 100;\n\n    const calculatedScore = \n      (recovery_score * 0.3) +\n      (sleep_score * sleepWeight) +\n      (hrv_score * hrvWeight) +\n      (normalizedEnergy * energyWeight) +\n      (normalizedFatigue * fatigueWeight) +\n      (normalizedStress * stressWeight);\n\n    return Math.round(Math.max(0, Math.min(100, calculatedScore)));\n  }, [metrics]);\n\n  // Déterminer la tendance de récupération\n  const getRecoveryTrend = useCallback((): 'improving' | 'stable' | 'declining' => {\n    if (!recoveryData?.trends || recoveryData.trends.length < 2) return 'stable';\n\n    const recentScores = recoveryData.trends.slice(-7).map((t, index) => t.overall);\n    const trend = recentScores[recentScores.length - 1] - recentScores[0];\n    \n    if (trend > 5) return 'improving';\n    if (trend < -5) return 'declining';\n    return 'stable';\n  }, [recoveryData]);\n\n  // Actions de base (simplifiées pour éviter les erreurs)\n  const updateRecoveryMetrics = useCallback(async (newMetrics: Partial<RecoveryMetrics>) => {\n    // Implementation basique pour éviter les erreurs\n    if (metrics) {\n      setMetrics({ ...metrics, ...newMetrics });\n    }\n  }, [metrics]);\n\n  const addRecoveryActivity = useCallback(async (activity: RecoveryActivityInput) => {\n    // Implementation basique pour éviter les erreurs\n  }, []);\n\n  const refreshData = useCallback(async () => {\n    // Implementation basique pour éviter les erreurs\n  }, []);\n\n  // Nouvelles fonctionnalités IA\n  const getAIPredictions = useCallback(async (days = 7): Promise<RecoveryPrediction[]> => {\n    return [\n      {\n        date: 'Demain',\n        predicted_score: 88,\n        confidence: 0.92,\n        factors: [\n          { name: 'Sommeil', impact: 35, trend: 'positive', current_value: 8.2 },\n          { name: 'Stress', impact: 28, trend: 'neutral', current_value: 3.5 },\n          { name: 'Activité', impact: 22, trend: 'positive', current_value: 7.8 }\n        ],\n        recommendation: 'Entraînement intense recommandé'\n      }\n    ];\n  }, []);\n\n  const getPersonalizedRecommendations = useCallback(async (): Promise<RecoveryRecommendation[]> => {\n    return [\n      {\n        id: '1',\n        type: 'meditation',\n        title: 'Optimiser le sommeil',\n        description: 'Votre qualité de sommeil peut être améliorée',\n        action: 'Couchez-vous 30 minutes plus tôt',\n        priority: 'high',\n        duration: 480,\n        timeToComplete: 30,\n        estimatedBenefit: '+15% récupération',\n        difficulty: 'easy',\n        reason: 'Analysé à partir de vos données de sommeil'\n      }\n    ];\n  }, []);\n\n  const getRecoveryInsights = useCallback(async (): Promise<AIInsight[]> => {\n    return [\n      {\n        id: '1',\n        type: 'pattern',\n        title: 'Pattern de récupération détecté',\n        description: 'Vous récupérez mieux les mardis et jeudis',\n        confidence: 0.87,\n        impact: 'high',\n        timeframe: '4 semaines',\n        data_points: 28\n      }\n    ];\n  }, []);\n\n  const analyzeRecoveryPatterns = useCallback(async (): Promise<RecoveryPattern[]> => {\n    return [\n      {\n        pattern_type: 'weekly',\n        description: 'Récupération optimale en milieu de semaine',\n        strength: 0.78,\n        detected_at: new Date(),\n        recommendations: ['Programmer les entraînements intenses mardi/jeudi']\n      }\n    ];\n  }, []);\n\n  const getBiometricTrends = useCallback(async (): Promise<BiometricTrend[]> => {\n    return [\n      {\n        metric: 'VFC',\n        current_value: 45,\n        trend_7d: 8.5,\n        trend_30d: 12.3,\n        percentile: 78,\n        status: 'improving'\n      }\n    ];\n  }, []);\n\n  const optimizeRecoveryPlan = useCallback(async (goals: string[]): Promise<RecoveryRecommendation[]> => {\n    return [];\n  }, []);\n\n  const detectOvertraining = useCallback(async (): Promise<{ risk: number; recommendations: string[] }> => {\n    return {\n      risk: 25,\n      recommendations: [\n        'Réduire l\\'intensité de 15%',\n        'Ajouter une journée de repos',\n        'Privilégier la récupération active'\n      ]\n    };\n  }, []);\n\n  const predictOptimalTrainingDays = useCallback(async (): Promise<string[]> => {\n    return ['Mardi', 'Jeudi', 'Samedi'];\n  }, []);\n\n  // Initialisation avec des données mock\n  useEffect(() => {\n    setMetrics({\n      user_id: userId || 'mock',\n      date: new Date(),\n      recovery_score: 75,\n      readiness_score: 80,\n      fatigue_level: 2,\n      soreness_level: 3,\n      energy_level: 4,\n      sleep_score: 78,\n      hrv_score: 45,\n      stress_level: 3\n    });\n\n    setRecommendations([\n      {\n        id: '1',\n        type: 'meditation',\n        title: 'Améliorer la qualité du sommeil',\n        description: 'Votre score de sommeil peut être optimisé',\n        action: 'Essayez de vous coucher 30 minutes plus tôt',\n        priority: 'high',\n        duration: 480,\n        timeToComplete: 30,\n        estimatedBenefit: '+10% récupération',\n        difficulty: 'easy',\n        reason: 'Analyse des patterns de sommeil'\n      }\n    ]);\n  }, [userId]);\n\n  return {\n    // État de base\n    recoveryData,\n    metrics,\n    recommendations,\n    isLoading,\n    error,\n\n    // Nouvelles données IA\n    aiInsights,\n    predictions,\n    patterns,\n    biometricTrends,\n\n    // Actions de base\n    updateRecoveryMetrics,\n    addRecoveryActivity,\n    refreshData,\n\n    // Calculateurs améliorés\n    calculateOverallScore,\n    getRecoveryTrend,\n\n    // Nouvelles fonctionnalités IA\n    getAIPredictions,\n    getPersonalizedRecommendations,\n    getRecoveryInsights,\n    analyzeRecoveryPatterns,\n    getBiometricTrends,\n    \n    // Fonctions d'optimisation\n    optimizeRecoveryPlan,\n    detectOvertraining,\n    predictOptimalTrainingDays,\n  };\n};\n"],"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","ignoreList":[]}