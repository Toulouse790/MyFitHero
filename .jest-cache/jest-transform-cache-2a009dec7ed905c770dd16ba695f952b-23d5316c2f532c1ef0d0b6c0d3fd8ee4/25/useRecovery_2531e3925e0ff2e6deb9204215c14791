e353e5911c759bbfdad0ca46dc52c358
"use strict";

/* istanbul ignore next */
function cov_2nsb1nie1x() {
  var path = "/workspaces/MyFitHero/src/features/recovery/hooks/useRecovery.ts";
  var hash = "fcf83e70c41c64233e5fc1a6a8850f5d1f275507";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/MyFitHero/src/features/recovery/hooks/useRecovery.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 29
        }
      },
      "2": {
        start: {
          line: 4,
          column: 16
        },
        end: {
          line: 4,
          column: 32
        }
      },
      "3": {
        start: {
          line: 5,
          column: 20
        },
        end: {
          line: 209,
          column: 1
        }
      },
      "4": {
        start: {
          line: 6,
          column: 44
        },
        end: {
          line: 6,
          column: 71
        }
      },
      "5": {
        start: {
          line: 7,
          column: 34
        },
        end: {
          line: 7,
          column: 61
        }
      },
      "6": {
        start: {
          line: 8,
          column: 50
        },
        end: {
          line: 8,
          column: 75
        }
      },
      "7": {
        start: {
          line: 9,
          column: 38
        },
        end: {
          line: 9,
          column: 66
        }
      },
      "8": {
        start: {
          line: 10,
          column: 30
        },
        end: {
          line: 10,
          column: 57
        }
      },
      "9": {
        start: {
          line: 12,
          column: 40
        },
        end: {
          line: 12,
          column: 65
        }
      },
      "10": {
        start: {
          line: 13,
          column: 42
        },
        end: {
          line: 13,
          column: 67
        }
      },
      "11": {
        start: {
          line: 14,
          column: 36
        },
        end: {
          line: 14,
          column: 61
        }
      },
      "12": {
        start: {
          line: 15,
          column: 50
        },
        end: {
          line: 15,
          column: 75
        }
      },
      "13": {
        start: {
          line: 17,
          column: 34
        },
        end: {
          line: 37,
          column: 17
        }
      },
      "14": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 19,
          column: 22
        }
      },
      "15": {
        start: {
          line: 19,
          column: 12
        },
        end: {
          line: 19,
          column: 22
        }
      },
      "16": {
        start: {
          line: 20,
          column: 130
        },
        end: {
          line: 20,
          column: 137
        }
      },
      "17": {
        start: {
          line: 22,
          column: 28
        },
        end: {
          line: 22,
          column: 32
        }
      },
      "18": {
        start: {
          line: 23,
          column: 26
        },
        end: {
          line: 23,
          column: 30
        }
      },
      "19": {
        start: {
          line: 24,
          column: 29
        },
        end: {
          line: 24,
          column: 33
        }
      },
      "20": {
        start: {
          line: 25,
          column: 30
        },
        end: {
          line: 25,
          column: 34
        }
      },
      "21": {
        start: {
          line: 26,
          column: 29
        },
        end: {
          line: 26,
          column: 33
        }
      },
      "22": {
        start: {
          line: 27,
          column: 33
        },
        end: {
          line: 27,
          column: 57
        }
      },
      "23": {
        start: {
          line: 28,
          column: 34
        },
        end: {
          line: 28,
          column: 65
        }
      },
      "24": {
        start: {
          line: 29,
          column: 33
        },
        end: {
          line: 29,
          column: 63
        }
      },
      "25": {
        start: {
          line: 30,
          column: 32
        },
        end: {
          line: 35,
          column: 45
        }
      },
      "26": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 36,
          column: 71
        }
      },
      "27": {
        start: {
          line: 39,
          column: 29
        },
        end: {
          line: 49,
          column: 22
        }
      },
      "28": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 41,
          column: 28
        }
      },
      "29": {
        start: {
          line: 41,
          column: 12
        },
        end: {
          line: 41,
          column: 28
        }
      },
      "30": {
        start: {
          line: 42,
          column: 29
        },
        end: {
          line: 42,
          column: 87
        }
      },
      "31": {
        start: {
          line: 42,
          column: 77
        },
        end: {
          line: 42,
          column: 86
        }
      },
      "32": {
        start: {
          line: 43,
          column: 22
        },
        end: {
          line: 43,
          column: 77
        }
      },
      "33": {
        start: {
          line: 44,
          column: 8
        },
        end: {
          line: 45,
          column: 31
        }
      },
      "34": {
        start: {
          line: 45,
          column: 12
        },
        end: {
          line: 45,
          column: 31
        }
      },
      "35": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 47,
          column: 31
        }
      },
      "36": {
        start: {
          line: 47,
          column: 12
        },
        end: {
          line: 47,
          column: 31
        }
      },
      "37": {
        start: {
          line: 48,
          column: 8
        },
        end: {
          line: 48,
          column: 24
        }
      },
      "38": {
        start: {
          line: 51,
          column: 34
        },
        end: {
          line: 56,
          column: 17
        }
      },
      "39": {
        start: {
          line: 53,
          column: 8
        },
        end: {
          line: 55,
          column: 9
        }
      },
      "40": {
        start: {
          line: 54,
          column: 12
        },
        end: {
          line: 54,
          column: 54
        }
      },
      "41": {
        start: {
          line: 57,
          column: 32
        },
        end: {
          line: 59,
          column: 10
        }
      },
      "42": {
        start: {
          line: 60,
          column: 24
        },
        end: {
          line: 62,
          column: 10
        }
      },
      "43": {
        start: {
          line: 64,
          column: 29
        },
        end: {
          line: 78,
          column: 10
        }
      },
      "44": {
        start: {
          line: 65,
          column: 8
        },
        end: {
          line: 77,
          column: 10
        }
      },
      "45": {
        start: {
          line: 79,
          column: 43
        },
        end: {
          line: 95,
          column: 10
        }
      },
      "46": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 94,
          column: 10
        }
      },
      "47": {
        start: {
          line: 96,
          column: 32
        },
        end: {
          line: 109,
          column: 10
        }
      },
      "48": {
        start: {
          line: 97,
          column: 8
        },
        end: {
          line: 108,
          column: 10
        }
      },
      "49": {
        start: {
          line: 110,
          column: 36
        },
        end: {
          line: 120,
          column: 10
        }
      },
      "50": {
        start: {
          line: 111,
          column: 8
        },
        end: {
          line: 119,
          column: 10
        }
      },
      "51": {
        start: {
          line: 121,
          column: 31
        },
        end: {
          line: 132,
          column: 10
        }
      },
      "52": {
        start: {
          line: 122,
          column: 8
        },
        end: {
          line: 131,
          column: 10
        }
      },
      "53": {
        start: {
          line: 133,
          column: 33
        },
        end: {
          line: 135,
          column: 10
        }
      },
      "54": {
        start: {
          line: 134,
          column: 8
        },
        end: {
          line: 134,
          column: 18
        }
      },
      "55": {
        start: {
          line: 136,
          column: 31
        },
        end: {
          line: 145,
          column: 10
        }
      },
      "56": {
        start: {
          line: 137,
          column: 8
        },
        end: {
          line: 144,
          column: 10
        }
      },
      "57": {
        start: {
          line: 146,
          column: 39
        },
        end: {
          line: 148,
          column: 10
        }
      },
      "58": {
        start: {
          line: 147,
          column: 8
        },
        end: {
          line: 147,
          column: 44
        }
      },
      "59": {
        start: {
          line: 150,
          column: 4
        },
        end: {
          line: 178,
          column: 17
        }
      },
      "60": {
        start: {
          line: 151,
          column: 8
        },
        end: {
          line: 162,
          column: 11
        }
      },
      "61": {
        start: {
          line: 163,
          column: 8
        },
        end: {
          line: 177,
          column: 11
        }
      },
      "62": {
        start: {
          line: 179,
          column: 4
        },
        end: {
          line: 208,
          column: 6
        }
      },
      "63": {
        start: {
          line: 210,
          column: 0
        },
        end: {
          line: 210,
          column: 34
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 5,
            column: 20
          },
          end: {
            line: 5,
            column: 21
          }
        },
        loc: {
          start: {
            line: 5,
            column: 32
          },
          end: {
            line: 209,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 17,
            column: 59
          },
          end: {
            line: 17,
            column: 60
          }
        },
        loc: {
          start: {
            line: 17,
            column: 65
          },
          end: {
            line: 37,
            column: 5
          }
        },
        line: 17
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 39,
            column: 54
          },
          end: {
            line: 39,
            column: 55
          }
        },
        loc: {
          start: {
            line: 39,
            column: 60
          },
          end: {
            line: 49,
            column: 5
          }
        },
        line: 39
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 42,
            column: 63
          },
          end: {
            line: 42,
            column: 64
          }
        },
        loc: {
          start: {
            line: 42,
            column: 77
          },
          end: {
            line: 42,
            column: 86
          }
        },
        line: 42
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 51,
            column: 59
          },
          end: {
            line: 51,
            column: 60
          }
        },
        loc: {
          start: {
            line: 51,
            column: 81
          },
          end: {
            line: 56,
            column: 5
          }
        },
        line: 51
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 57,
            column: 57
          },
          end: {
            line: 57,
            column: 58
          }
        },
        loc: {
          start: {
            line: 57,
            column: 77
          },
          end: {
            line: 59,
            column: 5
          }
        },
        line: 57
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 60,
            column: 49
          },
          end: {
            line: 60,
            column: 50
          }
        },
        loc: {
          start: {
            line: 60,
            column: 61
          },
          end: {
            line: 62,
            column: 5
          }
        },
        line: 60
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 64,
            column: 54
          },
          end: {
            line: 64,
            column: 55
          }
        },
        loc: {
          start: {
            line: 64,
            column: 74
          },
          end: {
            line: 78,
            column: 5
          }
        },
        line: 64
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 79,
            column: 68
          },
          end: {
            line: 79,
            column: 69
          }
        },
        loc: {
          start: {
            line: 79,
            column: 80
          },
          end: {
            line: 95,
            column: 5
          }
        },
        line: 79
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 96,
            column: 57
          },
          end: {
            line: 96,
            column: 58
          }
        },
        loc: {
          start: {
            line: 96,
            column: 69
          },
          end: {
            line: 109,
            column: 5
          }
        },
        line: 96
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 110,
            column: 61
          },
          end: {
            line: 110,
            column: 62
          }
        },
        loc: {
          start: {
            line: 110,
            column: 73
          },
          end: {
            line: 120,
            column: 5
          }
        },
        line: 110
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 121,
            column: 56
          },
          end: {
            line: 121,
            column: 57
          }
        },
        loc: {
          start: {
            line: 121,
            column: 68
          },
          end: {
            line: 132,
            column: 5
          }
        },
        line: 121
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 133,
            column: 58
          },
          end: {
            line: 133,
            column: 59
          }
        },
        loc: {
          start: {
            line: 133,
            column: 75
          },
          end: {
            line: 135,
            column: 5
          }
        },
        line: 133
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 136,
            column: 56
          },
          end: {
            line: 136,
            column: 57
          }
        },
        loc: {
          start: {
            line: 136,
            column: 68
          },
          end: {
            line: 145,
            column: 5
          }
        },
        line: 136
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 146,
            column: 64
          },
          end: {
            line: 146,
            column: 65
          }
        },
        loc: {
          start: {
            line: 146,
            column: 76
          },
          end: {
            line: 148,
            column: 5
          }
        },
        line: 146
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 150,
            column: 27
          },
          end: {
            line: 150,
            column: 28
          }
        },
        loc: {
          start: {
            line: 150,
            column: 33
          },
          end: {
            line: 178,
            column: 5
          }
        },
        line: 150
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 18,
            column: 8
          },
          end: {
            line: 19,
            column: 22
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 18,
            column: 8
          },
          end: {
            line: 19,
            column: 22
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 18
      },
      "1": {
        loc: {
          start: {
            line: 20,
            column: 16
          },
          end: {
            line: 20,
            column: 35
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 20,
            column: 33
          },
          end: {
            line: 20,
            column: 35
          }
        }],
        line: 20
      },
      "2": {
        loc: {
          start: {
            line: 20,
            column: 37
          },
          end: {
            line: 20,
            column: 53
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 20,
            column: 51
          },
          end: {
            line: 20,
            column: 53
          }
        }],
        line: 20
      },
      "3": {
        loc: {
          start: {
            line: 20,
            column: 55
          },
          end: {
            line: 20,
            column: 69
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 20,
            column: 67
          },
          end: {
            line: 20,
            column: 69
          }
        }],
        line: 20
      },
      "4": {
        loc: {
          start: {
            line: 20,
            column: 71
          },
          end: {
            line: 20,
            column: 87
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 20,
            column: 86
          },
          end: {
            line: 20,
            column: 87
          }
        }],
        line: 20
      },
      "5": {
        loc: {
          start: {
            line: 20,
            column: 89
          },
          end: {
            line: 20,
            column: 106
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 20,
            column: 105
          },
          end: {
            line: 20,
            column: 106
          }
        }],
        line: 20
      },
      "6": {
        loc: {
          start: {
            line: 20,
            column: 108
          },
          end: {
            line: 20,
            column: 124
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 20,
            column: 123
          },
          end: {
            line: 20,
            column: 124
          }
        }],
        line: 20
      },
      "7": {
        loc: {
          start: {
            line: 40,
            column: 8
          },
          end: {
            line: 41,
            column: 28
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 40,
            column: 8
          },
          end: {
            line: 41,
            column: 28
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 40
      },
      "8": {
        loc: {
          start: {
            line: 40,
            column: 12
          },
          end: {
            line: 40,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 40,
            column: 12
          },
          end: {
            line: 40,
            column: 33
          }
        }, {
          start: {
            line: 40,
            column: 37
          },
          end: {
            line: 40,
            column: 67
          }
        }],
        line: 40
      },
      "9": {
        loc: {
          start: {
            line: 44,
            column: 8
          },
          end: {
            line: 45,
            column: 31
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 44,
            column: 8
          },
          end: {
            line: 45,
            column: 31
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 44
      },
      "10": {
        loc: {
          start: {
            line: 46,
            column: 8
          },
          end: {
            line: 47,
            column: 31
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 46,
            column: 8
          },
          end: {
            line: 47,
            column: 31
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 46
      },
      "11": {
        loc: {
          start: {
            line: 53,
            column: 8
          },
          end: {
            line: 55,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 53,
            column: 8
          },
          end: {
            line: 55,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 53
      },
      "12": {
        loc: {
          start: {
            line: 64,
            column: 61
          },
          end: {
            line: 64,
            column: 69
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 64,
            column: 68
          },
          end: {
            line: 64,
            column: 69
          }
        }],
        line: 64
      },
      "13": {
        loc: {
          start: {
            line: 152,
            column: 21
          },
          end: {
            line: 152,
            column: 37
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 152,
            column: 21
          },
          end: {
            line: 152,
            column: 27
          }
        }, {
          start: {
            line: 152,
            column: 31
          },
          end: {
            line: 152,
            column: 37
          }
        }],
        line: 152
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0
    },
    b: {
      "0": [0, 0],
      "1": [0],
      "2": [0],
      "3": [0],
      "4": [0],
      "5": [0],
      "6": [0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0],
      "13": [0, 0]
    },
    inputSourceMap: {
      file: "/workspaces/MyFitHero/src/features/recovery/hooks/useRecovery.ts",
      mappings: ";;;AACA,iCAAgE;AA+DzD,MAAM,WAAW,GAAG,CAAC,MAAe,EAAqB,EAAE;IAChE,MAAM,CAAC,YAAY,EAAE,eAAe,CAAC,GAAG,IAAA,gBAAQ,EAAsB,IAAI,CAAC,CAAC;IAC5E,MAAM,CAAC,OAAO,EAAE,UAAU,CAAC,GAAG,IAAA,gBAAQ,EAAyB,IAAI,CAAC,CAAC;IACrE,MAAM,CAAC,eAAe,EAAE,kBAAkB,CAAC,GAAG,IAAA,gBAAQ,EAA2B,EAAE,CAAC,CAAC;IACrF,MAAM,CAAC,SAAS,EAAE,YAAY,CAAC,GAAG,IAAA,gBAAQ,EAAC,KAAK,CAAC,CAAC;IAClD,MAAM,CAAC,KAAK,EAAE,QAAQ,CAAC,GAAG,IAAA,gBAAQ,EAAgB,IAAI,CAAC,CAAC;IAExD,oBAAoB;IACpB,MAAM,CAAC,UAAU,EAAE,aAAa,CAAC,GAAG,IAAA,gBAAQ,EAAc,EAAE,CAAC,CAAC;IAC9D,MAAM,CAAC,WAAW,EAAE,cAAc,CAAC,GAAG,IAAA,gBAAQ,EAAuB,EAAE,CAAC,CAAC;IACzE,MAAM,CAAC,QAAQ,EAAE,WAAW,CAAC,GAAG,IAAA,gBAAQ,EAAoB,EAAE,CAAC,CAAC;IAChE,MAAM,CAAC,eAAe,EAAE,kBAAkB,CAAC,GAAG,IAAA,gBAAQ,EAAmB,EAAE,CAAC,CAAC;IAE7E,2CAA2C;IAC3C,MAAM,qBAAqB,GAAG,IAAA,mBAAW,EAAC,GAAW,EAAE;QACrD,IAAI,CAAC,OAAO;YAAE,OAAO,EAAE,CAAC,CAAC,mBAAmB;QAE5C,MAAM,EACJ,cAAc,GAAG,EAAE,EACnB,WAAW,GAAG,EAAE,EAChB,SAAS,GAAG,EAAE,EACd,YAAY,GAAG,CAAC,EAChB,aAAa,GAAG,CAAC,EACjB,YAAY,GAAG,CAAC,GACjB,GAAG,OAAO,CAAC;QAEZ,4CAA4C;QAC5C,MAAM,WAAW,GAAG,IAAI,CAAC;QACzB,MAAM,SAAS,GAAG,IAAI,CAAC;QACvB,MAAM,YAAY,GAAG,IAAI,CAAC;QAC1B,MAAM,aAAa,GAAG,IAAI,CAAC;QAC3B,MAAM,YAAY,GAAG,IAAI,CAAC;QAE1B,MAAM,gBAAgB,GAAG,CAAC,YAAY,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC;QAClD,MAAM,iBAAiB,GAAG,CAAC,CAAC,CAAC,GAAG,aAAa,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC;QAC1D,MAAM,gBAAgB,GAAG,CAAC,CAAC,CAAC,GAAG,YAAY,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC;QAExD,MAAM,eAAe,GACnB,CAAC,cAAc,GAAG,GAAG,CAAC;YACtB,CAAC,WAAW,GAAG,WAAW,CAAC;YAC3B,CAAC,SAAS,GAAG,SAAS,CAAC;YACvB,CAAC,gBAAgB,GAAG,YAAY,CAAC;YACjC,CAAC,iBAAiB,GAAG,aAAa,CAAC;YACnC,CAAC,gBAAgB,GAAG,YAAY,CAAC,CAAC;QAEpC,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,eAAe,CAAC,CAAC,CAAC,CAAC;IACjE,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC;IAEd,yCAAyC;IACzC,MAAM,gBAAgB,GAAG,IAAA,mBAAW,EAAC,GAAyC,EAAE;QAC9E,IAAI,CAAC,YAAY,EAAE,MAAM,IAAI,YAAY,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC;YAAE,OAAO,QAAQ,CAAC;QAE7E,MAAM,YAAY,GAAG,YAAY,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;QAChF,MAAM,KAAK,GAAG,YAAY,CAAC,YAAY,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC;QAEtE,IAAI,KAAK,GAAG,CAAC;YAAE,OAAO,WAAW,CAAC;QAClC,IAAI,KAAK,GAAG,CAAC,CAAC;YAAE,OAAO,WAAW,CAAC;QACnC,OAAO,QAAQ,CAAC;IAClB,CAAC,EAAE,CAAC,YAAY,CAAC,CAAC,CAAC;IAEnB,wDAAwD;IACxD,MAAM,qBAAqB,GAAG,IAAA,mBAAW,EAAC,KAAK,EAAE,UAAoC,EAAE,EAAE;QACvF,iDAAiD;QACjD,IAAI,OAAO,EAAE,CAAC;YACZ,UAAU,CAAC,EAAE,GAAG,OAAO,EAAE,GAAG,UAAU,EAAE,CAAC,CAAC;QAC5C,CAAC;IACH,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC;IAEd,MAAM,mBAAmB,GAAG,IAAA,mBAAW,EAAC,KAAK,EAAE,QAA+B,EAAE,EAAE;QAChF,iDAAiD;IACnD,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,MAAM,WAAW,GAAG,IAAA,mBAAW,EAAC,KAAK,IAAI,EAAE;QACzC,iDAAiD;IACnD,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,+BAA+B;IAC/B,MAAM,gBAAgB,GAAG,IAAA,mBAAW,EAAC,KAAK,EAAE,IAAI,GAAG,CAAC,EAAiC,EAAE;QACrF,OAAO;YACL;gBACE,IAAI,EAAE,QAAQ;gBACd,eAAe,EAAE,EAAE;gBACnB,UAAU,EAAE,IAAI;gBAChB,OAAO,EAAE;oBACP,EAAE,IAAI,EAAE,SAAS,EAAE,MAAM,EAAE,EAAE,EAAE,KAAK,EAAE,UAAU,EAAE,aAAa,EAAE,GAAG,EAAE;oBACtE,EAAE,IAAI,EAAE,QAAQ,EAAE,MAAM,EAAE,EAAE,EAAE,KAAK,EAAE,SAAS,EAAE,aAAa,EAAE,GAAG,EAAE;oBACpE,EAAE,IAAI,EAAE,UAAU,EAAE,MAAM,EAAE,EAAE,EAAE,KAAK,EAAE,UAAU,EAAE,aAAa,EAAE,GAAG,EAAE;iBACxE;gBACD,cAAc,EAAE,iCAAiC;aAClD;SACF,CAAC;IACJ,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,MAAM,8BAA8B,GAAG,IAAA,mBAAW,EAAC,KAAK,IAAuC,EAAE;QAC/F,OAAO;YACL;gBACE,EAAE,EAAE,GAAG;gBACP,IAAI,EAAE,YAAY;gBAClB,KAAK,EAAE,sBAAsB;gBAC7B,WAAW,EAAE,8CAA8C;gBAC3D,MAAM,EAAE,kCAAkC;gBAC1C,QAAQ,EAAE,MAAM;gBAChB,QAAQ,EAAE,GAAG;gBACb,cAAc,EAAE,EAAE;gBAClB,gBAAgB,EAAE,mBAAmB;gBACrC,UAAU,EAAE,MAAM;gBAClB,MAAM,EAAE,4CAA4C;aACrD;SACF,CAAC;IACJ,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,MAAM,mBAAmB,GAAG,IAAA,mBAAW,EAAC,KAAK,IAA0B,EAAE;QACvE,OAAO;YACL;gBACE,EAAE,EAAE,GAAG;gBACP,IAAI,EAAE,SAAS;gBACf,KAAK,EAAE,iCAAiC;gBACxC,WAAW,EAAE,2CAA2C;gBACxD,UAAU,EAAE,IAAI;gBAChB,MAAM,EAAE,MAAM;gBACd,SAAS,EAAE,YAAY;gBACvB,WAAW,EAAE,EAAE;aAChB;SACF,CAAC;IACJ,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,MAAM,uBAAuB,GAAG,IAAA,mBAAW,EAAC,KAAK,IAAgC,EAAE;QACjF,OAAO;YACL;gBACE,YAAY,EAAE,QAAQ;gBACtB,WAAW,EAAE,4CAA4C;gBACzD,QAAQ,EAAE,IAAI;gBACd,WAAW,EAAE,IAAI,IAAI,EAAE;gBACvB,eAAe,EAAE,CAAC,mDAAmD,CAAC;aACvE;SACF,CAAC;IACJ,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,MAAM,kBAAkB,GAAG,IAAA,mBAAW,EAAC,KAAK,IAA+B,EAAE;QAC3E,OAAO;YACL;gBACE,MAAM,EAAE,KAAK;gBACb,aAAa,EAAE,EAAE;gBACjB,QAAQ,EAAE,GAAG;gBACb,SAAS,EAAE,IAAI;gBACf,UAAU,EAAE,EAAE;gBACd,MAAM,EAAE,WAAW;aACpB;SACF,CAAC;IACJ,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,MAAM,oBAAoB,GAAG,IAAA,mBAAW,EAAC,KAAK,EAAE,KAAe,EAAqC,EAAE;QACpG,OAAO,EAAE,CAAC;IACZ,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,MAAM,kBAAkB,GAAG,IAAA,mBAAW,EAAC,KAAK,IAA0D,EAAE;QACtG,OAAO;YACL,IAAI,EAAE,EAAE;YACR,eAAe,EAAE;gBACf,6BAA6B;gBAC7B,8BAA8B;gBAC9B,oCAAoC;aACrC;SACF,CAAC;IACJ,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,MAAM,0BAA0B,GAAG,IAAA,mBAAW,EAAC,KAAK,IAAuB,EAAE;QAC3E,OAAO,CAAC,OAAO,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;IACtC,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,uCAAuC;IACvC,IAAA,iBAAS,EAAC,GAAG,EAAE;QACb,UAAU,CAAC;YACT,OAAO,EAAE,MAAM,IAAI,MAAM;YACzB,IAAI,EAAE,IAAI,IAAI,EAAE;YAChB,cAAc,EAAE,EAAE;YAClB,eAAe,EAAE,EAAE;YACnB,aAAa,EAAE,CAAC;YAChB,cAAc,EAAE,CAAC;YACjB,YAAY,EAAE,CAAC;YACf,WAAW,EAAE,EAAE;YACf,SAAS,EAAE,EAAE;YACb,YAAY,EAAE,CAAC;SAChB,CAAC,CAAC;QAEH,kBAAkB,CAAC;YACjB;gBACE,EAAE,EAAE,GAAG;gBACP,IAAI,EAAE,YAAY;gBAClB,KAAK,EAAE,iCAAiC;gBACxC,WAAW,EAAE,2CAA2C;gBACxD,MAAM,EAAE,6CAA6C;gBACrD,QAAQ,EAAE,MAAM;gBAChB,QAAQ,EAAE,GAAG;gBACb,cAAc,EAAE,EAAE;gBAClB,gBAAgB,EAAE,mBAAmB;gBACrC,UAAU,EAAE,MAAM;gBAClB,MAAM,EAAE,iCAAiC;aAC1C;SACF,CAAC,CAAC;IACL,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC;IAEb,OAAO;QACL,eAAe;QACf,YAAY;QACZ,OAAO;QACP,eAAe;QACf,SAAS;QACT,KAAK;QAEL,uBAAuB;QACvB,UAAU;QACV,WAAW;QACX,QAAQ;QACR,eAAe;QAEf,kBAAkB;QAClB,qBAAqB;QACrB,mBAAmB;QACnB,WAAW;QAEX,yBAAyB;QACzB,qBAAqB;QACrB,gBAAgB;QAEhB,+BAA+B;QAC/B,gBAAgB;QAChB,8BAA8B;QAC9B,mBAAmB;QACnB,uBAAuB;QACvB,kBAAkB;QAElB,2BAA2B;QAC3B,oBAAoB;QACpB,kBAAkB;QAClB,0BAA0B;KAC3B,CAAC;AACJ,CAAC,CAAC;AA7OW,QAAA,WAAW,eA6OtB",
      names: [],
      sources: ["/workspaces/MyFitHero/src/features/recovery/hooks/useRecovery.ts"],
      sourcesContent: ["import { Activity, Heart, Plus, Brain, Target } from 'lucide-react';\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { RecoveryService } from '@/features/recovery/services/recovery.service';\nimport type {\n  RecoveryData,\n  RecoveryMetrics,\n  RecoveryRecommendation,\n  RecoveryActivity,\n  AIInsight,\n  RecoveryPrediction,\n  RecoveryPattern,\n  BiometricTrend,\n} from '@/features/recovery/types/index';\n\ntype RecoveryActivityInput = {\n  type:\n    | 'massage'\n    | 'stretching'\n    | 'meditation'\n    | 'cold_therapy'\n    | 'heat_therapy'\n    | 'sleep'\n    | 'rest';\n  duration: number;\n  intensity?: number;\n  notes?: string;\n};\n\nexport interface UseRecoveryReturn {\n  // \xC9tat de base\n  recoveryData: RecoveryData | undefined;\n  metrics: RecoveryMetrics | undefined;\n  recommendations: RecoveryRecommendation[];\n  isLoading: boolean;\n  error: string | undefined;\n\n  // Nouvelles donn\xE9es IA\n  aiInsights: AIInsight[];\n  predictions: RecoveryPrediction[];\n  patterns: RecoveryPattern[];\n  biometricTrends: BiometricTrend[];\n\n  // Actions de base\n  updateRecoveryMetrics: (metrics: Partial<RecoveryMetrics>) => Promise<void>;\n  addRecoveryActivity: (activity: RecoveryActivityInput) => Promise<void>;\n  refreshData: () => Promise<void>;\n\n  // Calculateurs am\xE9lior\xE9s\n  calculateOverallScore: () => number;\n  getRecoveryTrend: () => 'improving' | 'stable' | 'declining';\n\n  // Nouvelles fonctionnalit\xE9s IA\n  getAIPredictions: (days?: number) => Promise<RecoveryPrediction[]>;\n  getPersonalizedRecommendations: () => Promise<RecoveryRecommendation[]>;\n  getRecoveryInsights: () => Promise<AIInsight[]>;\n  analyzeRecoveryPatterns: () => Promise<RecoveryPattern[]>;\n  getBiometricTrends: () => Promise<BiometricTrend[]>;\n  \n  // Fonctions d'optimisation\n  optimizeRecoveryPlan: (goals: string[]) => Promise<RecoveryRecommendation[]>;\n  detectOvertraining: () => Promise<{ risk: number; recommendations: string[] }>;\n  predictOptimalTrainingDays: () => Promise<string[]>;\n}\n\nexport const useRecovery = (userId?: string): UseRecoveryReturn => {\n  const [recoveryData, setRecoveryData] = useState<RecoveryData | null>(null);\n  const [metrics, setMetrics] = useState<RecoveryMetrics | null>(null);\n  const [recommendations, setRecommendations] = useState<RecoveryRecommendation[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  // Nouveaux \xE9tats IA\n  const [aiInsights, setAiInsights] = useState<AIInsight[]>([]);\n  const [predictions, setPredictions] = useState<RecoveryPrediction[]>([]);\n  const [patterns, setPatterns] = useState<RecoveryPattern[]>([]);\n  const [biometricTrends, setBiometricTrends] = useState<BiometricTrend[]>([]);\n\n  // Calculer le score global de r\xE9cup\xE9ration\n  const calculateOverallScore = useCallback((): number => {\n    if (!metrics) return 75; // Score par d\xE9faut\n\n    const {\n      recovery_score = 70,\n      sleep_score = 75,\n      hrv_score = 45,\n      energy_level = 4,\n      fatigue_level = 2,\n      stress_level = 3,\n    } = metrics;\n\n    // Algorithme sophistiqu\xE9 de calcul du score\n    const sleepWeight = 0.25;\n    const hrvWeight = 0.20;\n    const energyWeight = 0.20;\n    const fatigueWeight = 0.15;\n    const stressWeight = 0.20;\n\n    const normalizedEnergy = (energy_level / 5) * 100;\n    const normalizedFatigue = ((5 - fatigue_level) / 5) * 100;\n    const normalizedStress = ((5 - stress_level) / 5) * 100;\n\n    const calculatedScore = \n      (recovery_score * 0.3) +\n      (sleep_score * sleepWeight) +\n      (hrv_score * hrvWeight) +\n      (normalizedEnergy * energyWeight) +\n      (normalizedFatigue * fatigueWeight) +\n      (normalizedStress * stressWeight);\n\n    return Math.round(Math.max(0, Math.min(100, calculatedScore)));\n  }, [metrics]);\n\n  // D\xE9terminer la tendance de r\xE9cup\xE9ration\n  const getRecoveryTrend = useCallback((): 'improving' | 'stable' | 'declining' => {\n    if (!recoveryData?.trends || recoveryData.trends.length < 2) return 'stable';\n\n    const recentScores = recoveryData.trends.slice(-7).map((t, index) => t.overall);\n    const trend = recentScores[recentScores.length - 1] - recentScores[0];\n    \n    if (trend > 5) return 'improving';\n    if (trend < -5) return 'declining';\n    return 'stable';\n  }, [recoveryData]);\n\n  // Actions de base (simplifi\xE9es pour \xE9viter les erreurs)\n  const updateRecoveryMetrics = useCallback(async (newMetrics: Partial<RecoveryMetrics>) => {\n    // Implementation basique pour \xE9viter les erreurs\n    if (metrics) {\n      setMetrics({ ...metrics, ...newMetrics });\n    }\n  }, [metrics]);\n\n  const addRecoveryActivity = useCallback(async (activity: RecoveryActivityInput) => {\n    // Implementation basique pour \xE9viter les erreurs\n  }, []);\n\n  const refreshData = useCallback(async () => {\n    // Implementation basique pour \xE9viter les erreurs\n  }, []);\n\n  // Nouvelles fonctionnalit\xE9s IA\n  const getAIPredictions = useCallback(async (days = 7): Promise<RecoveryPrediction[]> => {\n    return [\n      {\n        date: 'Demain',\n        predicted_score: 88,\n        confidence: 0.92,\n        factors: [\n          { name: 'Sommeil', impact: 35, trend: 'positive', current_value: 8.2 },\n          { name: 'Stress', impact: 28, trend: 'neutral', current_value: 3.5 },\n          { name: 'Activit\xE9', impact: 22, trend: 'positive', current_value: 7.8 }\n        ],\n        recommendation: 'Entra\xEEnement intense recommand\xE9'\n      }\n    ];\n  }, []);\n\n  const getPersonalizedRecommendations = useCallback(async (): Promise<RecoveryRecommendation[]> => {\n    return [\n      {\n        id: '1',\n        type: 'meditation',\n        title: 'Optimiser le sommeil',\n        description: 'Votre qualit\xE9 de sommeil peut \xEAtre am\xE9lior\xE9e',\n        action: 'Couchez-vous 30 minutes plus t\xF4t',\n        priority: 'high',\n        duration: 480,\n        timeToComplete: 30,\n        estimatedBenefit: '+15% r\xE9cup\xE9ration',\n        difficulty: 'easy',\n        reason: 'Analys\xE9 \xE0 partir de vos donn\xE9es de sommeil'\n      }\n    ];\n  }, []);\n\n  const getRecoveryInsights = useCallback(async (): Promise<AIInsight[]> => {\n    return [\n      {\n        id: '1',\n        type: 'pattern',\n        title: 'Pattern de r\xE9cup\xE9ration d\xE9tect\xE9',\n        description: 'Vous r\xE9cup\xE9rez mieux les mardis et jeudis',\n        confidence: 0.87,\n        impact: 'high',\n        timeframe: '4 semaines',\n        data_points: 28\n      }\n    ];\n  }, []);\n\n  const analyzeRecoveryPatterns = useCallback(async (): Promise<RecoveryPattern[]> => {\n    return [\n      {\n        pattern_type: 'weekly',\n        description: 'R\xE9cup\xE9ration optimale en milieu de semaine',\n        strength: 0.78,\n        detected_at: new Date(),\n        recommendations: ['Programmer les entra\xEEnements intenses mardi/jeudi']\n      }\n    ];\n  }, []);\n\n  const getBiometricTrends = useCallback(async (): Promise<BiometricTrend[]> => {\n    return [\n      {\n        metric: 'VFC',\n        current_value: 45,\n        trend_7d: 8.5,\n        trend_30d: 12.3,\n        percentile: 78,\n        status: 'improving'\n      }\n    ];\n  }, []);\n\n  const optimizeRecoveryPlan = useCallback(async (goals: string[]): Promise<RecoveryRecommendation[]> => {\n    return [];\n  }, []);\n\n  const detectOvertraining = useCallback(async (): Promise<{ risk: number; recommendations: string[] }> => {\n    return {\n      risk: 25,\n      recommendations: [\n        'R\xE9duire l\\'intensit\xE9 de 15%',\n        'Ajouter une journ\xE9e de repos',\n        'Privil\xE9gier la r\xE9cup\xE9ration active'\n      ]\n    };\n  }, []);\n\n  const predictOptimalTrainingDays = useCallback(async (): Promise<string[]> => {\n    return ['Mardi', 'Jeudi', 'Samedi'];\n  }, []);\n\n  // Initialisation avec des donn\xE9es mock\n  useEffect(() => {\n    setMetrics({\n      user_id: userId || 'mock',\n      date: new Date(),\n      recovery_score: 75,\n      readiness_score: 80,\n      fatigue_level: 2,\n      soreness_level: 3,\n      energy_level: 4,\n      sleep_score: 78,\n      hrv_score: 45,\n      stress_level: 3\n    });\n\n    setRecommendations([\n      {\n        id: '1',\n        type: 'meditation',\n        title: 'Am\xE9liorer la qualit\xE9 du sommeil',\n        description: 'Votre score de sommeil peut \xEAtre optimis\xE9',\n        action: 'Essayez de vous coucher 30 minutes plus t\xF4t',\n        priority: 'high',\n        duration: 480,\n        timeToComplete: 30,\n        estimatedBenefit: '+10% r\xE9cup\xE9ration',\n        difficulty: 'easy',\n        reason: 'Analyse des patterns de sommeil'\n      }\n    ]);\n  }, [userId]);\n\n  return {\n    // \xC9tat de base\n    recoveryData,\n    metrics,\n    recommendations,\n    isLoading,\n    error,\n\n    // Nouvelles donn\xE9es IA\n    aiInsights,\n    predictions,\n    patterns,\n    biometricTrends,\n\n    // Actions de base\n    updateRecoveryMetrics,\n    addRecoveryActivity,\n    refreshData,\n\n    // Calculateurs am\xE9lior\xE9s\n    calculateOverallScore,\n    getRecoveryTrend,\n\n    // Nouvelles fonctionnalit\xE9s IA\n    getAIPredictions,\n    getPersonalizedRecommendations,\n    getRecoveryInsights,\n    analyzeRecoveryPatterns,\n    getBiometricTrends,\n    \n    // Fonctions d'optimisation\n    optimizeRecoveryPlan,\n    detectOvertraining,\n    predictOptimalTrainingDays,\n  };\n};\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "fcf83e70c41c64233e5fc1a6a8850f5d1f275507"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2nsb1nie1x = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2nsb1nie1x();
cov_2nsb1nie1x().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2nsb1nie1x().s[1]++;
exports.useRecovery = void 0;
const react_1 =
/* istanbul ignore next */
(cov_2nsb1nie1x().s[2]++, require("react"));
/* istanbul ignore next */
cov_2nsb1nie1x().s[3]++;
const useRecovery = userId => {
  /* istanbul ignore next */
  cov_2nsb1nie1x().f[0]++;
  const [recoveryData, setRecoveryData] =
  /* istanbul ignore next */
  (cov_2nsb1nie1x().s[4]++, (0, react_1.useState)(null));
  const [metrics, setMetrics] =
  /* istanbul ignore next */
  (cov_2nsb1nie1x().s[5]++, (0, react_1.useState)(null));
  const [recommendations, setRecommendations] =
  /* istanbul ignore next */
  (cov_2nsb1nie1x().s[6]++, (0, react_1.useState)([]));
  const [isLoading, setIsLoading] =
  /* istanbul ignore next */
  (cov_2nsb1nie1x().s[7]++, (0, react_1.useState)(false));
  const [error, setError] =
  /* istanbul ignore next */
  (cov_2nsb1nie1x().s[8]++, (0, react_1.useState)(null));
  // Nouveaux états IA
  const [aiInsights, setAiInsights] =
  /* istanbul ignore next */
  (cov_2nsb1nie1x().s[9]++, (0, react_1.useState)([]));
  const [predictions, setPredictions] =
  /* istanbul ignore next */
  (cov_2nsb1nie1x().s[10]++, (0, react_1.useState)([]));
  const [patterns, setPatterns] =
  /* istanbul ignore next */
  (cov_2nsb1nie1x().s[11]++, (0, react_1.useState)([]));
  const [biometricTrends, setBiometricTrends] =
  /* istanbul ignore next */
  (cov_2nsb1nie1x().s[12]++, (0, react_1.useState)([]));
  // Calculer le score global de récupération
  const calculateOverallScore =
  /* istanbul ignore next */
  (cov_2nsb1nie1x().s[13]++, (0, react_1.useCallback)(() => {
    /* istanbul ignore next */
    cov_2nsb1nie1x().f[1]++;
    cov_2nsb1nie1x().s[14]++;
    if (!metrics) {
      /* istanbul ignore next */
      cov_2nsb1nie1x().b[0][0]++;
      cov_2nsb1nie1x().s[15]++;
      return 75;
    } else
    /* istanbul ignore next */
    {
      cov_2nsb1nie1x().b[0][1]++;
    } // Score par défaut
    const {
      recovery_score =
      /* istanbul ignore next */
      (cov_2nsb1nie1x().b[1][0]++, 70),
      sleep_score =
      /* istanbul ignore next */
      (cov_2nsb1nie1x().b[2][0]++, 75),
      hrv_score =
      /* istanbul ignore next */
      (cov_2nsb1nie1x().b[3][0]++, 45),
      energy_level =
      /* istanbul ignore next */
      (cov_2nsb1nie1x().b[4][0]++, 4),
      fatigue_level =
      /* istanbul ignore next */
      (cov_2nsb1nie1x().b[5][0]++, 2),
      stress_level =
      /* istanbul ignore next */
      (cov_2nsb1nie1x().b[6][0]++, 3)
    } =
    /* istanbul ignore next */
    (cov_2nsb1nie1x().s[16]++, metrics);
    // Algorithme sophistiqué de calcul du score
    const sleepWeight =
    /* istanbul ignore next */
    (cov_2nsb1nie1x().s[17]++, 0.25);
    const hrvWeight =
    /* istanbul ignore next */
    (cov_2nsb1nie1x().s[18]++, 0.20);
    const energyWeight =
    /* istanbul ignore next */
    (cov_2nsb1nie1x().s[19]++, 0.20);
    const fatigueWeight =
    /* istanbul ignore next */
    (cov_2nsb1nie1x().s[20]++, 0.15);
    const stressWeight =
    /* istanbul ignore next */
    (cov_2nsb1nie1x().s[21]++, 0.20);
    const normalizedEnergy =
    /* istanbul ignore next */
    (cov_2nsb1nie1x().s[22]++, energy_level / 5 * 100);
    const normalizedFatigue =
    /* istanbul ignore next */
    (cov_2nsb1nie1x().s[23]++, (5 - fatigue_level) / 5 * 100);
    const normalizedStress =
    /* istanbul ignore next */
    (cov_2nsb1nie1x().s[24]++, (5 - stress_level) / 5 * 100);
    const calculatedScore =
    /* istanbul ignore next */
    (cov_2nsb1nie1x().s[25]++, recovery_score * 0.3 + sleep_score * sleepWeight + hrv_score * hrvWeight + normalizedEnergy * energyWeight + normalizedFatigue * fatigueWeight + normalizedStress * stressWeight);
    /* istanbul ignore next */
    cov_2nsb1nie1x().s[26]++;
    return Math.round(Math.max(0, Math.min(100, calculatedScore)));
  }, [metrics]));
  // Déterminer la tendance de récupération
  const getRecoveryTrend =
  /* istanbul ignore next */
  (cov_2nsb1nie1x().s[27]++, (0, react_1.useCallback)(() => {
    /* istanbul ignore next */
    cov_2nsb1nie1x().f[2]++;
    cov_2nsb1nie1x().s[28]++;
    if (
    /* istanbul ignore next */
    (cov_2nsb1nie1x().b[8][0]++, !recoveryData?.trends) ||
    /* istanbul ignore next */
    (cov_2nsb1nie1x().b[8][1]++, recoveryData.trends.length < 2)) {
      /* istanbul ignore next */
      cov_2nsb1nie1x().b[7][0]++;
      cov_2nsb1nie1x().s[29]++;
      return 'stable';
    } else
    /* istanbul ignore next */
    {
      cov_2nsb1nie1x().b[7][1]++;
    }
    const recentScores =
    /* istanbul ignore next */
    (cov_2nsb1nie1x().s[30]++, recoveryData.trends.slice(-7).map((t, index) => {
      /* istanbul ignore next */
      cov_2nsb1nie1x().f[3]++;
      cov_2nsb1nie1x().s[31]++;
      return t.overall;
    }));
    const trend =
    /* istanbul ignore next */
    (cov_2nsb1nie1x().s[32]++, recentScores[recentScores.length - 1] - recentScores[0]);
    /* istanbul ignore next */
    cov_2nsb1nie1x().s[33]++;
    if (trend > 5) {
      /* istanbul ignore next */
      cov_2nsb1nie1x().b[9][0]++;
      cov_2nsb1nie1x().s[34]++;
      return 'improving';
    } else
    /* istanbul ignore next */
    {
      cov_2nsb1nie1x().b[9][1]++;
    }
    cov_2nsb1nie1x().s[35]++;
    if (trend < -5) {
      /* istanbul ignore next */
      cov_2nsb1nie1x().b[10][0]++;
      cov_2nsb1nie1x().s[36]++;
      return 'declining';
    } else
    /* istanbul ignore next */
    {
      cov_2nsb1nie1x().b[10][1]++;
    }
    cov_2nsb1nie1x().s[37]++;
    return 'stable';
  }, [recoveryData]));
  // Actions de base (simplifiées pour éviter les erreurs)
  const updateRecoveryMetrics =
  /* istanbul ignore next */
  (cov_2nsb1nie1x().s[38]++, (0, react_1.useCallback)(async newMetrics => {
    /* istanbul ignore next */
    cov_2nsb1nie1x().f[4]++;
    cov_2nsb1nie1x().s[39]++;
    // Implementation basique pour éviter les erreurs
    if (metrics) {
      /* istanbul ignore next */
      cov_2nsb1nie1x().b[11][0]++;
      cov_2nsb1nie1x().s[40]++;
      setMetrics({
        ...metrics,
        ...newMetrics
      });
    } else
    /* istanbul ignore next */
    {
      cov_2nsb1nie1x().b[11][1]++;
    }
  }, [metrics]));
  const addRecoveryActivity =
  /* istanbul ignore next */
  (cov_2nsb1nie1x().s[41]++, (0, react_1.useCallback)(async activity => {
    /* istanbul ignore next */
    cov_2nsb1nie1x().f[5]++;
  } // Implementation basique pour éviter les erreurs
  , []));
  const refreshData =
  /* istanbul ignore next */
  (cov_2nsb1nie1x().s[42]++, (0, react_1.useCallback)(async () => {
    /* istanbul ignore next */
    cov_2nsb1nie1x().f[6]++;
  } // Implementation basique pour éviter les erreurs
  , []));
  // Nouvelles fonctionnalités IA
  const getAIPredictions =
  /* istanbul ignore next */
  (cov_2nsb1nie1x().s[43]++, (0, react_1.useCallback)(async (days =
  /* istanbul ignore next */
  (cov_2nsb1nie1x().b[12][0]++, 7)) => {
    /* istanbul ignore next */
    cov_2nsb1nie1x().f[7]++;
    cov_2nsb1nie1x().s[44]++;
    return [{
      date: 'Demain',
      predicted_score: 88,
      confidence: 0.92,
      factors: [{
        name: 'Sommeil',
        impact: 35,
        trend: 'positive',
        current_value: 8.2
      }, {
        name: 'Stress',
        impact: 28,
        trend: 'neutral',
        current_value: 3.5
      }, {
        name: 'Activité',
        impact: 22,
        trend: 'positive',
        current_value: 7.8
      }],
      recommendation: 'Entraînement intense recommandé'
    }];
  }, []));
  const getPersonalizedRecommendations =
  /* istanbul ignore next */
  (cov_2nsb1nie1x().s[45]++, (0, react_1.useCallback)(async () => {
    /* istanbul ignore next */
    cov_2nsb1nie1x().f[8]++;
    cov_2nsb1nie1x().s[46]++;
    return [{
      id: '1',
      type: 'meditation',
      title: 'Optimiser le sommeil',
      description: 'Votre qualité de sommeil peut être améliorée',
      action: 'Couchez-vous 30 minutes plus tôt',
      priority: 'high',
      duration: 480,
      timeToComplete: 30,
      estimatedBenefit: '+15% récupération',
      difficulty: 'easy',
      reason: 'Analysé à partir de vos données de sommeil'
    }];
  }, []));
  const getRecoveryInsights =
  /* istanbul ignore next */
  (cov_2nsb1nie1x().s[47]++, (0, react_1.useCallback)(async () => {
    /* istanbul ignore next */
    cov_2nsb1nie1x().f[9]++;
    cov_2nsb1nie1x().s[48]++;
    return [{
      id: '1',
      type: 'pattern',
      title: 'Pattern de récupération détecté',
      description: 'Vous récupérez mieux les mardis et jeudis',
      confidence: 0.87,
      impact: 'high',
      timeframe: '4 semaines',
      data_points: 28
    }];
  }, []));
  const analyzeRecoveryPatterns =
  /* istanbul ignore next */
  (cov_2nsb1nie1x().s[49]++, (0, react_1.useCallback)(async () => {
    /* istanbul ignore next */
    cov_2nsb1nie1x().f[10]++;
    cov_2nsb1nie1x().s[50]++;
    return [{
      pattern_type: 'weekly',
      description: 'Récupération optimale en milieu de semaine',
      strength: 0.78,
      detected_at: new Date(),
      recommendations: ['Programmer les entraînements intenses mardi/jeudi']
    }];
  }, []));
  const getBiometricTrends =
  /* istanbul ignore next */
  (cov_2nsb1nie1x().s[51]++, (0, react_1.useCallback)(async () => {
    /* istanbul ignore next */
    cov_2nsb1nie1x().f[11]++;
    cov_2nsb1nie1x().s[52]++;
    return [{
      metric: 'VFC',
      current_value: 45,
      trend_7d: 8.5,
      trend_30d: 12.3,
      percentile: 78,
      status: 'improving'
    }];
  }, []));
  const optimizeRecoveryPlan =
  /* istanbul ignore next */
  (cov_2nsb1nie1x().s[53]++, (0, react_1.useCallback)(async goals => {
    /* istanbul ignore next */
    cov_2nsb1nie1x().f[12]++;
    cov_2nsb1nie1x().s[54]++;
    return [];
  }, []));
  const detectOvertraining =
  /* istanbul ignore next */
  (cov_2nsb1nie1x().s[55]++, (0, react_1.useCallback)(async () => {
    /* istanbul ignore next */
    cov_2nsb1nie1x().f[13]++;
    cov_2nsb1nie1x().s[56]++;
    return {
      risk: 25,
      recommendations: ['Réduire l\'intensité de 15%', 'Ajouter une journée de repos', 'Privilégier la récupération active']
    };
  }, []));
  const predictOptimalTrainingDays =
  /* istanbul ignore next */
  (cov_2nsb1nie1x().s[57]++, (0, react_1.useCallback)(async () => {
    /* istanbul ignore next */
    cov_2nsb1nie1x().f[14]++;
    cov_2nsb1nie1x().s[58]++;
    return ['Mardi', 'Jeudi', 'Samedi'];
  }, []));
  // Initialisation avec des données mock
  /* istanbul ignore next */
  cov_2nsb1nie1x().s[59]++;
  (0, react_1.useEffect)(() => {
    /* istanbul ignore next */
    cov_2nsb1nie1x().f[15]++;
    cov_2nsb1nie1x().s[60]++;
    setMetrics({
      user_id:
      /* istanbul ignore next */
      (cov_2nsb1nie1x().b[13][0]++, userId) ||
      /* istanbul ignore next */
      (cov_2nsb1nie1x().b[13][1]++, 'mock'),
      date: new Date(),
      recovery_score: 75,
      readiness_score: 80,
      fatigue_level: 2,
      soreness_level: 3,
      energy_level: 4,
      sleep_score: 78,
      hrv_score: 45,
      stress_level: 3
    });
    /* istanbul ignore next */
    cov_2nsb1nie1x().s[61]++;
    setRecommendations([{
      id: '1',
      type: 'meditation',
      title: 'Améliorer la qualité du sommeil',
      description: 'Votre score de sommeil peut être optimisé',
      action: 'Essayez de vous coucher 30 minutes plus tôt',
      priority: 'high',
      duration: 480,
      timeToComplete: 30,
      estimatedBenefit: '+10% récupération',
      difficulty: 'easy',
      reason: 'Analyse des patterns de sommeil'
    }]);
  }, [userId]);
  /* istanbul ignore next */
  cov_2nsb1nie1x().s[62]++;
  return {
    // État de base
    recoveryData,
    metrics,
    recommendations,
    isLoading,
    error,
    // Nouvelles données IA
    aiInsights,
    predictions,
    patterns,
    biometricTrends,
    // Actions de base
    updateRecoveryMetrics,
    addRecoveryActivity,
    refreshData,
    // Calculateurs améliorés
    calculateOverallScore,
    getRecoveryTrend,
    // Nouvelles fonctionnalités IA
    getAIPredictions,
    getPersonalizedRecommendations,
    getRecoveryInsights,
    analyzeRecoveryPatterns,
    getBiometricTrends,
    // Fonctions d'optimisation
    optimizeRecoveryPlan,
    detectOvertraining,
    predictOptimalTrainingDays
  };
};
/* istanbul ignore next */
cov_2nsb1nie1x().s[63]++;
exports.useRecovery = useRecovery;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,