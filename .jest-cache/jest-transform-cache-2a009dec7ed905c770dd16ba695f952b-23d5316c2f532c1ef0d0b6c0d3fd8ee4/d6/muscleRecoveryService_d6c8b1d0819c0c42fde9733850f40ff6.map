{"version":3,"names":["cov_ag8fauxjb","actualCoverage","s","supabase_1","require","MuscleRecoveryService","getUserRecoveryProfile","userId","f","data","error","supabase","from","select","eq","single","b","code","undefined","console","createOrUpdateRecoveryProfile","userProfile","sleepData","nutritionData","profile","calculateRecoveryProfile","upsert","onConflict","age","ageFactor","Math","max","fitnessLevelFactors","beginner","intermediate","advanced","expert","fitnessLevelFactor","fitness_experience","baseRecoveryRate","lifestyle","sleepQualityImpact","length","avgSleepQuality","reduce","sum","session","quality_rating","avgSleepDuration","duration_minutes","min","nutritionQualityImpact","avgProtein","day","total_protein","targetProtein","weight_kg","injuryHistory","injuries","forEach","injury","injuryLower","toLowerCase","includes","push","user_id","recovery_rate_multiplier","sleep_quality_impact","nutrition_quality_impact","stress_level_impact","hydration_impact","age_factor","fitness_level_factor","injury_history","supplements","created_at","Date","toISOString","updated_at","calculateMuscleRecovery","workouts","recoveryProfile","Error","muscleRecoveryMap","Map","now","Object","keys","BASE_RECOVERY_HOURS","muscle","muscleGroup","set","muscle_group","last_workout_date","workout_intensity","workout_volume","workout_duration_minutes","recovery_status","recovery_percentage","estimated_full_recovery","fatigue_level","soreness_level","readiness_score","last_updated","recentWorkouts","filter","workout","workoutDate","completed_at","daysDiff","getTime","workoutImpacts","analyzeWorkoutImpact","impact","currentData","get","hoursElapsed","baseRecoveryHours","intensityMultiplier","INTENSITY_MULTIPLIERS","intensity","volumeMultiplier","volume","totalRecoveryHours","recoveryPercentage","estimatedFullRecovery","calculateRecoveryStatus","calculateFatigueLevel","calculateSorenessLevel","calculateReadinessScore","Array","values","impacts","exercises","workoutType","workout_type","duration","affectedMuscles","MUSCLE_GROUP_MAPPINGS","exercise","muscleGroups","getMuscleGroupsFromExercise","determineIntensity","sets","exercise_types","name","compound_movements","isCompoundMovement","eccentric_focus","hasEccentricFocus","determineWorkoutIntensity","estimateVolumeFromWorkout","map","ex","index","exerciseName","muscles","difficulty","rpe","total","compoundKeywords","some","keyword","eccentricKeywords","baseIntensityFatigue","light","moderate","high","extreme","baseFatigue","recoveryFactor","round","peakSorenessHours","peakHours","maxSoreness","remainingHours","hoursAfterPeak","sorenessReduction","baseScore","smallMuscles","generateRecoveryRecommendations","muscleRecoveryData","recommendations","recommendation_type","priority","message","estimated_benefit","specific_actions","sort","a","priorityOrder","critical","medium","low","priorityDiff","calculateGlobalRecoveryMetrics","overall_recovery_score","most_recovered_muscle","least_recovered_muscle","ready_for_training","needs_rest","optimal_workout_type","recovery_trend","last_calculated","totalScore","overallScore","sortedByRecovery","mostRecovered","leastRecovered","readyForTraining","needsRest","optimalWorkoutType","saveMuscleRecoveryData","recoveryData","delete","dataToInsert","insert","getMuscleRecoveryData","order","ascending","exports","defineProperty","chest","back","shoulders","biceps","triceps","forearms","quadriceps","hamstrings","glutes","calves","core","traps","lats","delts","arms","legs","cardio","flexibility"],"sources":["/workspaces/MyFitHero/src/lib/services/muscleRecoveryService.ts"],"sourcesContent":["import { supabase } from '@/lib/supabase';\nimport type {\n  MuscleRecoveryData,\n  UserRecoveryProfile,\n  WorkoutImpact,\n  RecoveryRecommendation,\n  GlobalRecoveryMetrics,\n  MuscleGroup,\n  RecoveryStatus,\n  WorkoutIntensity,\n} from '@/features/workout/types/muscleRecovery';\nimport type {\n  UserProfile,\n  Workout,\n  SleepSession,\n  DailyStats,\n} from '@/lib/types/database';\n\nexport class MuscleRecoveryService {\n  // === CONSTANTES DE RÉCUPÉRATION ===\n  private static readonly BASE_RECOVERY_HOURS: Record<MuscleGroup, number> = {\n    chest: 48,\n    back: 48,\n    shoulders: 36,\n    biceps: 36,\n    triceps: 36,\n    forearms: 24,\n    quadriceps: 48,\n    hamstrings: 48,\n    glutes: 48,\n    calves: 24,\n    core: 24,\n    traps: 36,\n    lats: 48,\n    delts: 36,\n  };\n\n  private static readonly INTENSITY_MULTIPLIERS: Record<WorkoutIntensity, number> = {\n    light: 0.7,\n    moderate: 1.0,\n    high: 1.4,\n    extreme: 1.8,\n  };\n\n  private static readonly MUSCLE_GROUP_MAPPINGS: Record<string, MuscleGroup[]> = {\n    chest: ['chest', 'triceps', 'delts'],\n    back: ['back', 'lats', 'biceps', 'traps'],\n    shoulders: ['delts', 'traps'],\n    arms: ['biceps', 'triceps', 'forearms'],\n    legs: ['quadriceps', 'hamstrings', 'glutes', 'calves'],\n    core: ['core'],\n    cardio: [], // pas d'impact musculaire spécifique\n    flexibility: [],\n  };\n\n  // === PROFIL DE RÉCUPÉRATION UTILISATEUR ===\n  static async getUserRecoveryProfile(userId: string): Promise<UserRecoveryProfile | null> {\n    try {\n      const { data, error }: any = await supabase\n        .from('user_recovery_profiles')\n        .select('*')\n        .eq('user_id', userId)\n        .single();\n\n      if (error && error.code !== 'PGRST116') throw error;\n      return data || undefined;\n    } catch (error: any) {\n      // Erreur silencieuse\n      console.error('Error fetching user recovery profile:', error);\n      return null;\n    }\n  }\n\n  static async createOrUpdateRecoveryProfile(\n    userId: string,\n    userProfile: UserProfile,\n    sleepData?: SleepSession[],\n    nutritionData?: DailyStats[]\n  ): Promise<UserRecoveryProfile | null> {\n    try {\n      const profile = await this.calculateRecoveryProfile(\n        userId,\n        userProfile,\n        sleepData,\n        nutritionData\n      );\n\n      const { data, error }: any = await supabase\n        .from('user_recovery_profiles')\n        .upsert(profile, { onConflict: 'user_id' })\n        .select()\n        .single();\n\n      if (error) throw error;\n      return data;\n    } catch (error: any) {\n      // Erreur silencieuse\n      console.error('Error creating/updating recovery profile:', error);\n      return null;\n    }\n  }\n\n  private static async calculateRecoveryProfile(\n    userId: string,\n    userProfile: UserProfile,\n    sleepData?: SleepSession[],\n    nutritionData?: DailyStats[]\n  ): Promise<UserRecoveryProfile> {\n    // Facteur d'âge (récupération ralentit avec l'âge)\n    const age = userProfile.age || 25;\n    const ageFactor = Math.max(0.6, 1.2 - (age - 20) * 0.01);\n\n    // Facteur de niveau de fitness\n    const fitnessLevelFactors = {\n      beginner: 0.8,\n      intermediate: 1.0,\n      advanced: 1.2,\n      expert: 1.3,\n    };\n    const fitnessLevelFactor =\n      fitnessLevelFactors[userProfile.fitness_experience || 'intermediate'];\n\n    // Facteur de récupération de base (génétique + lifestyle)\n    let baseRecoveryRate = 1.0;\n    if (userProfile.lifestyle === 'physical_job') baseRecoveryRate *= 0.9;\n    if (userProfile.lifestyle === 'office_worker') baseRecoveryRate *= 0.95;\n    if (userProfile.lifestyle === 'student') baseRecoveryRate *= 1.05;\n\n    // Impact du sommeil (moyenne des 7 derniers jours)\n    let sleepQualityImpact = 1.0;\n    if (sleepData && sleepData.length > 0) {\n      const avgSleepQuality =\n        sleepData.reduce((sum, session) => sum + (session.quality_rating || 7), 0) /\n        sleepData.length;\n      const avgSleepDuration =\n        sleepData.reduce((sum, session) => sum + (session.duration_minutes || 480), 0) /\n        sleepData.length /\n        60;\n\n      sleepQualityImpact = Math.max(\n        0.7,\n        Math.min(1.3, (avgSleepQuality / 10) * Math.min(avgSleepDuration / 8, 1.2))\n      );\n    }\n\n    // Impact de la nutrition (moyenne des 7 derniers jours)\n    let nutritionQualityImpact = 1.0;\n    if (nutritionData && nutritionData.length > 0) {\n      const avgProtein =\n        nutritionData.reduce((sum, day) => sum + (day.total_protein || 0), 0) /\n        nutritionData.length;\n      const targetProtein = (userProfile.weight_kg || 70) * 1.6; // 1.6g/kg pour récupération\n\n      nutritionQualityImpact = Math.max(0.8, Math.min(1.2, avgProtein / targetProtein));\n    }\n\n    // Historique des blessures\n    const injuryHistory: MuscleGroup[] = [];\n    if (userProfile.injuries && userProfile.injuries.length > 0) {\n      userProfile.injuries.forEach(injury => {\n        const injuryLower = injury.toLowerCase();\n        if (injuryLower.includes('shoulder')) injuryHistory.push('shoulders');\n        if (injuryLower.includes('back')) injuryHistory.push('back');\n        if (injuryLower.includes('knee')) injuryHistory.push('quadriceps', 'hamstrings');\n        if (injuryLower.includes('ankle')) injuryHistory.push('calves');\n        // Ajouter d'autres mappings selon les besoins\n      });\n    }\n\n    return {\n      user_id: userId,\n      recovery_rate_multiplier: baseRecoveryRate,\n      sleep_quality_impact: sleepQualityImpact,\n      nutrition_quality_impact: nutritionQualityImpact,\n      stress_level_impact: 1.0, // À calculer avec des données de stress\n      hydration_impact: 1.0, // À calculer avec les données d'hydratation\n      age_factor: ageFactor,\n      fitness_level_factor: fitnessLevelFactor,\n      injury_history: injuryHistory,\n      supplements: [], // À remplir selon les préférences utilisateur\n      created_at: new Date().toISOString(),\n      updated_at: new Date().toISOString(),\n    };\n  }\n\n  // === CALCUL DE LA RÉCUPÉRATION MUSCULAIRE ===\n  static async calculateMuscleRecovery(\n    userId: string,\n    workouts: Workout[],\n    recoveryProfile?: UserRecoveryProfile\n  ): Promise<MuscleRecoveryData[]> {\n    try {\n      if (!recoveryProfile) {\n        const profile = await this.getUserRecoveryProfile(userId);\n        if (!profile) {\n          throw new Error('Recovery profile not found');\n        }\n        recoveryProfile = profile;\n      }\n\n      const muscleRecoveryMap = new Map<MuscleGroup, MuscleRecoveryData>();\n      const now = new Date();\n\n      // Initialiser tous les groupes musculaires\n      Object.keys(this.BASE_RECOVERY_HOURS).forEach(muscle => {\n        const muscleGroup = muscle as MuscleGroup;\n        muscleRecoveryMap.set(muscleGroup, {\n          muscle_group: muscleGroup,\n          last_workout_date: '',\n          workout_intensity: 'light',\n          workout_volume: 0,\n          workout_duration_minutes: 0,\n          recovery_status: 'fully_recovered',\n          recovery_percentage: 100,\n          estimated_full_recovery: now.toISOString(),\n          fatigue_level: 1,\n          soreness_level: 1,\n          readiness_score: 100,\n          last_updated: now.toISOString(),\n        });\n      });\n\n      // Analyser les workouts récents (7 derniers jours)\n      const recentWorkouts = workouts.filter(workout => {\n        const workoutDate = new Date(workout.completed_at || workout.created_at || '');\n        const daysDiff = (now.getTime() - workoutDate.getTime()) / (1000 * 60 * 60 * 24);\n        return daysDiff <= 7;\n      });\n\n      // Calculer l'impact de chaque workout\n      for (const workout of recentWorkouts) {\n        const workoutImpacts = this.analyzeWorkoutImpact(workout);\n\n        for (const impact of workoutImpacts) {\n          const currentData = muscleRecoveryMap.get(impact.muscle_group);\n          if (!currentData) continue;\n\n          const workoutDate = new Date(workout.completed_at || workout.created_at || '');\n          const hoursElapsed = (now.getTime() - workoutDate.getTime()) / (1000 * 60 * 60);\n\n          // Calculer le temps de récupération nécessaire\n          const baseRecoveryHours = this.BASE_RECOVERY_HOURS[impact.muscle_group];\n          const intensityMultiplier = this.INTENSITY_MULTIPLIERS[impact.intensity];\n          const volumeMultiplier = Math.max(0.8, Math.min(1.5, impact.volume / 12)); // 12 séries = référence\n\n          const totalRecoveryHours =\n            baseRecoveryHours *\n            intensityMultiplier *\n            volumeMultiplier *\n            (1 / recoveryProfile.recovery_rate_multiplier) *\n            (1 / recoveryProfile.sleep_quality_impact) *\n            (1 / recoveryProfile.nutrition_quality_impact) *\n            (1 / recoveryProfile.age_factor) *\n            (1 / recoveryProfile.fitness_level_factor);\n\n          // Calculer le pourcentage de récupération\n          const recoveryPercentage = Math.min(100, (hoursElapsed / totalRecoveryHours) * 100);\n\n          // Mettre à jour si ce workout est plus récent ou plus impactant\n          if (workoutDate.getTime() > new Date(currentData.last_workout_date || 0).getTime()) {\n            const estimatedFullRecovery = new Date(\n              workoutDate.getTime() + totalRecoveryHours * 60 * 60 * 1000\n            );\n\n            muscleRecoveryMap.set(impact.muscle_group, {\n              ...currentData,\n              last_workout_date: workoutDate.toISOString(),\n              workout_intensity: impact.intensity,\n              workout_volume: impact.volume,\n              workout_duration_minutes: impact.duration_minutes,\n              recovery_percentage: Math.max(0, recoveryPercentage),\n              estimated_full_recovery: estimatedFullRecovery.toISOString(),\n              recovery_status: this.calculateRecoveryStatus(recoveryPercentage),\n              fatigue_level: this.calculateFatigueLevel(recoveryPercentage, impact.intensity),\n              soreness_level: this.calculateSorenessLevel(\n                hoursElapsed,\n                totalRecoveryHours,\n                impact.intensity\n              ),\n              readiness_score: this.calculateReadinessScore(\n                recoveryPercentage,\n                impact.muscle_group,\n                recoveryProfile\n              ),\n              last_updated: now.toISOString(),\n            });\n          }\n        }\n      }\n\n      return Array.from(muscleRecoveryMap.values());\n    } catch (error: any) {\n      // Erreur silencieuse\n      console.error('Error calculating muscle recovery:', error);\n      return [];\n    }\n  }\n\n  private static analyzeWorkoutImpact(workout: Workout): WorkoutImpact[] {\n    const impacts: WorkoutImpact[] = [];\n\n    // Analyser les exercices du workout\n    const exercises = (workout.exercises as any[]) || [];\n    const workoutType = workout.workout_type || 'strength';\n    const duration = workout.duration_minutes || 60;\n\n    // Mapper le type de workout aux groupes musculaires\n    const affectedMuscles = this.MUSCLE_GROUP_MAPPINGS[workoutType] || [];\n\n    if (affectedMuscles.length === 0) {\n      // Si pas de mapping spécifique, analyser les exercices individuellement\n      exercises.forEach(exercise => {\n        const muscleGroups = this.getMuscleGroupsFromExercise(exercise);\n        muscleGroups.forEach(muscle => {\n          impacts.push({\n            muscle_group: muscle,\n            intensity: this.determineIntensity(workout, exercise),\n            volume: exercise.sets || 3,\n            duration_minutes: duration / exercises.length,\n            exercise_types: [exercise.name || 'unknown'],\n            compound_movements: this.isCompoundMovement(exercise.name || ''),\n            eccentric_focus: this.hasEccentricFocus(exercise.name || ''),\n          });\n        });\n      });\n    } else {\n      // Utiliser le mapping du type de workout\n      affectedMuscles.forEach(muscle => {\n        impacts.push({\n          muscle_group: muscle,\n          intensity: this.determineWorkoutIntensity(workout),\n          volume: this.estimateVolumeFromWorkout(workout),\n          duration_minutes: duration / affectedMuscles.length,\n          exercise_types: exercises.map((ex, index) => ex.name || 'unknown'),\n          compound_movements: true, // Assumé pour les workouts typés\n          eccentric_focus: false,\n        });\n      });\n    }\n\n    return impacts;\n  }\n\n  private static getMuscleGroupsFromExercise(exercise: any): MuscleGroup[] {\n    const exerciseName = (exercise.name || '').toLowerCase();\n    const muscles: MuscleGroup[] = [];\n\n    // Mapping des exercices aux groupes musculaires\n    if (exerciseName.includes('bench') || exerciseName.includes('push')) {\n      muscles.push('chest', 'triceps', 'delts');\n    }\n    if (exerciseName.includes('pull') || exerciseName.includes('row')) {\n      muscles.push('back', 'lats', 'biceps');\n    }\n    if (exerciseName.includes('squat') || exerciseName.includes('leg press')) {\n      muscles.push('quadriceps', 'glutes');\n    }\n    if (exerciseName.includes('deadlift')) {\n      muscles.push('hamstrings', 'glutes', 'back', 'traps');\n    }\n    if (exerciseName.includes('shoulder') || exerciseName.includes('press')) {\n      muscles.push('delts', 'triceps');\n    }\n    if (exerciseName.includes('curl')) {\n      muscles.push('biceps');\n    }\n    if (exerciseName.includes('tricep') || exerciseName.includes('dip')) {\n      muscles.push('triceps');\n    }\n    if (exerciseName.includes('calf')) {\n      muscles.push('calves');\n    }\n    if (exerciseName.includes('core') || exerciseName.includes('ab')) {\n      muscles.push('core');\n    }\n\n    return muscles.length > 0 ? muscles : ['core']; // Fallback\n  }\n\n  private static determineIntensity(workout: Workout, exercise: any): WorkoutIntensity {\n    const difficulty = workout.difficulty || 'moderate';\n    const rpe = exercise.rpe || 7; // Rate of Perceived Exertion\n\n    if (rpe >= 9 || difficulty === 'advanced') return 'extreme';\n    if (rpe >= 7 || difficulty === 'intermediate') return 'high';\n    if (rpe >= 5) return 'moderate';\n    return 'light';\n  }\n\n  private static determineWorkoutIntensity(workout: Workout): WorkoutIntensity {\n    const difficulty = workout.difficulty || 'moderate';\n    const duration = workout.duration_minutes || 60;\n\n    if (difficulty === 'advanced' || duration > 90) return 'extreme';\n    if (difficulty === 'intermediate' || duration > 60) return 'high';\n    if (duration > 30) return 'moderate';\n    return 'light';\n  }\n\n  private static estimateVolumeFromWorkout(workout: Workout): number {\n    const exercises = (workout.exercises as any[]) || [];\n    return exercises.reduce((total, ex) => total + (ex.sets || 3), 0);\n  }\n\n  private static isCompoundMovement(exerciseName: string): boolean {\n    const compoundKeywords = [\n      'squat',\n      'deadlift',\n      'bench',\n      'press',\n      'pull',\n      'row',\n      'clean',\n      'snatch',\n    ];\n    return compoundKeywords.some(keyword => exerciseName.toLowerCase().includes(keyword));\n  }\n\n  private static hasEccentricFocus(exerciseName: string): boolean {\n    const eccentricKeywords = ['negative', 'eccentric', 'slow', 'tempo'];\n    return eccentricKeywords.some(keyword => exerciseName.toLowerCase().includes(keyword));\n  }\n\n  private static calculateRecoveryStatus(recoveryPercentage: number): RecoveryStatus {\n    if (recoveryPercentage >= 95) return 'fully_recovered';\n    if (recoveryPercentage >= 80) return 'mostly_recovered';\n    if (recoveryPercentage >= 60) return 'partially_recovered';\n    if (recoveryPercentage >= 30) return 'needs_recovery';\n    return 'overworked';\n  }\n\n  private static calculateFatigueLevel(\n    recoveryPercentage: number,\n    intensity: WorkoutIntensity\n  ): number {\n    const baseIntensityFatigue = {\n      light: 2,\n      moderate: 4,\n      high: 6,\n      extreme: 8,\n    };\n\n    const baseFatigue = baseIntensityFatigue[intensity];\n    const recoveryFactor = (100 - recoveryPercentage) / 100;\n\n    return Math.max(1, Math.min(10, Math.round(baseFatigue * recoveryFactor)));\n  }\n\n  private static calculateSorenessLevel(\n    hoursElapsed: number,\n    totalRecoveryHours: number,\n    intensity: WorkoutIntensity\n  ): number {\n    const peakSorenessHours = {\n      light: 12,\n      moderate: 24,\n      high: 36,\n      extreme: 48,\n    };\n\n    const peakHours = peakSorenessHours[intensity];\n    const maxSoreness = {\n      light: 3,\n      moderate: 5,\n      high: 7,\n      extreme: 9,\n    };\n\n    if (hoursElapsed <= peakHours) {\n      // Montée vers le pic\n      return Math.round((hoursElapsed / peakHours) * maxSoreness[intensity]);\n    } else {\n      // Descente après le pic\n      const remainingHours = totalRecoveryHours - peakHours;\n      const hoursAfterPeak = hoursElapsed - peakHours;\n      const sorenessReduction = (hoursAfterPeak / remainingHours) * maxSoreness[intensity];\n      return Math.max(1, Math.round(maxSoreness[intensity] - sorenessReduction));\n    }\n  }\n\n  private static calculateReadinessScore(\n    recoveryPercentage: number,\n    muscleGroup: MuscleGroup,\n    profile: UserRecoveryProfile\n  ): number {\n    let baseScore = recoveryPercentage;\n\n    // Pénalité pour les muscles avec historique de blessure\n    if (profile.injury_history.includes(muscleGroup)) {\n      baseScore *= 0.9;\n    }\n\n    // Bonus pour les petits groupes musculaires (récupèrent plus vite)\n    const smallMuscles: MuscleGroup[] = ['biceps', 'triceps', 'forearms', 'calves', 'core'];\n    if (smallMuscles.includes(muscleGroup)) {\n      baseScore *= 1.1;\n    }\n\n    // Impact des facteurs globaux\n    baseScore *= profile.sleep_quality_impact;\n    baseScore *= profile.nutrition_quality_impact;\n    baseScore *= profile.age_factor;\n\n    return Math.max(0, Math.min(100, Math.round(baseScore)));\n  }\n\n  // === RECOMMANDATIONS ===\n  static async generateRecoveryRecommendations(\n    muscleRecoveryData: MuscleRecoveryData[],\n    userProfile: UserProfile\n  ): Promise<RecoveryRecommendation[]> {\n    const recommendations: RecoveryRecommendation[] = [];\n\n    for (const muscle of muscleRecoveryData) {\n      if (muscle.recovery_percentage < 70) {\n        // Muscle a besoin de récupération\n        if (muscle.recovery_percentage < 30) {\n          recommendations.push({\n            muscle_group: muscle.muscle_group,\n            recommendation_type: 'rest',\n            priority: 'critical',\n            message: `${muscle.muscle_group} est en surmenage. Repos complet recommandé.`,\n            estimated_benefit: 90,\n            specific_actions: [\n              'Éviter tout exercice sollicitant ce groupe musculaire',\n              'Appliquer de la glace si inflammation',\n              'Massage léger ou auto-massage',\n              'Étirements très doux uniquement',\n            ],\n          });\n        } else if (muscle.recovery_percentage < 50) {\n          recommendations.push({\n            muscle_group: muscle.muscle_group,\n            recommendation_type: 'light_activity',\n            priority: 'high',\n            message: `${muscle.muscle_group} a besoin de récupération active.`,\n            estimated_benefit: 70,\n            duration_minutes: 15,\n            specific_actions: [\n              'Exercices de mobilité douce',\n              'Marche légère',\n              'Étirements dynamiques légers',\n              'Échauffement prolongé avant exercice',\n            ],\n          });\n        } else {\n          recommendations.push({\n            muscle_group: muscle.muscle_group,\n            recommendation_type: 'stretching',\n            priority: 'medium',\n            message: `${muscle.muscle_group} bénéficierait d'étirements et de mobilité.`,\n            estimated_benefit: 50,\n            duration_minutes: 10,\n            specific_actions: [\n              'Étirements statiques 30 secondes',\n              'Rouleau de massage (foam rolling)',\n              'Exercices de mobilité articulaire',\n            ],\n          });\n        }\n      }\n\n      // Recommandations nutritionnelles pour la récupération\n      if (muscle.soreness_level > 6) {\n        recommendations.push({\n          muscle_group: muscle.muscle_group,\n          recommendation_type: 'nutrition',\n          priority: 'medium',\n          message: \"Optimiser la nutrition pour réduire l'inflammation.\",\n          estimated_benefit: 60,\n          specific_actions: [\n            'Consommer des protéines dans les 2h post-entraînement',\n            'Aliments anti-inflammatoires (curcuma, gingembre)',\n            'Hydratation accrue',\n            'Oméga-3 (poisson, noix)',\n          ],\n        });\n      }\n\n      // Recommandations de sommeil\n      if (muscle.recovery_percentage < 60 && muscle.fatigue_level > 6) {\n        recommendations.push({\n          muscle_group: muscle.muscle_group,\n          recommendation_type: 'sleep',\n          priority: 'high',\n          message: 'Le sommeil est crucial pour la récupération musculaire.',\n          estimated_benefit: 80,\n          duration_minutes: 480, // 8 heures\n          specific_actions: [\n            'Viser 8-9h de sommeil de qualité',\n            'Éviter les écrans 1h avant le coucher',\n            'Température fraîche dans la chambre',\n            'Routine de relaxation avant le coucher',\n          ],\n        });\n      }\n    }\n\n    // Trier par priorité et bénéfice estimé\n    return recommendations.sort((a, b) => {\n      const priorityOrder = { critical: 4, high: 3, medium: 2, low: 1 };\n      const priorityDiff = priorityOrder[b.priority] - priorityOrder[a.priority];\n      if (priorityDiff !== 0) return priorityDiff;\n      return b.estimated_benefit - a.estimated_benefit;\n    });\n  }\n\n  // === MÉTRIQUES GLOBALES ===\n  static calculateGlobalRecoveryMetrics(\n    muscleRecoveryData: MuscleRecoveryData[]\n  ): GlobalRecoveryMetrics {\n    if (muscleRecoveryData.length === 0) {\n      return {\n        overall_recovery_score: 100,\n        most_recovered_muscle: 'core',\n        least_recovered_muscle: 'core',\n        ready_for_training: [],\n        needs_rest: [],\n        optimal_workout_type: 'light_cardio',\n        recovery_trend: 'stable',\n        last_calculated: new Date().toISOString(),\n      };\n    }\n\n    // Score global de récupération (moyenne pondérée)\n    const totalScore = muscleRecoveryData.reduce(\n      (sum, muscle) => sum + muscle.recovery_percentage,\n      0\n    );\n    const overallScore = Math.round(totalScore / muscleRecoveryData.length);\n\n    // Muscle le plus et le moins récupéré\n    const sortedByRecovery = [...muscleRecoveryData].sort(\n      (a, b) => b.recovery_percentage - a.recovery_percentage\n    );\n    const mostRecovered = sortedByRecovery[0].muscle_group;\n    const leastRecovered = sortedByRecovery[sortedByRecovery.length - 1].muscle_group;\n\n    // Muscles prêts pour l'entraînement (>80% récupération)\n    const readyForTraining = muscleRecoveryData\n      .filter(muscle => muscle.recovery_percentage > 80)\n      .map((muscle, index) => muscle.muscle_group);\n\n    // Muscles ayant besoin de repos (<60% récupération)\n    const needsRest = muscleRecoveryData\n      .filter(muscle => muscle.recovery_percentage < 60)\n      .map((muscle, index) => muscle.muscle_group);\n\n    // Type d'entraînement optimal\n    let optimalWorkoutType = 'rest';\n    if (readyForTraining.length >= 6) {\n      optimalWorkoutType = 'full_body';\n    } else if (readyForTraining.length >= 4) {\n      optimalWorkoutType = 'upper_lower_split';\n    } else if (readyForTraining.length >= 2) {\n      optimalWorkoutType = 'targeted_training';\n    } else if (overallScore > 70) {\n      optimalWorkoutType = 'light_cardio';\n    }\n\n    return {\n      overall_recovery_score: overallScore,\n      most_recovered_muscle: mostRecovered,\n      least_recovered_muscle: leastRecovered,\n      ready_for_training: readyForTraining,\n      needs_rest: needsRest,\n      optimal_workout_type: optimalWorkoutType,\n      recovery_trend: 'stable', // À calculer avec l'historique\n      last_calculated: new Date().toISOString(),\n    };\n  }\n\n  // === SAUVEGARDE EN BASE ===\n  static async saveMuscleRecoveryData(\n    userId: string,\n    recoveryData: MuscleRecoveryData[]\n  ): Promise<boolean> {\n    try {\n      // Supprimer les anciennes données\n      await supabase.from('muscle_recovery_data').delete().eq('user_id', userId);\n\n      // Insérer les nouvelles données\n      const dataToInsert = recoveryData.map((data, index) => ({\n        user_id: userId,\n        ...data,\n      }));\n\n      const { error } = await supabase.from('muscle_recovery_data').insert(dataToInsert);\n\n      if (error) throw error;\n      return true;\n    } catch (error: any) {\n      // Erreur silencieuse\n      console.error('Error saving muscle recovery data:', error);\n      return false;\n    }\n  }\n\n  static async getMuscleRecoveryData(userId: string): Promise<MuscleRecoveryData[]> {\n    try {\n      const { data, error }: any = await supabase\n        .from('muscle_recovery_data')\n        .select('*')\n        .eq('user_id', userId)\n        .order('last_updated', { ascending: false });\n\n      if (error) throw error;\n      return data || [];\n    } catch (error: any) {\n      // Erreur silencieuse\n      console.error('Error fetching muscle recovery data:', error);\n      return [];\n    }\n  }\n}\n"],"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","ignoreList":[]}