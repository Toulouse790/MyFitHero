7d4459ceeaad997a4dc45321cfc9c28c
"use strict";

/* istanbul ignore next */
function cov_195jex2r4y() {
  var path = "/workspaces/MyFitHero/src/core/api/api.interceptors.ts";
  var hash = "2d08b8f9c619a3627aa158816d5b17d3b8d2ebd1";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/MyFitHero/src/core/api/api.interceptors.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 32
        }
      },
      "2": {
        start: {
          line: 4,
          column: 26
        },
        end: {
          line: 4,
          column: 54
        }
      },
      "3": {
        start: {
          line: 9,
          column: 38
        },
        end: {
          line: 9,
          column: 88
        }
      },
      "4": {
        start: {
          line: 10,
          column: 8
        },
        end: {
          line: 14,
          column: 9
        }
      },
      "5": {
        start: {
          line: 11,
          column: 12
        },
        end: {
          line: 13,
          column: 14
        }
      },
      "6": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 15,
          column: 18
        }
      },
      "7": {
        start: {
          line: 19,
          column: 20
        },
        end: {
          line: 21,
          column: 42
        }
      },
      "8": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 30,
          column: 9
        }
      },
      "9": {
        start: {
          line: 23,
          column: 33
        },
        end: {
          line: 23,
          column: 54
        }
      },
      "10": {
        start: {
          line: 24,
          column: 12
        },
        end: {
          line: 28,
          column: 15
        }
      },
      "11": {
        start: {
          line: 25,
          column: 16
        },
        end: {
          line: 27,
          column: 17
        }
      },
      "12": {
        start: {
          line: 26,
          column: 20
        },
        end: {
          line: 26,
          column: 60
        }
      },
      "13": {
        start: {
          line: 29,
          column: 12
        },
        end: {
          line: 29,
          column: 55
        }
      },
      "14": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 31,
          column: 19
        }
      },
      "15": {
        start: {
          line: 35,
          column: 8
        },
        end: {
          line: 36,
          column: 9
        }
      },
      "16": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 51,
          column: 9
        }
      },
      "17": {
        start: {
          line: 42,
          column: 12
        },
        end: {
          line: 42,
          column: 88
        }
      },
      "18": {
        start: {
          line: 44,
          column: 13
        },
        end: {
          line: 51,
          column: 9
        }
      },
      "19": {
        start: {
          line: 46,
          column: 12
        },
        end: {
          line: 46,
          column: 58
        }
      },
      "20": {
        start: {
          line: 50,
          column: 12
        },
        end: {
          line: 50,
          column: 65
        }
      },
      "21": {
        start: {
          line: 55,
          column: 8
        },
        end: {
          line: 86,
          column: 9
        }
      },
      "22": {
        start: {
          line: 56,
          column: 12
        },
        end: {
          line: 56,
          column: 40
        }
      },
      "23": {
        start: {
          line: 57,
          column: 32
        },
        end: {
          line: 57,
          column: 59
        }
      },
      "24": {
        start: {
          line: 58,
          column: 24
        },
        end: {
          line: 58,
          column: 64
        }
      },
      "25": {
        start: {
          line: 59,
          column: 29
        },
        end: {
          line: 67,
          column: 14
        }
      },
      "26": {
        start: {
          line: 68,
          column: 25
        },
        end: {
          line: 68,
          column: 46
        }
      },
      "27": {
        start: {
          line: 69,
          column: 12
        },
        end: {
          line: 69,
          column: 68
        }
      },
      "28": {
        start: {
          line: 70,
          column: 12
        },
        end: {
          line: 72,
          column: 13
        }
      },
      "29": {
        start: {
          line: 71,
          column: 16
        },
        end: {
          line: 71,
          column: 69
        }
      },
      "30": {
        start: {
          line: 73,
          column: 12
        },
        end: {
          line: 77,
          column: 14
        }
      },
      "31": {
        start: {
          line: 80,
          column: 12
        },
        end: {
          line: 80,
          column: 37
        }
      },
      "32": {
        start: {
          line: 81,
          column: 12
        },
        end: {
          line: 85,
          column: 14
        }
      },
      "33": {
        start: {
          line: 90,
          column: 8
        },
        end: {
          line: 90,
          column: 60
        }
      },
      "34": {
        start: {
          line: 93,
          column: 8
        },
        end: {
          line: 93,
          column: 67
        }
      },
      "35": {
        start: {
          line: 96,
          column: 8
        },
        end: {
          line: 96,
          column: 66
        }
      },
      "36": {
        start: {
          line: 99,
          column: 8
        },
        end: {
          line: 99,
          column: 63
        }
      },
      "37": {
        start: {
          line: 102,
          column: 8
        },
        end: {
          line: 102,
          column: 68
        }
      },
      "38": {
        start: {
          line: 105,
          column: 0
        },
        end: {
          line: 105,
          column: 40
        }
      },
      "39": {
        start: {
          line: 106,
          column: 0
        },
        end: {
          line: 111,
          column: 3
        }
      },
      "40": {
        start: {
          line: 112,
          column: 0
        },
        end: {
          line: 112,
          column: 33
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 8,
            column: 4
          },
          end: {
            line: 8,
            column: 5
          }
        },
        loc: {
          start: {
            line: 8,
            column: 34
          },
          end: {
            line: 16,
            column: 5
          }
        },
        line: 8
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 18,
            column: 4
          },
          end: {
            line: 18,
            column: 5
          }
        },
        loc: {
          start: {
            line: 18,
            column: 38
          },
          end: {
            line: 32,
            column: 5
          }
        },
        line: 18
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 24,
            column: 43
          },
          end: {
            line: 24,
            column: 44
          }
        },
        loc: {
          start: {
            line: 24,
            column: 61
          },
          end: {
            line: 28,
            column: 13
          }
        },
        line: 24
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 34,
            column: 4
          },
          end: {
            line: 34,
            column: 5
          }
        },
        loc: {
          start: {
            line: 34,
            column: 30
          },
          end: {
            line: 37,
            column: 5
          }
        },
        line: 34
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 39,
            column: 4
          },
          end: {
            line: 39,
            column: 5
          }
        },
        loc: {
          start: {
            line: 39,
            column: 30
          },
          end: {
            line: 52,
            column: 5
          }
        },
        line: 39
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 54,
            column: 4
          },
          end: {
            line: 54,
            column: 5
          }
        },
        loc: {
          start: {
            line: 54,
            column: 33
          },
          end: {
            line: 87,
            column: 5
          }
        },
        line: 54
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 89,
            column: 4
          },
          end: {
            line: 89,
            column: 5
          }
        },
        loc: {
          start: {
            line: 89,
            column: 28
          },
          end: {
            line: 91,
            column: 5
          }
        },
        line: 89
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 92,
            column: 4
          },
          end: {
            line: 92,
            column: 5
          }
        },
        loc: {
          start: {
            line: 92,
            column: 35
          },
          end: {
            line: 94,
            column: 5
          }
        },
        line: 92
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 95,
            column: 4
          },
          end: {
            line: 95,
            column: 5
          }
        },
        loc: {
          start: {
            line: 95,
            column: 34
          },
          end: {
            line: 97,
            column: 5
          }
        },
        line: 95
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 98,
            column: 4
          },
          end: {
            line: 98,
            column: 5
          }
        },
        loc: {
          start: {
            line: 98,
            column: 31
          },
          end: {
            line: 100,
            column: 5
          }
        },
        line: 98
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 101,
            column: 4
          },
          end: {
            line: 101,
            column: 5
          }
        },
        loc: {
          start: {
            line: 101,
            column: 36
          },
          end: {
            line: 103,
            column: 5
          }
        },
        line: 101
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 10,
            column: 8
          },
          end: {
            line: 14,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 10,
            column: 8
          },
          end: {
            line: 14,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 10
      },
      "1": {
        loc: {
          start: {
            line: 19,
            column: 20
          },
          end: {
            line: 21,
            column: 42
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 20,
            column: 14
          },
          end: {
            line: 20,
            column: 22
          }
        }, {
          start: {
            line: 21,
            column: 14
          },
          end: {
            line: 21,
            column: 42
          }
        }],
        line: 19
      },
      "2": {
        loc: {
          start: {
            line: 22,
            column: 8
          },
          end: {
            line: 30,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 22,
            column: 8
          },
          end: {
            line: 30,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 22
      },
      "3": {
        loc: {
          start: {
            line: 25,
            column: 16
          },
          end: {
            line: 27,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 25,
            column: 16
          },
          end: {
            line: 27,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 25
      },
      "4": {
        loc: {
          start: {
            line: 25,
            column: 20
          },
          end: {
            line: 25,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 25,
            column: 20
          },
          end: {
            line: 25,
            column: 39
          }
        }, {
          start: {
            line: 25,
            column: 43
          },
          end: {
            line: 25,
            column: 57
          }
        }],
        line: 25
      },
      "5": {
        loc: {
          start: {
            line: 35,
            column: 8
          },
          end: {
            line: 36,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 35,
            column: 8
          },
          end: {
            line: 36,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 35
      },
      "6": {
        loc: {
          start: {
            line: 40,
            column: 8
          },
          end: {
            line: 51,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 40,
            column: 8
          },
          end: {
            line: 51,
            column: 9
          }
        }, {
          start: {
            line: 44,
            column: 13
          },
          end: {
            line: 51,
            column: 9
          }
        }],
        line: 40
      },
      "7": {
        loc: {
          start: {
            line: 42,
            column: 29
          },
          end: {
            line: 42,
            column: 86
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 42,
            column: 29
          },
          end: {
            line: 42,
            column: 57
          }
        }, {
          start: {
            line: 42,
            column: 61
          },
          end: {
            line: 42,
            column: 86
          }
        }],
        line: 42
      },
      "8": {
        loc: {
          start: {
            line: 44,
            column: 13
          },
          end: {
            line: 51,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 44,
            column: 13
          },
          end: {
            line: 51,
            column: 9
          }
        }, {
          start: {
            line: 48,
            column: 13
          },
          end: {
            line: 51,
            column: 9
          }
        }],
        line: 44
      },
      "9": {
        loc: {
          start: {
            line: 50,
            column: 29
          },
          end: {
            line: 50,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 50,
            column: 29
          },
          end: {
            line: 50,
            column: 42
          }
        }, {
          start: {
            line: 50,
            column: 46
          },
          end: {
            line: 50,
            column: 63
          }
        }],
        line: 50
      },
      "10": {
        loc: {
          start: {
            line: 60,
            column: 24
          },
          end: {
            line: 60,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 60,
            column: 24
          },
          end: {
            line: 60,
            column: 37
          }
        }, {
          start: {
            line: 60,
            column: 41
          },
          end: {
            line: 60,
            column: 46
          }
        }],
        line: 60
      },
      "11": {
        loc: {
          start: {
            line: 66,
            column: 22
          },
          end: {
            line: 66,
            column: 75
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 66,
            column: 36
          },
          end: {
            line: 66,
            column: 63
          }
        }, {
          start: {
            line: 66,
            column: 66
          },
          end: {
            line: 66,
            column: 75
          }
        }],
        line: 66
      },
      "12": {
        loc: {
          start: {
            line: 70,
            column: 12
          },
          end: {
            line: 72,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 70,
            column: 12
          },
          end: {
            line: 72,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 70
      },
      "13": {
        loc: {
          start: {
            line: 71,
            column: 32
          },
          end: {
            line: 71,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 71,
            column: 32
          },
          end: {
            line: 71,
            column: 44
          }
        }, {
          start: {
            line: 71,
            column: 48
          },
          end: {
            line: 71,
            column: 67
          }
        }],
        line: 71
      },
      "14": {
        loc: {
          start: {
            line: 84,
            column: 24
          },
          end: {
            line: 84,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 84,
            column: 24
          },
          end: {
            line: 84,
            column: 46
          }
        }, {
          start: {
            line: 84,
            column: 50
          },
          end: {
            line: 84,
            column: 53
          }
        }],
        line: 84
      },
      "15": {
        loc: {
          start: {
            line: 110,
            column: 11
          },
          end: {
            line: 110,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 110,
            column: 11
          },
          end: {
            line: 110,
            column: 44
          }
        }, {
          start: {
            line: 110,
            column: 48
          },
          end: {
            line: 110,
            column: 54
          }
        }],
        line: 110
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0]
    },
    inputSourceMap: {
      file: "/workspaces/MyFitHero/src/core/api/api.interceptors.ts",
      mappings: "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",
      names: [],
      sources: ["/workspaces/MyFitHero/src/core/api/api.interceptors.ts"],
      sourcesContent: ["import { Search } from 'lucide-react';\nimport { supabase } from './supabase.client';\n\n// Types pour les intercepteurs\nexport interface RequestConfig {\n  url: string;\n  method?: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH';\n  headers?: Record<string, string>;\n  body?: any;\n  params?: Record<string, any>;\n}\n\nexport interface ApiResponse<T = any> {\n  data: T | undefined;\n  error: Error | undefined;\n  status: number;\n}\n\n// Intercepteur principal pour les requ\xEAtes API\nexport class ApiInterceptor {\n  private static baseURL = import.meta.env.VITE_API_BASE_URL || '/api';\n\n  // Ajouter les headers d'authentification\n  private static async getAuthHeaders(): Promise<Record<string, string>> {\n    const { data: { session } } = await supabase.auth.getSession();\n    \n    if (session?.access_token) {\n      return {\n        'Authorization': `Bearer ${session.access_token}`,\n      };\n    }\n    \n    return {};\n  }\n\n  // Construire l'URL compl\xE8te\n  private static buildUrl(endpoint: string, params?: Record<string, any>): string {\n    const url = endpoint.startsWith('http') \n      ? endpoint \n      : `${this.baseURL}${endpoint}`;\n\n    if (params) {\n      const searchParams = new URLSearchParams();\n      Object.entries(params).forEach(([key, value]) => {\n        if (value !== undefined && value !== null) {\n          searchParams.append(key, String(value));\n        }\n      });\n      return `${url}?${searchParams.toString()}`;\n    }\n\n    return url;\n  }\n\n  // Logger pour le d\xE9veloppement\n  private static log(message: string, data?: any): void {\n    if (import.meta.env.DEV) {\n    }\n  }\n\n  // Gestion des erreurs\n  private static handleError(error: any): Error {\n    if (error.response) {\n      // Erreur de r\xE9ponse du serveur\n      return new Error(error.response.data?.message || error.response.statusText);\n    } else if (error.request) {\n      // Pas de r\xE9ponse du serveur\n      return new Error('Aucune r\xE9ponse du serveur');\n    } else {\n      // Erreur de configuration\n      return new Error(error.message || 'Erreur inconnue');\n    }\n  }\n\n  // M\xE9thode principale de requ\xEAte\n  static async request<T = any>(config: RequestConfig): Promise<ApiResponse<T>> {\n    try {\n      this.log('Request', config);\n\n      const authHeaders = await this.getAuthHeaders();\n      const url = this.buildUrl(config.url, config.params);\n\n      const response = await fetch(url, {\n        method: config.method || 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          ...authHeaders,\n          ...config.headers,\n        },\n        body: config.body ? JSON.stringify(config.body) : undefined,\n      });\n\n      const data = await response.json();\n\n      this.log('Response', { status: response.status, data });\n\n      if (!response.ok) {\n        throw new Error(data.message || response.statusText);\n      }\n\n      return {\n        data,\n        error: null,\n        status: response.status,\n      };\n    } catch (error: any) {\n      this.log('Error', error);\n      \n      return {\n        data: null,\n        error: this.handleError(error),\n        status: error.response?.status || 500,\n      };\n    }\n  }\n\n  // M\xE9thodes raccourcies\n  static get<T = any>(url: string, params?: Record<string, any>) {\n    return this.request<T>({ url, method: 'GET', params });\n  }\n\n  static post<T = any>(url: string, body?: any, params?: Record<string, any>) {\n    return this.request<T>({ url, method: 'POST', body, params });\n  }\n\n  static put<T = any>(url: string, body?: any, params?: Record<string, any>) {\n    return this.request<T>({ url, method: 'PUT', body, params });\n  }\n\n  static delete<T = any>(url: string, params?: Record<string, any>) {\n    return this.request<T>({ url, method: 'DELETE', params });\n  }\n\n  static patch<T = any>(url: string, body?: any, params?: Record<string, any>) {\n    return this.request<T>({ url, method: 'PATCH', body, params });\n  }\n}\n\nexport default ApiInterceptor;"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "2d08b8f9c619a3627aa158816d5b17d3b8d2ebd1"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_195jex2r4y = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_195jex2r4y();
cov_195jex2r4y().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_195jex2r4y().s[1]++;
exports.ApiInterceptor = void 0;
const supabase_client_1 =
/* istanbul ignore next */
(cov_195jex2r4y().s[2]++, require("./supabase.client"));
// Intercepteur principal pour les requêtes API
class ApiInterceptor {
  // Ajouter les headers d'authentification
  static async getAuthHeaders() {
    /* istanbul ignore next */
    cov_195jex2r4y().f[0]++;
    const {
      data: {
        session
      }
    } =
    /* istanbul ignore next */
    (cov_195jex2r4y().s[3]++, await supabase_client_1.supabase.auth.getSession());
    /* istanbul ignore next */
    cov_195jex2r4y().s[4]++;
    if (session?.access_token) {
      /* istanbul ignore next */
      cov_195jex2r4y().b[0][0]++;
      cov_195jex2r4y().s[5]++;
      return {
        'Authorization': `Bearer ${session.access_token}`
      };
    } else
    /* istanbul ignore next */
    {
      cov_195jex2r4y().b[0][1]++;
    }
    cov_195jex2r4y().s[6]++;
    return {};
  }
  // Construire l'URL complète
  static buildUrl(endpoint, params) {
    /* istanbul ignore next */
    cov_195jex2r4y().f[1]++;
    const url =
    /* istanbul ignore next */
    (cov_195jex2r4y().s[7]++, endpoint.startsWith('http') ?
    /* istanbul ignore next */
    (cov_195jex2r4y().b[1][0]++, endpoint) :
    /* istanbul ignore next */
    (cov_195jex2r4y().b[1][1]++, `${this.baseURL}${endpoint}`));
    /* istanbul ignore next */
    cov_195jex2r4y().s[8]++;
    if (params) {
      /* istanbul ignore next */
      cov_195jex2r4y().b[2][0]++;
      const searchParams =
      /* istanbul ignore next */
      (cov_195jex2r4y().s[9]++, new URLSearchParams());
      /* istanbul ignore next */
      cov_195jex2r4y().s[10]++;
      Object.entries(params).forEach(([key, value]) => {
        /* istanbul ignore next */
        cov_195jex2r4y().f[2]++;
        cov_195jex2r4y().s[11]++;
        if (
        /* istanbul ignore next */
        (cov_195jex2r4y().b[4][0]++, value !== undefined) &&
        /* istanbul ignore next */
        (cov_195jex2r4y().b[4][1]++, value !== null)) {
          /* istanbul ignore next */
          cov_195jex2r4y().b[3][0]++;
          cov_195jex2r4y().s[12]++;
          searchParams.append(key, String(value));
        } else
        /* istanbul ignore next */
        {
          cov_195jex2r4y().b[3][1]++;
        }
      });
      /* istanbul ignore next */
      cov_195jex2r4y().s[13]++;
      return `${url}?${searchParams.toString()}`;
    } else
    /* istanbul ignore next */
    {
      cov_195jex2r4y().b[2][1]++;
    }
    cov_195jex2r4y().s[14]++;
    return url;
  }
  // Logger pour le développement
  static log(message, data) {
    /* istanbul ignore next */
    cov_195jex2r4y().f[3]++;
    cov_195jex2r4y().s[15]++;
    if (import.meta.env.DEV) {
      /* istanbul ignore next */
      cov_195jex2r4y().b[5][0]++;
    } else
    /* istanbul ignore next */
    {
      cov_195jex2r4y().b[5][1]++;
    }
  }
  // Gestion des erreurs
  static handleError(error) {
    /* istanbul ignore next */
    cov_195jex2r4y().f[4]++;
    cov_195jex2r4y().s[16]++;
    if (error.response) {
      /* istanbul ignore next */
      cov_195jex2r4y().b[6][0]++;
      cov_195jex2r4y().s[17]++;
      // Erreur de réponse du serveur
      return new Error(
      /* istanbul ignore next */
      (cov_195jex2r4y().b[7][0]++, error.response.data?.message) ||
      /* istanbul ignore next */
      (cov_195jex2r4y().b[7][1]++, error.response.statusText));
    } else {
      /* istanbul ignore next */
      cov_195jex2r4y().b[6][1]++;
      cov_195jex2r4y().s[18]++;
      if (error.request) {
        /* istanbul ignore next */
        cov_195jex2r4y().b[8][0]++;
        cov_195jex2r4y().s[19]++;
        // Pas de réponse du serveur
        return new Error('Aucune réponse du serveur');
      } else {
        /* istanbul ignore next */
        cov_195jex2r4y().b[8][1]++;
        cov_195jex2r4y().s[20]++;
        // Erreur de configuration
        return new Error(
        /* istanbul ignore next */
        (cov_195jex2r4y().b[9][0]++, error.message) ||
        /* istanbul ignore next */
        (cov_195jex2r4y().b[9][1]++, 'Erreur inconnue'));
      }
    }
  }
  // Méthode principale de requête
  static async request(config) {
    /* istanbul ignore next */
    cov_195jex2r4y().f[5]++;
    cov_195jex2r4y().s[21]++;
    try {
      /* istanbul ignore next */
      cov_195jex2r4y().s[22]++;
      this.log('Request', config);
      const authHeaders =
      /* istanbul ignore next */
      (cov_195jex2r4y().s[23]++, await this.getAuthHeaders());
      const url =
      /* istanbul ignore next */
      (cov_195jex2r4y().s[24]++, this.buildUrl(config.url, config.params));
      const response =
      /* istanbul ignore next */
      (cov_195jex2r4y().s[25]++, await fetch(url, {
        method:
        /* istanbul ignore next */
        (cov_195jex2r4y().b[10][0]++, config.method) ||
        /* istanbul ignore next */
        (cov_195jex2r4y().b[10][1]++, 'GET'),
        headers: {
          'Content-Type': 'application/json',
          ...authHeaders,
          ...config.headers
        },
        body: config.body ?
        /* istanbul ignore next */
        (cov_195jex2r4y().b[11][0]++, JSON.stringify(config.body)) :
        /* istanbul ignore next */
        (cov_195jex2r4y().b[11][1]++, undefined)
      }));
      const data =
      /* istanbul ignore next */
      (cov_195jex2r4y().s[26]++, await response.json());
      /* istanbul ignore next */
      cov_195jex2r4y().s[27]++;
      this.log('Response', {
        status: response.status,
        data
      });
      /* istanbul ignore next */
      cov_195jex2r4y().s[28]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_195jex2r4y().b[12][0]++;
        cov_195jex2r4y().s[29]++;
        throw new Error(
        /* istanbul ignore next */
        (cov_195jex2r4y().b[13][0]++, data.message) ||
        /* istanbul ignore next */
        (cov_195jex2r4y().b[13][1]++, response.statusText));
      } else
      /* istanbul ignore next */
      {
        cov_195jex2r4y().b[12][1]++;
      }
      cov_195jex2r4y().s[30]++;
      return {
        data,
        error: null,
        status: response.status
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_195jex2r4y().s[31]++;
      this.log('Error', error);
      /* istanbul ignore next */
      cov_195jex2r4y().s[32]++;
      return {
        data: null,
        error: this.handleError(error),
        status:
        /* istanbul ignore next */
        (cov_195jex2r4y().b[14][0]++, error.response?.status) ||
        /* istanbul ignore next */
        (cov_195jex2r4y().b[14][1]++, 500)
      };
    }
  }
  // Méthodes raccourcies
  static get(url, params) {
    /* istanbul ignore next */
    cov_195jex2r4y().f[6]++;
    cov_195jex2r4y().s[33]++;
    return this.request({
      url,
      method: 'GET',
      params
    });
  }
  static post(url, body, params) {
    /* istanbul ignore next */
    cov_195jex2r4y().f[7]++;
    cov_195jex2r4y().s[34]++;
    return this.request({
      url,
      method: 'POST',
      body,
      params
    });
  }
  static put(url, body, params) {
    /* istanbul ignore next */
    cov_195jex2r4y().f[8]++;
    cov_195jex2r4y().s[35]++;
    return this.request({
      url,
      method: 'PUT',
      body,
      params
    });
  }
  static delete(url, params) {
    /* istanbul ignore next */
    cov_195jex2r4y().f[9]++;
    cov_195jex2r4y().s[36]++;
    return this.request({
      url,
      method: 'DELETE',
      params
    });
  }
  static patch(url, body, params) {
    /* istanbul ignore next */
    cov_195jex2r4y().f[10]++;
    cov_195jex2r4y().s[37]++;
    return this.request({
      url,
      method: 'PATCH',
      body,
      params
    });
  }
}
/* istanbul ignore next */
cov_195jex2r4y().s[38]++;
exports.ApiInterceptor = ApiInterceptor;
/* istanbul ignore next */
cov_195jex2r4y().s[39]++;
Object.defineProperty(ApiInterceptor, "baseURL", {
  enumerable: true,
  configurable: true,
  writable: true,
  value:
  /* istanbul ignore next */
  (cov_195jex2r4y().b[15][0]++, import.meta.env.VITE_API_BASE_URL) ||
  /* istanbul ignore next */
  (cov_195jex2r4y().b[15][1]++, '/api')
});
/* istanbul ignore next */
cov_195jex2r4y().s[40]++;
exports.default = ApiInterceptor;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,