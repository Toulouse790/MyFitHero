{"version":3,"names":["cov_195jex2r4y","actualCoverage","s","supabase_client_1","require","ApiInterceptor","getAuthHeaders","f","data","session","supabase","auth","getSession","access_token","b","buildUrl","endpoint","params","url","startsWith","baseURL","searchParams","URLSearchParams","Object","entries","forEach","key","value","undefined","append","String","toString","log","message","import","meta","env","DEV","handleError","error","response","Error","statusText","request","config","authHeaders","fetch","method","headers","body","JSON","stringify","json","status","ok","get","post","put","delete","patch","exports","defineProperty","VITE_API_BASE_URL","default"],"sources":["/workspaces/MyFitHero/src/core/api/api.interceptors.ts"],"sourcesContent":["import { Search } from 'lucide-react';\nimport { supabase } from './supabase.client';\n\n// Types pour les intercepteurs\nexport interface RequestConfig {\n  url: string;\n  method?: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH';\n  headers?: Record<string, string>;\n  body?: any;\n  params?: Record<string, any>;\n}\n\nexport interface ApiResponse<T = any> {\n  data: T | undefined;\n  error: Error | undefined;\n  status: number;\n}\n\n// Intercepteur principal pour les requêtes API\nexport class ApiInterceptor {\n  private static baseURL = import.meta.env.VITE_API_BASE_URL || '/api';\n\n  // Ajouter les headers d'authentification\n  private static async getAuthHeaders(): Promise<Record<string, string>> {\n    const { data: { session } } = await supabase.auth.getSession();\n    \n    if (session?.access_token) {\n      return {\n        'Authorization': `Bearer ${session.access_token}`,\n      };\n    }\n    \n    return {};\n  }\n\n  // Construire l'URL complète\n  private static buildUrl(endpoint: string, params?: Record<string, any>): string {\n    const url = endpoint.startsWith('http') \n      ? endpoint \n      : `${this.baseURL}${endpoint}`;\n\n    if (params) {\n      const searchParams = new URLSearchParams();\n      Object.entries(params).forEach(([key, value]) => {\n        if (value !== undefined && value !== null) {\n          searchParams.append(key, String(value));\n        }\n      });\n      return `${url}?${searchParams.toString()}`;\n    }\n\n    return url;\n  }\n\n  // Logger pour le développement\n  private static log(message: string, data?: any): void {\n    if (import.meta.env.DEV) {\n    }\n  }\n\n  // Gestion des erreurs\n  private static handleError(error: any): Error {\n    if (error.response) {\n      // Erreur de réponse du serveur\n      return new Error(error.response.data?.message || error.response.statusText);\n    } else if (error.request) {\n      // Pas de réponse du serveur\n      return new Error('Aucune réponse du serveur');\n    } else {\n      // Erreur de configuration\n      return new Error(error.message || 'Erreur inconnue');\n    }\n  }\n\n  // Méthode principale de requête\n  static async request<T = any>(config: RequestConfig): Promise<ApiResponse<T>> {\n    try {\n      this.log('Request', config);\n\n      const authHeaders = await this.getAuthHeaders();\n      const url = this.buildUrl(config.url, config.params);\n\n      const response = await fetch(url, {\n        method: config.method || 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          ...authHeaders,\n          ...config.headers,\n        },\n        body: config.body ? JSON.stringify(config.body) : undefined,\n      });\n\n      const data = await response.json();\n\n      this.log('Response', { status: response.status, data });\n\n      if (!response.ok) {\n        throw new Error(data.message || response.statusText);\n      }\n\n      return {\n        data,\n        error: null,\n        status: response.status,\n      };\n    } catch (error: any) {\n      this.log('Error', error);\n      \n      return {\n        data: null,\n        error: this.handleError(error),\n        status: error.response?.status || 500,\n      };\n    }\n  }\n\n  // Méthodes raccourcies\n  static get<T = any>(url: string, params?: Record<string, any>) {\n    return this.request<T>({ url, method: 'GET', params });\n  }\n\n  static post<T = any>(url: string, body?: any, params?: Record<string, any>) {\n    return this.request<T>({ url, method: 'POST', body, params });\n  }\n\n  static put<T = any>(url: string, body?: any, params?: Record<string, any>) {\n    return this.request<T>({ url, method: 'PUT', body, params });\n  }\n\n  static delete<T = any>(url: string, params?: Record<string, any>) {\n    return this.request<T>({ url, method: 'DELETE', params });\n  }\n\n  static patch<T = any>(url: string, body?: any, params?: Record<string, any>) {\n    return this.request<T>({ url, method: 'PATCH', body, params });\n  }\n}\n\nexport default ApiInterceptor;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}