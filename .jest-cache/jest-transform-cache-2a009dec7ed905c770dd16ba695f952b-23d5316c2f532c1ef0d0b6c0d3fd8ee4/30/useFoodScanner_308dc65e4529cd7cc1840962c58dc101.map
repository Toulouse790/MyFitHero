{"version":3,"names":["cov_qjdf0nkh7","actualCoverage","s","react_1","require","foodVisionService_1","supabase_1","useFoodScanner","options","b","f","isScanning","setIsScanning","useState","scanResult","setScanResult","error","setError","scanHistory","setScanHistory","isLoading","setIsLoading","abortControllerRef","useRef","visionProvider","nutritionProvider","weight_grams","saveToHistory","scanFood","useCallback","image","current","abort","AbortController","type","startsWith","Error","size","base64Image","convertFileToBase64","result","FoodVisionService","analyzeFood","name","foodName","calories","protein","carbs","fat","fiber","sugar","sodium","confidence","portion_size","usda_id","analysis_id","generateAnalysisId","saveToScanHistory","prev","slice","scanError","message","code","console","cancelScan","resetScan","loadScanHistory","data","user","supabase","auth","getUser","from","select","eq","id","order","ascending","limit","history","map","item","food_name","removeScanFromHistory","analysisId","delete","filter","repeatScan","hasResult","hasError","canScan","exports","useCameraCapture","isCapturing","setIsCapturing","hasPermission","setHasPermission","videoRef","canvasRef","streamRef","isMobile","test","navigator","userAgent","hasCamera","mediaDevices","getUserMedia","requestCameraPermission","stream","video","facingMode","width","ideal","height","getTracks","forEach","track","stop","startCapture","srcObject","play","capturePhoto","Promise","resolve","canvas","context","getContext","videoWidth","videoHeight","drawImage","toBlob","blob","file","File","Date","now","stopCapture","cleanup","reject","reader","FileReader","readAsDataURL","onload","base64","split","onerror","insert","user_id","created_at","toISOString","warn","Math","random","toString","substring","default"],"sources":["/workspaces/MyFitHero/src/features/nutrition/hooks/useFoodScanner.ts"],"sourcesContent":["import { useState, useCallback, useRef } from 'react';\nimport { FoodVisionService } from '@/features/nutrition/services/foodVisionService';\nimport { USDANutritionService } from '@/features/nutrition/services/usdaService';\nimport { supabase } from '@/lib/supabase';\n\n// Types pour le hook de scan photo\nexport interface FoodScanResult {\n  name: string;\n  calories: number;\n  protein: number;\n  carbs: number;\n  fat: number;\n  fiber?: number;\n  sugar?: number;\n  sodium?: number;\n  confidence: number;\n  alternatives?: FoodItem[];\n  portion_size?: string;\n  weight_grams?: number;\n  usda_id?: string;\n  analysis_id?: string;\n}\n\nexport interface FoodItem {\n  name: string;\n  calories: number;\n  protein: number;\n  carbs: number;\n  fat: number;\n  usda_id?: string;\n}\n\nexport interface ScanError {\n  message: string;\n  type: 'network' | 'analysis' | 'upload' | 'camera' | 'permission';\n  code?: string;\n}\n\nexport interface ScanOptions {\n  visionProvider?: 'openai' | 'google';\n  nutritionProvider?: 'usda' | 'nutritionix';\n  portion?: string;\n  weight_grams?: number;\n  saveToHistory?: boolean;\n}\n\n/**\n * Hook principal pour la fonctionnalité de scan photo alimentaire\n */\nexport const useFoodScanner = (options: ScanOptions = {}) => {\n  // États\n  const [isScanning, setIsScanning] = useState(false);\n  const [scanResult, setScanResult] = useState<FoodScanResult | null>(null);\n  const [error, setError] = useState<ScanError | null>(null);\n  const [scanHistory, setScanHistory] = useState<FoodScanResult[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  // Refs\n  const abortControllerRef = useRef<AbortController | null>(null);\n\n  // Options par défaut\n  const {\n    visionProvider = 'openai',\n    nutritionProvider = 'usda',\n    weight_grams = 100,\n    saveToHistory = true\n  } = options;\n\n  /**\n   * Scanner une image alimentaire\n   */\n  const scanFood = useCallback(async (image: File | string): Promise<FoodScanResult | null> => {\n    // Annuler le scan précédent si en cours\n    if (abortControllerRef.current) {\n      abortControllerRef.current.abort();\n    }\n\n    abortControllerRef.current = new AbortController();\n    setIsScanning(true);\n    setError(null);\n\n    try {\n      // Validation de l'input\n      if (typeof image !== 'string' && !image.type.startsWith('image/')) {\n        throw new Error('Format de fichier invalide. Veuillez sélectionner une image.');\n      }\n\n      if (typeof image !== 'string' && image.size > 10 * 1024 * 1024) { // 10MB max\n        throw new Error('Image trop volumineuse. Maximum 10MB.');\n      }\n\n      let base64Image: string;\n\n      // Convertir en base64 si nécessaire\n      if (typeof image === 'string') {\n        base64Image = image;\n      } else {\n        base64Image = await convertFileToBase64(image);\n      }\n\n      // Analyser avec le service IA\n      const result = await FoodVisionService.analyzeFood(base64Image, {\n        visionProvider,\n        nutritionProvider,\n        weight_grams\n      });\n\n      // Créer l'objet résultat\n      const scanResult: FoodScanResult = {\n        name: result.foodName,\n        calories: result.calories,\n        protein: result.protein,\n        carbs: result.carbs,\n        fat: result.fat,\n        fiber: result.fiber,\n        sugar: result.sugar,\n        sodium: result.sodium,\n        confidence: result.confidence,\n        portion_size: result.portion_size,\n        weight_grams: result.weight_grams,\n        usda_id: result.usda_id,\n        analysis_id: generateAnalysisId()\n      };\n\n      setScanResult(scanResult);\n\n      // Sauvegarder dans l'historique si demandé\n      if (saveToHistory) {\n        await saveToScanHistory(scanResult);\n        setScanHistory(prev => [scanResult, ...prev.slice(0, 9)]); // Garder les 10 derniers\n      }\n\n      return scanResult;\n\n    } catch (error) {\n      const scanError: ScanError = {\n        message: error instanceof Error ? error.message : 'Erreur lors du scan',\n        type: 'analysis',\n        code: error instanceof Error ? error.name : 'UNKNOWN_ERROR'\n      };\n      \n      setError(scanError);\n      console.error('Food scan error:', error);\n      return null;\n\n    } finally {\n      setIsScanning(false);\n      abortControllerRef.current = null;\n    }\n  }, [visionProvider, nutritionProvider, weight_grams, saveToHistory]);\n\n  /**\n   * Annuler le scan en cours\n   */\n  const cancelScan = useCallback(() => {\n    if (abortControllerRef.current) {\n      abortControllerRef.current.abort();\n      abortControllerRef.current = null;\n    }\n    setIsScanning(false);\n    setError(null);\n  }, []);\n\n  /**\n   * Reset du scanner\n   */\n  const resetScan = useCallback(() => {\n    setScanResult(null);\n    setError(null);\n  }, []);\n\n  /**\n   * Charger l'historique des scans\n   */\n  const loadScanHistory = useCallback(async () => {\n    setIsLoading(true);\n    try {\n      const { data: { user } } = await supabase.auth.getUser();\n      if (!user) return;\n\n      const { data, error } = await supabase\n        .from('food_scan_history')\n        .select('*')\n        .eq('user_id', user.id)\n        .order('created_at', { ascending: false })\n        .limit(20);\n\n      if (error) throw error;\n\n      const history: FoodScanResult[] = data.map(item => ({\n        name: item.food_name,\n        calories: item.calories,\n        protein: item.protein,\n        carbs: item.carbs,\n        fat: item.fat,\n        fiber: item.fiber,\n        sugar: item.sugar,\n        sodium: item.sodium,\n        confidence: item.confidence,\n        portion_size: item.portion_size,\n        weight_grams: item.weight_grams,\n        usda_id: item.usda_id,\n        analysis_id: item.analysis_id\n      }));\n\n      setScanHistory(history);\n\n    } catch (error) {\n      console.error('Failed to load scan history:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  /**\n   * Supprimer un élément de l'historique\n   */\n  const removeScanFromHistory = useCallback(async (analysisId: string) => {\n    try {\n      const { data: { user } } = await supabase.auth.getUser();\n      if (!user) return;\n\n      const { error } = await supabase\n        .from('food_scan_history')\n        .delete()\n        .eq('user_id', user.id)\n        .eq('analysis_id', analysisId);\n\n      if (error) throw error;\n\n      setScanHistory(prev => prev.filter(item => item.analysis_id !== analysisId));\n\n    } catch (error) {\n      console.error('Failed to remove scan from history:', error);\n    }\n  }, []);\n\n  /**\n   * Répéter un scan depuis l'historique\n   */\n  const repeatScan = useCallback((scanResult: FoodScanResult) => {\n    setScanResult(scanResult);\n    setError(null);\n  }, []);\n\n  return {\n    // États\n    isScanning,\n    scanResult,\n    error,\n    scanHistory,\n    isLoading,\n\n    // Actions\n    scanFood,\n    cancelScan,\n    resetScan,\n    loadScanHistory,\n    removeScanFromHistory,\n    repeatScan,\n\n    // Utilitaires\n    hasResult: !!scanResult,\n    hasError: !!error,\n    canScan: !isScanning\n  };\n};\n\n/**\n * Hook pour la gestion de la caméra\n */\nexport const useCameraCapture = () => {\n  const [isCapturing, setIsCapturing] = useState(false);\n  const [hasPermission, setHasPermission] = useState<boolean | null>(null);\n  const [error, setError] = useState<ScanError | null>(null);\n\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const streamRef = useRef<MediaStream | null>(null);\n\n  // Détection des capacités\n  const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\n  const hasCamera = navigator.mediaDevices && navigator.mediaDevices.getUserMedia;\n\n  /**\n   * Demander les permissions caméra\n   */\n  const requestCameraPermission = useCallback(async () => {\n    if (!hasCamera) {\n      setError({\n        message: 'Caméra non disponible sur cet appareil',\n        type: 'camera'\n      });\n      return false;\n    }\n\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        video: {\n          facingMode: isMobile ? 'environment' : 'user',\n          width: { ideal: 1280 },\n          height: { ideal: 720 }\n        }\n      });\n\n      // Arrêter immédiatement pour juste tester les permissions\n      stream.getTracks().forEach(track => track.stop());\n      setHasPermission(true);\n      setError(null);\n      return true;\n\n    } catch (error) {\n      setHasPermission(false);\n      setError({\n        message: 'Permission caméra refusée',\n        type: 'permission'\n      });\n      return false;\n    }\n  }, [hasCamera, isMobile]);\n\n  /**\n   * Démarrer la capture caméra\n   */\n  const startCapture = useCallback(async () => {\n    if (!hasCamera || hasPermission === false) return false;\n\n    try {\n      setIsCapturing(true);\n      setError(null);\n\n      const stream = await navigator.mediaDevices.getUserMedia({\n        video: {\n          facingMode: isMobile ? 'environment' : 'user',\n          width: { ideal: 1280 },\n          height: { ideal: 720 }\n        }\n      });\n\n      streamRef.current = stream;\n\n      if (videoRef.current) {\n        videoRef.current.srcObject = stream;\n        await videoRef.current.play();\n      }\n\n      setHasPermission(true);\n      return true;\n\n    } catch (error) {\n      setError({\n        message: 'Impossible d\\'accéder à la caméra',\n        type: 'camera'\n      });\n      setIsCapturing(false);\n      return false;\n    }\n  }, [hasCamera, hasPermission, isMobile]);\n\n  /**\n   * Capturer une photo\n   */\n  const capturePhoto = useCallback((): Promise<File | null> => {\n    return new Promise((resolve) => {\n      if (!videoRef.current || !canvasRef.current) {\n        resolve(null);\n        return;\n      }\n\n      const canvas = canvasRef.current;\n      const video = videoRef.current;\n      const context = canvas.getContext('2d');\n\n      if (!context) {\n        resolve(null);\n        return;\n      }\n\n      // Configurer le canvas\n      canvas.width = video.videoWidth;\n      canvas.height = video.videoHeight;\n\n      // Dessiner l'image\n      context.drawImage(video, 0, 0);\n\n      // Convertir en blob puis en File\n      canvas.toBlob((blob) => {\n        if (blob) {\n          const file = new File([blob], `food-scan-${Date.now()}.jpg`, {\n            type: 'image/jpeg'\n          });\n          resolve(file);\n        } else {\n          resolve(null);\n        }\n      }, 'image/jpeg', 0.85);\n    });\n  }, []);\n\n  /**\n   * Arrêter la capture\n   */\n  const stopCapture = useCallback(() => {\n    if (streamRef.current) {\n      streamRef.current.getTracks().forEach(track => track.stop());\n      streamRef.current = null;\n    }\n\n    if (videoRef.current) {\n      videoRef.current.srcObject = null;\n    }\n\n    setIsCapturing(false);\n  }, []);\n\n  // Nettoyage automatique\n  const cleanup = useCallback(() => {\n    stopCapture();\n  }, [stopCapture]);\n\n  return {\n    // États\n    isCapturing,\n    hasPermission,\n    error,\n    hasCamera,\n    isMobile,\n\n    // Refs\n    videoRef,\n    canvasRef,\n\n    // Actions\n    requestCameraPermission,\n    startCapture,\n    capturePhoto,\n    stopCapture,\n    cleanup\n  };\n};\n\n// Fonctions utilitaires\nconst convertFileToBase64 = (file: File): Promise<string> => {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = () => {\n      const result = reader.result as string;\n      const base64 = result.split(',')[1];\n      resolve(base64);\n    };\n    reader.onerror = error => reject(error);\n  });\n};\n\nconst saveToScanHistory = async (scanResult: FoodScanResult): Promise<void> => {\n  try {\n    const { data: { user } } = await supabase.auth.getUser();\n    if (!user) return;\n\n    await supabase.from('food_scan_history').insert([{\n      user_id: user.id,\n      analysis_id: scanResult.analysis_id,\n      food_name: scanResult.name,\n      calories: scanResult.calories,\n      protein: scanResult.protein,\n      carbs: scanResult.carbs,\n      fat: scanResult.fat,\n      fiber: scanResult.fiber,\n      sugar: scanResult.sugar,\n      sodium: scanResult.sodium,\n      confidence: scanResult.confidence,\n      portion_size: scanResult.portion_size,\n      weight_grams: scanResult.weight_grams,\n      usda_id: scanResult.usda_id,\n      created_at: new Date().toISOString()\n    }]);\n  } catch (error) {\n    console.warn('Failed to save scan to history:', error);\n  }\n};\n\nconst generateAnalysisId = (): string => {\n  return `scan_${Date.now()}_${Math.random().toString(36).substring(2, 15)}`;\n};\n\nexport default useFoodScanner;"],"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","ignoreList":[]}