f6324626e04f5e28023ccacf7e8814bc
"use strict";

/* istanbul ignore next */
function cov_qjdf0nkh7() {
  var path = "/workspaces/MyFitHero/src/features/nutrition/hooks/useFoodScanner.ts";
  var hash = "56ab1634219b575920af546185bf4d8ae5cf5929";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/MyFitHero/src/features/nutrition/hooks/useFoodScanner.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 59
        }
      },
      "2": {
        start: {
          line: 4,
          column: 16
        },
        end: {
          line: 4,
          column: 32
        }
      },
      "3": {
        start: {
          line: 5,
          column: 28
        },
        end: {
          line: 5,
          column: 86
        }
      },
      "4": {
        start: {
          line: 6,
          column: 19
        },
        end: {
          line: 6,
          column: 44
        }
      },
      "5": {
        start: {
          line: 10,
          column: 23
        },
        end: {
          line: 199,
          column: 1
        }
      },
      "6": {
        start: {
          line: 12,
          column: 40
        },
        end: {
          line: 12,
          column: 68
        }
      },
      "7": {
        start: {
          line: 13,
          column: 40
        },
        end: {
          line: 13,
          column: 67
        }
      },
      "8": {
        start: {
          line: 14,
          column: 30
        },
        end: {
          line: 14,
          column: 57
        }
      },
      "9": {
        start: {
          line: 15,
          column: 42
        },
        end: {
          line: 15,
          column: 67
        }
      },
      "10": {
        start: {
          line: 16,
          column: 38
        },
        end: {
          line: 16,
          column: 66
        }
      },
      "11": {
        start: {
          line: 18,
          column: 31
        },
        end: {
          line: 18,
          column: 56
        }
      },
      "12": {
        start: {
          line: 20,
          column: 112
        },
        end: {
          line: 20,
          column: 119
        }
      },
      "13": {
        start: {
          line: 24,
          column: 21
        },
        end: {
          line: 92,
          column: 72
        }
      },
      "14": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 28,
          column: 9
        }
      },
      "15": {
        start: {
          line: 27,
          column: 12
        },
        end: {
          line: 27,
          column: 47
        }
      },
      "16": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 29,
          column: 59
        }
      },
      "17": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 30,
          column: 28
        }
      },
      "18": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 31,
          column: 23
        }
      },
      "19": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 91,
          column: 9
        }
      },
      "20": {
        start: {
          line: 34,
          column: 12
        },
        end: {
          line: 36,
          column: 13
        }
      },
      "21": {
        start: {
          line: 35,
          column: 16
        },
        end: {
          line: 35,
          column: 96
        }
      },
      "22": {
        start: {
          line: 37,
          column: 12
        },
        end: {
          line: 39,
          column: 13
        }
      },
      "23": {
        start: {
          line: 38,
          column: 16
        },
        end: {
          line: 38,
          column: 73
        }
      },
      "24": {
        start: {
          line: 42,
          column: 12
        },
        end: {
          line: 47,
          column: 13
        }
      },
      "25": {
        start: {
          line: 43,
          column: 16
        },
        end: {
          line: 43,
          column: 36
        }
      },
      "26": {
        start: {
          line: 46,
          column: 16
        },
        end: {
          line: 46,
          column: 63
        }
      },
      "27": {
        start: {
          line: 49,
          column: 27
        },
        end: {
          line: 53,
          column: 14
        }
      },
      "28": {
        start: {
          line: 55,
          column: 31
        },
        end: {
          line: 69,
          column: 13
        }
      },
      "29": {
        start: {
          line: 70,
          column: 12
        },
        end: {
          line: 70,
          column: 38
        }
      },
      "30": {
        start: {
          line: 72,
          column: 12
        },
        end: {
          line: 75,
          column: 13
        }
      },
      "31": {
        start: {
          line: 73,
          column: 16
        },
        end: {
          line: 73,
          column: 52
        }
      },
      "32": {
        start: {
          line: 74,
          column: 16
        },
        end: {
          line: 74,
          column: 74
        }
      },
      "33": {
        start: {
          line: 74,
          column: 39
        },
        end: {
          line: 74,
          column: 72
        }
      },
      "34": {
        start: {
          line: 76,
          column: 12
        },
        end: {
          line: 76,
          column: 30
        }
      },
      "35": {
        start: {
          line: 79,
          column: 30
        },
        end: {
          line: 83,
          column: 13
        }
      },
      "36": {
        start: {
          line: 84,
          column: 12
        },
        end: {
          line: 84,
          column: 32
        }
      },
      "37": {
        start: {
          line: 85,
          column: 12
        },
        end: {
          line: 85,
          column: 53
        }
      },
      "38": {
        start: {
          line: 86,
          column: 12
        },
        end: {
          line: 86,
          column: 24
        }
      },
      "39": {
        start: {
          line: 89,
          column: 12
        },
        end: {
          line: 89,
          column: 33
        }
      },
      "40": {
        start: {
          line: 90,
          column: 12
        },
        end: {
          line: 90,
          column: 46
        }
      },
      "41": {
        start: {
          line: 96,
          column: 23
        },
        end: {
          line: 103,
          column: 10
        }
      },
      "42": {
        start: {
          line: 97,
          column: 8
        },
        end: {
          line: 100,
          column: 9
        }
      },
      "43": {
        start: {
          line: 98,
          column: 12
        },
        end: {
          line: 98,
          column: 47
        }
      },
      "44": {
        start: {
          line: 99,
          column: 12
        },
        end: {
          line: 99,
          column: 46
        }
      },
      "45": {
        start: {
          line: 101,
          column: 8
        },
        end: {
          line: 101,
          column: 29
        }
      },
      "46": {
        start: {
          line: 102,
          column: 8
        },
        end: {
          line: 102,
          column: 23
        }
      },
      "47": {
        start: {
          line: 107,
          column: 22
        },
        end: {
          line: 110,
          column: 10
        }
      },
      "48": {
        start: {
          line: 108,
          column: 8
        },
        end: {
          line: 108,
          column: 28
        }
      },
      "49": {
        start: {
          line: 109,
          column: 8
        },
        end: {
          line: 109,
          column: 23
        }
      },
      "50": {
        start: {
          line: 114,
          column: 28
        },
        end: {
          line: 151,
          column: 10
        }
      },
      "51": {
        start: {
          line: 115,
          column: 8
        },
        end: {
          line: 115,
          column: 27
        }
      },
      "52": {
        start: {
          line: 116,
          column: 8
        },
        end: {
          line: 150,
          column: 9
        }
      },
      "53": {
        start: {
          line: 117,
          column: 39
        },
        end: {
          line: 117,
          column: 79
        }
      },
      "54": {
        start: {
          line: 118,
          column: 12
        },
        end: {
          line: 119,
          column: 23
        }
      },
      "55": {
        start: {
          line: 119,
          column: 16
        },
        end: {
          line: 119,
          column: 23
        }
      },
      "56": {
        start: {
          line: 120,
          column: 36
        },
        end: {
          line: 125,
          column: 26
        }
      },
      "57": {
        start: {
          line: 126,
          column: 12
        },
        end: {
          line: 127,
          column: 28
        }
      },
      "58": {
        start: {
          line: 127,
          column: 16
        },
        end: {
          line: 127,
          column: 28
        }
      },
      "59": {
        start: {
          line: 128,
          column: 28
        },
        end: {
          line: 142,
          column: 15
        }
      },
      "60": {
        start: {
          line: 128,
          column: 46
        },
        end: {
          line: 142,
          column: 13
        }
      },
      "61": {
        start: {
          line: 143,
          column: 12
        },
        end: {
          line: 143,
          column: 36
        }
      },
      "62": {
        start: {
          line: 146,
          column: 12
        },
        end: {
          line: 146,
          column: 65
        }
      },
      "63": {
        start: {
          line: 149,
          column: 12
        },
        end: {
          line: 149,
          column: 32
        }
      },
      "64": {
        start: {
          line: 155,
          column: 34
        },
        end: {
          line: 172,
          column: 10
        }
      },
      "65": {
        start: {
          line: 156,
          column: 8
        },
        end: {
          line: 171,
          column: 9
        }
      },
      "66": {
        start: {
          line: 157,
          column: 39
        },
        end: {
          line: 157,
          column: 79
        }
      },
      "67": {
        start: {
          line: 158,
          column: 12
        },
        end: {
          line: 159,
          column: 23
        }
      },
      "68": {
        start: {
          line: 159,
          column: 16
        },
        end: {
          line: 159,
          column: 23
        }
      },
      "69": {
        start: {
          line: 160,
          column: 30
        },
        end: {
          line: 164,
          column: 46
        }
      },
      "70": {
        start: {
          line: 165,
          column: 12
        },
        end: {
          line: 166,
          column: 28
        }
      },
      "71": {
        start: {
          line: 166,
          column: 16
        },
        end: {
          line: 166,
          column: 28
        }
      },
      "72": {
        start: {
          line: 167,
          column: 12
        },
        end: {
          line: 167,
          column: 89
        }
      },
      "73": {
        start: {
          line: 167,
          column: 35
        },
        end: {
          line: 167,
          column: 87
        }
      },
      "74": {
        start: {
          line: 167,
          column: 55
        },
        end: {
          line: 167,
          column: 86
        }
      },
      "75": {
        start: {
          line: 170,
          column: 12
        },
        end: {
          line: 170,
          column: 72
        }
      },
      "76": {
        start: {
          line: 176,
          column: 23
        },
        end: {
          line: 179,
          column: 10
        }
      },
      "77": {
        start: {
          line: 177,
          column: 8
        },
        end: {
          line: 177,
          column: 34
        }
      },
      "78": {
        start: {
          line: 178,
          column: 8
        },
        end: {
          line: 178,
          column: 23
        }
      },
      "79": {
        start: {
          line: 180,
          column: 4
        },
        end: {
          line: 198,
          column: 6
        }
      },
      "80": {
        start: {
          line: 200,
          column: 0
        },
        end: {
          line: 200,
          column: 40
        }
      },
      "81": {
        start: {
          line: 204,
          column: 25
        },
        end: {
          line: 350,
          column: 1
        }
      },
      "82": {
        start: {
          line: 205,
          column: 42
        },
        end: {
          line: 205,
          column: 70
        }
      },
      "83": {
        start: {
          line: 206,
          column: 46
        },
        end: {
          line: 206,
          column: 73
        }
      },
      "84": {
        start: {
          line: 207,
          column: 30
        },
        end: {
          line: 207,
          column: 57
        }
      },
      "85": {
        start: {
          line: 208,
          column: 21
        },
        end: {
          line: 208,
          column: 46
        }
      },
      "86": {
        start: {
          line: 209,
          column: 22
        },
        end: {
          line: 209,
          column: 47
        }
      },
      "87": {
        start: {
          line: 210,
          column: 22
        },
        end: {
          line: 210,
          column: 47
        }
      },
      "88": {
        start: {
          line: 212,
          column: 21
        },
        end: {
          line: 212,
          column: 111
        }
      },
      "89": {
        start: {
          line: 213,
          column: 22
        },
        end: {
          line: 213,
          column: 83
        }
      },
      "90": {
        start: {
          line: 217,
          column: 36
        },
        end: {
          line: 247,
          column: 29
        }
      },
      "91": {
        start: {
          line: 218,
          column: 8
        },
        end: {
          line: 224,
          column: 9
        }
      },
      "92": {
        start: {
          line: 219,
          column: 12
        },
        end: {
          line: 222,
          column: 15
        }
      },
      "93": {
        start: {
          line: 223,
          column: 12
        },
        end: {
          line: 223,
          column: 25
        }
      },
      "94": {
        start: {
          line: 225,
          column: 8
        },
        end: {
          line: 246,
          column: 9
        }
      },
      "95": {
        start: {
          line: 226,
          column: 27
        },
        end: {
          line: 232,
          column: 14
        }
      },
      "96": {
        start: {
          line: 234,
          column: 12
        },
        end: {
          line: 234,
          column: 62
        }
      },
      "97": {
        start: {
          line: 234,
          column: 48
        },
        end: {
          line: 234,
          column: 60
        }
      },
      "98": {
        start: {
          line: 235,
          column: 12
        },
        end: {
          line: 235,
          column: 35
        }
      },
      "99": {
        start: {
          line: 236,
          column: 12
        },
        end: {
          line: 236,
          column: 27
        }
      },
      "100": {
        start: {
          line: 237,
          column: 12
        },
        end: {
          line: 237,
          column: 24
        }
      },
      "101": {
        start: {
          line: 240,
          column: 12
        },
        end: {
          line: 240,
          column: 36
        }
      },
      "102": {
        start: {
          line: 241,
          column: 12
        },
        end: {
          line: 244,
          column: 15
        }
      },
      "103": {
        start: {
          line: 245,
          column: 12
        },
        end: {
          line: 245,
          column: 25
        }
      },
      "104": {
        start: {
          line: 251,
          column: 25
        },
        end: {
          line: 280,
          column: 44
        }
      },
      "105": {
        start: {
          line: 252,
          column: 8
        },
        end: {
          line: 253,
          column: 25
        }
      },
      "106": {
        start: {
          line: 253,
          column: 12
        },
        end: {
          line: 253,
          column: 25
        }
      },
      "107": {
        start: {
          line: 254,
          column: 8
        },
        end: {
          line: 279,
          column: 9
        }
      },
      "108": {
        start: {
          line: 255,
          column: 12
        },
        end: {
          line: 255,
          column: 33
        }
      },
      "109": {
        start: {
          line: 256,
          column: 12
        },
        end: {
          line: 256,
          column: 27
        }
      },
      "110": {
        start: {
          line: 257,
          column: 27
        },
        end: {
          line: 263,
          column: 14
        }
      },
      "111": {
        start: {
          line: 264,
          column: 12
        },
        end: {
          line: 264,
          column: 39
        }
      },
      "112": {
        start: {
          line: 265,
          column: 12
        },
        end: {
          line: 268,
          column: 13
        }
      },
      "113": {
        start: {
          line: 266,
          column: 16
        },
        end: {
          line: 266,
          column: 52
        }
      },
      "114": {
        start: {
          line: 267,
          column: 16
        },
        end: {
          line: 267,
          column: 46
        }
      },
      "115": {
        start: {
          line: 269,
          column: 12
        },
        end: {
          line: 269,
          column: 35
        }
      },
      "116": {
        start: {
          line: 270,
          column: 12
        },
        end: {
          line: 270,
          column: 24
        }
      },
      "117": {
        start: {
          line: 273,
          column: 12
        },
        end: {
          line: 276,
          column: 15
        }
      },
      "118": {
        start: {
          line: 277,
          column: 12
        },
        end: {
          line: 277,
          column: 34
        }
      },
      "119": {
        start: {
          line: 278,
          column: 12
        },
        end: {
          line: 278,
          column: 25
        }
      },
      "120": {
        start: {
          line: 284,
          column: 25
        },
        end: {
          line: 315,
          column: 10
        }
      },
      "121": {
        start: {
          line: 285,
          column: 8
        },
        end: {
          line: 314,
          column: 11
        }
      },
      "122": {
        start: {
          line: 286,
          column: 12
        },
        end: {
          line: 289,
          column: 13
        }
      },
      "123": {
        start: {
          line: 287,
          column: 16
        },
        end: {
          line: 287,
          column: 30
        }
      },
      "124": {
        start: {
          line: 288,
          column: 16
        },
        end: {
          line: 288,
          column: 23
        }
      },
      "125": {
        start: {
          line: 290,
          column: 27
        },
        end: {
          line: 290,
          column: 44
        }
      },
      "126": {
        start: {
          line: 291,
          column: 26
        },
        end: {
          line: 291,
          column: 42
        }
      },
      "127": {
        start: {
          line: 292,
          column: 28
        },
        end: {
          line: 292,
          column: 51
        }
      },
      "128": {
        start: {
          line: 293,
          column: 12
        },
        end: {
          line: 296,
          column: 13
        }
      },
      "129": {
        start: {
          line: 294,
          column: 16
        },
        end: {
          line: 294,
          column: 30
        }
      },
      "130": {
        start: {
          line: 295,
          column: 16
        },
        end: {
          line: 295,
          column: 23
        }
      },
      "131": {
        start: {
          line: 298,
          column: 12
        },
        end: {
          line: 298,
          column: 44
        }
      },
      "132": {
        start: {
          line: 299,
          column: 12
        },
        end: {
          line: 299,
          column: 46
        }
      },
      "133": {
        start: {
          line: 301,
          column: 12
        },
        end: {
          line: 301,
          column: 43
        }
      },
      "134": {
        start: {
          line: 303,
          column: 12
        },
        end: {
          line: 313,
          column: 35
        }
      },
      "135": {
        start: {
          line: 304,
          column: 16
        },
        end: {
          line: 312,
          column: 17
        }
      },
      "136": {
        start: {
          line: 305,
          column: 33
        },
        end: {
          line: 307,
          column: 22
        }
      },
      "137": {
        start: {
          line: 308,
          column: 20
        },
        end: {
          line: 308,
          column: 34
        }
      },
      "138": {
        start: {
          line: 311,
          column: 20
        },
        end: {
          line: 311,
          column: 34
        }
      },
      "139": {
        start: {
          line: 319,
          column: 24
        },
        end: {
          line: 328,
          column: 10
        }
      },
      "140": {
        start: {
          line: 320,
          column: 8
        },
        end: {
          line: 323,
          column: 9
        }
      },
      "141": {
        start: {
          line: 321,
          column: 12
        },
        end: {
          line: 321,
          column: 73
        }
      },
      "142": {
        start: {
          line: 321,
          column: 59
        },
        end: {
          line: 321,
          column: 71
        }
      },
      "143": {
        start: {
          line: 322,
          column: 12
        },
        end: {
          line: 322,
          column: 37
        }
      },
      "144": {
        start: {
          line: 324,
          column: 8
        },
        end: {
          line: 326,
          column: 9
        }
      },
      "145": {
        start: {
          line: 325,
          column: 12
        },
        end: {
          line: 325,
          column: 46
        }
      },
      "146": {
        start: {
          line: 327,
          column: 8
        },
        end: {
          line: 327,
          column: 30
        }
      },
      "147": {
        start: {
          line: 330,
          column: 20
        },
        end: {
          line: 332,
          column: 21
        }
      },
      "148": {
        start: {
          line: 331,
          column: 8
        },
        end: {
          line: 331,
          column: 22
        }
      },
      "149": {
        start: {
          line: 333,
          column: 4
        },
        end: {
          line: 349,
          column: 6
        }
      },
      "150": {
        start: {
          line: 351,
          column: 0
        },
        end: {
          line: 351,
          column: 44
        }
      },
      "151": {
        start: {
          line: 353,
          column: 28
        },
        end: {
          line: 364,
          column: 1
        }
      },
      "152": {
        start: {
          line: 354,
          column: 4
        },
        end: {
          line: 363,
          column: 7
        }
      },
      "153": {
        start: {
          line: 355,
          column: 23
        },
        end: {
          line: 355,
          column: 39
        }
      },
      "154": {
        start: {
          line: 356,
          column: 8
        },
        end: {
          line: 356,
          column: 35
        }
      },
      "155": {
        start: {
          line: 357,
          column: 8
        },
        end: {
          line: 361,
          column: 10
        }
      },
      "156": {
        start: {
          line: 358,
          column: 27
        },
        end: {
          line: 358,
          column: 40
        }
      },
      "157": {
        start: {
          line: 359,
          column: 27
        },
        end: {
          line: 359,
          column: 47
        }
      },
      "158": {
        start: {
          line: 360,
          column: 12
        },
        end: {
          line: 360,
          column: 28
        }
      },
      "159": {
        start: {
          line: 362,
          column: 8
        },
        end: {
          line: 362,
          column: 48
        }
      },
      "160": {
        start: {
          line: 362,
          column: 34
        },
        end: {
          line: 362,
          column: 47
        }
      },
      "161": {
        start: {
          line: 365,
          column: 26
        },
        end: {
          line: 391,
          column: 1
        }
      },
      "162": {
        start: {
          line: 366,
          column: 4
        },
        end: {
          line: 390,
          column: 5
        }
      },
      "163": {
        start: {
          line: 367,
          column: 35
        },
        end: {
          line: 367,
          column: 75
        }
      },
      "164": {
        start: {
          line: 368,
          column: 8
        },
        end: {
          line: 369,
          column: 19
        }
      },
      "165": {
        start: {
          line: 369,
          column: 12
        },
        end: {
          line: 369,
          column: 19
        }
      },
      "166": {
        start: {
          line: 370,
          column: 8
        },
        end: {
          line: 386,
          column: 16
        }
      },
      "167": {
        start: {
          line: 389,
          column: 8
        },
        end: {
          line: 389,
          column: 63
        }
      },
      "168": {
        start: {
          line: 392,
          column: 27
        },
        end: {
          line: 394,
          column: 1
        }
      },
      "169": {
        start: {
          line: 393,
          column: 4
        },
        end: {
          line: 393,
          column: 79
        }
      },
      "170": {
        start: {
          line: 395,
          column: 0
        },
        end: {
          line: 395,
          column: 41
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 10,
            column: 23
          },
          end: {
            line: 10,
            column: 24
          }
        },
        loc: {
          start: {
            line: 10,
            column: 41
          },
          end: {
            line: 199,
            column: 1
          }
        },
        line: 10
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 24,
            column: 46
          },
          end: {
            line: 24,
            column: 47
          }
        },
        loc: {
          start: {
            line: 24,
            column: 63
          },
          end: {
            line: 92,
            column: 5
          }
        },
        line: 24
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 74,
            column: 31
          },
          end: {
            line: 74,
            column: 32
          }
        },
        loc: {
          start: {
            line: 74,
            column: 39
          },
          end: {
            line: 74,
            column: 72
          }
        },
        line: 74
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 96,
            column: 48
          },
          end: {
            line: 96,
            column: 49
          }
        },
        loc: {
          start: {
            line: 96,
            column: 54
          },
          end: {
            line: 103,
            column: 5
          }
        },
        line: 96
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 107,
            column: 47
          },
          end: {
            line: 107,
            column: 48
          }
        },
        loc: {
          start: {
            line: 107,
            column: 53
          },
          end: {
            line: 110,
            column: 5
          }
        },
        line: 107
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 114,
            column: 53
          },
          end: {
            line: 114,
            column: 54
          }
        },
        loc: {
          start: {
            line: 114,
            column: 65
          },
          end: {
            line: 151,
            column: 5
          }
        },
        line: 114
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 128,
            column: 37
          },
          end: {
            line: 128,
            column: 38
          }
        },
        loc: {
          start: {
            line: 128,
            column: 46
          },
          end: {
            line: 142,
            column: 13
          }
        },
        line: 128
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 155,
            column: 59
          },
          end: {
            line: 155,
            column: 60
          }
        },
        loc: {
          start: {
            line: 155,
            column: 81
          },
          end: {
            line: 172,
            column: 5
          }
        },
        line: 155
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 167,
            column: 27
          },
          end: {
            line: 167,
            column: 28
          }
        },
        loc: {
          start: {
            line: 167,
            column: 35
          },
          end: {
            line: 167,
            column: 87
          }
        },
        line: 167
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 167,
            column: 47
          },
          end: {
            line: 167,
            column: 48
          }
        },
        loc: {
          start: {
            line: 167,
            column: 55
          },
          end: {
            line: 167,
            column: 86
          }
        },
        line: 167
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 176,
            column: 48
          },
          end: {
            line: 176,
            column: 49
          }
        },
        loc: {
          start: {
            line: 176,
            column: 64
          },
          end: {
            line: 179,
            column: 5
          }
        },
        line: 176
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 204,
            column: 25
          },
          end: {
            line: 204,
            column: 26
          }
        },
        loc: {
          start: {
            line: 204,
            column: 31
          },
          end: {
            line: 350,
            column: 1
          }
        },
        line: 204
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 217,
            column: 61
          },
          end: {
            line: 217,
            column: 62
          }
        },
        loc: {
          start: {
            line: 217,
            column: 73
          },
          end: {
            line: 247,
            column: 5
          }
        },
        line: 217
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 234,
            column: 39
          },
          end: {
            line: 234,
            column: 40
          }
        },
        loc: {
          start: {
            line: 234,
            column: 48
          },
          end: {
            line: 234,
            column: 60
          }
        },
        line: 234
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 251,
            column: 50
          },
          end: {
            line: 251,
            column: 51
          }
        },
        loc: {
          start: {
            line: 251,
            column: 62
          },
          end: {
            line: 280,
            column: 5
          }
        },
        line: 251
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 284,
            column: 50
          },
          end: {
            line: 284,
            column: 51
          }
        },
        loc: {
          start: {
            line: 284,
            column: 56
          },
          end: {
            line: 315,
            column: 5
          }
        },
        line: 284
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 285,
            column: 27
          },
          end: {
            line: 285,
            column: 28
          }
        },
        loc: {
          start: {
            line: 285,
            column: 40
          },
          end: {
            line: 314,
            column: 9
          }
        },
        line: 285
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 303,
            column: 26
          },
          end: {
            line: 303,
            column: 27
          }
        },
        loc: {
          start: {
            line: 303,
            column: 36
          },
          end: {
            line: 313,
            column: 13
          }
        },
        line: 303
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 319,
            column: 49
          },
          end: {
            line: 319,
            column: 50
          }
        },
        loc: {
          start: {
            line: 319,
            column: 55
          },
          end: {
            line: 328,
            column: 5
          }
        },
        line: 319
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 321,
            column: 50
          },
          end: {
            line: 321,
            column: 51
          }
        },
        loc: {
          start: {
            line: 321,
            column: 59
          },
          end: {
            line: 321,
            column: 71
          }
        },
        line: 321
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 330,
            column: 45
          },
          end: {
            line: 330,
            column: 46
          }
        },
        loc: {
          start: {
            line: 330,
            column: 51
          },
          end: {
            line: 332,
            column: 5
          }
        },
        line: 330
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 353,
            column: 28
          },
          end: {
            line: 353,
            column: 29
          }
        },
        loc: {
          start: {
            line: 353,
            column: 38
          },
          end: {
            line: 364,
            column: 1
          }
        },
        line: 353
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 354,
            column: 23
          },
          end: {
            line: 354,
            column: 24
          }
        },
        loc: {
          start: {
            line: 354,
            column: 44
          },
          end: {
            line: 363,
            column: 5
          }
        },
        line: 354
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 357,
            column: 24
          },
          end: {
            line: 357,
            column: 25
          }
        },
        loc: {
          start: {
            line: 357,
            column: 30
          },
          end: {
            line: 361,
            column: 9
          }
        },
        line: 357
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 362,
            column: 25
          },
          end: {
            line: 362,
            column: 26
          }
        },
        loc: {
          start: {
            line: 362,
            column: 34
          },
          end: {
            line: 362,
            column: 47
          }
        },
        line: 362
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 365,
            column: 26
          },
          end: {
            line: 365,
            column: 27
          }
        },
        loc: {
          start: {
            line: 365,
            column: 48
          },
          end: {
            line: 391,
            column: 1
          }
        },
        line: 365
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 392,
            column: 27
          },
          end: {
            line: 392,
            column: 28
          }
        },
        loc: {
          start: {
            line: 392,
            column: 33
          },
          end: {
            line: 394,
            column: 1
          }
        },
        line: 392
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 10,
            column: 24
          },
          end: {
            line: 10,
            column: 36
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 10,
            column: 34
          },
          end: {
            line: 10,
            column: 36
          }
        }],
        line: 10
      },
      "1": {
        loc: {
          start: {
            line: 20,
            column: 12
          },
          end: {
            line: 20,
            column: 37
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 20,
            column: 29
          },
          end: {
            line: 20,
            column: 37
          }
        }],
        line: 20
      },
      "2": {
        loc: {
          start: {
            line: 20,
            column: 39
          },
          end: {
            line: 20,
            column: 65
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 20,
            column: 59
          },
          end: {
            line: 20,
            column: 65
          }
        }],
        line: 20
      },
      "3": {
        loc: {
          start: {
            line: 20,
            column: 67
          },
          end: {
            line: 20,
            column: 85
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 20,
            column: 82
          },
          end: {
            line: 20,
            column: 85
          }
        }],
        line: 20
      },
      "4": {
        loc: {
          start: {
            line: 20,
            column: 87
          },
          end: {
            line: 20,
            column: 107
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 20,
            column: 103
          },
          end: {
            line: 20,
            column: 107
          }
        }],
        line: 20
      },
      "5": {
        loc: {
          start: {
            line: 26,
            column: 8
          },
          end: {
            line: 28,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 26,
            column: 8
          },
          end: {
            line: 28,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 26
      },
      "6": {
        loc: {
          start: {
            line: 34,
            column: 12
          },
          end: {
            line: 36,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 34,
            column: 12
          },
          end: {
            line: 36,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 34
      },
      "7": {
        loc: {
          start: {
            line: 34,
            column: 16
          },
          end: {
            line: 34,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 34,
            column: 16
          },
          end: {
            line: 34,
            column: 41
          }
        }, {
          start: {
            line: 34,
            column: 45
          },
          end: {
            line: 34,
            column: 77
          }
        }],
        line: 34
      },
      "8": {
        loc: {
          start: {
            line: 37,
            column: 12
          },
          end: {
            line: 39,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 37,
            column: 12
          },
          end: {
            line: 39,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 37
      },
      "9": {
        loc: {
          start: {
            line: 37,
            column: 16
          },
          end: {
            line: 37,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 37,
            column: 16
          },
          end: {
            line: 37,
            column: 41
          }
        }, {
          start: {
            line: 37,
            column: 45
          },
          end: {
            line: 37,
            column: 74
          }
        }],
        line: 37
      },
      "10": {
        loc: {
          start: {
            line: 42,
            column: 12
          },
          end: {
            line: 47,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 42,
            column: 12
          },
          end: {
            line: 47,
            column: 13
          }
        }, {
          start: {
            line: 45,
            column: 17
          },
          end: {
            line: 47,
            column: 13
          }
        }],
        line: 42
      },
      "11": {
        loc: {
          start: {
            line: 72,
            column: 12
          },
          end: {
            line: 75,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 72,
            column: 12
          },
          end: {
            line: 75,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 72
      },
      "12": {
        loc: {
          start: {
            line: 80,
            column: 25
          },
          end: {
            line: 80,
            column: 87
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 80,
            column: 50
          },
          end: {
            line: 80,
            column: 63
          }
        }, {
          start: {
            line: 80,
            column: 66
          },
          end: {
            line: 80,
            column: 87
          }
        }],
        line: 80
      },
      "13": {
        loc: {
          start: {
            line: 82,
            column: 22
          },
          end: {
            line: 82,
            column: 75
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 82,
            column: 47
          },
          end: {
            line: 82,
            column: 57
          }
        }, {
          start: {
            line: 82,
            column: 60
          },
          end: {
            line: 82,
            column: 75
          }
        }],
        line: 82
      },
      "14": {
        loc: {
          start: {
            line: 97,
            column: 8
          },
          end: {
            line: 100,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 97,
            column: 8
          },
          end: {
            line: 100,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 97
      },
      "15": {
        loc: {
          start: {
            line: 118,
            column: 12
          },
          end: {
            line: 119,
            column: 23
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 118,
            column: 12
          },
          end: {
            line: 119,
            column: 23
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 118
      },
      "16": {
        loc: {
          start: {
            line: 126,
            column: 12
          },
          end: {
            line: 127,
            column: 28
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 126,
            column: 12
          },
          end: {
            line: 127,
            column: 28
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 126
      },
      "17": {
        loc: {
          start: {
            line: 158,
            column: 12
          },
          end: {
            line: 159,
            column: 23
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 158,
            column: 12
          },
          end: {
            line: 159,
            column: 23
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 158
      },
      "18": {
        loc: {
          start: {
            line: 165,
            column: 12
          },
          end: {
            line: 166,
            column: 28
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 165,
            column: 12
          },
          end: {
            line: 166,
            column: 28
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 165
      },
      "19": {
        loc: {
          start: {
            line: 213,
            column: 22
          },
          end: {
            line: 213,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 213,
            column: 22
          },
          end: {
            line: 213,
            column: 44
          }
        }, {
          start: {
            line: 213,
            column: 48
          },
          end: {
            line: 213,
            column: 83
          }
        }],
        line: 213
      },
      "20": {
        loc: {
          start: {
            line: 218,
            column: 8
          },
          end: {
            line: 224,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 218,
            column: 8
          },
          end: {
            line: 224,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 218
      },
      "21": {
        loc: {
          start: {
            line: 228,
            column: 32
          },
          end: {
            line: 228,
            column: 65
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 228,
            column: 43
          },
          end: {
            line: 228,
            column: 56
          }
        }, {
          start: {
            line: 228,
            column: 59
          },
          end: {
            line: 228,
            column: 65
          }
        }],
        line: 228
      },
      "22": {
        loc: {
          start: {
            line: 252,
            column: 8
          },
          end: {
            line: 253,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 252,
            column: 8
          },
          end: {
            line: 253,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 252
      },
      "23": {
        loc: {
          start: {
            line: 252,
            column: 12
          },
          end: {
            line: 252,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 252,
            column: 12
          },
          end: {
            line: 252,
            column: 22
          }
        }, {
          start: {
            line: 252,
            column: 26
          },
          end: {
            line: 252,
            column: 49
          }
        }],
        line: 252
      },
      "24": {
        loc: {
          start: {
            line: 259,
            column: 32
          },
          end: {
            line: 259,
            column: 65
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 259,
            column: 43
          },
          end: {
            line: 259,
            column: 56
          }
        }, {
          start: {
            line: 259,
            column: 59
          },
          end: {
            line: 259,
            column: 65
          }
        }],
        line: 259
      },
      "25": {
        loc: {
          start: {
            line: 265,
            column: 12
          },
          end: {
            line: 268,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 265,
            column: 12
          },
          end: {
            line: 268,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 265
      },
      "26": {
        loc: {
          start: {
            line: 286,
            column: 12
          },
          end: {
            line: 289,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 286,
            column: 12
          },
          end: {
            line: 289,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 286
      },
      "27": {
        loc: {
          start: {
            line: 286,
            column: 16
          },
          end: {
            line: 286,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 286,
            column: 16
          },
          end: {
            line: 286,
            column: 33
          }
        }, {
          start: {
            line: 286,
            column: 37
          },
          end: {
            line: 286,
            column: 55
          }
        }],
        line: 286
      },
      "28": {
        loc: {
          start: {
            line: 293,
            column: 12
          },
          end: {
            line: 296,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 293,
            column: 12
          },
          end: {
            line: 296,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 293
      },
      "29": {
        loc: {
          start: {
            line: 304,
            column: 16
          },
          end: {
            line: 312,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 304,
            column: 16
          },
          end: {
            line: 312,
            column: 17
          }
        }, {
          start: {
            line: 310,
            column: 21
          },
          end: {
            line: 312,
            column: 17
          }
        }],
        line: 304
      },
      "30": {
        loc: {
          start: {
            line: 320,
            column: 8
          },
          end: {
            line: 323,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 320,
            column: 8
          },
          end: {
            line: 323,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 320
      },
      "31": {
        loc: {
          start: {
            line: 324,
            column: 8
          },
          end: {
            line: 326,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 324,
            column: 8
          },
          end: {
            line: 326,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 324
      },
      "32": {
        loc: {
          start: {
            line: 368,
            column: 8
          },
          end: {
            line: 369,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 368,
            column: 8
          },
          end: {
            line: 369,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 368
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0
    },
    b: {
      "0": [0],
      "1": [0],
      "2": [0],
      "3": [0],
      "4": [0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0]
    },
    inputSourceMap: {
      file: "/workspaces/MyFitHero/src/features/nutrition/hooks/useFoodScanner.ts",
      mappings: "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",
      names: [],
      sources: ["/workspaces/MyFitHero/src/features/nutrition/hooks/useFoodScanner.ts"],
      sourcesContent: ["import { useState, useCallback, useRef } from 'react';\nimport { FoodVisionService } from '@/features/nutrition/services/foodVisionService';\nimport { USDANutritionService } from '@/features/nutrition/services/usdaService';\nimport { supabase } from '@/lib/supabase';\n\n// Types pour le hook de scan photo\nexport interface FoodScanResult {\n  name: string;\n  calories: number;\n  protein: number;\n  carbs: number;\n  fat: number;\n  fiber?: number;\n  sugar?: number;\n  sodium?: number;\n  confidence: number;\n  alternatives?: FoodItem[];\n  portion_size?: string;\n  weight_grams?: number;\n  usda_id?: string;\n  analysis_id?: string;\n}\n\nexport interface FoodItem {\n  name: string;\n  calories: number;\n  protein: number;\n  carbs: number;\n  fat: number;\n  usda_id?: string;\n}\n\nexport interface ScanError {\n  message: string;\n  type: 'network' | 'analysis' | 'upload' | 'camera' | 'permission';\n  code?: string;\n}\n\nexport interface ScanOptions {\n  visionProvider?: 'openai' | 'google';\n  nutritionProvider?: 'usda' | 'nutritionix';\n  portion?: string;\n  weight_grams?: number;\n  saveToHistory?: boolean;\n}\n\n/**\n * Hook principal pour la fonctionnalit\xE9 de scan photo alimentaire\n */\nexport const useFoodScanner = (options: ScanOptions = {}) => {\n  // \xC9tats\n  const [isScanning, setIsScanning] = useState(false);\n  const [scanResult, setScanResult] = useState<FoodScanResult | null>(null);\n  const [error, setError] = useState<ScanError | null>(null);\n  const [scanHistory, setScanHistory] = useState<FoodScanResult[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  // Refs\n  const abortControllerRef = useRef<AbortController | null>(null);\n\n  // Options par d\xE9faut\n  const {\n    visionProvider = 'openai',\n    nutritionProvider = 'usda',\n    weight_grams = 100,\n    saveToHistory = true\n  } = options;\n\n  /**\n   * Scanner une image alimentaire\n   */\n  const scanFood = useCallback(async (image: File | string): Promise<FoodScanResult | null> => {\n    // Annuler le scan pr\xE9c\xE9dent si en cours\n    if (abortControllerRef.current) {\n      abortControllerRef.current.abort();\n    }\n\n    abortControllerRef.current = new AbortController();\n    setIsScanning(true);\n    setError(null);\n\n    try {\n      // Validation de l'input\n      if (typeof image !== 'string' && !image.type.startsWith('image/')) {\n        throw new Error('Format de fichier invalide. Veuillez s\xE9lectionner une image.');\n      }\n\n      if (typeof image !== 'string' && image.size > 10 * 1024 * 1024) { // 10MB max\n        throw new Error('Image trop volumineuse. Maximum 10MB.');\n      }\n\n      let base64Image: string;\n\n      // Convertir en base64 si n\xE9cessaire\n      if (typeof image === 'string') {\n        base64Image = image;\n      } else {\n        base64Image = await convertFileToBase64(image);\n      }\n\n      // Analyser avec le service IA\n      const result = await FoodVisionService.analyzeFood(base64Image, {\n        visionProvider,\n        nutritionProvider,\n        weight_grams\n      });\n\n      // Cr\xE9er l'objet r\xE9sultat\n      const scanResult: FoodScanResult = {\n        name: result.foodName,\n        calories: result.calories,\n        protein: result.protein,\n        carbs: result.carbs,\n        fat: result.fat,\n        fiber: result.fiber,\n        sugar: result.sugar,\n        sodium: result.sodium,\n        confidence: result.confidence,\n        portion_size: result.portion_size,\n        weight_grams: result.weight_grams,\n        usda_id: result.usda_id,\n        analysis_id: generateAnalysisId()\n      };\n\n      setScanResult(scanResult);\n\n      // Sauvegarder dans l'historique si demand\xE9\n      if (saveToHistory) {\n        await saveToScanHistory(scanResult);\n        setScanHistory(prev => [scanResult, ...prev.slice(0, 9)]); // Garder les 10 derniers\n      }\n\n      return scanResult;\n\n    } catch (error) {\n      const scanError: ScanError = {\n        message: error instanceof Error ? error.message : 'Erreur lors du scan',\n        type: 'analysis',\n        code: error instanceof Error ? error.name : 'UNKNOWN_ERROR'\n      };\n      \n      setError(scanError);\n      console.error('Food scan error:', error);\n      return null;\n\n    } finally {\n      setIsScanning(false);\n      abortControllerRef.current = null;\n    }\n  }, [visionProvider, nutritionProvider, weight_grams, saveToHistory]);\n\n  /**\n   * Annuler le scan en cours\n   */\n  const cancelScan = useCallback(() => {\n    if (abortControllerRef.current) {\n      abortControllerRef.current.abort();\n      abortControllerRef.current = null;\n    }\n    setIsScanning(false);\n    setError(null);\n  }, []);\n\n  /**\n   * Reset du scanner\n   */\n  const resetScan = useCallback(() => {\n    setScanResult(null);\n    setError(null);\n  }, []);\n\n  /**\n   * Charger l'historique des scans\n   */\n  const loadScanHistory = useCallback(async () => {\n    setIsLoading(true);\n    try {\n      const { data: { user } } = await supabase.auth.getUser();\n      if (!user) return;\n\n      const { data, error } = await supabase\n        .from('food_scan_history')\n        .select('*')\n        .eq('user_id', user.id)\n        .order('created_at', { ascending: false })\n        .limit(20);\n\n      if (error) throw error;\n\n      const history: FoodScanResult[] = data.map(item => ({\n        name: item.food_name,\n        calories: item.calories,\n        protein: item.protein,\n        carbs: item.carbs,\n        fat: item.fat,\n        fiber: item.fiber,\n        sugar: item.sugar,\n        sodium: item.sodium,\n        confidence: item.confidence,\n        portion_size: item.portion_size,\n        weight_grams: item.weight_grams,\n        usda_id: item.usda_id,\n        analysis_id: item.analysis_id\n      }));\n\n      setScanHistory(history);\n\n    } catch (error) {\n      console.error('Failed to load scan history:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  /**\n   * Supprimer un \xE9l\xE9ment de l'historique\n   */\n  const removeScanFromHistory = useCallback(async (analysisId: string) => {\n    try {\n      const { data: { user } } = await supabase.auth.getUser();\n      if (!user) return;\n\n      const { error } = await supabase\n        .from('food_scan_history')\n        .delete()\n        .eq('user_id', user.id)\n        .eq('analysis_id', analysisId);\n\n      if (error) throw error;\n\n      setScanHistory(prev => prev.filter(item => item.analysis_id !== analysisId));\n\n    } catch (error) {\n      console.error('Failed to remove scan from history:', error);\n    }\n  }, []);\n\n  /**\n   * R\xE9p\xE9ter un scan depuis l'historique\n   */\n  const repeatScan = useCallback((scanResult: FoodScanResult) => {\n    setScanResult(scanResult);\n    setError(null);\n  }, []);\n\n  return {\n    // \xC9tats\n    isScanning,\n    scanResult,\n    error,\n    scanHistory,\n    isLoading,\n\n    // Actions\n    scanFood,\n    cancelScan,\n    resetScan,\n    loadScanHistory,\n    removeScanFromHistory,\n    repeatScan,\n\n    // Utilitaires\n    hasResult: !!scanResult,\n    hasError: !!error,\n    canScan: !isScanning\n  };\n};\n\n/**\n * Hook pour la gestion de la cam\xE9ra\n */\nexport const useCameraCapture = () => {\n  const [isCapturing, setIsCapturing] = useState(false);\n  const [hasPermission, setHasPermission] = useState<boolean | null>(null);\n  const [error, setError] = useState<ScanError | null>(null);\n\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const streamRef = useRef<MediaStream | null>(null);\n\n  // D\xE9tection des capacit\xE9s\n  const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\n  const hasCamera = navigator.mediaDevices && navigator.mediaDevices.getUserMedia;\n\n  /**\n   * Demander les permissions cam\xE9ra\n   */\n  const requestCameraPermission = useCallback(async () => {\n    if (!hasCamera) {\n      setError({\n        message: 'Cam\xE9ra non disponible sur cet appareil',\n        type: 'camera'\n      });\n      return false;\n    }\n\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        video: {\n          facingMode: isMobile ? 'environment' : 'user',\n          width: { ideal: 1280 },\n          height: { ideal: 720 }\n        }\n      });\n\n      // Arr\xEAter imm\xE9diatement pour juste tester les permissions\n      stream.getTracks().forEach(track => track.stop());\n      setHasPermission(true);\n      setError(null);\n      return true;\n\n    } catch (error) {\n      setHasPermission(false);\n      setError({\n        message: 'Permission cam\xE9ra refus\xE9e',\n        type: 'permission'\n      });\n      return false;\n    }\n  }, [hasCamera, isMobile]);\n\n  /**\n   * D\xE9marrer la capture cam\xE9ra\n   */\n  const startCapture = useCallback(async () => {\n    if (!hasCamera || hasPermission === false) return false;\n\n    try {\n      setIsCapturing(true);\n      setError(null);\n\n      const stream = await navigator.mediaDevices.getUserMedia({\n        video: {\n          facingMode: isMobile ? 'environment' : 'user',\n          width: { ideal: 1280 },\n          height: { ideal: 720 }\n        }\n      });\n\n      streamRef.current = stream;\n\n      if (videoRef.current) {\n        videoRef.current.srcObject = stream;\n        await videoRef.current.play();\n      }\n\n      setHasPermission(true);\n      return true;\n\n    } catch (error) {\n      setError({\n        message: 'Impossible d\\'acc\xE9der \xE0 la cam\xE9ra',\n        type: 'camera'\n      });\n      setIsCapturing(false);\n      return false;\n    }\n  }, [hasCamera, hasPermission, isMobile]);\n\n  /**\n   * Capturer une photo\n   */\n  const capturePhoto = useCallback((): Promise<File | null> => {\n    return new Promise((resolve) => {\n      if (!videoRef.current || !canvasRef.current) {\n        resolve(null);\n        return;\n      }\n\n      const canvas = canvasRef.current;\n      const video = videoRef.current;\n      const context = canvas.getContext('2d');\n\n      if (!context) {\n        resolve(null);\n        return;\n      }\n\n      // Configurer le canvas\n      canvas.width = video.videoWidth;\n      canvas.height = video.videoHeight;\n\n      // Dessiner l'image\n      context.drawImage(video, 0, 0);\n\n      // Convertir en blob puis en File\n      canvas.toBlob((blob) => {\n        if (blob) {\n          const file = new File([blob], `food-scan-${Date.now()}.jpg`, {\n            type: 'image/jpeg'\n          });\n          resolve(file);\n        } else {\n          resolve(null);\n        }\n      }, 'image/jpeg', 0.85);\n    });\n  }, []);\n\n  /**\n   * Arr\xEAter la capture\n   */\n  const stopCapture = useCallback(() => {\n    if (streamRef.current) {\n      streamRef.current.getTracks().forEach(track => track.stop());\n      streamRef.current = null;\n    }\n\n    if (videoRef.current) {\n      videoRef.current.srcObject = null;\n    }\n\n    setIsCapturing(false);\n  }, []);\n\n  // Nettoyage automatique\n  const cleanup = useCallback(() => {\n    stopCapture();\n  }, [stopCapture]);\n\n  return {\n    // \xC9tats\n    isCapturing,\n    hasPermission,\n    error,\n    hasCamera,\n    isMobile,\n\n    // Refs\n    videoRef,\n    canvasRef,\n\n    // Actions\n    requestCameraPermission,\n    startCapture,\n    capturePhoto,\n    stopCapture,\n    cleanup\n  };\n};\n\n// Fonctions utilitaires\nconst convertFileToBase64 = (file: File): Promise<string> => {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = () => {\n      const result = reader.result as string;\n      const base64 = result.split(',')[1];\n      resolve(base64);\n    };\n    reader.onerror = error => reject(error);\n  });\n};\n\nconst saveToScanHistory = async (scanResult: FoodScanResult): Promise<void> => {\n  try {\n    const { data: { user } } = await supabase.auth.getUser();\n    if (!user) return;\n\n    await supabase.from('food_scan_history').insert([{\n      user_id: user.id,\n      analysis_id: scanResult.analysis_id,\n      food_name: scanResult.name,\n      calories: scanResult.calories,\n      protein: scanResult.protein,\n      carbs: scanResult.carbs,\n      fat: scanResult.fat,\n      fiber: scanResult.fiber,\n      sugar: scanResult.sugar,\n      sodium: scanResult.sodium,\n      confidence: scanResult.confidence,\n      portion_size: scanResult.portion_size,\n      weight_grams: scanResult.weight_grams,\n      usda_id: scanResult.usda_id,\n      created_at: new Date().toISOString()\n    }]);\n  } catch (error) {\n    console.warn('Failed to save scan to history:', error);\n  }\n};\n\nconst generateAnalysisId = (): string => {\n  return `scan_${Date.now()}_${Math.random().toString(36).substring(2, 15)}`;\n};\n\nexport default useFoodScanner;"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "56ab1634219b575920af546185bf4d8ae5cf5929"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_qjdf0nkh7 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_qjdf0nkh7();
cov_qjdf0nkh7().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_qjdf0nkh7().s[1]++;
exports.useCameraCapture = exports.useFoodScanner = void 0;
const react_1 =
/* istanbul ignore next */
(cov_qjdf0nkh7().s[2]++, require("react"));
const foodVisionService_1 =
/* istanbul ignore next */
(cov_qjdf0nkh7().s[3]++, require("@/features/nutrition/services/foodVisionService"));
const supabase_1 =
/* istanbul ignore next */
(cov_qjdf0nkh7().s[4]++, require("@/lib/supabase"));
/**
 * Hook principal pour la fonctionnalité de scan photo alimentaire
 */
/* istanbul ignore next */
cov_qjdf0nkh7().s[5]++;
const useFoodScanner = (options =
/* istanbul ignore next */
(cov_qjdf0nkh7().b[0][0]++, {})) => {
  /* istanbul ignore next */
  cov_qjdf0nkh7().f[0]++;
  // États
  const [isScanning, setIsScanning] =
  /* istanbul ignore next */
  (cov_qjdf0nkh7().s[6]++, (0, react_1.useState)(false));
  const [scanResult, setScanResult] =
  /* istanbul ignore next */
  (cov_qjdf0nkh7().s[7]++, (0, react_1.useState)(null));
  const [error, setError] =
  /* istanbul ignore next */
  (cov_qjdf0nkh7().s[8]++, (0, react_1.useState)(null));
  const [scanHistory, setScanHistory] =
  /* istanbul ignore next */
  (cov_qjdf0nkh7().s[9]++, (0, react_1.useState)([]));
  const [isLoading, setIsLoading] =
  /* istanbul ignore next */
  (cov_qjdf0nkh7().s[10]++, (0, react_1.useState)(false));
  // Refs
  const abortControllerRef =
  /* istanbul ignore next */
  (cov_qjdf0nkh7().s[11]++, (0, react_1.useRef)(null));
  // Options par défaut
  const {
    visionProvider =
    /* istanbul ignore next */
    (cov_qjdf0nkh7().b[1][0]++, 'openai'),
    nutritionProvider =
    /* istanbul ignore next */
    (cov_qjdf0nkh7().b[2][0]++, 'usda'),
    weight_grams =
    /* istanbul ignore next */
    (cov_qjdf0nkh7().b[3][0]++, 100),
    saveToHistory =
    /* istanbul ignore next */
    (cov_qjdf0nkh7().b[4][0]++, true)
  } =
  /* istanbul ignore next */
  (cov_qjdf0nkh7().s[12]++, options);
  /**
   * Scanner une image alimentaire
   */
  const scanFood =
  /* istanbul ignore next */
  (cov_qjdf0nkh7().s[13]++, (0, react_1.useCallback)(async image => {
    /* istanbul ignore next */
    cov_qjdf0nkh7().f[1]++;
    cov_qjdf0nkh7().s[14]++;
    // Annuler le scan précédent si en cours
    if (abortControllerRef.current) {
      /* istanbul ignore next */
      cov_qjdf0nkh7().b[5][0]++;
      cov_qjdf0nkh7().s[15]++;
      abortControllerRef.current.abort();
    } else
    /* istanbul ignore next */
    {
      cov_qjdf0nkh7().b[5][1]++;
    }
    cov_qjdf0nkh7().s[16]++;
    abortControllerRef.current = new AbortController();
    /* istanbul ignore next */
    cov_qjdf0nkh7().s[17]++;
    setIsScanning(true);
    /* istanbul ignore next */
    cov_qjdf0nkh7().s[18]++;
    setError(null);
    /* istanbul ignore next */
    cov_qjdf0nkh7().s[19]++;
    try {
      /* istanbul ignore next */
      cov_qjdf0nkh7().s[20]++;
      // Validation de l'input
      if (
      /* istanbul ignore next */
      (cov_qjdf0nkh7().b[7][0]++, typeof image !== 'string') &&
      /* istanbul ignore next */
      (cov_qjdf0nkh7().b[7][1]++, !image.type.startsWith('image/'))) {
        /* istanbul ignore next */
        cov_qjdf0nkh7().b[6][0]++;
        cov_qjdf0nkh7().s[21]++;
        throw new Error('Format de fichier invalide. Veuillez sélectionner une image.');
      } else
      /* istanbul ignore next */
      {
        cov_qjdf0nkh7().b[6][1]++;
      }
      cov_qjdf0nkh7().s[22]++;
      if (
      /* istanbul ignore next */
      (cov_qjdf0nkh7().b[9][0]++, typeof image !== 'string') &&
      /* istanbul ignore next */
      (cov_qjdf0nkh7().b[9][1]++, image.size > 10 * 1024 * 1024)) {
        /* istanbul ignore next */
        cov_qjdf0nkh7().b[8][0]++;
        cov_qjdf0nkh7().s[23]++;
        // 10MB max
        throw new Error('Image trop volumineuse. Maximum 10MB.');
      } else
      /* istanbul ignore next */
      {
        cov_qjdf0nkh7().b[8][1]++;
      }
      let base64Image;
      // Convertir en base64 si nécessaire
      /* istanbul ignore next */
      cov_qjdf0nkh7().s[24]++;
      if (typeof image === 'string') {
        /* istanbul ignore next */
        cov_qjdf0nkh7().b[10][0]++;
        cov_qjdf0nkh7().s[25]++;
        base64Image = image;
      } else {
        /* istanbul ignore next */
        cov_qjdf0nkh7().b[10][1]++;
        cov_qjdf0nkh7().s[26]++;
        base64Image = await convertFileToBase64(image);
      }
      // Analyser avec le service IA
      const result =
      /* istanbul ignore next */
      (cov_qjdf0nkh7().s[27]++, await foodVisionService_1.FoodVisionService.analyzeFood(base64Image, {
        visionProvider,
        nutritionProvider,
        weight_grams
      }));
      // Créer l'objet résultat
      const scanResult =
      /* istanbul ignore next */
      (cov_qjdf0nkh7().s[28]++, {
        name: result.foodName,
        calories: result.calories,
        protein: result.protein,
        carbs: result.carbs,
        fat: result.fat,
        fiber: result.fiber,
        sugar: result.sugar,
        sodium: result.sodium,
        confidence: result.confidence,
        portion_size: result.portion_size,
        weight_grams: result.weight_grams,
        usda_id: result.usda_id,
        analysis_id: generateAnalysisId()
      });
      /* istanbul ignore next */
      cov_qjdf0nkh7().s[29]++;
      setScanResult(scanResult);
      // Sauvegarder dans l'historique si demandé
      /* istanbul ignore next */
      cov_qjdf0nkh7().s[30]++;
      if (saveToHistory) {
        /* istanbul ignore next */
        cov_qjdf0nkh7().b[11][0]++;
        cov_qjdf0nkh7().s[31]++;
        await saveToScanHistory(scanResult);
        /* istanbul ignore next */
        cov_qjdf0nkh7().s[32]++;
        setScanHistory(prev => {
          /* istanbul ignore next */
          cov_qjdf0nkh7().f[2]++;
          cov_qjdf0nkh7().s[33]++;
          return [scanResult, ...prev.slice(0, 9)];
        }); // Garder les 10 derniers
      } else
      /* istanbul ignore next */
      {
        cov_qjdf0nkh7().b[11][1]++;
      }
      cov_qjdf0nkh7().s[34]++;
      return scanResult;
    } catch (error) {
      const scanError =
      /* istanbul ignore next */
      (cov_qjdf0nkh7().s[35]++, {
        message: error instanceof Error ?
        /* istanbul ignore next */
        (cov_qjdf0nkh7().b[12][0]++, error.message) :
        /* istanbul ignore next */
        (cov_qjdf0nkh7().b[12][1]++, 'Erreur lors du scan'),
        type: 'analysis',
        code: error instanceof Error ?
        /* istanbul ignore next */
        (cov_qjdf0nkh7().b[13][0]++, error.name) :
        /* istanbul ignore next */
        (cov_qjdf0nkh7().b[13][1]++, 'UNKNOWN_ERROR')
      });
      /* istanbul ignore next */
      cov_qjdf0nkh7().s[36]++;
      setError(scanError);
      /* istanbul ignore next */
      cov_qjdf0nkh7().s[37]++;
      console.error('Food scan error:', error);
      /* istanbul ignore next */
      cov_qjdf0nkh7().s[38]++;
      return null;
    } finally {
      /* istanbul ignore next */
      cov_qjdf0nkh7().s[39]++;
      setIsScanning(false);
      /* istanbul ignore next */
      cov_qjdf0nkh7().s[40]++;
      abortControllerRef.current = null;
    }
  }, [visionProvider, nutritionProvider, weight_grams, saveToHistory]));
  /**
   * Annuler le scan en cours
   */
  const cancelScan =
  /* istanbul ignore next */
  (cov_qjdf0nkh7().s[41]++, (0, react_1.useCallback)(() => {
    /* istanbul ignore next */
    cov_qjdf0nkh7().f[3]++;
    cov_qjdf0nkh7().s[42]++;
    if (abortControllerRef.current) {
      /* istanbul ignore next */
      cov_qjdf0nkh7().b[14][0]++;
      cov_qjdf0nkh7().s[43]++;
      abortControllerRef.current.abort();
      /* istanbul ignore next */
      cov_qjdf0nkh7().s[44]++;
      abortControllerRef.current = null;
    } else
    /* istanbul ignore next */
    {
      cov_qjdf0nkh7().b[14][1]++;
    }
    cov_qjdf0nkh7().s[45]++;
    setIsScanning(false);
    /* istanbul ignore next */
    cov_qjdf0nkh7().s[46]++;
    setError(null);
  }, []));
  /**
   * Reset du scanner
   */
  const resetScan =
  /* istanbul ignore next */
  (cov_qjdf0nkh7().s[47]++, (0, react_1.useCallback)(() => {
    /* istanbul ignore next */
    cov_qjdf0nkh7().f[4]++;
    cov_qjdf0nkh7().s[48]++;
    setScanResult(null);
    /* istanbul ignore next */
    cov_qjdf0nkh7().s[49]++;
    setError(null);
  }, []));
  /**
   * Charger l'historique des scans
   */
  const loadScanHistory =
  /* istanbul ignore next */
  (cov_qjdf0nkh7().s[50]++, (0, react_1.useCallback)(async () => {
    /* istanbul ignore next */
    cov_qjdf0nkh7().f[5]++;
    cov_qjdf0nkh7().s[51]++;
    setIsLoading(true);
    /* istanbul ignore next */
    cov_qjdf0nkh7().s[52]++;
    try {
      const {
        data: {
          user
        }
      } =
      /* istanbul ignore next */
      (cov_qjdf0nkh7().s[53]++, await supabase_1.supabase.auth.getUser());
      /* istanbul ignore next */
      cov_qjdf0nkh7().s[54]++;
      if (!user) {
        /* istanbul ignore next */
        cov_qjdf0nkh7().b[15][0]++;
        cov_qjdf0nkh7().s[55]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_qjdf0nkh7().b[15][1]++;
      }
      const {
        data,
        error
      } =
      /* istanbul ignore next */
      (cov_qjdf0nkh7().s[56]++, await supabase_1.supabase.from('food_scan_history').select('*').eq('user_id', user.id).order('created_at', {
        ascending: false
      }).limit(20));
      /* istanbul ignore next */
      cov_qjdf0nkh7().s[57]++;
      if (error) {
        /* istanbul ignore next */
        cov_qjdf0nkh7().b[16][0]++;
        cov_qjdf0nkh7().s[58]++;
        throw error;
      } else
      /* istanbul ignore next */
      {
        cov_qjdf0nkh7().b[16][1]++;
      }
      const history =
      /* istanbul ignore next */
      (cov_qjdf0nkh7().s[59]++, data.map(item => {
        /* istanbul ignore next */
        cov_qjdf0nkh7().f[6]++;
        cov_qjdf0nkh7().s[60]++;
        return {
          name: item.food_name,
          calories: item.calories,
          protein: item.protein,
          carbs: item.carbs,
          fat: item.fat,
          fiber: item.fiber,
          sugar: item.sugar,
          sodium: item.sodium,
          confidence: item.confidence,
          portion_size: item.portion_size,
          weight_grams: item.weight_grams,
          usda_id: item.usda_id,
          analysis_id: item.analysis_id
        };
      }));
      /* istanbul ignore next */
      cov_qjdf0nkh7().s[61]++;
      setScanHistory(history);
    } catch (error) {
      /* istanbul ignore next */
      cov_qjdf0nkh7().s[62]++;
      console.error('Failed to load scan history:', error);
    } finally {
      /* istanbul ignore next */
      cov_qjdf0nkh7().s[63]++;
      setIsLoading(false);
    }
  }, []));
  /**
   * Supprimer un élément de l'historique
   */
  const removeScanFromHistory =
  /* istanbul ignore next */
  (cov_qjdf0nkh7().s[64]++, (0, react_1.useCallback)(async analysisId => {
    /* istanbul ignore next */
    cov_qjdf0nkh7().f[7]++;
    cov_qjdf0nkh7().s[65]++;
    try {
      const {
        data: {
          user
        }
      } =
      /* istanbul ignore next */
      (cov_qjdf0nkh7().s[66]++, await supabase_1.supabase.auth.getUser());
      /* istanbul ignore next */
      cov_qjdf0nkh7().s[67]++;
      if (!user) {
        /* istanbul ignore next */
        cov_qjdf0nkh7().b[17][0]++;
        cov_qjdf0nkh7().s[68]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_qjdf0nkh7().b[17][1]++;
      }
      const {
        error
      } =
      /* istanbul ignore next */
      (cov_qjdf0nkh7().s[69]++, await supabase_1.supabase.from('food_scan_history').delete().eq('user_id', user.id).eq('analysis_id', analysisId));
      /* istanbul ignore next */
      cov_qjdf0nkh7().s[70]++;
      if (error) {
        /* istanbul ignore next */
        cov_qjdf0nkh7().b[18][0]++;
        cov_qjdf0nkh7().s[71]++;
        throw error;
      } else
      /* istanbul ignore next */
      {
        cov_qjdf0nkh7().b[18][1]++;
      }
      cov_qjdf0nkh7().s[72]++;
      setScanHistory(prev => {
        /* istanbul ignore next */
        cov_qjdf0nkh7().f[8]++;
        cov_qjdf0nkh7().s[73]++;
        return prev.filter(item => {
          /* istanbul ignore next */
          cov_qjdf0nkh7().f[9]++;
          cov_qjdf0nkh7().s[74]++;
          return item.analysis_id !== analysisId;
        });
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_qjdf0nkh7().s[75]++;
      console.error('Failed to remove scan from history:', error);
    }
  }, []));
  /**
   * Répéter un scan depuis l'historique
   */
  const repeatScan =
  /* istanbul ignore next */
  (cov_qjdf0nkh7().s[76]++, (0, react_1.useCallback)(scanResult => {
    /* istanbul ignore next */
    cov_qjdf0nkh7().f[10]++;
    cov_qjdf0nkh7().s[77]++;
    setScanResult(scanResult);
    /* istanbul ignore next */
    cov_qjdf0nkh7().s[78]++;
    setError(null);
  }, []));
  /* istanbul ignore next */
  cov_qjdf0nkh7().s[79]++;
  return {
    // États
    isScanning,
    scanResult,
    error,
    scanHistory,
    isLoading,
    // Actions
    scanFood,
    cancelScan,
    resetScan,
    loadScanHistory,
    removeScanFromHistory,
    repeatScan,
    // Utilitaires
    hasResult: !!scanResult,
    hasError: !!error,
    canScan: !isScanning
  };
};
/* istanbul ignore next */
cov_qjdf0nkh7().s[80]++;
exports.useFoodScanner = useFoodScanner;
/**
 * Hook pour la gestion de la caméra
 */
/* istanbul ignore next */
cov_qjdf0nkh7().s[81]++;
const useCameraCapture = () => {
  /* istanbul ignore next */
  cov_qjdf0nkh7().f[11]++;
  const [isCapturing, setIsCapturing] =
  /* istanbul ignore next */
  (cov_qjdf0nkh7().s[82]++, (0, react_1.useState)(false));
  const [hasPermission, setHasPermission] =
  /* istanbul ignore next */
  (cov_qjdf0nkh7().s[83]++, (0, react_1.useState)(null));
  const [error, setError] =
  /* istanbul ignore next */
  (cov_qjdf0nkh7().s[84]++, (0, react_1.useState)(null));
  const videoRef =
  /* istanbul ignore next */
  (cov_qjdf0nkh7().s[85]++, (0, react_1.useRef)(null));
  const canvasRef =
  /* istanbul ignore next */
  (cov_qjdf0nkh7().s[86]++, (0, react_1.useRef)(null));
  const streamRef =
  /* istanbul ignore next */
  (cov_qjdf0nkh7().s[87]++, (0, react_1.useRef)(null));
  // Détection des capacités
  const isMobile =
  /* istanbul ignore next */
  (cov_qjdf0nkh7().s[88]++, /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent));
  const hasCamera =
  /* istanbul ignore next */
  (cov_qjdf0nkh7().s[89]++,
  /* istanbul ignore next */
  (cov_qjdf0nkh7().b[19][0]++, navigator.mediaDevices) &&
  /* istanbul ignore next */
  (cov_qjdf0nkh7().b[19][1]++, navigator.mediaDevices.getUserMedia));
  /**
   * Demander les permissions caméra
   */
  const requestCameraPermission =
  /* istanbul ignore next */
  (cov_qjdf0nkh7().s[90]++, (0, react_1.useCallback)(async () => {
    /* istanbul ignore next */
    cov_qjdf0nkh7().f[12]++;
    cov_qjdf0nkh7().s[91]++;
    if (!hasCamera) {
      /* istanbul ignore next */
      cov_qjdf0nkh7().b[20][0]++;
      cov_qjdf0nkh7().s[92]++;
      setError({
        message: 'Caméra non disponible sur cet appareil',
        type: 'camera'
      });
      /* istanbul ignore next */
      cov_qjdf0nkh7().s[93]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_qjdf0nkh7().b[20][1]++;
    }
    cov_qjdf0nkh7().s[94]++;
    try {
      const stream =
      /* istanbul ignore next */
      (cov_qjdf0nkh7().s[95]++, await navigator.mediaDevices.getUserMedia({
        video: {
          facingMode: isMobile ?
          /* istanbul ignore next */
          (cov_qjdf0nkh7().b[21][0]++, 'environment') :
          /* istanbul ignore next */
          (cov_qjdf0nkh7().b[21][1]++, 'user'),
          width: {
            ideal: 1280
          },
          height: {
            ideal: 720
          }
        }
      }));
      // Arrêter immédiatement pour juste tester les permissions
      /* istanbul ignore next */
      cov_qjdf0nkh7().s[96]++;
      stream.getTracks().forEach(track => {
        /* istanbul ignore next */
        cov_qjdf0nkh7().f[13]++;
        cov_qjdf0nkh7().s[97]++;
        return track.stop();
      });
      /* istanbul ignore next */
      cov_qjdf0nkh7().s[98]++;
      setHasPermission(true);
      /* istanbul ignore next */
      cov_qjdf0nkh7().s[99]++;
      setError(null);
      /* istanbul ignore next */
      cov_qjdf0nkh7().s[100]++;
      return true;
    } catch (error) {
      /* istanbul ignore next */
      cov_qjdf0nkh7().s[101]++;
      setHasPermission(false);
      /* istanbul ignore next */
      cov_qjdf0nkh7().s[102]++;
      setError({
        message: 'Permission caméra refusée',
        type: 'permission'
      });
      /* istanbul ignore next */
      cov_qjdf0nkh7().s[103]++;
      return false;
    }
  }, [hasCamera, isMobile]));
  /**
   * Démarrer la capture caméra
   */
  const startCapture =
  /* istanbul ignore next */
  (cov_qjdf0nkh7().s[104]++, (0, react_1.useCallback)(async () => {
    /* istanbul ignore next */
    cov_qjdf0nkh7().f[14]++;
    cov_qjdf0nkh7().s[105]++;
    if (
    /* istanbul ignore next */
    (cov_qjdf0nkh7().b[23][0]++, !hasCamera) ||
    /* istanbul ignore next */
    (cov_qjdf0nkh7().b[23][1]++, hasPermission === false)) {
      /* istanbul ignore next */
      cov_qjdf0nkh7().b[22][0]++;
      cov_qjdf0nkh7().s[106]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_qjdf0nkh7().b[22][1]++;
    }
    cov_qjdf0nkh7().s[107]++;
    try {
      /* istanbul ignore next */
      cov_qjdf0nkh7().s[108]++;
      setIsCapturing(true);
      /* istanbul ignore next */
      cov_qjdf0nkh7().s[109]++;
      setError(null);
      const stream =
      /* istanbul ignore next */
      (cov_qjdf0nkh7().s[110]++, await navigator.mediaDevices.getUserMedia({
        video: {
          facingMode: isMobile ?
          /* istanbul ignore next */
          (cov_qjdf0nkh7().b[24][0]++, 'environment') :
          /* istanbul ignore next */
          (cov_qjdf0nkh7().b[24][1]++, 'user'),
          width: {
            ideal: 1280
          },
          height: {
            ideal: 720
          }
        }
      }));
      /* istanbul ignore next */
      cov_qjdf0nkh7().s[111]++;
      streamRef.current = stream;
      /* istanbul ignore next */
      cov_qjdf0nkh7().s[112]++;
      if (videoRef.current) {
        /* istanbul ignore next */
        cov_qjdf0nkh7().b[25][0]++;
        cov_qjdf0nkh7().s[113]++;
        videoRef.current.srcObject = stream;
        /* istanbul ignore next */
        cov_qjdf0nkh7().s[114]++;
        await videoRef.current.play();
      } else
      /* istanbul ignore next */
      {
        cov_qjdf0nkh7().b[25][1]++;
      }
      cov_qjdf0nkh7().s[115]++;
      setHasPermission(true);
      /* istanbul ignore next */
      cov_qjdf0nkh7().s[116]++;
      return true;
    } catch (error) {
      /* istanbul ignore next */
      cov_qjdf0nkh7().s[117]++;
      setError({
        message: 'Impossible d\'accéder à la caméra',
        type: 'camera'
      });
      /* istanbul ignore next */
      cov_qjdf0nkh7().s[118]++;
      setIsCapturing(false);
      /* istanbul ignore next */
      cov_qjdf0nkh7().s[119]++;
      return false;
    }
  }, [hasCamera, hasPermission, isMobile]));
  /**
   * Capturer une photo
   */
  const capturePhoto =
  /* istanbul ignore next */
  (cov_qjdf0nkh7().s[120]++, (0, react_1.useCallback)(() => {
    /* istanbul ignore next */
    cov_qjdf0nkh7().f[15]++;
    cov_qjdf0nkh7().s[121]++;
    return new Promise(resolve => {
      /* istanbul ignore next */
      cov_qjdf0nkh7().f[16]++;
      cov_qjdf0nkh7().s[122]++;
      if (
      /* istanbul ignore next */
      (cov_qjdf0nkh7().b[27][0]++, !videoRef.current) ||
      /* istanbul ignore next */
      (cov_qjdf0nkh7().b[27][1]++, !canvasRef.current)) {
        /* istanbul ignore next */
        cov_qjdf0nkh7().b[26][0]++;
        cov_qjdf0nkh7().s[123]++;
        resolve(null);
        /* istanbul ignore next */
        cov_qjdf0nkh7().s[124]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_qjdf0nkh7().b[26][1]++;
      }
      const canvas =
      /* istanbul ignore next */
      (cov_qjdf0nkh7().s[125]++, canvasRef.current);
      const video =
      /* istanbul ignore next */
      (cov_qjdf0nkh7().s[126]++, videoRef.current);
      const context =
      /* istanbul ignore next */
      (cov_qjdf0nkh7().s[127]++, canvas.getContext('2d'));
      /* istanbul ignore next */
      cov_qjdf0nkh7().s[128]++;
      if (!context) {
        /* istanbul ignore next */
        cov_qjdf0nkh7().b[28][0]++;
        cov_qjdf0nkh7().s[129]++;
        resolve(null);
        /* istanbul ignore next */
        cov_qjdf0nkh7().s[130]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_qjdf0nkh7().b[28][1]++;
      }
      // Configurer le canvas
      cov_qjdf0nkh7().s[131]++;
      canvas.width = video.videoWidth;
      /* istanbul ignore next */
      cov_qjdf0nkh7().s[132]++;
      canvas.height = video.videoHeight;
      // Dessiner l'image
      /* istanbul ignore next */
      cov_qjdf0nkh7().s[133]++;
      context.drawImage(video, 0, 0);
      // Convertir en blob puis en File
      /* istanbul ignore next */
      cov_qjdf0nkh7().s[134]++;
      canvas.toBlob(blob => {
        /* istanbul ignore next */
        cov_qjdf0nkh7().f[17]++;
        cov_qjdf0nkh7().s[135]++;
        if (blob) {
          /* istanbul ignore next */
          cov_qjdf0nkh7().b[29][0]++;
          const file =
          /* istanbul ignore next */
          (cov_qjdf0nkh7().s[136]++, new File([blob], `food-scan-${Date.now()}.jpg`, {
            type: 'image/jpeg'
          }));
          /* istanbul ignore next */
          cov_qjdf0nkh7().s[137]++;
          resolve(file);
        } else {
          /* istanbul ignore next */
          cov_qjdf0nkh7().b[29][1]++;
          cov_qjdf0nkh7().s[138]++;
          resolve(null);
        }
      }, 'image/jpeg', 0.85);
    });
  }, []));
  /**
   * Arrêter la capture
   */
  const stopCapture =
  /* istanbul ignore next */
  (cov_qjdf0nkh7().s[139]++, (0, react_1.useCallback)(() => {
    /* istanbul ignore next */
    cov_qjdf0nkh7().f[18]++;
    cov_qjdf0nkh7().s[140]++;
    if (streamRef.current) {
      /* istanbul ignore next */
      cov_qjdf0nkh7().b[30][0]++;
      cov_qjdf0nkh7().s[141]++;
      streamRef.current.getTracks().forEach(track => {
        /* istanbul ignore next */
        cov_qjdf0nkh7().f[19]++;
        cov_qjdf0nkh7().s[142]++;
        return track.stop();
      });
      /* istanbul ignore next */
      cov_qjdf0nkh7().s[143]++;
      streamRef.current = null;
    } else
    /* istanbul ignore next */
    {
      cov_qjdf0nkh7().b[30][1]++;
    }
    cov_qjdf0nkh7().s[144]++;
    if (videoRef.current) {
      /* istanbul ignore next */
      cov_qjdf0nkh7().b[31][0]++;
      cov_qjdf0nkh7().s[145]++;
      videoRef.current.srcObject = null;
    } else
    /* istanbul ignore next */
    {
      cov_qjdf0nkh7().b[31][1]++;
    }
    cov_qjdf0nkh7().s[146]++;
    setIsCapturing(false);
  }, []));
  // Nettoyage automatique
  const cleanup =
  /* istanbul ignore next */
  (cov_qjdf0nkh7().s[147]++, (0, react_1.useCallback)(() => {
    /* istanbul ignore next */
    cov_qjdf0nkh7().f[20]++;
    cov_qjdf0nkh7().s[148]++;
    stopCapture();
  }, [stopCapture]));
  /* istanbul ignore next */
  cov_qjdf0nkh7().s[149]++;
  return {
    // États
    isCapturing,
    hasPermission,
    error,
    hasCamera,
    isMobile,
    // Refs
    videoRef,
    canvasRef,
    // Actions
    requestCameraPermission,
    startCapture,
    capturePhoto,
    stopCapture,
    cleanup
  };
};
/* istanbul ignore next */
cov_qjdf0nkh7().s[150]++;
exports.useCameraCapture = useCameraCapture;
// Fonctions utilitaires
/* istanbul ignore next */
cov_qjdf0nkh7().s[151]++;
const convertFileToBase64 = file => {
  /* istanbul ignore next */
  cov_qjdf0nkh7().f[21]++;
  cov_qjdf0nkh7().s[152]++;
  return new Promise((resolve, reject) => {
    /* istanbul ignore next */
    cov_qjdf0nkh7().f[22]++;
    const reader =
    /* istanbul ignore next */
    (cov_qjdf0nkh7().s[153]++, new FileReader());
    /* istanbul ignore next */
    cov_qjdf0nkh7().s[154]++;
    reader.readAsDataURL(file);
    /* istanbul ignore next */
    cov_qjdf0nkh7().s[155]++;
    reader.onload = () => {
      /* istanbul ignore next */
      cov_qjdf0nkh7().f[23]++;
      const result =
      /* istanbul ignore next */
      (cov_qjdf0nkh7().s[156]++, reader.result);
      const base64 =
      /* istanbul ignore next */
      (cov_qjdf0nkh7().s[157]++, result.split(',')[1]);
      /* istanbul ignore next */
      cov_qjdf0nkh7().s[158]++;
      resolve(base64);
    };
    /* istanbul ignore next */
    cov_qjdf0nkh7().s[159]++;
    reader.onerror = error => {
      /* istanbul ignore next */
      cov_qjdf0nkh7().f[24]++;
      cov_qjdf0nkh7().s[160]++;
      return reject(error);
    };
  });
};
/* istanbul ignore next */
cov_qjdf0nkh7().s[161]++;
const saveToScanHistory = async scanResult => {
  /* istanbul ignore next */
  cov_qjdf0nkh7().f[25]++;
  cov_qjdf0nkh7().s[162]++;
  try {
    const {
      data: {
        user
      }
    } =
    /* istanbul ignore next */
    (cov_qjdf0nkh7().s[163]++, await supabase_1.supabase.auth.getUser());
    /* istanbul ignore next */
    cov_qjdf0nkh7().s[164]++;
    if (!user) {
      /* istanbul ignore next */
      cov_qjdf0nkh7().b[32][0]++;
      cov_qjdf0nkh7().s[165]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_qjdf0nkh7().b[32][1]++;
    }
    cov_qjdf0nkh7().s[166]++;
    await supabase_1.supabase.from('food_scan_history').insert([{
      user_id: user.id,
      analysis_id: scanResult.analysis_id,
      food_name: scanResult.name,
      calories: scanResult.calories,
      protein: scanResult.protein,
      carbs: scanResult.carbs,
      fat: scanResult.fat,
      fiber: scanResult.fiber,
      sugar: scanResult.sugar,
      sodium: scanResult.sodium,
      confidence: scanResult.confidence,
      portion_size: scanResult.portion_size,
      weight_grams: scanResult.weight_grams,
      usda_id: scanResult.usda_id,
      created_at: new Date().toISOString()
    }]);
  } catch (error) {
    /* istanbul ignore next */
    cov_qjdf0nkh7().s[167]++;
    console.warn('Failed to save scan to history:', error);
  }
};
/* istanbul ignore next */
cov_qjdf0nkh7().s[168]++;
const generateAnalysisId = () => {
  /* istanbul ignore next */
  cov_qjdf0nkh7().f[26]++;
  cov_qjdf0nkh7().s[169]++;
  return `scan_${Date.now()}_${Math.random().toString(36).substring(2, 15)}`;
};
/* istanbul ignore next */
cov_qjdf0nkh7().s[170]++;
exports.default = exports.useFoodScanner;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,