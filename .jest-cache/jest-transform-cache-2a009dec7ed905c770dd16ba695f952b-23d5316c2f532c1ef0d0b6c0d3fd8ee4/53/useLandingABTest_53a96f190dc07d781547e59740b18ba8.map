{"version":3,"names":["cov_1hfo13c9kb","actualCoverage","s","react_1","require","useLandingABTest","f","startABTest","useCallback","testName","variants","Promise","resolve","setTimeout","error","console","getABTestResult","mockResults","winner","confidence","exports"],"sources":["/workspaces/MyFitHero/src/features/landing/hooks/useLandingABTest.ts"],"sourcesContent":["// src/features/landing/hooks/useLandingABTest.ts\nimport { useCallback } from 'react';\n\nexport interface ABTestResult {\n  winner: string;\n  confidence: number;\n}\n\nexport interface UseLandingABTestReturn {\n  startABTest: (testName: string, variants: string[]) => Promise<boolean>;\n  getABTestResult: (testName: string) => Promise<ABTestResult | null>;\n}\n\nexport const useLandingABTest = (): UseLandingABTestReturn => {\n  const startABTest = useCallback(\n    async (testName: string, variants: string[]): Promise<boolean> => {\n      try {\n        // Mock A/B test setup\n        await new Promise(resolve => setTimeout(resolve, 1000));\n        return true;\n      } catch (error: any) {\n        console.error('Failed to start A/B test:', error);\n        return false;\n      }\n    },\n    []\n  );\n\n  const getABTestResult = useCallback(\n    async (testName: string): Promise<ABTestResult | null> => {\n      try {\n        // Mock A/B test results\n        await new Promise(resolve => setTimeout(resolve, 500));\n\n        // Mock results\n        const mockResults: ABTestResult = {\n          winner: 'variant-a',\n          confidence: 85.6,\n        };\n\n        return mockResults;\n      } catch (error: any) {\n        console.error('Failed to get A/B test result:', error);\n        return null;\n      }\n    },\n    []\n  );\n\n  return {\n    startABTest,\n    getABTestResult,\n  };\n};"],"mappings":"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","ignoreList":[]}