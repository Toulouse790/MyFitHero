{"version":3,"names":["react_1","cov_2m75rlote8","s","__importStar","require","lucide_react_1","appStore_1","supabase_1","BadgeSystem","showProgress","b","compact","f","appStoreUser","appStore","badges","setBadges","useState","isLoading","setIsLoading","predefinedBadges","id","title","description","icon","Calendar","color","bgColor","earned","target","category","rarity","Shield","Zap","Moon","Crown","Star","Heart","Target","useEffect","initializeBadges","data","userBadges","supabase","from","select","eq","stats","earnedBadgeIds","map","badge_id","updatedBadges","badge","isEarned","includes","progress","calculateProgress","earnedAtString","find","earned_at","undefined","earnedAt","Date","checkForNewBadges","error","console","badgeId","Math","min","length","hydrationDays","filter","completed_goals","workoutDays","sleepDays","calculateStreak","perfectDays","completion_rate","nutritionDays","newlyEarned","awardBadge","_error","insert","user_id","toISOString","prev","getBadgeRarityColor","earnedBadges","availableBadges","jsx_runtime_1","jsx","className","children","jsxs","Trophy","size","Award","round","style","width","Unlock","Icon","Lock","slice","progressPercentage","exports","default"],"sources":["/workspaces/MyFitHero/src/features/workout/components/BadgeSystem.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  Trophy,\n  Star,\n  Target,\n  Award,\n  Crown,\n  Zap,\n  Shield,\n  Heart,\n  Calendar,\n  Lock,\n  Unlock,\n  Moon,\n} from 'lucide-react';\nimport { appStore } from '@/store/appStore';\nimport { supabase } from '@/lib/supabase';\n\ninterface Badge {\n  id: string;\n  title: string;\n  description: string;\n  icon: React.ElementType;\n  color: string;\n  bgColor: string;\n  earned: boolean;\n  earnedAt?: Date;\n  progress?: number;\n  target?: number;\n  category: 'fitness' | 'consistency' | 'achievement' | 'milestone';\n  rarity: 'common' | 'rare' | 'epic' | 'legendary';\n}\n\ninterface UserBadge {\n  badge_id: string;\n  earned_at: string;\n  user_id: string;\n}\n\ninterface BadgeSystemProps {\n  showProgress?: boolean;\n  compact?: boolean;\n}\n\nconst BadgeSystem: React.FC<BadgeSystemProps> = ({ showProgress = true, compact = false }) => {\n  const { appStoreUser } = appStore();\n  const [badges, setBadges] = useState<Badge[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  const predefinedBadges: Badge[] = [\n    // Badges de consistance\n    {\n      id: 'first_week',\n      title: 'Première Semaine',\n      description: 'Complétez 7 jours consécutifs',\n      icon: Calendar,\n      color: 'text-green-600',\n      bgColor: 'bg-green-100',\n      earned: false,\n      target: 7,\n      category: 'consistency',\n      rarity: 'common',\n    },\n    {\n      id: 'hydration_master',\n      title: 'Maître Hydratation',\n      description: \"Atteignez votre objectif d'hydratation 30 jours\",\n      icon: Shield,\n      color: 'text-blue-600',\n      bgColor: 'bg-blue-100',\n      earned: false,\n      target: 30,\n      category: 'consistency',\n      rarity: 'rare',\n    },\n    {\n      id: 'workout_warrior',\n      title: 'Guerrier Fitness',\n      description: 'Complétez 50 entraînements',\n      icon: Zap,\n      color: 'text-red-600',\n      bgColor: 'bg-red-100',\n      earned: false,\n      target: 50,\n      category: 'fitness',\n      rarity: 'epic',\n    },\n    {\n      id: 'sleep_champion',\n      title: 'Champion du Sommeil',\n      description: 'Dormez 8h+ pendant 14 jours consécutifs',\n      icon: Moon,\n      color: 'text-purple-600',\n      bgColor: 'bg-purple-100',\n      earned: false,\n      target: 14,\n      category: 'consistency',\n      rarity: 'rare',\n    },\n    {\n      id: 'streak_legend',\n      title: 'Légende de la Régularité',\n      description: 'Maintenez une streak de 100 jours',\n      icon: Crown,\n      color: 'text-yellow-600',\n      bgColor: 'bg-yellow-100',\n      earned: false,\n      target: 100,\n      category: 'achievement',\n      rarity: 'legendary',\n    },\n    {\n      id: 'perfect_week',\n      title: 'Semaine Parfaite',\n      description: 'Complétez 100% de vos objectifs 7 jours',\n      icon: Star,\n      color: 'text-orange-600',\n      bgColor: 'bg-orange-100',\n      earned: false,\n      target: 7,\n      category: 'achievement',\n      rarity: 'epic',\n    },\n    {\n      id: 'nutrition_guru',\n      title: 'Gourou Nutrition',\n      description: 'Suivez votre nutrition 21 jours',\n      icon: Heart,\n      color: 'text-green-600',\n      bgColor: 'bg-green-100',\n      earned: false,\n      target: 21,\n      category: 'consistency',\n      rarity: 'rare',\n    },\n    {\n      id: 'first_milestone',\n      title: 'Premier Jalon',\n      description: 'Atteignez votre premier objectif',\n      icon: Target,\n      color: 'text-blue-600',\n      bgColor: 'bg-blue-100',\n      earned: false,\n      target: 1,\n      category: 'milestone',\n      rarity: 'common',\n    },\n  ];\n\n  useEffect(() => {\n    initializeBadges();\n  }, [appStoreUser]);\n\n  const initializeBadges = async () => {\n    if (!appStoreUser?.id) return;\n\n    setIsLoading(true);\n    try {\n      // Récupérer les badges de l'utilisateur\n      const { data: userBadges } = await (supabase as any)\n        .from('user_badges')\n        .select('*')\n        .eq('user_id', appStoreUser.id) as { data: UserBadge[] | null };\n\n      // Récupérer les statistiques pour calculer les progrès\n      const { data: stats } = await (supabase as any)\n        .from('daily_check_ins')\n        .select('*')\n        .eq('user_id', appStoreUser.id);\n\n      const earnedBadgeIds = userBadges?.map((b: UserBadge) => b.badge_id) || [];\n\n      const updatedBadges = predefinedBadges.map(badge => {\n        const isEarned = earnedBadgeIds.includes(badge.id);\n        const progress = calculateProgress(badge.id, stats || []);\n        const earnedAtString = isEarned\n          ? userBadges?.find((b: UserBadge) => b.badge_id === badge.id)?.earned_at\n          : undefined;\n\n        return {\n          ...badge,\n          earned: isEarned,\n          progress,\n          earnedAt: earnedAtString ? new Date(earnedAtString) : undefined,\n        };\n      });\n\n      setBadges(updatedBadges);\n\n      // Vérifier si des badges peuvent être débloqués\n      await checkForNewBadges(updatedBadges);\n    } catch (error) {\n      // Erreur silencieuse\n      console.error('Erreur lors du chargement des badges:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const calculateProgress = (badgeId: string, stats: any[]): number => {\n    switch (badgeId) {\n      case 'first_week':\n        return Math.min(stats.length, 7);\n      case 'hydration_master': {\n        const hydrationDays = stats.filter((s: any) => s.completed_goals?.includes('hydration')).length;\n        return Math.min(hydrationDays, 30);\n      }\n      case 'workout_warrior': {\n        const workoutDays = stats.filter((s: any) => s.completed_goals?.includes('workout')).length;\n        return Math.min(workoutDays, 50);\n      }\n      case 'sleep_champion': {\n        const sleepDays = stats.filter((s: any) => s.completed_goals?.includes('sleep')).length;\n        return Math.min(sleepDays, 14);\n      }\n      case 'streak_legend':\n        return Math.min(calculateStreak(stats), 100);\n      case 'perfect_week': {\n        const perfectDays = stats.filter((s: any) => s.completion_rate === 100).length;\n        return Math.min(perfectDays, 7);\n      }\n      case 'nutrition_guru': {\n        const nutritionDays = stats.filter((s: any) => s.completed_goals?.includes('nutrition')).length;\n        return Math.min(nutritionDays, 21);\n      }\n      case 'first_milestone':\n        return stats.length > 0 ? 1 : 0;\n      default:\n        return 0;\n    }\n  };\n\n  const calculateStreak = (stats: any[]): number => {\n    // Logique simplifiée pour calculer la streak\n    return stats.filter((s: any) => s.completion_rate >= 75).length;\n  };\n\n  const checkForNewBadges = async (badges: Badge[]) => {\n    const newlyEarned = badges.filter(\n      badge =>\n        !badge.earned &&\n        badge.progress !== undefined &&\n        badge.target !== undefined &&\n        badge.progress >= badge.target\n    );\n\n    for (const badge of newlyEarned) {\n      await awardBadge(badge);\n    }\n  };\n\n  const awardBadge = async (badge: Badge) => {\n    if (!appStoreUser?.id) return;\n    \n    try {\n      const { error: _error } = await (supabase as any).from('user_badges').insert({\n        user_id: appStoreUser.id,\n        badge_id: badge.id,\n        earned_at: new Date().toISOString(),\n      });\n\n      if (!_error) {\n        // Mise à jour locale\n        setBadges(prev =>\n          prev.map(b => (b.id === badge.id ? { ...b, earned: true, earnedAt: new Date() } : b))\n        );\n\n        // Notification (si toast disponible)\n      }\n    } catch (error) {\n      // Erreur silencieuse\n      console.error(\"Erreur lors de l'attribution du badge:\", error);\n    }\n  };\n\n  const getBadgeRarityColor = (rarity: string): string => {\n    switch (rarity) {\n      case 'common':\n        return 'border-gray-300';\n      case 'rare':\n        return 'border-blue-400';\n      case 'epic':\n        return 'border-purple-400';\n      case 'legendary':\n        return 'border-yellow-400';\n      default:\n        return 'border-gray-300';\n    }\n  };\n\n  const earnedBadges = badges.filter(b => b.earned);\n  const availableBadges = badges.filter(b => !b.earned);\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center p-8\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div\n      className={`bg-white rounded-2xl p-6 shadow-lg border border-gray-100 ${compact ? 'p-4' : ''}`}\n    >\n      <div className=\"flex items-center justify-between mb-6\">\n        <div className=\"flex items-center gap-3\">\n          <Trophy className=\"text-yellow-500\" size={28} />\n          <div>\n            <h2 className=\"text-2xl font-bold text-gray-800\">Badges</h2>\n            <p className=\"text-gray-600\">\n              {earnedBadges.length} / {badges.length} débloqués\n            </p>\n          </div>\n        </div>\n\n        <div className=\"flex items-center gap-2 bg-yellow-50 px-4 py-2 rounded-full\">\n          <Award className=\"text-yellow-600\" size={20} />\n          <span className=\"font-bold text-yellow-700\">{earnedBadges.length}</span>\n        </div>\n      </div>\n\n      {!compact && (\n        <div className=\"mb-6\">\n          <div className=\"flex items-center justify-between mb-2\">\n            <span className=\"text-sm font-medium text-gray-700\">Progression globale</span>\n            <span className=\"text-sm font-bold text-gray-900\">\n              {Math.round((earnedBadges.length / badges.length) * 100)}%\n            </span>\n          </div>\n          <div className=\"w-full bg-gray-200 rounded-full h-2\">\n            <div\n              className=\"bg-gradient-to-r from-yellow-500 to-orange-500 h-2 rounded-full transition-all duration-500\"\n              style={{ width: `${(earnedBadges.length / badges.length) * 100}%` }}\n            ></div>\n          </div>\n        </div>\n      )}\n\n      {/* Badges débloqués */}\n      {earnedBadges.length > 0 && (\n        <div className=\"mb-6\">\n          <h3 className=\"text-lg font-semibold text-gray-800 mb-4 flex items-center gap-2\">\n            <Unlock className=\"text-green-500\" size={20} />\n            Badges Débloqués\n          </h3>\n          <div className={`grid ${compact ? 'grid-cols-4' : 'grid-cols-3 md:grid-cols-4'} gap-3`}>\n            {earnedBadges.map(badge => {\n              const Icon = badge.icon;\n              return (\n                <div\n                  key={badge.id}\n                  className={`relative p-4 rounded-xl border-2 ${getBadgeRarityColor(badge.rarity)} ${badge.bgColor} cursor-pointer hover:shadow-md transition-all duration-300`}\n                  title={badge.description}\n                >\n                  <div className=\"flex flex-col items-center gap-2\">\n                    <Icon size={24} className={badge.color} />\n                    {!compact && (\n                      <div className=\"text-center\">\n                        <h4 className=\"font-semibold text-sm text-gray-800\">{badge.title}</h4>\n                        <p className=\"text-xs text-gray-600\">{badge.description}</p>\n                      </div>\n                    )}\n                  </div>\n\n                  {/* Indicateur de rareté */}\n                  {badge.rarity === 'legendary' && (\n                    <div className=\"absolute -top-1 -right-1 w-3 h-3 bg-yellow-400 rounded-full animate-pulse\"></div>\n                  )}\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      )}\n\n      {/* Badges disponibles */}\n      {showProgress && availableBadges.length > 0 && (\n        <div>\n          <h3 className=\"text-lg font-semibold text-gray-800 mb-4 flex items-center gap-2\">\n            <Lock className=\"text-gray-500\" size={20} />\n            Badges à Débloquer\n          </h3>\n          <div className={`grid ${compact ? 'grid-cols-2' : 'grid-cols-1 md:grid-cols-2'} gap-3`}>\n            {availableBadges.slice(0, compact ? 4 : 8).map(badge => {\n              const Icon = badge.icon;\n              const progressPercentage = badge.target\n                ? ((badge.progress || 0) / badge.target) * 100\n                : 0;\n\n              return (\n                <div\n                  key={badge.id}\n                  className=\"p-4 rounded-xl border border-gray-200 bg-gray-50 opacity-75\"\n                >\n                  <div className=\"flex items-center gap-3\">\n                    <Icon size={24} className=\"text-gray-400\" />\n                    <div className=\"flex-1\">\n                      <h4 className=\"font-semibold text-sm text-gray-700\">{badge.title}</h4>\n                      <p className=\"text-xs text-gray-500\">{badge.description}</p>\n\n                      {badge.target && (\n                        <div className=\"mt-2\">\n                          <div className=\"flex items-center justify-between mb-1\">\n                            <span className=\"text-xs text-gray-500\">\n                              {badge.progress || 0} / {badge.target}\n                            </span>\n                            <span className=\"text-xs text-gray-500\">\n                              {Math.round(progressPercentage)}%\n                            </span>\n                          </div>\n                          <div className=\"w-full bg-gray-200 rounded-full h-1\">\n                            <div\n                              className=\"bg-gray-400 h-1 rounded-full transition-all duration-500\"\n                              style={{ width: `${progressPercentage}%` }}\n                            ></div>\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default BadgeSystem;\n"],"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","ignoreList":[]}