40f7a5ebb75ff96c719ed7f21bea1a82
"use strict";

/* istanbul ignore next */
function cov_1hfo13c9kb() {
  var path = "/workspaces/MyFitHero/src/features/landing/hooks/useLandingABTest.ts";
  var hash = "2b01e815fd7a0103ed2595eee59b6ee904a0daeb";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/MyFitHero/src/features/landing/hooks/useLandingABTest.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 34
        }
      },
      "2": {
        start: {
          line: 5,
          column: 16
        },
        end: {
          line: 5,
          column: 32
        }
      },
      "3": {
        start: {
          line: 6,
          column: 25
        },
        end: {
          line: 38,
          column: 1
        }
      },
      "4": {
        start: {
          line: 7,
          column: 24
        },
        end: {
          line: 17,
          column: 10
        }
      },
      "5": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 16,
          column: 9
        }
      },
      "6": {
        start: {
          line: 10,
          column: 12
        },
        end: {
          line: 10,
          column: 68
        }
      },
      "7": {
        start: {
          line: 10,
          column: 41
        },
        end: {
          line: 10,
          column: 66
        }
      },
      "8": {
        start: {
          line: 11,
          column: 12
        },
        end: {
          line: 11,
          column: 24
        }
      },
      "9": {
        start: {
          line: 14,
          column: 12
        },
        end: {
          line: 14,
          column: 62
        }
      },
      "10": {
        start: {
          line: 15,
          column: 12
        },
        end: {
          line: 15,
          column: 25
        }
      },
      "11": {
        start: {
          line: 18,
          column: 28
        },
        end: {
          line: 33,
          column: 10
        }
      },
      "12": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 32,
          column: 9
        }
      },
      "13": {
        start: {
          line: 21,
          column: 12
        },
        end: {
          line: 21,
          column: 67
        }
      },
      "14": {
        start: {
          line: 21,
          column: 41
        },
        end: {
          line: 21,
          column: 65
        }
      },
      "15": {
        start: {
          line: 23,
          column: 32
        },
        end: {
          line: 26,
          column: 13
        }
      },
      "16": {
        start: {
          line: 27,
          column: 12
        },
        end: {
          line: 27,
          column: 31
        }
      },
      "17": {
        start: {
          line: 30,
          column: 12
        },
        end: {
          line: 30,
          column: 67
        }
      },
      "18": {
        start: {
          line: 31,
          column: 12
        },
        end: {
          line: 31,
          column: 24
        }
      },
      "19": {
        start: {
          line: 34,
          column: 4
        },
        end: {
          line: 37,
          column: 6
        }
      },
      "20": {
        start: {
          line: 39,
          column: 0
        },
        end: {
          line: 39,
          column: 44
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 6,
            column: 25
          },
          end: {
            line: 6,
            column: 26
          }
        },
        loc: {
          start: {
            line: 6,
            column: 31
          },
          end: {
            line: 38,
            column: 1
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 7,
            column: 49
          },
          end: {
            line: 7,
            column: 50
          }
        },
        loc: {
          start: {
            line: 7,
            column: 79
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 7
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 10,
            column: 30
          },
          end: {
            line: 10,
            column: 31
          }
        },
        loc: {
          start: {
            line: 10,
            column: 41
          },
          end: {
            line: 10,
            column: 66
          }
        },
        line: 10
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 18,
            column: 53
          },
          end: {
            line: 18,
            column: 54
          }
        },
        loc: {
          start: {
            line: 18,
            column: 73
          },
          end: {
            line: 33,
            column: 5
          }
        },
        line: 18
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 21,
            column: 30
          },
          end: {
            line: 21,
            column: 31
          }
        },
        loc: {
          start: {
            line: 21,
            column: 41
          },
          end: {
            line: 21,
            column: 65
          }
        },
        line: 21
      }
    },
    branchMap: {},
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0
    },
    b: {},
    inputSourceMap: {
      file: "/workspaces/MyFitHero/src/features/landing/hooks/useLandingABTest.ts",
      mappings: ";;;AAAA,iDAAiD;AACjD,iCAAoC;AAY7B,MAAM,gBAAgB,GAAG,GAA2B,EAAE;IAC3D,MAAM,WAAW,GAAG,IAAA,mBAAW,EAC7B,KAAK,EAAE,QAAgB,EAAE,QAAkB,EAAoB,EAAE;QAC/D,IAAI,CAAC;YACH,sBAAsB;YACtB,MAAM,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC;YACxD,OAAO,IAAI,CAAC;QACd,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,OAAO,CAAC,KAAK,CAAC,2BAA2B,EAAE,KAAK,CAAC,CAAC;YAClD,OAAO,KAAK,CAAC;QACf,CAAC;IACH,CAAC,EACD,EAAE,CACH,CAAC;IAEF,MAAM,eAAe,GAAG,IAAA,mBAAW,EACjC,KAAK,EAAE,QAAgB,EAAgC,EAAE;QACvD,IAAI,CAAC;YACH,wBAAwB;YACxB,MAAM,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC;YAEvD,eAAe;YACf,MAAM,WAAW,GAAiB;gBAChC,MAAM,EAAE,WAAW;gBACnB,UAAU,EAAE,IAAI;aACjB,CAAC;YAEF,OAAO,WAAW,CAAC;QACrB,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,OAAO,CAAC,KAAK,CAAC,gCAAgC,EAAE,KAAK,CAAC,CAAC;YACvD,OAAO,IAAI,CAAC;QACd,CAAC;IACH,CAAC,EACD,EAAE,CACH,CAAC;IAEF,OAAO;QACL,WAAW;QACX,eAAe;KAChB,CAAC;AACJ,CAAC,CAAC;AAxCW,QAAA,gBAAgB,oBAwC3B",
      names: [],
      sources: ["/workspaces/MyFitHero/src/features/landing/hooks/useLandingABTest.ts"],
      sourcesContent: ["// src/features/landing/hooks/useLandingABTest.ts\nimport { useCallback } from 'react';\n\nexport interface ABTestResult {\n  winner: string;\n  confidence: number;\n}\n\nexport interface UseLandingABTestReturn {\n  startABTest: (testName: string, variants: string[]) => Promise<boolean>;\n  getABTestResult: (testName: string) => Promise<ABTestResult | null>;\n}\n\nexport const useLandingABTest = (): UseLandingABTestReturn => {\n  const startABTest = useCallback(\n    async (testName: string, variants: string[]): Promise<boolean> => {\n      try {\n        // Mock A/B test setup\n        await new Promise(resolve => setTimeout(resolve, 1000));\n        return true;\n      } catch (error: any) {\n        console.error('Failed to start A/B test:', error);\n        return false;\n      }\n    },\n    []\n  );\n\n  const getABTestResult = useCallback(\n    async (testName: string): Promise<ABTestResult | null> => {\n      try {\n        // Mock A/B test results\n        await new Promise(resolve => setTimeout(resolve, 500));\n\n        // Mock results\n        const mockResults: ABTestResult = {\n          winner: 'variant-a',\n          confidence: 85.6,\n        };\n\n        return mockResults;\n      } catch (error: any) {\n        console.error('Failed to get A/B test result:', error);\n        return null;\n      }\n    },\n    []\n  );\n\n  return {\n    startABTest,\n    getABTestResult,\n  };\n};"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "2b01e815fd7a0103ed2595eee59b6ee904a0daeb"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1hfo13c9kb = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1hfo13c9kb();
cov_1hfo13c9kb().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1hfo13c9kb().s[1]++;
exports.useLandingABTest = void 0;
// src/features/landing/hooks/useLandingABTest.ts
const react_1 =
/* istanbul ignore next */
(cov_1hfo13c9kb().s[2]++, require("react"));
/* istanbul ignore next */
cov_1hfo13c9kb().s[3]++;
const useLandingABTest = () => {
  /* istanbul ignore next */
  cov_1hfo13c9kb().f[0]++;
  const startABTest =
  /* istanbul ignore next */
  (cov_1hfo13c9kb().s[4]++, (0, react_1.useCallback)(async (testName, variants) => {
    /* istanbul ignore next */
    cov_1hfo13c9kb().f[1]++;
    cov_1hfo13c9kb().s[5]++;
    try {
      /* istanbul ignore next */
      cov_1hfo13c9kb().s[6]++;
      // Mock A/B test setup
      await new Promise(resolve => {
        /* istanbul ignore next */
        cov_1hfo13c9kb().f[2]++;
        cov_1hfo13c9kb().s[7]++;
        return setTimeout(resolve, 1000);
      });
      /* istanbul ignore next */
      cov_1hfo13c9kb().s[8]++;
      return true;
    } catch (error) {
      /* istanbul ignore next */
      cov_1hfo13c9kb().s[9]++;
      console.error('Failed to start A/B test:', error);
      /* istanbul ignore next */
      cov_1hfo13c9kb().s[10]++;
      return false;
    }
  }, []));
  const getABTestResult =
  /* istanbul ignore next */
  (cov_1hfo13c9kb().s[11]++, (0, react_1.useCallback)(async testName => {
    /* istanbul ignore next */
    cov_1hfo13c9kb().f[3]++;
    cov_1hfo13c9kb().s[12]++;
    try {
      /* istanbul ignore next */
      cov_1hfo13c9kb().s[13]++;
      // Mock A/B test results
      await new Promise(resolve => {
        /* istanbul ignore next */
        cov_1hfo13c9kb().f[4]++;
        cov_1hfo13c9kb().s[14]++;
        return setTimeout(resolve, 500);
      });
      // Mock results
      const mockResults =
      /* istanbul ignore next */
      (cov_1hfo13c9kb().s[15]++, {
        winner: 'variant-a',
        confidence: 85.6
      });
      /* istanbul ignore next */
      cov_1hfo13c9kb().s[16]++;
      return mockResults;
    } catch (error) {
      /* istanbul ignore next */
      cov_1hfo13c9kb().s[17]++;
      console.error('Failed to get A/B test result:', error);
      /* istanbul ignore next */
      cov_1hfo13c9kb().s[18]++;
      return null;
    }
  }, []));
  /* istanbul ignore next */
  cov_1hfo13c9kb().s[19]++;
  return {
    startABTest,
    getABTestResult
  };
};
/* istanbul ignore next */
cov_1hfo13c9kb().s[20]++;
exports.useLandingABTest = useLandingABTest;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMWhmbzEzYzlrYiIsImFjdHVhbENvdmVyYWdlIiwicyIsInJlYWN0XzEiLCJyZXF1aXJlIiwidXNlTGFuZGluZ0FCVGVzdCIsImYiLCJzdGFydEFCVGVzdCIsInVzZUNhbGxiYWNrIiwidGVzdE5hbWUiLCJ2YXJpYW50cyIsIlByb21pc2UiLCJyZXNvbHZlIiwic2V0VGltZW91dCIsImVycm9yIiwiY29uc29sZSIsImdldEFCVGVzdFJlc3VsdCIsIm1vY2tSZXN1bHRzIiwid2lubmVyIiwiY29uZmlkZW5jZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyIvd29ya3NwYWNlcy9NeUZpdEhlcm8vc3JjL2ZlYXR1cmVzL2xhbmRpbmcvaG9va3MvdXNlTGFuZGluZ0FCVGVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzcmMvZmVhdHVyZXMvbGFuZGluZy9ob29rcy91c2VMYW5kaW5nQUJUZXN0LnRzXG5pbXBvcnQgeyB1c2VDYWxsYmFjayB9IGZyb20gJ3JlYWN0JztcblxuZXhwb3J0IGludGVyZmFjZSBBQlRlc3RSZXN1bHQge1xuICB3aW5uZXI6IHN0cmluZztcbiAgY29uZmlkZW5jZTogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFVzZUxhbmRpbmdBQlRlc3RSZXR1cm4ge1xuICBzdGFydEFCVGVzdDogKHRlc3ROYW1lOiBzdHJpbmcsIHZhcmlhbnRzOiBzdHJpbmdbXSkgPT4gUHJvbWlzZTxib29sZWFuPjtcbiAgZ2V0QUJUZXN0UmVzdWx0OiAodGVzdE5hbWU6IHN0cmluZykgPT4gUHJvbWlzZTxBQlRlc3RSZXN1bHQgfCBudWxsPjtcbn1cblxuZXhwb3J0IGNvbnN0IHVzZUxhbmRpbmdBQlRlc3QgPSAoKTogVXNlTGFuZGluZ0FCVGVzdFJldHVybiA9PiB7XG4gIGNvbnN0IHN0YXJ0QUJUZXN0ID0gdXNlQ2FsbGJhY2soXG4gICAgYXN5bmMgKHRlc3ROYW1lOiBzdHJpbmcsIHZhcmlhbnRzOiBzdHJpbmdbXSk6IFByb21pc2U8Ym9vbGVhbj4gPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gTW9jayBBL0IgdGVzdCBzZXR1cFxuICAgICAgICBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgMTAwMCkpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIHN0YXJ0IEEvQiB0ZXN0OicsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH0sXG4gICAgW11cbiAgKTtcblxuICBjb25zdCBnZXRBQlRlc3RSZXN1bHQgPSB1c2VDYWxsYmFjayhcbiAgICBhc3luYyAodGVzdE5hbWU6IHN0cmluZyk6IFByb21pc2U8QUJUZXN0UmVzdWx0IHwgbnVsbD4gPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gTW9jayBBL0IgdGVzdCByZXN1bHRzXG4gICAgICAgIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCA1MDApKTtcblxuICAgICAgICAvLyBNb2NrIHJlc3VsdHNcbiAgICAgICAgY29uc3QgbW9ja1Jlc3VsdHM6IEFCVGVzdFJlc3VsdCA9IHtcbiAgICAgICAgICB3aW5uZXI6ICd2YXJpYW50LWEnLFxuICAgICAgICAgIGNvbmZpZGVuY2U6IDg1LjYsXG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIG1vY2tSZXN1bHRzO1xuICAgICAgfSBjYXRjaCAoZXJyb3I6IGFueSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gZ2V0IEEvQiB0ZXN0IHJlc3VsdDonLCBlcnJvcik7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgIH0sXG4gICAgW11cbiAgKTtcblxuICByZXR1cm4ge1xuICAgIHN0YXJ0QUJUZXN0LFxuICAgIGdldEFCVGVzdFJlc3VsdCxcbiAgfTtcbn07Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7SUF1Qk87SUFBQUEsY0FBQSxZQUFBQSxDQUFBO01BQUEsT0FBQUMsY0FBQTtJQUFBO0VBQUE7RUFBQSxPQUFBQSxjQUFBO0FBQUE7QUFBQUQsY0FBQTtBQUFBQSxjQUFBLEdBQUFFLENBQUE7Ozs7Ozs7QUF2QlA7QUFDQSxNQUFBQyxPQUFBO0FBQUE7QUFBQSxDQUFBSCxjQUFBLEdBQUFFLENBQUEsT0FBQUUsT0FBQTtBQUFvQztBQUFBSixjQUFBLEdBQUFFLENBQUE7QUFZN0IsTUFBTUcsZ0JBQWdCLEdBQUdBLENBQUEsS0FBNkI7RUFBQTtFQUFBTCxjQUFBLEdBQUFNLENBQUE7RUFDM0QsTUFBTUMsV0FBVztFQUFBO0VBQUEsQ0FBQVAsY0FBQSxHQUFBRSxDQUFBLE9BQUcsSUFBQUMsT0FBQSxDQUFBSyxXQUFXLEVBQzdCLE9BQU9DLFFBQWdCLEVBQUVDLFFBQWtCLEtBQXNCO0lBQUE7SUFBQVYsY0FBQSxHQUFBTSxDQUFBO0lBQUFOLGNBQUEsR0FBQUUsQ0FBQTtJQUMvRCxJQUFJO01BQUE7TUFBQUYsY0FBQSxHQUFBRSxDQUFBO01BQ0Y7TUFDQSxNQUFNLElBQUlTLE9BQU8sQ0FBQ0MsT0FBTyxJQUFJO1FBQUE7UUFBQVosY0FBQSxHQUFBTSxDQUFBO1FBQUFOLGNBQUEsR0FBQUUsQ0FBQTtRQUFBLE9BQUFXLFVBQVUsQ0FBQ0QsT0FBTyxFQUFFLElBQUksQ0FBQztNQUFELENBQUMsQ0FBQztNQUFDO01BQUFaLGNBQUEsR0FBQUUsQ0FBQTtNQUN4RCxPQUFPLElBQUk7SUFDYixDQUFDLENBQUMsT0FBT1ksS0FBVSxFQUFFO01BQUE7TUFBQWQsY0FBQSxHQUFBRSxDQUFBO01BQ25CYSxPQUFPLENBQUNELEtBQUssQ0FBQywyQkFBMkIsRUFBRUEsS0FBSyxDQUFDO01BQUM7TUFBQWQsY0FBQSxHQUFBRSxDQUFBO01BQ2xELE9BQU8sS0FBSztJQUNkO0VBQ0YsQ0FBQyxFQUNELEVBQUUsQ0FDSDtFQUVELE1BQU1jLGVBQWU7RUFBQTtFQUFBLENBQUFoQixjQUFBLEdBQUFFLENBQUEsUUFBRyxJQUFBQyxPQUFBLENBQUFLLFdBQVcsRUFDakMsTUFBT0MsUUFBZ0IsSUFBa0M7SUFBQTtJQUFBVCxjQUFBLEdBQUFNLENBQUE7SUFBQU4sY0FBQSxHQUFBRSxDQUFBO0lBQ3ZELElBQUk7TUFBQTtNQUFBRixjQUFBLEdBQUFFLENBQUE7TUFDRjtNQUNBLE1BQU0sSUFBSVMsT0FBTyxDQUFDQyxPQUFPLElBQUk7UUFBQTtRQUFBWixjQUFBLEdBQUFNLENBQUE7UUFBQU4sY0FBQSxHQUFBRSxDQUFBO1FBQUEsT0FBQVcsVUFBVSxDQUFDRCxPQUFPLEVBQUUsR0FBRyxDQUFDO01BQUQsQ0FBQyxDQUFDO01BRXREO01BQ0EsTUFBTUssV0FBVztNQUFBO01BQUEsQ0FBQWpCLGNBQUEsR0FBQUUsQ0FBQSxRQUFpQjtRQUNoQ2dCLE1BQU0sRUFBRSxXQUFXO1FBQ25CQyxVQUFVLEVBQUU7T0FDYjtNQUFDO01BQUFuQixjQUFBLEdBQUFFLENBQUE7TUFFRixPQUFPZSxXQUFXO0lBQ3BCLENBQUMsQ0FBQyxPQUFPSCxLQUFVLEVBQUU7TUFBQTtNQUFBZCxjQUFBLEdBQUFFLENBQUE7TUFDbkJhLE9BQU8sQ0FBQ0QsS0FBSyxDQUFDLGdDQUFnQyxFQUFFQSxLQUFLLENBQUM7TUFBQztNQUFBZCxjQUFBLEdBQUFFLENBQUE7TUFDdkQsT0FBTyxJQUFJO0lBQ2I7RUFDRixDQUFDLEVBQ0QsRUFBRSxDQUNIO0VBQUM7RUFBQUYsY0FBQSxHQUFBRSxDQUFBO0VBRUYsT0FBTztJQUNMSyxXQUFXO0lBQ1hTO0dBQ0Q7QUFDSCxDQUFDO0FBQUM7QUFBQWhCLGNBQUEsR0FBQUUsQ0FBQTtBQXhDV2tCLE9BQUEsQ0FBQWYsZ0JBQWdCLEdBQUFBLGdCQUFBIiwiaWdub3JlTGlzdCI6W119