323505040ff314d51849b793826fb7e5
"use strict";

/* istanbul ignore next */
function cov_1glnwcswo1() {
  var path = "/workspaces/MyFitHero/src/features/auth/services/auth.service.ts";
  var hash = "b6f1160cf97904be67e9bbea1568875391423977";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/MyFitHero/src/features/auth/services/auth.service.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 29
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 37,
          column: 9
        }
      },
      "3": {
        start: {
          line: 9,
          column: 29
        },
        end: {
          line: 13,
          column: 14
        }
      },
      "4": {
        start: {
          line: 14,
          column: 12
        },
        end: {
          line: 17,
          column: 13
        }
      },
      "5": {
        start: {
          line: 15,
          column: 30
        },
        end: {
          line: 15,
          column: 51
        }
      },
      "6": {
        start: {
          line: 16,
          column: 16
        },
        end: {
          line: 16,
          column: 72
        }
      },
      "7": {
        start: {
          line: 18,
          column: 34
        },
        end: {
          line: 18,
          column: 55
        }
      },
      "8": {
        start: {
          line: 20,
          column: 12
        },
        end: {
          line: 29,
          column: 13
        }
      },
      "9": {
        start: {
          line: 21,
          column: 16
        },
        end: {
          line: 21,
          column: 88
        }
      },
      "10": {
        start: {
          line: 22,
          column: 16
        },
        end: {
          line: 22,
          column: 97
        }
      },
      "11": {
        start: {
          line: 23,
          column: 16
        },
        end: {
          line: 23,
          column: 96
        }
      },
      "12": {
        start: {
          line: 26,
          column: 16
        },
        end: {
          line: 26,
          column: 90
        }
      },
      "13": {
        start: {
          line: 27,
          column: 16
        },
        end: {
          line: 27,
          column: 99
        }
      },
      "14": {
        start: {
          line: 28,
          column: 16
        },
        end: {
          line: 28,
          column: 98
        }
      },
      "15": {
        start: {
          line: 30,
          column: 12
        },
        end: {
          line: 30,
          column: 33
        }
      },
      "16": {
        start: {
          line: 34,
          column: 12
        },
        end: {
          line: 34,
          column: 65
        }
      },
      "17": {
        start: {
          line: 36,
          column: 12
        },
        end: {
          line: 36,
          column: 24
        }
      },
      "18": {
        start: {
          line: 41,
          column: 8
        },
        end: {
          line: 57,
          column: 9
        }
      },
      "19": {
        start: {
          line: 42,
          column: 29
        },
        end: {
          line: 46,
          column: 14
        }
      },
      "20": {
        start: {
          line: 47,
          column: 12
        },
        end: {
          line: 50,
          column: 13
        }
      },
      "21": {
        start: {
          line: 48,
          column: 30
        },
        end: {
          line: 48,
          column: 51
        }
      },
      "22": {
        start: {
          line: 49,
          column: 16
        },
        end: {
          line: 49,
          column: 81
        }
      },
      "23": {
        start: {
          line: 51,
          column: 12
        },
        end: {
          line: 51,
          column: 41
        }
      },
      "24": {
        start: {
          line: 55,
          column: 12
        },
        end: {
          line: 55,
          column: 66
        }
      },
      "25": {
        start: {
          line: 56,
          column: 12
        },
        end: {
          line: 56,
          column: 24
        }
      },
      "26": {
        start: {
          line: 61,
          column: 8
        },
        end: {
          line: 82,
          column: 9
        }
      },
      "27": {
        start: {
          line: 62,
          column: 29
        },
        end: {
          line: 66,
          column: 14
        }
      },
      "28": {
        start: {
          line: 67,
          column: 12
        },
        end: {
          line: 70,
          column: 13
        }
      },
      "29": {
        start: {
          line: 68,
          column: 30
        },
        end: {
          line: 68,
          column: 51
        }
      },
      "30": {
        start: {
          line: 69,
          column: 16
        },
        end: {
          line: 69,
          column: 78
        }
      },
      "31": {
        start: {
          line: 71,
          column: 34
        },
        end: {
          line: 71,
          column: 55
        }
      },
      "32": {
        start: {
          line: 73,
          column: 12
        },
        end: {
          line: 73,
          column: 84
        }
      },
      "33": {
        start: {
          line: 74,
          column: 12
        },
        end: {
          line: 74,
          column: 93
        }
      },
      "34": {
        start: {
          line: 75,
          column: 12
        },
        end: {
          line: 75,
          column: 92
        }
      },
      "35": {
        start: {
          line: 76,
          column: 12
        },
        end: {
          line: 76,
          column: 33
        }
      },
      "36": {
        start: {
          line: 80,
          column: 12
        },
        end: {
          line: 80,
          column: 71
        }
      },
      "37": {
        start: {
          line: 81,
          column: 12
        },
        end: {
          line: 81,
          column: 24
        }
      },
      "38": {
        start: {
          line: 86,
          column: 8
        },
        end: {
          line: 105,
          column: 9
        }
      },
      "39": {
        start: {
          line: 87,
          column: 26
        },
        end: {
          line: 87,
          column: 47
        }
      },
      "40": {
        start: {
          line: 88,
          column: 12
        },
        end: {
          line: 96,
          column: 13
        }
      },
      "41": {
        start: {
          line: 89,
          column: 16
        },
        end: {
          line: 95,
          column: 19
        }
      },
      "42": {
        start: {
          line: 100,
          column: 12
        },
        end: {
          line: 100,
          column: 67
        }
      },
      "43": {
        start: {
          line: 104,
          column: 12
        },
        end: {
          line: 104,
          column: 31
        }
      },
      "44": {
        start: {
          line: 109,
          column: 8
        },
        end: {
          line: 134,
          column: 9
        }
      },
      "45": {
        start: {
          line: 110,
          column: 33
        },
        end: {
          line: 110,
          column: 55
        }
      },
      "46": {
        start: {
          line: 111,
          column: 12
        },
        end: {
          line: 113,
          column: 13
        }
      },
      "47": {
        start: {
          line: 112,
          column: 16
        },
        end: {
          line: 112,
          column: 78
        }
      },
      "48": {
        start: {
          line: 114,
          column: 29
        },
        end: {
          line: 118,
          column: 14
        }
      },
      "49": {
        start: {
          line: 119,
          column: 12
        },
        end: {
          line: 122,
          column: 13
        }
      },
      "50": {
        start: {
          line: 120,
          column: 30
        },
        end: {
          line: 120,
          column: 51
        }
      },
      "51": {
        start: {
          line: 121,
          column: 16
        },
        end: {
          line: 121,
          column: 93
        }
      },
      "52": {
        start: {
          line: 123,
          column: 36
        },
        end: {
          line: 123,
          column: 57
        }
      },
      "53": {
        start: {
          line: 125,
          column: 28
        },
        end: {
          line: 125,
          column: 96
        }
      },
      "54": {
        start: {
          line: 126,
          column: 12
        },
        end: {
          line: 126,
          column: 73
        }
      },
      "55": {
        start: {
          line: 127,
          column: 12
        },
        end: {
          line: 127,
          column: 35
        }
      },
      "56": {
        start: {
          line: 131,
          column: 12
        },
        end: {
          line: 131,
          column: 78
        }
      },
      "57": {
        start: {
          line: 132,
          column: 12
        },
        end: {
          line: 132,
          column: 31
        }
      },
      "58": {
        start: {
          line: 133,
          column: 12
        },
        end: {
          line: 133,
          column: 24
        }
      },
      "59": {
        start: {
          line: 139,
          column: 8
        },
        end: {
          line: 154,
          column: 9
        }
      },
      "60": {
        start: {
          line: 140,
          column: 29
        },
        end: {
          line: 144,
          column: 14
        }
      },
      "61": {
        start: {
          line: 145,
          column: 12
        },
        end: {
          line: 148,
          column: 13
        }
      },
      "62": {
        start: {
          line: 146,
          column: 30
        },
        end: {
          line: 146,
          column: 51
        }
      },
      "63": {
        start: {
          line: 147,
          column: 16
        },
        end: {
          line: 147,
          column: 98
        }
      },
      "64": {
        start: {
          line: 152,
          column: 12
        },
        end: {
          line: 152,
          column: 69
        }
      },
      "65": {
        start: {
          line: 153,
          column: 12
        },
        end: {
          line: 153,
          column: 24
        }
      },
      "66": {
        start: {
          line: 158,
          column: 8
        },
        end: {
          line: 173,
          column: 9
        }
      },
      "67": {
        start: {
          line: 159,
          column: 29
        },
        end: {
          line: 163,
          column: 14
        }
      },
      "68": {
        start: {
          line: 164,
          column: 12
        },
        end: {
          line: 167,
          column: 13
        }
      },
      "69": {
        start: {
          line: 165,
          column: 30
        },
        end: {
          line: 165,
          column: 51
        }
      },
      "70": {
        start: {
          line: 166,
          column: 16
        },
        end: {
          line: 166,
          column: 87
        }
      },
      "71": {
        start: {
          line: 171,
          column: 12
        },
        end: {
          line: 171,
          column: 74
        }
      },
      "72": {
        start: {
          line: 172,
          column: 12
        },
        end: {
          line: 172,
          column: 24
        }
      },
      "73": {
        start: {
          line: 177,
          column: 8
        },
        end: {
          line: 195,
          column: 9
        }
      },
      "74": {
        start: {
          line: 178,
          column: 29
        },
        end: {
          line: 185,
          column: 14
        }
      },
      "75": {
        start: {
          line: 186,
          column: 12
        },
        end: {
          line: 189,
          column: 13
        }
      },
      "76": {
        start: {
          line: 187,
          column: 30
        },
        end: {
          line: 187,
          column: 51
        }
      },
      "77": {
        start: {
          line: 188,
          column: 16
        },
        end: {
          line: 188,
          column: 94
        }
      },
      "78": {
        start: {
          line: 193,
          column: 12
        },
        end: {
          line: 193,
          column: 68
        }
      },
      "79": {
        start: {
          line: 194,
          column: 12
        },
        end: {
          line: 194,
          column: 24
        }
      },
      "80": {
        start: {
          line: 200,
          column: 8
        },
        end: {
          line: 225,
          column: 9
        }
      },
      "81": {
        start: {
          line: 201,
          column: 26
        },
        end: {
          line: 201,
          column: 47
        }
      },
      "82": {
        start: {
          line: 202,
          column: 12
        },
        end: {
          line: 203,
          column: 28
        }
      },
      "83": {
        start: {
          line: 203,
          column: 16
        },
        end: {
          line: 203,
          column: 28
        }
      },
      "84": {
        start: {
          line: 204,
          column: 29
        },
        end: {
          line: 206,
          column: 14
        }
      },
      "85": {
        start: {
          line: 207,
          column: 12
        },
        end: {
          line: 213,
          column: 13
        }
      },
      "86": {
        start: {
          line: 208,
          column: 16
        },
        end: {
          line: 211,
          column: 17
        }
      },
      "87": {
        start: {
          line: 209,
          column: 20
        },
        end: {
          line: 209,
          column: 39
        }
      },
      "88": {
        start: {
          line: 210,
          column: 20
        },
        end: {
          line: 210,
          column: 32
        }
      },
      "89": {
        start: {
          line: 212,
          column: 16
        },
        end: {
          line: 212,
          column: 76
        }
      },
      "90": {
        start: {
          line: 214,
          column: 25
        },
        end: {
          line: 214,
          column: 46
        }
      },
      "91": {
        start: {
          line: 216,
          column: 28
        },
        end: {
          line: 216,
          column: 95
        }
      },
      "92": {
        start: {
          line: 217,
          column: 12
        },
        end: {
          line: 217,
          column: 65
        }
      },
      "93": {
        start: {
          line: 218,
          column: 12
        },
        end: {
          line: 218,
          column: 24
        }
      },
      "94": {
        start: {
          line: 222,
          column: 12
        },
        end: {
          line: 222,
          column: 64
        }
      },
      "95": {
        start: {
          line: 224,
          column: 12
        },
        end: {
          line: 224,
          column: 24
        }
      },
      "96": {
        start: {
          line: 229,
          column: 8
        },
        end: {
          line: 252,
          column: 9
        }
      },
      "97": {
        start: {
          line: 230,
          column: 29
        },
        end: {
          line: 237,
          column: 14
        }
      },
      "98": {
        start: {
          line: 238,
          column: 12
        },
        end: {
          line: 241,
          column: 13
        }
      },
      "99": {
        start: {
          line: 239,
          column: 30
        },
        end: {
          line: 239,
          column: 51
        }
      },
      "100": {
        start: {
          line: 240,
          column: 16
        },
        end: {
          line: 240,
          column: 92
        }
      },
      "101": {
        start: {
          line: 242,
          column: 32
        },
        end: {
          line: 242,
          column: 53
        }
      },
      "102": {
        start: {
          line: 244,
          column: 28
        },
        end: {
          line: 244,
          column: 95
        }
      },
      "103": {
        start: {
          line: 245,
          column: 12
        },
        end: {
          line: 245,
          column: 72
        }
      },
      "104": {
        start: {
          line: 246,
          column: 12
        },
        end: {
          line: 246,
          column: 31
        }
      },
      "105": {
        start: {
          line: 250,
          column: 12
        },
        end: {
          line: 250,
          column: 63
        }
      },
      "106": {
        start: {
          line: 251,
          column: 12
        },
        end: {
          line: 251,
          column: 24
        }
      },
      "107": {
        start: {
          line: 256,
          column: 8
        },
        end: {
          line: 275,
          column: 9
        }
      },
      "108": {
        start: {
          line: 257,
          column: 29
        },
        end: {
          line: 264,
          column: 14
        }
      },
      "109": {
        start: {
          line: 265,
          column: 12
        },
        end: {
          line: 268,
          column: 13
        }
      },
      "110": {
        start: {
          line: 266,
          column: 30
        },
        end: {
          line: 266,
          column: 51
        }
      },
      "111": {
        start: {
          line: 267,
          column: 16
        },
        end: {
          line: 267,
          column: 98
        }
      },
      "112": {
        start: {
          line: 269,
          column: 12
        },
        end: {
          line: 269,
          column: 41
        }
      },
      "113": {
        start: {
          line: 273,
          column: 12
        },
        end: {
          line: 273,
          column: 68
        }
      },
      "114": {
        start: {
          line: 274,
          column: 12
        },
        end: {
          line: 274,
          column: 24
        }
      },
      "115": {
        start: {
          line: 279,
          column: 8
        },
        end: {
          line: 298,
          column: 9
        }
      },
      "116": {
        start: {
          line: 280,
          column: 29
        },
        end: {
          line: 287,
          column: 14
        }
      },
      "117": {
        start: {
          line: 288,
          column: 12
        },
        end: {
          line: 291,
          column: 13
        }
      },
      "118": {
        start: {
          line: 289,
          column: 30
        },
        end: {
          line: 289,
          column: 51
        }
      },
      "119": {
        start: {
          line: 290,
          column: 16
        },
        end: {
          line: 290,
          column: 100
        }
      },
      "120": {
        start: {
          line: 292,
          column: 12
        },
        end: {
          line: 292,
          column: 41
        }
      },
      "121": {
        start: {
          line: 296,
          column: 12
        },
        end: {
          line: 296,
          column: 71
        }
      },
      "122": {
        start: {
          line: 297,
          column: 12
        },
        end: {
          line: 297,
          column: 24
        }
      },
      "123": {
        start: {
          line: 303,
          column: 8
        },
        end: {
          line: 318,
          column: 9
        }
      },
      "124": {
        start: {
          line: 304,
          column: 29
        },
        end: {
          line: 308,
          column: 14
        }
      },
      "125": {
        start: {
          line: 309,
          column: 12
        },
        end: {
          line: 312,
          column: 13
        }
      },
      "126": {
        start: {
          line: 310,
          column: 30
        },
        end: {
          line: 310,
          column: 51
        }
      },
      "127": {
        start: {
          line: 311,
          column: 16
        },
        end: {
          line: 311,
          column: 91
        }
      },
      "128": {
        start: {
          line: 316,
          column: 12
        },
        end: {
          line: 316,
          column: 63
        }
      },
      "129": {
        start: {
          line: 317,
          column: 12
        },
        end: {
          line: 317,
          column: 24
        }
      },
      "130": {
        start: {
          line: 322,
          column: 8
        },
        end: {
          line: 336,
          column: 9
        }
      },
      "131": {
        start: {
          line: 323,
          column: 29
        },
        end: {
          line: 326,
          column: 14
        }
      },
      "132": {
        start: {
          line: 327,
          column: 12
        },
        end: {
          line: 330,
          column: 13
        }
      },
      "133": {
        start: {
          line: 328,
          column: 30
        },
        end: {
          line: 328,
          column: 51
        }
      },
      "134": {
        start: {
          line: 329,
          column: 16
        },
        end: {
          line: 329,
          column: 90
        }
      },
      "135": {
        start: {
          line: 334,
          column: 12
        },
        end: {
          line: 334,
          column: 70
        }
      },
      "136": {
        start: {
          line: 335,
          column: 12
        },
        end: {
          line: 335,
          column: 24
        }
      },
      "137": {
        start: {
          line: 341,
          column: 8
        },
        end: {
          line: 354,
          column: 9
        }
      },
      "138": {
        start: {
          line: 342,
          column: 29
        },
        end: {
          line: 344,
          column: 14
        }
      },
      "139": {
        start: {
          line: 345,
          column: 12
        },
        end: {
          line: 347,
          column: 13
        }
      },
      "140": {
        start: {
          line: 346,
          column: 16
        },
        end: {
          line: 346,
          column: 83
        }
      },
      "141": {
        start: {
          line: 348,
          column: 12
        },
        end: {
          line: 348,
          column: 41
        }
      },
      "142": {
        start: {
          line: 352,
          column: 12
        },
        end: {
          line: 352,
          column: 69
        }
      },
      "143": {
        start: {
          line: 353,
          column: 12
        },
        end: {
          line: 353,
          column: 43
        }
      },
      "144": {
        start: {
          line: 359,
          column: 8
        },
        end: {
          line: 376,
          column: 9
        }
      },
      "145": {
        start: {
          line: 360,
          column: 26
        },
        end: {
          line: 360,
          column: 47
        }
      },
      "146": {
        start: {
          line: 361,
          column: 12
        },
        end: {
          line: 363,
          column: 13
        }
      },
      "147": {
        start: {
          line: 362,
          column: 16
        },
        end: {
          line: 362,
          column: 103
        }
      },
      "148": {
        start: {
          line: 364,
          column: 29
        },
        end: {
          line: 366,
          column: 14
        }
      },
      "149": {
        start: {
          line: 367,
          column: 12
        },
        end: {
          line: 369,
          column: 13
        }
      },
      "150": {
        start: {
          line: 368,
          column: 16
        },
        end: {
          line: 368,
          column: 103
        }
      },
      "151": {
        start: {
          line: 370,
          column: 12
        },
        end: {
          line: 370,
          column: 41
        }
      },
      "152": {
        start: {
          line: 374,
          column: 12
        },
        end: {
          line: 374,
          column: 57
        }
      },
      "153": {
        start: {
          line: 375,
          column: 12
        },
        end: {
          line: 375,
          column: 99
        }
      },
      "154": {
        start: {
          line: 381,
          column: 8
        },
        end: {
          line: 381,
          column: 94
        }
      },
      "155": {
        start: {
          line: 385,
          column: 8
        },
        end: {
          line: 385,
          column: 112
        }
      },
      "156": {
        start: {
          line: 389,
          column: 8
        },
        end: {
          line: 396,
          column: 9
        }
      },
      "157": {
        start: {
          line: 390,
          column: 28
        },
        end: {
          line: 390,
          column: 104
        }
      },
      "158": {
        start: {
          line: 391,
          column: 12
        },
        end: {
          line: 391,
          column: 56
        }
      },
      "159": {
        start: {
          line: 395,
          column: 12
        },
        end: {
          line: 395,
          column: 24
        }
      },
      "160": {
        start: {
          line: 400,
          column: 8
        },
        end: {
          line: 400,
          column: 39
        }
      },
      "161": {
        start: {
          line: 404,
          column: 8
        },
        end: {
          line: 404,
          column: 48
        }
      },
      "162": {
        start: {
          line: 405,
          column: 8
        },
        end: {
          line: 405,
          column: 56
        }
      },
      "163": {
        start: {
          line: 406,
          column: 8
        },
        end: {
          line: 406,
          column: 47
        }
      },
      "164": {
        start: {
          line: 407,
          column: 8
        },
        end: {
          line: 407,
          column: 50
        }
      },
      "165": {
        start: {
          line: 408,
          column: 8
        },
        end: {
          line: 408,
          column: 58
        }
      },
      "166": {
        start: {
          line: 409,
          column: 8
        },
        end: {
          line: 409,
          column: 49
        }
      },
      "167": {
        start: {
          line: 413,
          column: 25
        },
        end: {
          line: 413,
          column: 43
        }
      },
      "168": {
        start: {
          line: 414,
          column: 8
        },
        end: {
          line: 432,
          column: 10
        }
      },
      "169": {
        start: {
          line: 435,
          column: 8
        },
        end: {
          line: 457,
          column: 10
        }
      },
      "170": {
        start: {
          line: 460,
          column: 8
        },
        end: {
          line: 468,
          column: 10
        }
      },
      "171": {
        start: {
          line: 471,
          column: 0
        },
        end: {
          line: 471,
          column: 34
        }
      },
      "172": {
        start: {
          line: 472,
          column: 0
        },
        end: {
          line: 477,
          column: 3
        }
      },
      "173": {
        start: {
          line: 478,
          column: 0
        },
        end: {
          line: 483,
          column: 3
        }
      },
      "174": {
        start: {
          line: 484,
          column: 0
        },
        end: {
          line: 489,
          column: 3
        }
      },
      "175": {
        start: {
          line: 490,
          column: 0
        },
        end: {
          line: 495,
          column: 3
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 4
          },
          end: {
            line: 7,
            column: 5
          }
        },
        loc: {
          start: {
            line: 7,
            column: 36
          },
          end: {
            line: 38,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 40,
            column: 4
          },
          end: {
            line: 40,
            column: 5
          }
        },
        loc: {
          start: {
            line: 40,
            column: 32
          },
          end: {
            line: 58,
            column: 5
          }
        },
        line: 40
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 60,
            column: 4
          },
          end: {
            line: 60,
            column: 5
          }
        },
        loc: {
          start: {
            line: 60,
            column: 45
          },
          end: {
            line: 83,
            column: 5
          }
        },
        line: 60
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 85,
            column: 4
          },
          end: {
            line: 85,
            column: 5
          }
        },
        loc: {
          start: {
            line: 85,
            column: 26
          },
          end: {
            line: 106,
            column: 5
          }
        },
        line: 85
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 108,
            column: 4
          },
          end: {
            line: 108,
            column: 5
          }
        },
        loc: {
          start: {
            line: 108,
            column: 32
          },
          end: {
            line: 135,
            column: 5
          }
        },
        line: 108
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 138,
            column: 4
          },
          end: {
            line: 138,
            column: 5
          }
        },
        loc: {
          start: {
            line: 138,
            column: 44
          },
          end: {
            line: 155,
            column: 5
          }
        },
        line: 138
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 157,
            column: 4
          },
          end: {
            line: 157,
            column: 5
          }
        },
        loc: {
          start: {
            line: 157,
            column: 51
          },
          end: {
            line: 174,
            column: 5
          }
        },
        line: 157
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 176,
            column: 4
          },
          end: {
            line: 176,
            column: 5
          }
        },
        loc: {
          start: {
            line: 176,
            column: 38
          },
          end: {
            line: 196,
            column: 5
          }
        },
        line: 176
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 199,
            column: 4
          },
          end: {
            line: 199,
            column: 5
          }
        },
        loc: {
          start: {
            line: 199,
            column: 34
          },
          end: {
            line: 226,
            column: 5
          }
        },
        line: 199
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 228,
            column: 4
          },
          end: {
            line: 228,
            column: 5
          }
        },
        loc: {
          start: {
            line: 228,
            column: 37
          },
          end: {
            line: 253,
            column: 5
          }
        },
        line: 228
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 255,
            column: 4
          },
          end: {
            line: 255,
            column: 5
          }
        },
        loc: {
          start: {
            line: 255,
            column: 41
          },
          end: {
            line: 276,
            column: 5
          }
        },
        line: 255
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 278,
            column: 4
          },
          end: {
            line: 278,
            column: 5
          }
        },
        loc: {
          start: {
            line: 278,
            column: 41
          },
          end: {
            line: 299,
            column: 5
          }
        },
        line: 278
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 302,
            column: 4
          },
          end: {
            line: 302,
            column: 5
          }
        },
        loc: {
          start: {
            line: 302,
            column: 36
          },
          end: {
            line: 319,
            column: 5
          }
        },
        line: 302
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 321,
            column: 4
          },
          end: {
            line: 321,
            column: 5
          }
        },
        loc: {
          start: {
            line: 321,
            column: 43
          },
          end: {
            line: 337,
            column: 5
          }
        },
        line: 321
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 340,
            column: 4
          },
          end: {
            line: 340,
            column: 5
          }
        },
        loc: {
          start: {
            line: 340,
            column: 32
          },
          end: {
            line: 355,
            column: 5
          }
        },
        line: 340
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 358,
            column: 4
          },
          end: {
            line: 358,
            column: 5
          }
        },
        loc: {
          start: {
            line: 358,
            column: 34
          },
          end: {
            line: 377,
            column: 5
          }
        },
        line: 358
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 380,
            column: 4
          },
          end: {
            line: 380,
            column: 5
          }
        },
        loc: {
          start: {
            line: 380,
            column: 28
          },
          end: {
            line: 382,
            column: 5
          }
        },
        line: 380
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 384,
            column: 4
          },
          end: {
            line: 384,
            column: 5
          }
        },
        loc: {
          start: {
            line: 384,
            column: 29
          },
          end: {
            line: 386,
            column: 5
          }
        },
        line: 384
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 388,
            column: 4
          },
          end: {
            line: 388,
            column: 5
          }
        },
        loc: {
          start: {
            line: 388,
            column: 27
          },
          end: {
            line: 397,
            column: 5
          }
        },
        line: 388
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 399,
            column: 4
          },
          end: {
            line: 399,
            column: 5
          }
        },
        loc: {
          start: {
            line: 399,
            column: 29
          },
          end: {
            line: 401,
            column: 5
          }
        },
        line: 399
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 403,
            column: 4
          },
          end: {
            line: 403,
            column: 5
          }
        },
        loc: {
          start: {
            line: 403,
            column: 25
          },
          end: {
            line: 410,
            column: 5
          }
        },
        line: 403
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 412,
            column: 4
          },
          end: {
            line: 412,
            column: 5
          }
        },
        loc: {
          start: {
            line: 412,
            column: 39
          },
          end: {
            line: 433,
            column: 5
          }
        },
        line: 412
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 434,
            column: 4
          },
          end: {
            line: 434,
            column: 5
          }
        },
        loc: {
          start: {
            line: 434,
            column: 25
          },
          end: {
            line: 458,
            column: 5
          }
        },
        line: 434
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 459,
            column: 4
          },
          end: {
            line: 459,
            column: 5
          }
        },
        loc: {
          start: {
            line: 459,
            column: 30
          },
          end: {
            line: 469,
            column: 5
          }
        },
        line: 459
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 14,
            column: 12
          },
          end: {
            line: 17,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 14,
            column: 12
          },
          end: {
            line: 17,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 14
      },
      "1": {
        loc: {
          start: {
            line: 16,
            column: 32
          },
          end: {
            line: 16,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 16,
            column: 32
          },
          end: {
            line: 16,
            column: 45
          }
        }, {
          start: {
            line: 16,
            column: 49
          },
          end: {
            line: 16,
            column: 70
          }
        }],
        line: 16
      },
      "2": {
        loc: {
          start: {
            line: 20,
            column: 12
          },
          end: {
            line: 29,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 20,
            column: 12
          },
          end: {
            line: 29,
            column: 13
          }
        }, {
          start: {
            line: 25,
            column: 17
          },
          end: {
            line: 29,
            column: 13
          }
        }],
        line: 20
      },
      "3": {
        loc: {
          start: {
            line: 47,
            column: 12
          },
          end: {
            line: 50,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 47,
            column: 12
          },
          end: {
            line: 50,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 47
      },
      "4": {
        loc: {
          start: {
            line: 49,
            column: 32
          },
          end: {
            line: 49,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 49,
            column: 32
          },
          end: {
            line: 49,
            column: 45
          }
        }, {
          start: {
            line: 49,
            column: 49
          },
          end: {
            line: 49,
            column: 79
          }
        }],
        line: 49
      },
      "5": {
        loc: {
          start: {
            line: 67,
            column: 12
          },
          end: {
            line: 70,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 67,
            column: 12
          },
          end: {
            line: 70,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 67
      },
      "6": {
        loc: {
          start: {
            line: 69,
            column: 32
          },
          end: {
            line: 69,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 69,
            column: 32
          },
          end: {
            line: 69,
            column: 45
          }
        }, {
          start: {
            line: 69,
            column: 49
          },
          end: {
            line: 69,
            column: 76
          }
        }],
        line: 69
      },
      "7": {
        loc: {
          start: {
            line: 88,
            column: 12
          },
          end: {
            line: 96,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 88,
            column: 12
          },
          end: {
            line: 96,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 88
      },
      "8": {
        loc: {
          start: {
            line: 111,
            column: 12
          },
          end: {
            line: 113,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 111,
            column: 12
          },
          end: {
            line: 113,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 111
      },
      "9": {
        loc: {
          start: {
            line: 119,
            column: 12
          },
          end: {
            line: 122,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 119,
            column: 12
          },
          end: {
            line: 122,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 119
      },
      "10": {
        loc: {
          start: {
            line: 121,
            column: 32
          },
          end: {
            line: 121,
            column: 91
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 121,
            column: 32
          },
          end: {
            line: 121,
            column: 45
          }
        }, {
          start: {
            line: 121,
            column: 49
          },
          end: {
            line: 121,
            column: 91
          }
        }],
        line: 121
      },
      "11": {
        loc: {
          start: {
            line: 125,
            column: 28
          },
          end: {
            line: 125,
            column: 96
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 125,
            column: 67
          },
          end: {
            line: 125,
            column: 79
          }
        }, {
          start: {
            line: 125,
            column: 82
          },
          end: {
            line: 125,
            column: 96
          }
        }],
        line: 125
      },
      "12": {
        loc: {
          start: {
            line: 145,
            column: 12
          },
          end: {
            line: 148,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 145,
            column: 12
          },
          end: {
            line: 148,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 145
      },
      "13": {
        loc: {
          start: {
            line: 147,
            column: 32
          },
          end: {
            line: 147,
            column: 96
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 147,
            column: 32
          },
          end: {
            line: 147,
            column: 45
          }
        }, {
          start: {
            line: 147,
            column: 49
          },
          end: {
            line: 147,
            column: 96
          }
        }],
        line: 147
      },
      "14": {
        loc: {
          start: {
            line: 164,
            column: 12
          },
          end: {
            line: 167,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 164,
            column: 12
          },
          end: {
            line: 167,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 164
      },
      "15": {
        loc: {
          start: {
            line: 166,
            column: 32
          },
          end: {
            line: 166,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 166,
            column: 32
          },
          end: {
            line: 166,
            column: 45
          }
        }, {
          start: {
            line: 166,
            column: 49
          },
          end: {
            line: 166,
            column: 85
          }
        }],
        line: 166
      },
      "16": {
        loc: {
          start: {
            line: 186,
            column: 12
          },
          end: {
            line: 189,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 186,
            column: 12
          },
          end: {
            line: 189,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 186
      },
      "17": {
        loc: {
          start: {
            line: 188,
            column: 32
          },
          end: {
            line: 188,
            column: 92
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 188,
            column: 32
          },
          end: {
            line: 188,
            column: 45
          }
        }, {
          start: {
            line: 188,
            column: 49
          },
          end: {
            line: 188,
            column: 92
          }
        }],
        line: 188
      },
      "18": {
        loc: {
          start: {
            line: 202,
            column: 12
          },
          end: {
            line: 203,
            column: 28
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 202,
            column: 12
          },
          end: {
            line: 203,
            column: 28
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 202
      },
      "19": {
        loc: {
          start: {
            line: 207,
            column: 12
          },
          end: {
            line: 213,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 207,
            column: 12
          },
          end: {
            line: 213,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 207
      },
      "20": {
        loc: {
          start: {
            line: 208,
            column: 16
          },
          end: {
            line: 211,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 208,
            column: 16
          },
          end: {
            line: 211,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 208
      },
      "21": {
        loc: {
          start: {
            line: 216,
            column: 28
          },
          end: {
            line: 216,
            column: 95
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 216,
            column: 66
          },
          end: {
            line: 216,
            column: 78
          }
        }, {
          start: {
            line: 216,
            column: 81
          },
          end: {
            line: 216,
            column: 95
          }
        }],
        line: 216
      },
      "22": {
        loc: {
          start: {
            line: 238,
            column: 12
          },
          end: {
            line: 241,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 238,
            column: 12
          },
          end: {
            line: 241,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 238
      },
      "23": {
        loc: {
          start: {
            line: 240,
            column: 32
          },
          end: {
            line: 240,
            column: 90
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 240,
            column: 32
          },
          end: {
            line: 240,
            column: 45
          }
        }, {
          start: {
            line: 240,
            column: 49
          },
          end: {
            line: 240,
            column: 90
          }
        }],
        line: 240
      },
      "24": {
        loc: {
          start: {
            line: 244,
            column: 28
          },
          end: {
            line: 244,
            column: 95
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 244,
            column: 66
          },
          end: {
            line: 244,
            column: 78
          }
        }, {
          start: {
            line: 244,
            column: 81
          },
          end: {
            line: 244,
            column: 95
          }
        }],
        line: 244
      },
      "25": {
        loc: {
          start: {
            line: 265,
            column: 12
          },
          end: {
            line: 268,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 265,
            column: 12
          },
          end: {
            line: 268,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 265
      },
      "26": {
        loc: {
          start: {
            line: 267,
            column: 32
          },
          end: {
            line: 267,
            column: 96
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 267,
            column: 32
          },
          end: {
            line: 267,
            column: 45
          }
        }, {
          start: {
            line: 267,
            column: 49
          },
          end: {
            line: 267,
            column: 96
          }
        }],
        line: 267
      },
      "27": {
        loc: {
          start: {
            line: 288,
            column: 12
          },
          end: {
            line: 291,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 288,
            column: 12
          },
          end: {
            line: 291,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 288
      },
      "28": {
        loc: {
          start: {
            line: 290,
            column: 32
          },
          end: {
            line: 290,
            column: 98
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 290,
            column: 32
          },
          end: {
            line: 290,
            column: 45
          }
        }, {
          start: {
            line: 290,
            column: 49
          },
          end: {
            line: 290,
            column: 98
          }
        }],
        line: 290
      },
      "29": {
        loc: {
          start: {
            line: 309,
            column: 12
          },
          end: {
            line: 312,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 309,
            column: 12
          },
          end: {
            line: 312,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 309
      },
      "30": {
        loc: {
          start: {
            line: 311,
            column: 32
          },
          end: {
            line: 311,
            column: 89
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 311,
            column: 32
          },
          end: {
            line: 311,
            column: 45
          }
        }, {
          start: {
            line: 311,
            column: 49
          },
          end: {
            line: 311,
            column: 89
          }
        }],
        line: 311
      },
      "31": {
        loc: {
          start: {
            line: 327,
            column: 12
          },
          end: {
            line: 330,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 327,
            column: 12
          },
          end: {
            line: 330,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 327
      },
      "32": {
        loc: {
          start: {
            line: 329,
            column: 32
          },
          end: {
            line: 329,
            column: 88
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 329,
            column: 32
          },
          end: {
            line: 329,
            column: 45
          }
        }, {
          start: {
            line: 329,
            column: 49
          },
          end: {
            line: 329,
            column: 88
          }
        }],
        line: 329
      },
      "33": {
        loc: {
          start: {
            line: 345,
            column: 12
          },
          end: {
            line: 347,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 345,
            column: 12
          },
          end: {
            line: 347,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 345
      },
      "34": {
        loc: {
          start: {
            line: 361,
            column: 12
          },
          end: {
            line: 363,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 361,
            column: 12
          },
          end: {
            line: 363,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 361
      },
      "35": {
        loc: {
          start: {
            line: 367,
            column: 12
          },
          end: {
            line: 369,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 367,
            column: 12
          },
          end: {
            line: 369,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 367
      },
      "36": {
        loc: {
          start: {
            line: 381,
            column: 15
          },
          end: {
            line: 381,
            column: 93
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 381,
            column: 15
          },
          end: {
            line: 381,
            column: 51
          }
        }, {
          start: {
            line: 381,
            column: 55
          },
          end: {
            line: 381,
            column: 93
          }
        }],
        line: 381
      },
      "37": {
        loc: {
          start: {
            line: 385,
            column: 16
          },
          end: {
            line: 385,
            column: 110
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 385,
            column: 16
          },
          end: {
            line: 385,
            column: 60
          }
        }, {
          start: {
            line: 385,
            column: 64
          },
          end: {
            line: 385,
            column: 110
          }
        }],
        line: 385
      },
      "38": {
        loc: {
          start: {
            line: 390,
            column: 28
          },
          end: {
            line: 390,
            column: 104
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 390,
            column: 28
          },
          end: {
            line: 390,
            column: 63
          }
        }, {
          start: {
            line: 390,
            column: 67
          },
          end: {
            line: 390,
            column: 104
          }
        }],
        line: 390
      },
      "39": {
        loc: {
          start: {
            line: 391,
            column: 19
          },
          end: {
            line: 391,
            column: 55
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 391,
            column: 29
          },
          end: {
            line: 391,
            column: 48
          }
        }, {
          start: {
            line: 391,
            column: 51
          },
          end: {
            line: 391,
            column: 55
          }
        }],
        line: 391
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0]
    },
    inputSourceMap: {
      file: "/workspaces/MyFitHero/src/features/auth/services/auth.service.ts",
      mappings: "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",
      names: [],
      sources: ["/workspaces/MyFitHero/src/features/auth/services/auth.service.ts"],
      sourcesContent: ["import { Info, Activity } from 'lucide-react';\nimport {\n  User,\n  LoginCredentials,\n  RegisterData,\n  ResetPasswordData,\n  ChangePasswordData,\n  UpdateProfileData,\n  UpdatePreferencesData,\n  UpdateUserProfileData,\n  LoginResponse,\n  RefreshTokenResponse,\n  UserStatsResponse,\n  SessionInfo,\n  SessionValidation,\n  OAuthCredentials,\n} from '@/features/auth/types/index';\n\nexport class AuthService {\n  private static readonly BASE_URL = '/api/auth';\n  private static readonly TOKEN_KEY = 'myfithero_token';\n  private static readonly REFRESH_TOKEN_KEY = 'myfithero_refresh_token';\n  private static readonly USER_KEY = 'myfithero_user';\n\n  // === AUTHENTIFICATION ===\n\n  // Connexion\n  static async login(credentials: LoginCredentials): Promise<LoginResponse> {\n    try {\n      const response = await fetch(`${this.BASE_URL}/login`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(credentials),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Erreur de connexion');\n      }\n\n      const loginResponse: LoginResponse = await response.json();\n\n      // Stockage s\xE9curis\xE9 des tokens\n      if (credentials.rememberMe) {\n        localStorage.setItem(this.TOKEN_KEY, loginResponse.session.accessToken);\n        localStorage.setItem(this.REFRESH_TOKEN_KEY, loginResponse.session.refreshToken);\n        localStorage.setItem(this.USER_KEY, JSON.stringify(loginResponse.session.user));\n      } else {\n        sessionStorage.setItem(this.TOKEN_KEY, loginResponse.session.accessToken);\n        sessionStorage.setItem(this.REFRESH_TOKEN_KEY, loginResponse.session.refreshToken);\n        sessionStorage.setItem(this.USER_KEY, JSON.stringify(loginResponse.session.user));\n      }\n\n      return loginResponse;\n    } catch (error: any) {\n      // Erreur silencieuse\n      console.error('Erreur lors de la connexion:', error);\n      // Ne pas retourner de mock en cas d'erreur - laisser l'erreur remonter\n      throw error;\n    }\n  }\n\n  // Inscription\n  static async register(data: RegisterData): Promise<User> {\n    try {\n      const response = await fetch(`${this.BASE_URL}/register`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \"Erreur lors de l'inscription\");\n      }\n\n      return await response.json();\n    } catch (error: any) {\n      // Erreur silencieuse\n      console.error(\"Erreur lors de l'inscription:\", error);\n      throw error;\n    }\n  }\n\n  // Connexion OAuth\n  static async loginWithOAuth(credentials: OAuthCredentials): Promise<LoginResponse> {\n    try {\n      const response = await fetch(`${this.BASE_URL}/oauth/${credentials.provider}`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(credentials),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Erreur de connexion OAuth');\n      }\n\n      const loginResponse: LoginResponse = await response.json();\n\n      // Stockage des tokens\n      localStorage.setItem(this.TOKEN_KEY, loginResponse.session.accessToken);\n      localStorage.setItem(this.REFRESH_TOKEN_KEY, loginResponse.session.refreshToken);\n      localStorage.setItem(this.USER_KEY, JSON.stringify(loginResponse.session.user));\n\n      return loginResponse;\n    } catch (error: any) {\n      // Erreur silencieuse\n      console.error('Erreur lors de la connexion OAuth:', error);\n      throw error;\n    }\n  }\n\n  // D\xE9connexion\n  static async logout(): Promise<void> {\n    try {\n      const token = this.getAccessToken();\n      if (token) {\n        await fetch(`${this.BASE_URL}/logout`, {\n          method: 'POST',\n          headers: {\n            Authorization: `Bearer ${token}`,\n            'Content-Type': 'application/json',\n          },\n        });\n      }\n    } catch (error: any) {\n      // Erreur silencieuse\n      console.error('Erreur lors de la d\xE9connexion:', error);\n    } finally {\n      // Nettoyage local dans tous les cas\n      this.clearTokens();\n    }\n  }\n\n  // Rafra\xEEchissement du token\n  static async refreshToken(): Promise<RefreshTokenResponse> {\n    try {\n      const refreshToken = this.getRefreshToken();\n      if (!refreshToken) {\n        throw new Error('Aucun token de rafra\xEEchissement disponible');\n      }\n\n      const response = await fetch(`${this.BASE_URL}/refresh`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ refreshToken }),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Erreur lors du rafra\xEEchissement du token');\n      }\n\n      const refreshResponse: RefreshTokenResponse = await response.json();\n\n      // Mise \xE0 jour du token\n      const storage = localStorage.getItem(this.TOKEN_KEY) ? localStorage : sessionStorage;\n      storage.setItem(this.TOKEN_KEY, refreshResponse.accessToken);\n\n      return refreshResponse;\n    } catch (error: any) {\n      // Erreur silencieuse\n      console.error('Erreur lors du rafra\xEEchissement du token:', error);\n      this.clearTokens();\n      throw error;\n    }\n  }\n\n  // === GESTION DES MOTS DE PASSE ===\n\n  // Demande de r\xE9initialisation\n  static async requestPasswordReset(data: ResetPasswordData): Promise<void> {\n    try {\n      const response = await fetch(`${this.BASE_URL}/password/reset-request`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Erreur lors de la demande de r\xE9initialisation');\n      }\n    } catch (error: any) {\n      // Erreur silencieuse\n      console.error('Erreur demande r\xE9initialisation:', error);\n      throw error;\n    }\n  }\n\n  // R\xE9initialisation du mot de passe\n  static async resetPassword(token: string, newPassword: string): Promise<void> {\n    try {\n      const response = await fetch(`${this.BASE_URL}/password/reset`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ token, newPassword }),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Erreur lors de la r\xE9initialisation');\n      }\n    } catch (error: any) {\n      // Erreur silencieuse\n      console.error('Erreur r\xE9initialisation mot de passe:', error);\n      throw error;\n    }\n  }\n\n  // Changement de mot de passe\n  static async changePassword(data: ChangePasswordData): Promise<void> {\n    try {\n      const response = await fetch(`${this.BASE_URL}/password/change`, {\n        method: 'POST',\n        headers: {\n          Authorization: `Bearer ${this.getAccessToken()}`,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Erreur lors du changement de mot de passe');\n      }\n    } catch (error: any) {\n      // Erreur silencieuse\n      console.error('Erreur changement mot de passe:', error);\n      throw error;\n    }\n  }\n\n  // === GESTION DU PROFIL ===\n\n  // R\xE9cup\xE9ration du profil utilisateur\n  static async getCurrentUser(): Promise<User | null> {\n    try {\n      const token = this.getAccessToken();\n      if (!token) return null;\n\n      const response = await fetch(`${this.BASE_URL}/me`, {\n        headers: { Authorization: `Bearer ${token}` },\n      });\n\n      if (!response.ok) {\n        if (response.status === 401) {\n          this.clearTokens();\n          return null;\n        }\n        throw new Error('Erreur lors de la r\xE9cup\xE9ration du profil');\n      }\n\n      const user = await response.json();\n\n      // Mise \xE0 jour du stockage local\n      const storage = localStorage.getItem(this.USER_KEY) ? localStorage : sessionStorage;\n      storage.setItem(this.USER_KEY, JSON.stringify(user));\n\n      return user;\n    } catch (error: any) {\n      // Erreur silencieuse\n      console.error('Erreur r\xE9cup\xE9ration profil:', error);\n      // Ne pas retourner de mock en cas d'erreur - retourner null pour forcer une nouvelle authentification\n      return null;\n    }\n  }\n\n  // Mise \xE0 jour du profil\n  static async updateProfile(data: UpdateProfileData): Promise<User> {\n    try {\n      const response = await fetch(`${this.BASE_URL}/profile`, {\n        method: 'PUT',\n        headers: {\n          Authorization: `Bearer ${this.getAccessToken()}`,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Erreur lors de la mise \xE0 jour du profil');\n      }\n\n      const updatedUser = await response.json();\n\n      // Mise \xE0 jour du stockage local\n      const storage = localStorage.getItem(this.USER_KEY) ? localStorage : sessionStorage;\n      storage.setItem(this.USER_KEY, JSON.stringify(updatedUser));\n\n      return updatedUser;\n    } catch (error: any) {\n      // Erreur silencieuse\n      console.error('Erreur mise \xE0 jour profil:', error);\n      throw error;\n    }\n  }\n\n  // Mise \xE0 jour des pr\xE9f\xE9rences\n  static async updatePreferences(data: UpdatePreferencesData): Promise<User> {\n    try {\n      const response = await fetch(`${this.BASE_URL}/preferences`, {\n        method: 'PUT',\n        headers: {\n          Authorization: `Bearer ${this.getAccessToken()}`,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Erreur lors de la mise \xE0 jour des pr\xE9f\xE9rences');\n      }\n\n      return await response.json();\n    } catch (error: any) {\n      // Erreur silencieuse\n      console.error('Erreur mise \xE0 jour pr\xE9f\xE9rences:', error);\n      throw error;\n    }\n  }\n\n  // Mise \xE0 jour du profil fitness\n  static async updateUserProfile(data: UpdateUserProfileData): Promise<User> {\n    try {\n      const response = await fetch(`${this.BASE_URL}/fitness-profile`, {\n        method: 'PUT',\n        headers: {\n          Authorization: `Bearer ${this.getAccessToken()}`,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Erreur lors de la mise \xE0 jour du profil fitness');\n      }\n\n      return await response.json();\n    } catch (error: any) {\n      // Erreur silencieuse\n      console.error('Erreur mise \xE0 jour profil fitness:', error);\n      throw error;\n    }\n  }\n\n  // === V\xC9RIFICATIONS ===\n\n  // V\xE9rification d'email\n  static async verifyEmail(token: string): Promise<void> {\n    try {\n      const response = await fetch(`${this.BASE_URL}/verify/email`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ token }),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \"Erreur lors de la v\xE9rification d'email\");\n      }\n    } catch (error: any) {\n      // Erreur silencieuse\n      console.error('Erreur v\xE9rification email:', error);\n      throw error;\n    }\n  }\n\n  // Renvoi de v\xE9rification d'email\n  static async resendEmailVerification(): Promise<void> {\n    try {\n      const response = await fetch(`${this.BASE_URL}/verify/email/resend`, {\n        method: 'POST',\n        headers: { Authorization: `Bearer ${this.getAccessToken()}` },\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Erreur lors du renvoi de v\xE9rification');\n      }\n    } catch (error: any) {\n      // Erreur silencieuse\n      console.error('Erreur renvoi v\xE9rification email:', error);\n      throw error;\n    }\n  }\n\n  // === STATISTIQUES UTILISATEUR ===\n\n  // R\xE9cup\xE9ration des statistiques\n  static async getUserStats(): Promise<UserStatsResponse> {\n    try {\n      const response = await fetch(`${this.BASE_URL}/stats`, {\n        headers: { Authorization: `Bearer ${this.getAccessToken()}` },\n      });\n\n      if (!response.ok) {\n        throw new Error('Erreur lors de la r\xE9cup\xE9ration des statistiques');\n      }\n\n      return await response.json();\n    } catch (error: any) {\n      // Erreur silencieuse\n      console.error('Erreur statistiques utilisateur:', error);\n      return this.getMockUserStats();\n    }\n  }\n\n  // === GESTION DES SESSIONS ===\n\n  // Information sur la session\n  static async getSessionInfo(): Promise<SessionValidation> {\n    try {\n      const token = this.getAccessToken();\n      if (!token) {\n        return { isValid: false, expiresIn: 0, user: null, permissions: [], lastActivity: '' };\n      }\n\n      const response = await fetch(`${this.BASE_URL}/session`, {\n        headers: { Authorization: `Bearer ${token}` },\n      });\n\n      if (!response.ok) {\n        return { isValid: false, expiresIn: 0, user: null, permissions: [], lastActivity: '' };\n      }\n\n      return await response.json();\n    } catch (error: any) {\n      // Erreur silencieuse\n      console.error('Erreur info session:', error);\n      return { isValid: false, expiresIn: 0, user: null, permissions: [], lastActivity: '' };\n    }\n  }\n\n  // === HELPERS ===\n\n  // R\xE9cup\xE9ration du token d'acc\xE8s\n  static getAccessToken(): string | undefined {\n    return localStorage.getItem(this.TOKEN_KEY) || sessionStorage.getItem(this.TOKEN_KEY);\n  }\n\n  // R\xE9cup\xE9ration du token de rafra\xEEchissement\n  static getRefreshToken(): string | undefined {\n    return (\n      localStorage.getItem(this.REFRESH_TOKEN_KEY) || sessionStorage.getItem(this.REFRESH_TOKEN_KEY)\n    );\n  }\n\n  // R\xE9cup\xE9ration de l'utilisateur stock\xE9\n  static getStoredUser(): User | undefined {\n    try {\n      const userStr = localStorage.getItem(this.USER_KEY) || sessionStorage.getItem(this.USER_KEY);\n      return userStr ? JSON.parse(userStr) : null;\n    } catch (error: any) {\n      // Erreur silencieuse\n      return null;\n    }\n  }\n\n  // V\xE9rification de l'authentification\n  static isAuthenticated(): boolean {\n    return !!this.getAccessToken();\n  }\n\n  // Nettoyage des tokens\n  static clearTokens(): void {\n    localStorage.removeItem(this.TOKEN_KEY);\n    localStorage.removeItem(this.REFRESH_TOKEN_KEY);\n    localStorage.removeItem(this.USER_KEY);\n    sessionStorage.removeItem(this.TOKEN_KEY);\n    sessionStorage.removeItem(this.REFRESH_TOKEN_KEY);\n    sessionStorage.removeItem(this.USER_KEY);\n  }\n\n  // === DONN\xC9ES DE MOCK ===\n\n  private static getMockLoginResponse(email: string): LoginResponse {\n    const mockUser = this.getMockUser();\n    return {\n      session: {\n        user: mockUser,\n        accessToken: 'mock_access_token_' + Date.now(),\n        refreshToken: 'mock_refresh_token_' + Date.now(),\n        expiresAt: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),\n        deviceInfo: {\n          deviceId: 'mock_device_' + Date.now(),\n          platform: 'web',\n          osVersion: 'Unknown',\n          appVersion: '1.0.0',\n          lastSeen: new Date().toISOString(),\n          isActive: true,\n        },\n      },\n      isFirstLogin: email.includes('new'),\n      requiresTwoFactor: false,\n      twoFactorMethods: [],\n    };\n  }\n\n  private static getMockUser(): User {\n    return {\n      id: 'mock_user_' + Date.now(),\n      email: 'user@example.com',\n      created_at: '2024-01-01T00:00:00Z',\n      updated_at: new Date().toISOString(),\n      onboarding_completed: true,\n      profile: {\n        id: 'user-123',\n        user_id: 'user-123',\n        email: 'demo@myfithero.com',\n        first_name: 'Demo',\n        last_name: 'User',\n        date_of_birth: '1990-01-01',\n        gender: 'prefer_not_to_say',\n        height: 180,\n        weight: 75,\n        activity_level: 'moderately_active',\n        fitness_goals: ['weight_loss', 'muscle_gain'],\n        onboarding_completed: true,\n        created_at: '2024-01-01T00:00:00Z',\n        updated_at: new Date().toISOString(),\n      },\n    };\n  }\n\n  private static getMockUserStats(): UserStatsResponse {\n    return {\n      totalWorkouts: 127,\n      totalCaloriesBurned: 15420,\n      averageWorkoutDuration: 45,\n      currentStreak: 12,\n      longestStreak: 28,\n      lastWorkout: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(),\n      joinedDaysAgo: 95,\n    };\n  }\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "b6f1160cf97904be67e9bbea1568875391423977"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1glnwcswo1 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1glnwcswo1();
cov_1glnwcswo1().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1glnwcswo1().s[1]++;
exports.AuthService = void 0;
class AuthService {
  // === AUTHENTIFICATION ===
  // Connexion
  static async login(credentials) {
    /* istanbul ignore next */
    cov_1glnwcswo1().f[0]++;
    cov_1glnwcswo1().s[2]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_1glnwcswo1().s[3]++, await fetch(`${this.BASE_URL}/login`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(credentials)
      }));
      /* istanbul ignore next */
      cov_1glnwcswo1().s[4]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_1glnwcswo1().b[0][0]++;
        const error =
        /* istanbul ignore next */
        (cov_1glnwcswo1().s[5]++, await response.json());
        /* istanbul ignore next */
        cov_1glnwcswo1().s[6]++;
        throw new Error(
        /* istanbul ignore next */
        (cov_1glnwcswo1().b[1][0]++, error.message) ||
        /* istanbul ignore next */
        (cov_1glnwcswo1().b[1][1]++, 'Erreur de connexion'));
      } else
      /* istanbul ignore next */
      {
        cov_1glnwcswo1().b[0][1]++;
      }
      const loginResponse =
      /* istanbul ignore next */
      (cov_1glnwcswo1().s[7]++, await response.json());
      // Stockage sécurisé des tokens
      /* istanbul ignore next */
      cov_1glnwcswo1().s[8]++;
      if (credentials.rememberMe) {
        /* istanbul ignore next */
        cov_1glnwcswo1().b[2][0]++;
        cov_1glnwcswo1().s[9]++;
        localStorage.setItem(this.TOKEN_KEY, loginResponse.session.accessToken);
        /* istanbul ignore next */
        cov_1glnwcswo1().s[10]++;
        localStorage.setItem(this.REFRESH_TOKEN_KEY, loginResponse.session.refreshToken);
        /* istanbul ignore next */
        cov_1glnwcswo1().s[11]++;
        localStorage.setItem(this.USER_KEY, JSON.stringify(loginResponse.session.user));
      } else {
        /* istanbul ignore next */
        cov_1glnwcswo1().b[2][1]++;
        cov_1glnwcswo1().s[12]++;
        sessionStorage.setItem(this.TOKEN_KEY, loginResponse.session.accessToken);
        /* istanbul ignore next */
        cov_1glnwcswo1().s[13]++;
        sessionStorage.setItem(this.REFRESH_TOKEN_KEY, loginResponse.session.refreshToken);
        /* istanbul ignore next */
        cov_1glnwcswo1().s[14]++;
        sessionStorage.setItem(this.USER_KEY, JSON.stringify(loginResponse.session.user));
      }
      /* istanbul ignore next */
      cov_1glnwcswo1().s[15]++;
      return loginResponse;
    } catch (error) {
      /* istanbul ignore next */
      cov_1glnwcswo1().s[16]++;
      // Erreur silencieuse
      console.error('Erreur lors de la connexion:', error);
      // Ne pas retourner de mock en cas d'erreur - laisser l'erreur remonter
      /* istanbul ignore next */
      cov_1glnwcswo1().s[17]++;
      throw error;
    }
  }
  // Inscription
  static async register(data) {
    /* istanbul ignore next */
    cov_1glnwcswo1().f[1]++;
    cov_1glnwcswo1().s[18]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_1glnwcswo1().s[19]++, await fetch(`${this.BASE_URL}/register`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(data)
      }));
      /* istanbul ignore next */
      cov_1glnwcswo1().s[20]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_1glnwcswo1().b[3][0]++;
        const error =
        /* istanbul ignore next */
        (cov_1glnwcswo1().s[21]++, await response.json());
        /* istanbul ignore next */
        cov_1glnwcswo1().s[22]++;
        throw new Error(
        /* istanbul ignore next */
        (cov_1glnwcswo1().b[4][0]++, error.message) ||
        /* istanbul ignore next */
        (cov_1glnwcswo1().b[4][1]++, "Erreur lors de l'inscription"));
      } else
      /* istanbul ignore next */
      {
        cov_1glnwcswo1().b[3][1]++;
      }
      cov_1glnwcswo1().s[23]++;
      return await response.json();
    } catch (error) {
      /* istanbul ignore next */
      cov_1glnwcswo1().s[24]++;
      // Erreur silencieuse
      console.error("Erreur lors de l'inscription:", error);
      /* istanbul ignore next */
      cov_1glnwcswo1().s[25]++;
      throw error;
    }
  }
  // Connexion OAuth
  static async loginWithOAuth(credentials) {
    /* istanbul ignore next */
    cov_1glnwcswo1().f[2]++;
    cov_1glnwcswo1().s[26]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_1glnwcswo1().s[27]++, await fetch(`${this.BASE_URL}/oauth/${credentials.provider}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(credentials)
      }));
      /* istanbul ignore next */
      cov_1glnwcswo1().s[28]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_1glnwcswo1().b[5][0]++;
        const error =
        /* istanbul ignore next */
        (cov_1glnwcswo1().s[29]++, await response.json());
        /* istanbul ignore next */
        cov_1glnwcswo1().s[30]++;
        throw new Error(
        /* istanbul ignore next */
        (cov_1glnwcswo1().b[6][0]++, error.message) ||
        /* istanbul ignore next */
        (cov_1glnwcswo1().b[6][1]++, 'Erreur de connexion OAuth'));
      } else
      /* istanbul ignore next */
      {
        cov_1glnwcswo1().b[5][1]++;
      }
      const loginResponse =
      /* istanbul ignore next */
      (cov_1glnwcswo1().s[31]++, await response.json());
      // Stockage des tokens
      /* istanbul ignore next */
      cov_1glnwcswo1().s[32]++;
      localStorage.setItem(this.TOKEN_KEY, loginResponse.session.accessToken);
      /* istanbul ignore next */
      cov_1glnwcswo1().s[33]++;
      localStorage.setItem(this.REFRESH_TOKEN_KEY, loginResponse.session.refreshToken);
      /* istanbul ignore next */
      cov_1glnwcswo1().s[34]++;
      localStorage.setItem(this.USER_KEY, JSON.stringify(loginResponse.session.user));
      /* istanbul ignore next */
      cov_1glnwcswo1().s[35]++;
      return loginResponse;
    } catch (error) {
      /* istanbul ignore next */
      cov_1glnwcswo1().s[36]++;
      // Erreur silencieuse
      console.error('Erreur lors de la connexion OAuth:', error);
      /* istanbul ignore next */
      cov_1glnwcswo1().s[37]++;
      throw error;
    }
  }
  // Déconnexion
  static async logout() {
    /* istanbul ignore next */
    cov_1glnwcswo1().f[3]++;
    cov_1glnwcswo1().s[38]++;
    try {
      const token =
      /* istanbul ignore next */
      (cov_1glnwcswo1().s[39]++, this.getAccessToken());
      /* istanbul ignore next */
      cov_1glnwcswo1().s[40]++;
      if (token) {
        /* istanbul ignore next */
        cov_1glnwcswo1().b[7][0]++;
        cov_1glnwcswo1().s[41]++;
        await fetch(`${this.BASE_URL}/logout`, {
          method: 'POST',
          headers: {
            Authorization: `Bearer ${token}`,
            'Content-Type': 'application/json'
          }
        });
      } else
      /* istanbul ignore next */
      {
        cov_1glnwcswo1().b[7][1]++;
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_1glnwcswo1().s[42]++;
      // Erreur silencieuse
      console.error('Erreur lors de la déconnexion:', error);
    } finally {
      /* istanbul ignore next */
      cov_1glnwcswo1().s[43]++;
      // Nettoyage local dans tous les cas
      this.clearTokens();
    }
  }
  // Rafraîchissement du token
  static async refreshToken() {
    /* istanbul ignore next */
    cov_1glnwcswo1().f[4]++;
    cov_1glnwcswo1().s[44]++;
    try {
      const refreshToken =
      /* istanbul ignore next */
      (cov_1glnwcswo1().s[45]++, this.getRefreshToken());
      /* istanbul ignore next */
      cov_1glnwcswo1().s[46]++;
      if (!refreshToken) {
        /* istanbul ignore next */
        cov_1glnwcswo1().b[8][0]++;
        cov_1glnwcswo1().s[47]++;
        throw new Error('Aucun token de rafraîchissement disponible');
      } else
      /* istanbul ignore next */
      {
        cov_1glnwcswo1().b[8][1]++;
      }
      const response =
      /* istanbul ignore next */
      (cov_1glnwcswo1().s[48]++, await fetch(`${this.BASE_URL}/refresh`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          refreshToken
        })
      }));
      /* istanbul ignore next */
      cov_1glnwcswo1().s[49]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_1glnwcswo1().b[9][0]++;
        const error =
        /* istanbul ignore next */
        (cov_1glnwcswo1().s[50]++, await response.json());
        /* istanbul ignore next */
        cov_1glnwcswo1().s[51]++;
        throw new Error(
        /* istanbul ignore next */
        (cov_1glnwcswo1().b[10][0]++, error.message) ||
        /* istanbul ignore next */
        (cov_1glnwcswo1().b[10][1]++, 'Erreur lors du rafraîchissement du token'));
      } else
      /* istanbul ignore next */
      {
        cov_1glnwcswo1().b[9][1]++;
      }
      const refreshResponse =
      /* istanbul ignore next */
      (cov_1glnwcswo1().s[52]++, await response.json());
      // Mise à jour du token
      const storage =
      /* istanbul ignore next */
      (cov_1glnwcswo1().s[53]++, localStorage.getItem(this.TOKEN_KEY) ?
      /* istanbul ignore next */
      (cov_1glnwcswo1().b[11][0]++, localStorage) :
      /* istanbul ignore next */
      (cov_1glnwcswo1().b[11][1]++, sessionStorage));
      /* istanbul ignore next */
      cov_1glnwcswo1().s[54]++;
      storage.setItem(this.TOKEN_KEY, refreshResponse.accessToken);
      /* istanbul ignore next */
      cov_1glnwcswo1().s[55]++;
      return refreshResponse;
    } catch (error) {
      /* istanbul ignore next */
      cov_1glnwcswo1().s[56]++;
      // Erreur silencieuse
      console.error('Erreur lors du rafraîchissement du token:', error);
      /* istanbul ignore next */
      cov_1glnwcswo1().s[57]++;
      this.clearTokens();
      /* istanbul ignore next */
      cov_1glnwcswo1().s[58]++;
      throw error;
    }
  }
  // === GESTION DES MOTS DE PASSE ===
  // Demande de réinitialisation
  static async requestPasswordReset(data) {
    /* istanbul ignore next */
    cov_1glnwcswo1().f[5]++;
    cov_1glnwcswo1().s[59]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_1glnwcswo1().s[60]++, await fetch(`${this.BASE_URL}/password/reset-request`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(data)
      }));
      /* istanbul ignore next */
      cov_1glnwcswo1().s[61]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_1glnwcswo1().b[12][0]++;
        const error =
        /* istanbul ignore next */
        (cov_1glnwcswo1().s[62]++, await response.json());
        /* istanbul ignore next */
        cov_1glnwcswo1().s[63]++;
        throw new Error(
        /* istanbul ignore next */
        (cov_1glnwcswo1().b[13][0]++, error.message) ||
        /* istanbul ignore next */
        (cov_1glnwcswo1().b[13][1]++, 'Erreur lors de la demande de réinitialisation'));
      } else
      /* istanbul ignore next */
      {
        cov_1glnwcswo1().b[12][1]++;
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_1glnwcswo1().s[64]++;
      // Erreur silencieuse
      console.error('Erreur demande réinitialisation:', error);
      /* istanbul ignore next */
      cov_1glnwcswo1().s[65]++;
      throw error;
    }
  }
  // Réinitialisation du mot de passe
  static async resetPassword(token, newPassword) {
    /* istanbul ignore next */
    cov_1glnwcswo1().f[6]++;
    cov_1glnwcswo1().s[66]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_1glnwcswo1().s[67]++, await fetch(`${this.BASE_URL}/password/reset`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          token,
          newPassword
        })
      }));
      /* istanbul ignore next */
      cov_1glnwcswo1().s[68]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_1glnwcswo1().b[14][0]++;
        const error =
        /* istanbul ignore next */
        (cov_1glnwcswo1().s[69]++, await response.json());
        /* istanbul ignore next */
        cov_1glnwcswo1().s[70]++;
        throw new Error(
        /* istanbul ignore next */
        (cov_1glnwcswo1().b[15][0]++, error.message) ||
        /* istanbul ignore next */
        (cov_1glnwcswo1().b[15][1]++, 'Erreur lors de la réinitialisation'));
      } else
      /* istanbul ignore next */
      {
        cov_1glnwcswo1().b[14][1]++;
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_1glnwcswo1().s[71]++;
      // Erreur silencieuse
      console.error('Erreur réinitialisation mot de passe:', error);
      /* istanbul ignore next */
      cov_1glnwcswo1().s[72]++;
      throw error;
    }
  }
  // Changement de mot de passe
  static async changePassword(data) {
    /* istanbul ignore next */
    cov_1glnwcswo1().f[7]++;
    cov_1glnwcswo1().s[73]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_1glnwcswo1().s[74]++, await fetch(`${this.BASE_URL}/password/change`, {
        method: 'POST',
        headers: {
          Authorization: `Bearer ${this.getAccessToken()}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(data)
      }));
      /* istanbul ignore next */
      cov_1glnwcswo1().s[75]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_1glnwcswo1().b[16][0]++;
        const error =
        /* istanbul ignore next */
        (cov_1glnwcswo1().s[76]++, await response.json());
        /* istanbul ignore next */
        cov_1glnwcswo1().s[77]++;
        throw new Error(
        /* istanbul ignore next */
        (cov_1glnwcswo1().b[17][0]++, error.message) ||
        /* istanbul ignore next */
        (cov_1glnwcswo1().b[17][1]++, 'Erreur lors du changement de mot de passe'));
      } else
      /* istanbul ignore next */
      {
        cov_1glnwcswo1().b[16][1]++;
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_1glnwcswo1().s[78]++;
      // Erreur silencieuse
      console.error('Erreur changement mot de passe:', error);
      /* istanbul ignore next */
      cov_1glnwcswo1().s[79]++;
      throw error;
    }
  }
  // === GESTION DU PROFIL ===
  // Récupération du profil utilisateur
  static async getCurrentUser() {
    /* istanbul ignore next */
    cov_1glnwcswo1().f[8]++;
    cov_1glnwcswo1().s[80]++;
    try {
      const token =
      /* istanbul ignore next */
      (cov_1glnwcswo1().s[81]++, this.getAccessToken());
      /* istanbul ignore next */
      cov_1glnwcswo1().s[82]++;
      if (!token) {
        /* istanbul ignore next */
        cov_1glnwcswo1().b[18][0]++;
        cov_1glnwcswo1().s[83]++;
        return null;
      } else
      /* istanbul ignore next */
      {
        cov_1glnwcswo1().b[18][1]++;
      }
      const response =
      /* istanbul ignore next */
      (cov_1glnwcswo1().s[84]++, await fetch(`${this.BASE_URL}/me`, {
        headers: {
          Authorization: `Bearer ${token}`
        }
      }));
      /* istanbul ignore next */
      cov_1glnwcswo1().s[85]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_1glnwcswo1().b[19][0]++;
        cov_1glnwcswo1().s[86]++;
        if (response.status === 401) {
          /* istanbul ignore next */
          cov_1glnwcswo1().b[20][0]++;
          cov_1glnwcswo1().s[87]++;
          this.clearTokens();
          /* istanbul ignore next */
          cov_1glnwcswo1().s[88]++;
          return null;
        } else
        /* istanbul ignore next */
        {
          cov_1glnwcswo1().b[20][1]++;
        }
        cov_1glnwcswo1().s[89]++;
        throw new Error('Erreur lors de la récupération du profil');
      } else
      /* istanbul ignore next */
      {
        cov_1glnwcswo1().b[19][1]++;
      }
      const user =
      /* istanbul ignore next */
      (cov_1glnwcswo1().s[90]++, await response.json());
      // Mise à jour du stockage local
      const storage =
      /* istanbul ignore next */
      (cov_1glnwcswo1().s[91]++, localStorage.getItem(this.USER_KEY) ?
      /* istanbul ignore next */
      (cov_1glnwcswo1().b[21][0]++, localStorage) :
      /* istanbul ignore next */
      (cov_1glnwcswo1().b[21][1]++, sessionStorage));
      /* istanbul ignore next */
      cov_1glnwcswo1().s[92]++;
      storage.setItem(this.USER_KEY, JSON.stringify(user));
      /* istanbul ignore next */
      cov_1glnwcswo1().s[93]++;
      return user;
    } catch (error) {
      /* istanbul ignore next */
      cov_1glnwcswo1().s[94]++;
      // Erreur silencieuse
      console.error('Erreur récupération profil:', error);
      // Ne pas retourner de mock en cas d'erreur - retourner null pour forcer une nouvelle authentification
      /* istanbul ignore next */
      cov_1glnwcswo1().s[95]++;
      return null;
    }
  }
  // Mise à jour du profil
  static async updateProfile(data) {
    /* istanbul ignore next */
    cov_1glnwcswo1().f[9]++;
    cov_1glnwcswo1().s[96]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_1glnwcswo1().s[97]++, await fetch(`${this.BASE_URL}/profile`, {
        method: 'PUT',
        headers: {
          Authorization: `Bearer ${this.getAccessToken()}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(data)
      }));
      /* istanbul ignore next */
      cov_1glnwcswo1().s[98]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_1glnwcswo1().b[22][0]++;
        const error =
        /* istanbul ignore next */
        (cov_1glnwcswo1().s[99]++, await response.json());
        /* istanbul ignore next */
        cov_1glnwcswo1().s[100]++;
        throw new Error(
        /* istanbul ignore next */
        (cov_1glnwcswo1().b[23][0]++, error.message) ||
        /* istanbul ignore next */
        (cov_1glnwcswo1().b[23][1]++, 'Erreur lors de la mise à jour du profil'));
      } else
      /* istanbul ignore next */
      {
        cov_1glnwcswo1().b[22][1]++;
      }
      const updatedUser =
      /* istanbul ignore next */
      (cov_1glnwcswo1().s[101]++, await response.json());
      // Mise à jour du stockage local
      const storage =
      /* istanbul ignore next */
      (cov_1glnwcswo1().s[102]++, localStorage.getItem(this.USER_KEY) ?
      /* istanbul ignore next */
      (cov_1glnwcswo1().b[24][0]++, localStorage) :
      /* istanbul ignore next */
      (cov_1glnwcswo1().b[24][1]++, sessionStorage));
      /* istanbul ignore next */
      cov_1glnwcswo1().s[103]++;
      storage.setItem(this.USER_KEY, JSON.stringify(updatedUser));
      /* istanbul ignore next */
      cov_1glnwcswo1().s[104]++;
      return updatedUser;
    } catch (error) {
      /* istanbul ignore next */
      cov_1glnwcswo1().s[105]++;
      // Erreur silencieuse
      console.error('Erreur mise à jour profil:', error);
      /* istanbul ignore next */
      cov_1glnwcswo1().s[106]++;
      throw error;
    }
  }
  // Mise à jour des préférences
  static async updatePreferences(data) {
    /* istanbul ignore next */
    cov_1glnwcswo1().f[10]++;
    cov_1glnwcswo1().s[107]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_1glnwcswo1().s[108]++, await fetch(`${this.BASE_URL}/preferences`, {
        method: 'PUT',
        headers: {
          Authorization: `Bearer ${this.getAccessToken()}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(data)
      }));
      /* istanbul ignore next */
      cov_1glnwcswo1().s[109]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_1glnwcswo1().b[25][0]++;
        const error =
        /* istanbul ignore next */
        (cov_1glnwcswo1().s[110]++, await response.json());
        /* istanbul ignore next */
        cov_1glnwcswo1().s[111]++;
        throw new Error(
        /* istanbul ignore next */
        (cov_1glnwcswo1().b[26][0]++, error.message) ||
        /* istanbul ignore next */
        (cov_1glnwcswo1().b[26][1]++, 'Erreur lors de la mise à jour des préférences'));
      } else
      /* istanbul ignore next */
      {
        cov_1glnwcswo1().b[25][1]++;
      }
      cov_1glnwcswo1().s[112]++;
      return await response.json();
    } catch (error) {
      /* istanbul ignore next */
      cov_1glnwcswo1().s[113]++;
      // Erreur silencieuse
      console.error('Erreur mise à jour préférences:', error);
      /* istanbul ignore next */
      cov_1glnwcswo1().s[114]++;
      throw error;
    }
  }
  // Mise à jour du profil fitness
  static async updateUserProfile(data) {
    /* istanbul ignore next */
    cov_1glnwcswo1().f[11]++;
    cov_1glnwcswo1().s[115]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_1glnwcswo1().s[116]++, await fetch(`${this.BASE_URL}/fitness-profile`, {
        method: 'PUT',
        headers: {
          Authorization: `Bearer ${this.getAccessToken()}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(data)
      }));
      /* istanbul ignore next */
      cov_1glnwcswo1().s[117]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_1glnwcswo1().b[27][0]++;
        const error =
        /* istanbul ignore next */
        (cov_1glnwcswo1().s[118]++, await response.json());
        /* istanbul ignore next */
        cov_1glnwcswo1().s[119]++;
        throw new Error(
        /* istanbul ignore next */
        (cov_1glnwcswo1().b[28][0]++, error.message) ||
        /* istanbul ignore next */
        (cov_1glnwcswo1().b[28][1]++, 'Erreur lors de la mise à jour du profil fitness'));
      } else
      /* istanbul ignore next */
      {
        cov_1glnwcswo1().b[27][1]++;
      }
      cov_1glnwcswo1().s[120]++;
      return await response.json();
    } catch (error) {
      /* istanbul ignore next */
      cov_1glnwcswo1().s[121]++;
      // Erreur silencieuse
      console.error('Erreur mise à jour profil fitness:', error);
      /* istanbul ignore next */
      cov_1glnwcswo1().s[122]++;
      throw error;
    }
  }
  // === VÉRIFICATIONS ===
  // Vérification d'email
  static async verifyEmail(token) {
    /* istanbul ignore next */
    cov_1glnwcswo1().f[12]++;
    cov_1glnwcswo1().s[123]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_1glnwcswo1().s[124]++, await fetch(`${this.BASE_URL}/verify/email`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          token
        })
      }));
      /* istanbul ignore next */
      cov_1glnwcswo1().s[125]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_1glnwcswo1().b[29][0]++;
        const error =
        /* istanbul ignore next */
        (cov_1glnwcswo1().s[126]++, await response.json());
        /* istanbul ignore next */
        cov_1glnwcswo1().s[127]++;
        throw new Error(
        /* istanbul ignore next */
        (cov_1glnwcswo1().b[30][0]++, error.message) ||
        /* istanbul ignore next */
        (cov_1glnwcswo1().b[30][1]++, "Erreur lors de la vérification d'email"));
      } else
      /* istanbul ignore next */
      {
        cov_1glnwcswo1().b[29][1]++;
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_1glnwcswo1().s[128]++;
      // Erreur silencieuse
      console.error('Erreur vérification email:', error);
      /* istanbul ignore next */
      cov_1glnwcswo1().s[129]++;
      throw error;
    }
  }
  // Renvoi de vérification d'email
  static async resendEmailVerification() {
    /* istanbul ignore next */
    cov_1glnwcswo1().f[13]++;
    cov_1glnwcswo1().s[130]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_1glnwcswo1().s[131]++, await fetch(`${this.BASE_URL}/verify/email/resend`, {
        method: 'POST',
        headers: {
          Authorization: `Bearer ${this.getAccessToken()}`
        }
      }));
      /* istanbul ignore next */
      cov_1glnwcswo1().s[132]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_1glnwcswo1().b[31][0]++;
        const error =
        /* istanbul ignore next */
        (cov_1glnwcswo1().s[133]++, await response.json());
        /* istanbul ignore next */
        cov_1glnwcswo1().s[134]++;
        throw new Error(
        /* istanbul ignore next */
        (cov_1glnwcswo1().b[32][0]++, error.message) ||
        /* istanbul ignore next */
        (cov_1glnwcswo1().b[32][1]++, 'Erreur lors du renvoi de vérification'));
      } else
      /* istanbul ignore next */
      {
        cov_1glnwcswo1().b[31][1]++;
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_1glnwcswo1().s[135]++;
      // Erreur silencieuse
      console.error('Erreur renvoi vérification email:', error);
      /* istanbul ignore next */
      cov_1glnwcswo1().s[136]++;
      throw error;
    }
  }
  // === STATISTIQUES UTILISATEUR ===
  // Récupération des statistiques
  static async getUserStats() {
    /* istanbul ignore next */
    cov_1glnwcswo1().f[14]++;
    cov_1glnwcswo1().s[137]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_1glnwcswo1().s[138]++, await fetch(`${this.BASE_URL}/stats`, {
        headers: {
          Authorization: `Bearer ${this.getAccessToken()}`
        }
      }));
      /* istanbul ignore next */
      cov_1glnwcswo1().s[139]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_1glnwcswo1().b[33][0]++;
        cov_1glnwcswo1().s[140]++;
        throw new Error('Erreur lors de la récupération des statistiques');
      } else
      /* istanbul ignore next */
      {
        cov_1glnwcswo1().b[33][1]++;
      }
      cov_1glnwcswo1().s[141]++;
      return await response.json();
    } catch (error) {
      /* istanbul ignore next */
      cov_1glnwcswo1().s[142]++;
      // Erreur silencieuse
      console.error('Erreur statistiques utilisateur:', error);
      /* istanbul ignore next */
      cov_1glnwcswo1().s[143]++;
      return this.getMockUserStats();
    }
  }
  // === GESTION DES SESSIONS ===
  // Information sur la session
  static async getSessionInfo() {
    /* istanbul ignore next */
    cov_1glnwcswo1().f[15]++;
    cov_1glnwcswo1().s[144]++;
    try {
      const token =
      /* istanbul ignore next */
      (cov_1glnwcswo1().s[145]++, this.getAccessToken());
      /* istanbul ignore next */
      cov_1glnwcswo1().s[146]++;
      if (!token) {
        /* istanbul ignore next */
        cov_1glnwcswo1().b[34][0]++;
        cov_1glnwcswo1().s[147]++;
        return {
          isValid: false,
          expiresIn: 0,
          user: null,
          permissions: [],
          lastActivity: ''
        };
      } else
      /* istanbul ignore next */
      {
        cov_1glnwcswo1().b[34][1]++;
      }
      const response =
      /* istanbul ignore next */
      (cov_1glnwcswo1().s[148]++, await fetch(`${this.BASE_URL}/session`, {
        headers: {
          Authorization: `Bearer ${token}`
        }
      }));
      /* istanbul ignore next */
      cov_1glnwcswo1().s[149]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_1glnwcswo1().b[35][0]++;
        cov_1glnwcswo1().s[150]++;
        return {
          isValid: false,
          expiresIn: 0,
          user: null,
          permissions: [],
          lastActivity: ''
        };
      } else
      /* istanbul ignore next */
      {
        cov_1glnwcswo1().b[35][1]++;
      }
      cov_1glnwcswo1().s[151]++;
      return await response.json();
    } catch (error) {
      /* istanbul ignore next */
      cov_1glnwcswo1().s[152]++;
      // Erreur silencieuse
      console.error('Erreur info session:', error);
      /* istanbul ignore next */
      cov_1glnwcswo1().s[153]++;
      return {
        isValid: false,
        expiresIn: 0,
        user: null,
        permissions: [],
        lastActivity: ''
      };
    }
  }
  // === HELPERS ===
  // Récupération du token d'accès
  static getAccessToken() {
    /* istanbul ignore next */
    cov_1glnwcswo1().f[16]++;
    cov_1glnwcswo1().s[154]++;
    return /* istanbul ignore next */(cov_1glnwcswo1().b[36][0]++, localStorage.getItem(this.TOKEN_KEY)) ||
    /* istanbul ignore next */
    (cov_1glnwcswo1().b[36][1]++, sessionStorage.getItem(this.TOKEN_KEY));
  }
  // Récupération du token de rafraîchissement
  static getRefreshToken() {
    /* istanbul ignore next */
    cov_1glnwcswo1().f[17]++;
    cov_1glnwcswo1().s[155]++;
    return /* istanbul ignore next */(cov_1glnwcswo1().b[37][0]++, localStorage.getItem(this.REFRESH_TOKEN_KEY)) ||
    /* istanbul ignore next */
    (cov_1glnwcswo1().b[37][1]++, sessionStorage.getItem(this.REFRESH_TOKEN_KEY));
  }
  // Récupération de l'utilisateur stocké
  static getStoredUser() {
    /* istanbul ignore next */
    cov_1glnwcswo1().f[18]++;
    cov_1glnwcswo1().s[156]++;
    try {
      const userStr =
      /* istanbul ignore next */
      (cov_1glnwcswo1().s[157]++,
      /* istanbul ignore next */
      (cov_1glnwcswo1().b[38][0]++, localStorage.getItem(this.USER_KEY)) ||
      /* istanbul ignore next */
      (cov_1glnwcswo1().b[38][1]++, sessionStorage.getItem(this.USER_KEY)));
      /* istanbul ignore next */
      cov_1glnwcswo1().s[158]++;
      return userStr ?
      /* istanbul ignore next */
      (cov_1glnwcswo1().b[39][0]++, JSON.parse(userStr)) :
      /* istanbul ignore next */
      (cov_1glnwcswo1().b[39][1]++, null);
    } catch (error) {
      /* istanbul ignore next */
      cov_1glnwcswo1().s[159]++;
      // Erreur silencieuse
      return null;
    }
  }
  // Vérification de l'authentification
  static isAuthenticated() {
    /* istanbul ignore next */
    cov_1glnwcswo1().f[19]++;
    cov_1glnwcswo1().s[160]++;
    return !!this.getAccessToken();
  }
  // Nettoyage des tokens
  static clearTokens() {
    /* istanbul ignore next */
    cov_1glnwcswo1().f[20]++;
    cov_1glnwcswo1().s[161]++;
    localStorage.removeItem(this.TOKEN_KEY);
    /* istanbul ignore next */
    cov_1glnwcswo1().s[162]++;
    localStorage.removeItem(this.REFRESH_TOKEN_KEY);
    /* istanbul ignore next */
    cov_1glnwcswo1().s[163]++;
    localStorage.removeItem(this.USER_KEY);
    /* istanbul ignore next */
    cov_1glnwcswo1().s[164]++;
    sessionStorage.removeItem(this.TOKEN_KEY);
    /* istanbul ignore next */
    cov_1glnwcswo1().s[165]++;
    sessionStorage.removeItem(this.REFRESH_TOKEN_KEY);
    /* istanbul ignore next */
    cov_1glnwcswo1().s[166]++;
    sessionStorage.removeItem(this.USER_KEY);
  }
  // === DONNÉES DE MOCK ===
  static getMockLoginResponse(email) {
    /* istanbul ignore next */
    cov_1glnwcswo1().f[21]++;
    const mockUser =
    /* istanbul ignore next */
    (cov_1glnwcswo1().s[167]++, this.getMockUser());
    /* istanbul ignore next */
    cov_1glnwcswo1().s[168]++;
    return {
      session: {
        user: mockUser,
        accessToken: 'mock_access_token_' + Date.now(),
        refreshToken: 'mock_refresh_token_' + Date.now(),
        expiresAt: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),
        deviceInfo: {
          deviceId: 'mock_device_' + Date.now(),
          platform: 'web',
          osVersion: 'Unknown',
          appVersion: '1.0.0',
          lastSeen: new Date().toISOString(),
          isActive: true
        }
      },
      isFirstLogin: email.includes('new'),
      requiresTwoFactor: false,
      twoFactorMethods: []
    };
  }
  static getMockUser() {
    /* istanbul ignore next */
    cov_1glnwcswo1().f[22]++;
    cov_1glnwcswo1().s[169]++;
    return {
      id: 'mock_user_' + Date.now(),
      email: 'user@example.com',
      created_at: '2024-01-01T00:00:00Z',
      updated_at: new Date().toISOString(),
      onboarding_completed: true,
      profile: {
        id: 'user-123',
        user_id: 'user-123',
        email: 'demo@myfithero.com',
        first_name: 'Demo',
        last_name: 'User',
        date_of_birth: '1990-01-01',
        gender: 'prefer_not_to_say',
        height: 180,
        weight: 75,
        activity_level: 'moderately_active',
        fitness_goals: ['weight_loss', 'muscle_gain'],
        onboarding_completed: true,
        created_at: '2024-01-01T00:00:00Z',
        updated_at: new Date().toISOString()
      }
    };
  }
  static getMockUserStats() {
    /* istanbul ignore next */
    cov_1glnwcswo1().f[23]++;
    cov_1glnwcswo1().s[170]++;
    return {
      totalWorkouts: 127,
      totalCaloriesBurned: 15420,
      averageWorkoutDuration: 45,
      currentStreak: 12,
      longestStreak: 28,
      lastWorkout: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(),
      joinedDaysAgo: 95
    };
  }
}
/* istanbul ignore next */
cov_1glnwcswo1().s[171]++;
exports.AuthService = AuthService;
/* istanbul ignore next */
cov_1glnwcswo1().s[172]++;
Object.defineProperty(AuthService, "BASE_URL", {
  enumerable: true,
  configurable: true,
  writable: true,
  value: '/api/auth'
});
/* istanbul ignore next */
cov_1glnwcswo1().s[173]++;
Object.defineProperty(AuthService, "TOKEN_KEY", {
  enumerable: true,
  configurable: true,
  writable: true,
  value: 'myfithero_token'
});
/* istanbul ignore next */
cov_1glnwcswo1().s[174]++;
Object.defineProperty(AuthService, "REFRESH_TOKEN_KEY", {
  enumerable: true,
  configurable: true,
  writable: true,
  value: 'myfithero_refresh_token'
});
/* istanbul ignore next */
cov_1glnwcswo1().s[175]++;
Object.defineProperty(AuthService, "USER_KEY", {
  enumerable: true,
  configurable: true,
  writable: true,
  value: 'myfithero_user'
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,