{"version":3,"names":["AuthService","login","credentials","cov_1glnwcswo1","f","s","response","fetch","BASE_URL","method","headers","body","JSON","stringify","ok","b","error","json","Error","message","loginResponse","rememberMe","localStorage","setItem","TOKEN_KEY","session","accessToken","REFRESH_TOKEN_KEY","refreshToken","USER_KEY","user","sessionStorage","console","register","data","loginWithOAuth","provider","logout","token","getAccessToken","Authorization","clearTokens","getRefreshToken","refreshResponse","storage","getItem","requestPasswordReset","resetPassword","newPassword","changePassword","getCurrentUser","status","updateProfile","updatedUser","updatePreferences","updateUserProfile","verifyEmail","resendEmailVerification","getUserStats","getMockUserStats","getSessionInfo","isValid","expiresIn","permissions","lastActivity","getStoredUser","userStr","parse","isAuthenticated","removeItem","getMockLoginResponse","email","mockUser","getMockUser","Date","now","expiresAt","toISOString","deviceInfo","deviceId","platform","osVersion","appVersion","lastSeen","isActive","isFirstLogin","includes","requiresTwoFactor","twoFactorMethods","id","created_at","updated_at","onboarding_completed","profile","user_id","first_name","last_name","date_of_birth","gender","height","weight","activity_level","fitness_goals","totalWorkouts","totalCaloriesBurned","averageWorkoutDuration","currentStreak","longestStreak","lastWorkout","joinedDaysAgo","exports","Object","defineProperty"],"sources":["/workspaces/MyFitHero/src/features/auth/services/auth.service.ts"],"sourcesContent":["import { Info, Activity } from 'lucide-react';\nimport {\n  User,\n  LoginCredentials,\n  RegisterData,\n  ResetPasswordData,\n  ChangePasswordData,\n  UpdateProfileData,\n  UpdatePreferencesData,\n  UpdateUserProfileData,\n  LoginResponse,\n  RefreshTokenResponse,\n  UserStatsResponse,\n  SessionInfo,\n  SessionValidation,\n  OAuthCredentials,\n} from '@/features/auth/types/index';\n\nexport class AuthService {\n  private static readonly BASE_URL = '/api/auth';\n  private static readonly TOKEN_KEY = 'myfithero_token';\n  private static readonly REFRESH_TOKEN_KEY = 'myfithero_refresh_token';\n  private static readonly USER_KEY = 'myfithero_user';\n\n  // === AUTHENTIFICATION ===\n\n  // Connexion\n  static async login(credentials: LoginCredentials): Promise<LoginResponse> {\n    try {\n      const response = await fetch(`${this.BASE_URL}/login`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(credentials),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Erreur de connexion');\n      }\n\n      const loginResponse: LoginResponse = await response.json();\n\n      // Stockage sécurisé des tokens\n      if (credentials.rememberMe) {\n        localStorage.setItem(this.TOKEN_KEY, loginResponse.session.accessToken);\n        localStorage.setItem(this.REFRESH_TOKEN_KEY, loginResponse.session.refreshToken);\n        localStorage.setItem(this.USER_KEY, JSON.stringify(loginResponse.session.user));\n      } else {\n        sessionStorage.setItem(this.TOKEN_KEY, loginResponse.session.accessToken);\n        sessionStorage.setItem(this.REFRESH_TOKEN_KEY, loginResponse.session.refreshToken);\n        sessionStorage.setItem(this.USER_KEY, JSON.stringify(loginResponse.session.user));\n      }\n\n      return loginResponse;\n    } catch (error: any) {\n      // Erreur silencieuse\n      console.error('Erreur lors de la connexion:', error);\n      // Ne pas retourner de mock en cas d'erreur - laisser l'erreur remonter\n      throw error;\n    }\n  }\n\n  // Inscription\n  static async register(data: RegisterData): Promise<User> {\n    try {\n      const response = await fetch(`${this.BASE_URL}/register`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \"Erreur lors de l'inscription\");\n      }\n\n      return await response.json();\n    } catch (error: any) {\n      // Erreur silencieuse\n      console.error(\"Erreur lors de l'inscription:\", error);\n      throw error;\n    }\n  }\n\n  // Connexion OAuth\n  static async loginWithOAuth(credentials: OAuthCredentials): Promise<LoginResponse> {\n    try {\n      const response = await fetch(`${this.BASE_URL}/oauth/${credentials.provider}`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(credentials),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Erreur de connexion OAuth');\n      }\n\n      const loginResponse: LoginResponse = await response.json();\n\n      // Stockage des tokens\n      localStorage.setItem(this.TOKEN_KEY, loginResponse.session.accessToken);\n      localStorage.setItem(this.REFRESH_TOKEN_KEY, loginResponse.session.refreshToken);\n      localStorage.setItem(this.USER_KEY, JSON.stringify(loginResponse.session.user));\n\n      return loginResponse;\n    } catch (error: any) {\n      // Erreur silencieuse\n      console.error('Erreur lors de la connexion OAuth:', error);\n      throw error;\n    }\n  }\n\n  // Déconnexion\n  static async logout(): Promise<void> {\n    try {\n      const token = this.getAccessToken();\n      if (token) {\n        await fetch(`${this.BASE_URL}/logout`, {\n          method: 'POST',\n          headers: {\n            Authorization: `Bearer ${token}`,\n            'Content-Type': 'application/json',\n          },\n        });\n      }\n    } catch (error: any) {\n      // Erreur silencieuse\n      console.error('Erreur lors de la déconnexion:', error);\n    } finally {\n      // Nettoyage local dans tous les cas\n      this.clearTokens();\n    }\n  }\n\n  // Rafraîchissement du token\n  static async refreshToken(): Promise<RefreshTokenResponse> {\n    try {\n      const refreshToken = this.getRefreshToken();\n      if (!refreshToken) {\n        throw new Error('Aucun token de rafraîchissement disponible');\n      }\n\n      const response = await fetch(`${this.BASE_URL}/refresh`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ refreshToken }),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Erreur lors du rafraîchissement du token');\n      }\n\n      const refreshResponse: RefreshTokenResponse = await response.json();\n\n      // Mise à jour du token\n      const storage = localStorage.getItem(this.TOKEN_KEY) ? localStorage : sessionStorage;\n      storage.setItem(this.TOKEN_KEY, refreshResponse.accessToken);\n\n      return refreshResponse;\n    } catch (error: any) {\n      // Erreur silencieuse\n      console.error('Erreur lors du rafraîchissement du token:', error);\n      this.clearTokens();\n      throw error;\n    }\n  }\n\n  // === GESTION DES MOTS DE PASSE ===\n\n  // Demande de réinitialisation\n  static async requestPasswordReset(data: ResetPasswordData): Promise<void> {\n    try {\n      const response = await fetch(`${this.BASE_URL}/password/reset-request`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Erreur lors de la demande de réinitialisation');\n      }\n    } catch (error: any) {\n      // Erreur silencieuse\n      console.error('Erreur demande réinitialisation:', error);\n      throw error;\n    }\n  }\n\n  // Réinitialisation du mot de passe\n  static async resetPassword(token: string, newPassword: string): Promise<void> {\n    try {\n      const response = await fetch(`${this.BASE_URL}/password/reset`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ token, newPassword }),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Erreur lors de la réinitialisation');\n      }\n    } catch (error: any) {\n      // Erreur silencieuse\n      console.error('Erreur réinitialisation mot de passe:', error);\n      throw error;\n    }\n  }\n\n  // Changement de mot de passe\n  static async changePassword(data: ChangePasswordData): Promise<void> {\n    try {\n      const response = await fetch(`${this.BASE_URL}/password/change`, {\n        method: 'POST',\n        headers: {\n          Authorization: `Bearer ${this.getAccessToken()}`,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Erreur lors du changement de mot de passe');\n      }\n    } catch (error: any) {\n      // Erreur silencieuse\n      console.error('Erreur changement mot de passe:', error);\n      throw error;\n    }\n  }\n\n  // === GESTION DU PROFIL ===\n\n  // Récupération du profil utilisateur\n  static async getCurrentUser(): Promise<User | null> {\n    try {\n      const token = this.getAccessToken();\n      if (!token) return null;\n\n      const response = await fetch(`${this.BASE_URL}/me`, {\n        headers: { Authorization: `Bearer ${token}` },\n      });\n\n      if (!response.ok) {\n        if (response.status === 401) {\n          this.clearTokens();\n          return null;\n        }\n        throw new Error('Erreur lors de la récupération du profil');\n      }\n\n      const user = await response.json();\n\n      // Mise à jour du stockage local\n      const storage = localStorage.getItem(this.USER_KEY) ? localStorage : sessionStorage;\n      storage.setItem(this.USER_KEY, JSON.stringify(user));\n\n      return user;\n    } catch (error: any) {\n      // Erreur silencieuse\n      console.error('Erreur récupération profil:', error);\n      // Ne pas retourner de mock en cas d'erreur - retourner null pour forcer une nouvelle authentification\n      return null;\n    }\n  }\n\n  // Mise à jour du profil\n  static async updateProfile(data: UpdateProfileData): Promise<User> {\n    try {\n      const response = await fetch(`${this.BASE_URL}/profile`, {\n        method: 'PUT',\n        headers: {\n          Authorization: `Bearer ${this.getAccessToken()}`,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Erreur lors de la mise à jour du profil');\n      }\n\n      const updatedUser = await response.json();\n\n      // Mise à jour du stockage local\n      const storage = localStorage.getItem(this.USER_KEY) ? localStorage : sessionStorage;\n      storage.setItem(this.USER_KEY, JSON.stringify(updatedUser));\n\n      return updatedUser;\n    } catch (error: any) {\n      // Erreur silencieuse\n      console.error('Erreur mise à jour profil:', error);\n      throw error;\n    }\n  }\n\n  // Mise à jour des préférences\n  static async updatePreferences(data: UpdatePreferencesData): Promise<User> {\n    try {\n      const response = await fetch(`${this.BASE_URL}/preferences`, {\n        method: 'PUT',\n        headers: {\n          Authorization: `Bearer ${this.getAccessToken()}`,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Erreur lors de la mise à jour des préférences');\n      }\n\n      return await response.json();\n    } catch (error: any) {\n      // Erreur silencieuse\n      console.error('Erreur mise à jour préférences:', error);\n      throw error;\n    }\n  }\n\n  // Mise à jour du profil fitness\n  static async updateUserProfile(data: UpdateUserProfileData): Promise<User> {\n    try {\n      const response = await fetch(`${this.BASE_URL}/fitness-profile`, {\n        method: 'PUT',\n        headers: {\n          Authorization: `Bearer ${this.getAccessToken()}`,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Erreur lors de la mise à jour du profil fitness');\n      }\n\n      return await response.json();\n    } catch (error: any) {\n      // Erreur silencieuse\n      console.error('Erreur mise à jour profil fitness:', error);\n      throw error;\n    }\n  }\n\n  // === VÉRIFICATIONS ===\n\n  // Vérification d'email\n  static async verifyEmail(token: string): Promise<void> {\n    try {\n      const response = await fetch(`${this.BASE_URL}/verify/email`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ token }),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \"Erreur lors de la vérification d'email\");\n      }\n    } catch (error: any) {\n      // Erreur silencieuse\n      console.error('Erreur vérification email:', error);\n      throw error;\n    }\n  }\n\n  // Renvoi de vérification d'email\n  static async resendEmailVerification(): Promise<void> {\n    try {\n      const response = await fetch(`${this.BASE_URL}/verify/email/resend`, {\n        method: 'POST',\n        headers: { Authorization: `Bearer ${this.getAccessToken()}` },\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Erreur lors du renvoi de vérification');\n      }\n    } catch (error: any) {\n      // Erreur silencieuse\n      console.error('Erreur renvoi vérification email:', error);\n      throw error;\n    }\n  }\n\n  // === STATISTIQUES UTILISATEUR ===\n\n  // Récupération des statistiques\n  static async getUserStats(): Promise<UserStatsResponse> {\n    try {\n      const response = await fetch(`${this.BASE_URL}/stats`, {\n        headers: { Authorization: `Bearer ${this.getAccessToken()}` },\n      });\n\n      if (!response.ok) {\n        throw new Error('Erreur lors de la récupération des statistiques');\n      }\n\n      return await response.json();\n    } catch (error: any) {\n      // Erreur silencieuse\n      console.error('Erreur statistiques utilisateur:', error);\n      return this.getMockUserStats();\n    }\n  }\n\n  // === GESTION DES SESSIONS ===\n\n  // Information sur la session\n  static async getSessionInfo(): Promise<SessionValidation> {\n    try {\n      const token = this.getAccessToken();\n      if (!token) {\n        return { isValid: false, expiresIn: 0, user: null, permissions: [], lastActivity: '' };\n      }\n\n      const response = await fetch(`${this.BASE_URL}/session`, {\n        headers: { Authorization: `Bearer ${token}` },\n      });\n\n      if (!response.ok) {\n        return { isValid: false, expiresIn: 0, user: null, permissions: [], lastActivity: '' };\n      }\n\n      return await response.json();\n    } catch (error: any) {\n      // Erreur silencieuse\n      console.error('Erreur info session:', error);\n      return { isValid: false, expiresIn: 0, user: null, permissions: [], lastActivity: '' };\n    }\n  }\n\n  // === HELPERS ===\n\n  // Récupération du token d'accès\n  static getAccessToken(): string | undefined {\n    return localStorage.getItem(this.TOKEN_KEY) || sessionStorage.getItem(this.TOKEN_KEY);\n  }\n\n  // Récupération du token de rafraîchissement\n  static getRefreshToken(): string | undefined {\n    return (\n      localStorage.getItem(this.REFRESH_TOKEN_KEY) || sessionStorage.getItem(this.REFRESH_TOKEN_KEY)\n    );\n  }\n\n  // Récupération de l'utilisateur stocké\n  static getStoredUser(): User | undefined {\n    try {\n      const userStr = localStorage.getItem(this.USER_KEY) || sessionStorage.getItem(this.USER_KEY);\n      return userStr ? JSON.parse(userStr) : null;\n    } catch (error: any) {\n      // Erreur silencieuse\n      return null;\n    }\n  }\n\n  // Vérification de l'authentification\n  static isAuthenticated(): boolean {\n    return !!this.getAccessToken();\n  }\n\n  // Nettoyage des tokens\n  static clearTokens(): void {\n    localStorage.removeItem(this.TOKEN_KEY);\n    localStorage.removeItem(this.REFRESH_TOKEN_KEY);\n    localStorage.removeItem(this.USER_KEY);\n    sessionStorage.removeItem(this.TOKEN_KEY);\n    sessionStorage.removeItem(this.REFRESH_TOKEN_KEY);\n    sessionStorage.removeItem(this.USER_KEY);\n  }\n\n  // === DONNÉES DE MOCK ===\n\n  private static getMockLoginResponse(email: string): LoginResponse {\n    const mockUser = this.getMockUser();\n    return {\n      session: {\n        user: mockUser,\n        accessToken: 'mock_access_token_' + Date.now(),\n        refreshToken: 'mock_refresh_token_' + Date.now(),\n        expiresAt: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),\n        deviceInfo: {\n          deviceId: 'mock_device_' + Date.now(),\n          platform: 'web',\n          osVersion: 'Unknown',\n          appVersion: '1.0.0',\n          lastSeen: new Date().toISOString(),\n          isActive: true,\n        },\n      },\n      isFirstLogin: email.includes('new'),\n      requiresTwoFactor: false,\n      twoFactorMethods: [],\n    };\n  }\n\n  private static getMockUser(): User {\n    return {\n      id: 'mock_user_' + Date.now(),\n      email: 'user@example.com',\n      created_at: '2024-01-01T00:00:00Z',\n      updated_at: new Date().toISOString(),\n      onboarding_completed: true,\n      profile: {\n        id: 'user-123',\n        user_id: 'user-123',\n        email: 'demo@myfithero.com',\n        first_name: 'Demo',\n        last_name: 'User',\n        date_of_birth: '1990-01-01',\n        gender: 'prefer_not_to_say',\n        height: 180,\n        weight: 75,\n        activity_level: 'moderately_active',\n        fitness_goals: ['weight_loss', 'muscle_gain'],\n        onboarding_completed: true,\n        created_at: '2024-01-01T00:00:00Z',\n        updated_at: new Date().toISOString(),\n      },\n    };\n  }\n\n  private static getMockUserStats(): UserStatsResponse {\n    return {\n      totalWorkouts: 127,\n      totalCaloriesBurned: 15420,\n      averageWorkoutDuration: 45,\n      currentStreak: 12,\n      longestStreak: 28,\n      lastWorkout: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(),\n      joinedDaysAgo: 95,\n    };\n  }\n}\n"],"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","ignoreList":[]}