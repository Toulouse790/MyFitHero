{"version":3,"names":["react_1","cov_223k0e0r3h","s","__importStar","require","card_1","badge_1","progress_1","tabs_1","lucide_react_1","supabase_1","VolumeAnalyticsEngine","userId","timeRange","b","workoutData","className","f","volumeMetrics","setVolumeMetrics","useState","exerciseAnalytics","setExerciseAnalytics","historicalData","setHistoricalData","loading","setLoading","selectedPeriod","setSelectedPeriod","useEffect","loadHistoricalData","daysBack","startDate","Date","setDate","getDate","data","error","supabase","from","select","eq","gte","toISOString","order","ascending","processedData","map","set","id","exercise","exercises","name","exerciseType","type","muscleGroups","muscle_groups","weight","reps","rpe","tempo","restTime","rest_time","timestamp","workouts","date","technique","technique_score","console","calculateVolumeMetrics","useCallback","length","totalVolume","averageIntensity","volumeLoad","relativeIntensity","volumeIndex","intensityLoad","fatigueIndex","muscleVolumeDistribution","Map","muscleIntensityBalance","volumeTrend","intensityTrend","consistencyScore","projectedVolume","recoveryRecommendation","adaptationPhase","reduce","sum","estimatedIntensity","Math","min","forEach","muscle","currentVolume","get","currentIntensity","setIntensity","max","midPoint","floor","firstHalf","slice","secondHalf","firstHalfVolume","secondHalfVolume","averageRPE","uniqueDays","Set","toDateString","size","totalDays","weeklyAverage","calculateExerciseAnalytics","exerciseGroups","groups","push","Object","entries","sets","averageVolume","estimatedOneRM","earlyVolume","lateVolume","volumeProgression","techniqueScore","performanceTrend","volumeEfficiency","recommendedAction","intensityProgression","strengthEnduranceRatio","filter","sort","a","metrics","analytics","formatVolume","volume","toFixed","round","getAdaptationPhaseColor","phase","colors","accumulation","intensification","realization","deload","getRecoveryColor","recommendation","low","moderate","high","critical","jsx_runtime_1","jsx","Card","children","CardContent","jsxs","BarChart3","CardHeader","CardTitle","Brain","Badge","variant","Tabs","defaultValue","TabsList","TabsTrigger","value","TabsContent","TrendingUp","Progress","abs","Target","Array","percentage","intensity","Activity","action","index","Zap","replace","exports","default"],"sources":["/workspaces/MyFitHero/src/features/workout/components/VolumeAnalyticsEngine.tsx"],"sourcesContent":["import React, { useState, useEffect, useMemo, useCallback } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Progress } from '@/components/ui/progress';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { \n  TrendingUp, \n  BarChart3, \n  Target, \n  Zap, \n  Activity,\n  Brain,\n  Award,\n  Calendar,\n  Users,\n  Flame\n} from 'lucide-react';\nimport { supabase } from '@/lib/supabase';\n\n// Types pour les analytics volumétriques avancés\ninterface WorkoutSet {\n  id: string;\n  exercise: string;\n  exerciseType: 'strength' | 'cardio' | 'power' | 'endurance';\n  muscleGroups: string[];\n  weight: number;\n  reps: number;\n  rpe?: number; // Rate of Perceived Exertion (1-10)\n  tempo?: string; // ex: \"3-1-2-1\"\n  restTime?: number;\n  timestamp: Date;\n  technique?: number; // Score technique (1-10)\n}\n\ninterface VolumeMetrics {\n  // Métriques de base\n  totalVolume: number; // Volume total (kg)\n  averageIntensity: number; // Intensité moyenne\n  volumeLoad: number; // Volume Load (sets × reps × RPE)\n  \n  // Métriques avancées\n  relativeIntensity: number; // % du 1RM moyen\n  volumeIndex: number; // Index de volume normalisé\n  intensityLoad: number; // Charge d'intensité\n  fatigueIndex: number; // Index de fatigue\n  \n  // Analyses par muscle\n  muscleVolumeDistribution: Map<string, number>;\n  muscleIntensityBalance: Map<string, number>;\n  \n  // Tendances temporelles\n  volumeTrend: number; // Évolution sur 4 semaines (-1 à +1)\n  intensityTrend: number;\n  consistencyScore: number; // Régularité des entraînements\n  \n  // Prédictions\n  projectedVolume: number; // Volume projeté pour la semaine\n  recoveryRecommendation: 'low' | 'moderate' | 'high' | 'critical';\n  adaptationPhase: 'accumulation' | 'intensification' | 'realization' | 'deload';\n}\n\ninterface ExerciseAnalytics {\n  exercise: string;\n  exerciseType: string;\n  muscleGroups: string[];\n  \n  // Volume\n  totalVolume: number;\n  averageVolume: number;\n  volumeProgression: number; // % change over time\n  \n  // Intensité\n  estimatedOneRM: number;\n  averageIntensity: number; // % 1RM\n  intensityProgression: number;\n  \n  // Performance\n  averageRPE: number;\n  techniqueScore: number;\n  strengthEnduranceRatio: number;\n  \n  // Trends\n  performanceTrend: 'improving' | 'plateauing' | 'declining';\n  volumeEfficiency: number; // Gains per unit volume\n  recommendedAction: string[];\n}\n\ninterface VolumeAnalyticsProps {\n  userId: string;\n  timeRange?: '1w' | '4w' | '12w' | '1y';\n  workoutData?: WorkoutSet[];\n  className?: string;\n}\n\nexport const VolumeAnalyticsEngine: React.FC<VolumeAnalyticsProps> = ({\n  userId,\n  timeRange = '4w',\n  workoutData = [],\n  className = ''\n}) => {\n  const [volumeMetrics, setVolumeMetrics] = useState<VolumeMetrics | null>(null);\n  const [exerciseAnalytics, setExerciseAnalytics] = useState<ExerciseAnalytics[]>([]);\n  const [historicalData, setHistoricalData] = useState<WorkoutSet[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [selectedPeriod, setSelectedPeriod] = useState(timeRange);\n\n  // Chargement des données historiques\n  useEffect(() => {\n    loadHistoricalData();\n  }, [userId, selectedPeriod]);\n\n  const loadHistoricalData = async () => {\n    setLoading(true);\n    try {\n      const daysBack = {\n        '1w': 7,\n        '4w': 28,\n        '12w': 84,\n        '1y': 365\n      }[selectedPeriod];\n\n      const startDate = new Date();\n      startDate.setDate(startDate.getDate() - daysBack);\n\n      const { data, error } = await supabase\n        .from('workout_sets')\n        .select(`\n          *,\n          exercises!inner(name, type, muscle_groups),\n          workouts!inner(date, user_id)\n        `)\n        .eq('workouts.user_id', userId)\n        .gte('workouts.date', startDate.toISOString())\n        .order('workouts.date', { ascending: true });\n\n      if (error) throw error;\n\n      const processedData: WorkoutSet[] = data?.map(set => ({\n        id: set.id,\n        exercise: set.exercises.name,\n        exerciseType: set.exercises.type,\n        muscleGroups: set.exercises.muscle_groups,\n        weight: set.weight || 0,\n        reps: set.reps || 0,\n        rpe: set.rpe,\n        tempo: set.tempo,\n        restTime: set.rest_time,\n        timestamp: new Date(set.workouts.date),\n        technique: set.technique_score\n      })) || [];\n\n      setHistoricalData([...processedData, ...workoutData]);\n    } catch (error) {\n      console.error('Erreur chargement données:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Calcul des métriques de volume avancées\n  const calculateVolumeMetrics = useCallback((data: WorkoutSet[]): VolumeMetrics => {\n    if (data.length === 0) {\n      return {\n        totalVolume: 0,\n        averageIntensity: 0,\n        volumeLoad: 0,\n        relativeIntensity: 0,\n        volumeIndex: 0,\n        intensityLoad: 0,\n        fatigueIndex: 0,\n        muscleVolumeDistribution: new Map(),\n        muscleIntensityBalance: new Map(),\n        volumeTrend: 0,\n        intensityTrend: 0,\n        consistencyScore: 0,\n        projectedVolume: 0,\n        recoveryRecommendation: 'moderate',\n        adaptationPhase: 'accumulation'\n      };\n    }\n\n    // Volume total\n    const totalVolume = data.reduce((sum, set) => sum + (set.weight * set.reps), 0);\n    \n    // Volume Load (intègre RPE)\n    const volumeLoad = data.reduce((sum, set) => {\n      const rpe = set.rpe || 7; // Default RPE si non spécifié\n      return sum + (set.weight * set.reps * rpe);\n    }, 0);\n\n    // Intensité moyenne (estimation basée sur RPE et volume)\n    const averageIntensity = data.reduce((sum, set) => {\n      const estimatedIntensity = set.rpe ? \n        Math.min(100, (set.rpe - 1) * 11.11) : // RPE 1-10 -> 0-100%\n        (set.weight > 0 ? Math.min(90, set.weight / 2) : 50); // Fallback grossier\n      return sum + estimatedIntensity;\n    }, 0) / data.length;\n\n    // Distribution par muscle\n    const muscleVolumeDistribution = new Map<string, number>();\n    const muscleIntensityBalance = new Map<string, number>();\n    \n    data.forEach(set => {\n      set.muscleGroups.forEach(muscle => {\n        const currentVolume = muscleVolumeDistribution.get(muscle) || 0;\n        muscleVolumeDistribution.set(muscle, currentVolume + (set.weight * set.reps));\n        \n        const currentIntensity = muscleIntensityBalance.get(muscle) || 0;\n        const setIntensity = set.rpe || 7;\n        muscleIntensityBalance.set(muscle, Math.max(currentIntensity, setIntensity));\n      });\n    });\n\n    // Calculs de tendance (compare les 2 dernières moitiés de période)\n    const midPoint = Math.floor(data.length / 2);\n    const firstHalf = data.slice(0, midPoint);\n    const secondHalf = data.slice(midPoint);\n    \n    const firstHalfVolume = firstHalf.reduce((sum, set) => sum + (set.weight * set.reps), 0);\n    const secondHalfVolume = secondHalf.reduce((sum, set) => sum + (set.weight * set.reps), 0);\n    \n    const volumeTrend = firstHalfVolume > 0 ? \n      Math.max(-1, Math.min(1, (secondHalfVolume - firstHalfVolume) / firstHalfVolume)) : 0;\n\n    // Index de fatigue (basé sur RPE moyen et volume)\n    const averageRPE = data.reduce((sum, set) => sum + (set.rpe || 7), 0) / data.length;\n    const fatigueIndex = Math.min(10, (averageRPE - 5) * 2 + (totalVolume / 10000));\n\n    // Score de consistance (régularité des entraînements)\n    const uniqueDays = new Set(data.map(set => set.timestamp.toDateString())).size;\n    const totalDays = selectedPeriod === '1w' ? 7 : selectedPeriod === '4w' ? 28 : 84;\n    const consistencyScore = Math.min(1, uniqueDays / (totalDays * 0.4)); // 40% des jours = parfait\n\n    // Prédictions sophistiquées\n    const weeklyAverage = totalVolume / (totalDays / 7);\n    const projectedVolume = weeklyAverage * (1 + volumeTrend * 0.1);\n    \n    // Recommandation de récupération\n    let recoveryRecommendation: VolumeMetrics['recoveryRecommendation'] = 'moderate';\n    if (fatigueIndex > 8) recoveryRecommendation = 'critical';\n    else if (fatigueIndex > 6) recoveryRecommendation = 'high';\n    else if (fatigueIndex < 3) recoveryRecommendation = 'low';\n\n    // Phase d'adaptation\n    let adaptationPhase: VolumeMetrics['adaptationPhase'] = 'accumulation';\n    if (volumeTrend > 0.3) adaptationPhase = 'accumulation';\n    else if (averageIntensity > 80) adaptationPhase = 'intensification';\n    else if (volumeTrend < -0.2) adaptationPhase = 'deload';\n    else adaptationPhase = 'realization';\n\n    return {\n      totalVolume,\n      averageIntensity,\n      volumeLoad,\n      relativeIntensity: averageIntensity,\n      volumeIndex: volumeLoad / 1000, // Normalisé\n      intensityLoad: volumeLoad * (averageIntensity / 100),\n      fatigueIndex,\n      muscleVolumeDistribution,\n      muscleIntensityBalance,\n      volumeTrend,\n      intensityTrend: volumeTrend * 0.8, // Corrélé mais plus stable\n      consistencyScore,\n      projectedVolume,\n      recoveryRecommendation,\n      adaptationPhase\n    };\n  }, [selectedPeriod]);\n\n  // Calcul des analytics par exercice\n  const calculateExerciseAnalytics = useCallback((data: WorkoutSet[]): ExerciseAnalytics[] => {\n    const exerciseGroups = data.reduce((groups, set) => {\n      if (!groups[set.exercise]) {\n        groups[set.exercise] = [];\n      }\n      groups[set.exercise].push(set);\n      return groups;\n    }, {} as Record<string, WorkoutSet[]>);\n\n    return Object.entries(exerciseGroups).map(([exercise, sets]) => {\n      const totalVolume = sets.reduce((sum, set) => sum + (set.weight * set.reps), 0);\n      const averageVolume = totalVolume / sets.length;\n      \n      // Estimation 1RM (formule Epley modifiée)\n      const estimatedOneRM = Math.max(...sets.map(set => {\n        if (set.reps === 1) return set.weight;\n        return set.weight * (1 + set.reps / 30);\n      }));\n\n      // Progression de volume (compare début vs fin)\n      const midPoint = Math.floor(sets.length / 2);\n      const earlyVolume = sets.slice(0, midPoint).reduce((sum, set) => sum + (set.weight * set.reps), 0);\n      const lateVolume = sets.slice(midPoint).reduce((sum, set) => sum + (set.weight * set.reps), 0);\n      const volumeProgression = earlyVolume > 0 ? ((lateVolume - earlyVolume) / earlyVolume) * 100 : 0;\n\n      // Moyennes\n      const averageRPE = sets.reduce((sum, set) => sum + (set.rpe || 7), 0) / sets.length;\n      const techniqueScore = sets.reduce((sum, set) => sum + (set.technique || 8), 0) / sets.length;\n      \n      // Tendance de performance\n      let performanceTrend: ExerciseAnalytics['performanceTrend'] = 'plateauing';\n      if (volumeProgression > 10) performanceTrend = 'improving';\n      else if (volumeProgression < -10) performanceTrend = 'declining';\n\n      // Efficacité du volume\n      const volumeEfficiency = volumeProgression / (totalVolume / 1000);\n\n      // Recommandations basées sur l'analyse\n      const recommendedAction: string[] = [];\n      if (performanceTrend === 'declining') {\n        recommendedAction.push('Réduire le volume temporairement');\n        recommendedAction.push('Vérifier la technique');\n      }\n      if (averageRPE > 8.5) {\n        recommendedAction.push('Diminuer l\\'intensité');\n      }\n      if (techniqueScore < 7) {\n        recommendedAction.push('Focus sur la technique');\n      }\n      if (volumeProgression === 0) {\n        recommendedAction.push('Varier les stimuli d\\'entraînement');\n      }\n\n      return {\n        exercise,\n        exerciseType: sets[0].exerciseType,\n        muscleGroups: sets[0].muscleGroups,\n        totalVolume,\n        averageVolume,\n        volumeProgression,\n        estimatedOneRM,\n        averageIntensity: (estimatedOneRM > 0 ? (sets.reduce((sum, set) => sum + set.weight, 0) / sets.length) / estimatedOneRM * 100 : 0),\n        intensityProgression: volumeProgression * 0.7, // Corrélé\n        averageRPE,\n        techniqueScore,\n        strengthEnduranceRatio: sets.filter(set => set.reps <= 5).length / sets.length,\n        performanceTrend,\n        volumeEfficiency,\n        recommendedAction: recommendedAction.length > 0 ? recommendedAction : ['Continue le programme actuel']\n      };\n    }).sort((a, b) => b.totalVolume - a.totalVolume); // Tri par volume décroissant\n  }, []);\n\n  // Recalcul automatique quand les données changent\n  useEffect(() => {\n    if (historicalData.length > 0) {\n      const metrics = calculateVolumeMetrics(historicalData);\n      const analytics = calculateExerciseAnalytics(historicalData);\n      \n      setVolumeMetrics(metrics);\n      setExerciseAnalytics(analytics);\n    }\n  }, [historicalData, calculateVolumeMetrics, calculateExerciseAnalytics]);\n\n  // Utilitaires de formatage\n  const formatVolume = (volume: number): string => {\n    if (volume >= 1000) return `${(volume / 1000).toFixed(1)}k kg`;\n    return `${Math.round(volume)} kg`;\n  };\n\n  const getAdaptationPhaseColor = (phase: VolumeMetrics['adaptationPhase']): string => {\n    const colors = {\n      accumulation: 'bg-blue-500',\n      intensification: 'bg-red-500',\n      realization: 'bg-green-500',\n      deload: 'bg-yellow-500'\n    };\n    return colors[phase];\n  };\n\n  const getRecoveryColor = (recommendation: VolumeMetrics['recoveryRecommendation']): string => {\n    const colors = {\n      low: 'bg-green-500',\n      moderate: 'bg-yellow-500',\n      high: 'bg-orange-500',\n      critical: 'bg-red-500'\n    };\n    return colors[recommendation];\n  };\n\n  if (loading) {\n    return (\n      <Card className={className}>\n        <CardContent className=\"flex items-center justify-center h-64\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (!volumeMetrics) {\n    return (\n      <Card className={className}>\n        <CardContent className=\"text-center py-12\">\n          <BarChart3 className=\"w-12 h-12 mx-auto text-gray-400 mb-4\" />\n          <p className=\"text-gray-500\">Aucune donnée d'entraînement disponible</p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className={`space-y-6 ${className}`}>\n      {/* Vue d'ensemble */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Brain className=\"w-5 h-5 text-purple-500\" />\n            Analytics Volumétriques Avancés\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-6\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-blue-600\">\n                {formatVolume(volumeMetrics.totalVolume)}\n              </div>\n              <div className=\"text-sm text-gray-500\">Volume Total</div>\n            </div>\n            \n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-green-600\">\n                {Math.round(volumeMetrics.averageIntensity)}%\n              </div>\n              <div className=\"text-sm text-gray-500\">Intensité Moy.</div>\n            </div>\n            \n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-purple-600\">\n                {Math.round(volumeMetrics.volumeIndex)}\n              </div>\n              <div className=\"text-sm text-gray-500\">Index Volume</div>\n            </div>\n            \n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-orange-600\">\n                {Math.round(volumeMetrics.fatigueIndex * 10)}%\n              </div>\n              <div className=\"text-sm text-gray-500\">Fatigue</div>\n            </div>\n          </div>\n\n          {/* Indicateurs d'état */}\n          <div className=\"flex gap-4 justify-center\">\n            <Badge className={`${getAdaptationPhaseColor(volumeMetrics.adaptationPhase)} text-white`}>\n              Phase: {volumeMetrics.adaptationPhase}\n            </Badge>\n            \n            <Badge className={`${getRecoveryColor(volumeMetrics.recoveryRecommendation)} text-white`}>\n              Récupération: {volumeMetrics.recoveryRecommendation}\n            </Badge>\n            \n            <Badge variant=\"outline\">\n              Consistance: {Math.round(volumeMetrics.consistencyScore * 100)}%\n            </Badge>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Tabs détaillés */}\n      <Tabs defaultValue=\"trends\" className=\"space-y-4\">\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"trends\">Tendances</TabsTrigger>\n          <TabsTrigger value=\"muscles\">Muscles</TabsTrigger>\n          <TabsTrigger value=\"exercises\">Exercices</TabsTrigger>\n          <TabsTrigger value=\"predictions\">Prédictions</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"trends\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <TrendingUp className=\"w-5 h-5\" />\n                Tendances et Progression\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div>\n                  <div className=\"flex justify-between items-center mb-2\">\n                    <span className=\"text-sm font-medium\">Tendance Volume</span>\n                    <span className={`text-sm font-bold ${volumeMetrics.volumeTrend > 0 ? 'text-green-600' : volumeMetrics.volumeTrend < 0 ? 'text-red-600' : 'text-gray-600'}`}>\n                      {volumeMetrics.volumeTrend > 0 ? '+' : ''}{Math.round(volumeMetrics.volumeTrend * 100)}%\n                    </span>\n                  </div>\n                  <Progress value={Math.abs(volumeMetrics.volumeTrend) * 100} className=\"h-2\" />\n                </div>\n\n                <div>\n                  <div className=\"flex justify-between items-center mb-2\">\n                    <span className=\"text-sm font-medium\">Tendance Intensité</span>\n                    <span className={`text-sm font-bold ${volumeMetrics.intensityTrend > 0 ? 'text-green-600' : volumeMetrics.intensityTrend < 0 ? 'text-red-600' : 'text-gray-600'}`}>\n                      {volumeMetrics.intensityTrend > 0 ? '+' : ''}{Math.round(volumeMetrics.intensityTrend * 100)}%\n                    </span>\n                  </div>\n                  <Progress value={Math.abs(volumeMetrics.intensityTrend) * 100} className=\"h-2\" />\n                </div>\n              </div>\n\n              <div className=\"bg-blue-50 dark:bg-blue-950 rounded-lg p-4\">\n                <h4 className=\"font-medium text-blue-800 dark:text-blue-200 mb-2\">Analyse de Tendance</h4>\n                <div className=\"text-sm text-blue-700 dark:text-blue-300 space-y-1\">\n                  {volumeMetrics.volumeTrend > 0.2 && (\n                    <p>• Volume en forte progression - Excellent développement</p>\n                  )}\n                  {volumeMetrics.volumeTrend < -0.2 && (\n                    <p>• Volume en baisse - Vérifier la récupération</p>\n                  )}\n                  {volumeMetrics.fatigueIndex > 7 && (\n                    <p>• Niveau de fatigue élevé - Envisager une semaine de décharge</p>\n                  )}\n                  {volumeMetrics.consistencyScore > 0.8 && (\n                    <p>• Excellente régularité d'entraînement</p>\n                  )}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"muscles\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Target className=\"w-5 h-5\" />\n                Distribution Musculaire\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {Array.from(volumeMetrics.muscleVolumeDistribution.entries())\n                  .sort(([,a], [,b]) => b - a)\n                  .slice(0, 8)\n                  .map(([muscle, volume]) => {\n                    const percentage = (volume / volumeMetrics.totalVolume) * 100;\n                    const intensity = volumeMetrics.muscleIntensityBalance.get(muscle) || 0;\n                    \n                    return (\n                      <div key={muscle} className=\"space-y-1\">\n                        <div className=\"flex justify-between items-center\">\n                          <span className=\"text-sm font-medium capitalize\">{muscle}</span>\n                          <div className=\"flex items-center gap-2\">\n                            <span className=\"text-xs text-gray-500\">\n                              {formatVolume(volume)} ({Math.round(percentage)}%)\n                            </span>\n                            <Badge variant=\"outline\" className=\"text-xs\">\n                              RPE {intensity.toFixed(1)}\n                            </Badge>\n                          </div>\n                        </div>\n                        <Progress value={percentage} className=\"h-2\" />\n                      </div>\n                    );\n                  })}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"exercises\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Activity className=\"w-5 h-5\" />\n                Analytics par Exercice\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {exerciseAnalytics.slice(0, 6).map((analytics) => (\n                  <div key={analytics.exercise} className=\"border rounded-lg p-4\">\n                    <div className=\"flex justify-between items-start mb-3\">\n                      <div>\n                        <h4 className=\"font-medium\">{analytics.exercise}</h4>\n                        <div className=\"text-sm text-gray-500 flex items-center gap-2\">\n                          <Badge variant=\"outline\" className=\"text-xs\">\n                            {analytics.exerciseType}\n                          </Badge>\n                          <span>1RM est: {Math.round(analytics.estimatedOneRM)}kg</span>\n                        </div>\n                      </div>\n                      <Badge \n                        variant={analytics.performanceTrend === 'improving' ? 'default' : \n                                analytics.performanceTrend === 'declining' ? 'destructive' : 'outline'}\n                      >\n                        {analytics.performanceTrend}\n                      </Badge>\n                    </div>\n\n                    <div className=\"grid grid-cols-3 gap-4 text-sm mb-3\">\n                      <div>\n                        <span className=\"text-gray-500\">Volume Total:</span>\n                        <div className=\"font-medium\">{formatVolume(analytics.totalVolume)}</div>\n                      </div>\n                      <div>\n                        <span className=\"text-gray-500\">Progression:</span>\n                        <div className={`font-medium ${analytics.volumeProgression > 0 ? 'text-green-600' : analytics.volumeProgression < 0 ? 'text-red-600' : 'text-gray-600'}`}>\n                          {analytics.volumeProgression > 0 ? '+' : ''}{Math.round(analytics.volumeProgression)}%\n                        </div>\n                      </div>\n                      <div>\n                        <span className=\"text-gray-500\">RPE Moyen:</span>\n                        <div className=\"font-medium\">{analytics.averageRPE.toFixed(1)}/10</div>\n                      </div>\n                    </div>\n\n                    <div className=\"text-xs text-gray-600\">\n                      <strong>Recommandations:</strong>\n                      <ul className=\"list-disc list-inside mt-1\">\n                        {analytics.recommendedAction.map((action, index) => (\n                          <li key={index}>{action}</li>\n                        ))}\n                      </ul>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"predictions\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Zap className=\"w-5 h-5\" />\n                Prédictions & Recommandations\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div className=\"bg-green-50 dark:bg-green-950 rounded-lg p-4\">\n                  <h4 className=\"font-medium text-green-800 dark:text-green-200 mb-2\">\n                    Volume Projeté (Semaine Prochaine)\n                  </h4>\n                  <div className=\"text-2xl font-bold text-green-600\">\n                    {formatVolume(volumeMetrics.projectedVolume)}\n                  </div>\n                  <div className=\"text-sm text-green-700 dark:text-green-300 mt-1\">\n                    Basé sur la tendance actuelle\n                  </div>\n                </div>\n\n                <div className={`rounded-lg p-4 ${getRecoveryColor(volumeMetrics.recoveryRecommendation).replace('bg-', 'bg-opacity-10 bg-')}`}>\n                  <h4 className=\"font-medium mb-2\">\n                    Recommandation Récupération\n                  </h4>\n                  <div className=\"text-lg font-bold capitalize\">\n                    {volumeMetrics.recoveryRecommendation}\n                  </div>\n                  <div className=\"text-sm mt-1\">\n                    Niveau de fatigue: {Math.round(volumeMetrics.fatigueIndex * 10)}%\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"space-y-3\">\n                <h4 className=\"font-medium\">Stratégie d'Entraînement Suggérée</h4>\n                \n                {volumeMetrics.adaptationPhase === 'accumulation' && (\n                  <div className=\"bg-blue-50 dark:bg-blue-950 rounded-lg p-4\">\n                    <h5 className=\"font-medium text-blue-800 dark:text-blue-200 mb-2\">Phase d'Accumulation</h5>\n                    <ul className=\"text-sm text-blue-700 dark:text-blue-300 list-disc list-inside space-y-1\">\n                      <li>Augmentez progressivement le volume</li>\n                      <li>Maintenez l'intensité modérée (70-80%)</li>\n                      <li>Focus sur la technique et la consistance</li>\n                    </ul>\n                  </div>\n                )}\n\n                {volumeMetrics.adaptationPhase === 'intensification' && (\n                  <div className=\"bg-red-50 dark:bg-red-950 rounded-lg p-4\">\n                    <h5 className=\"font-medium text-red-800 dark:text-red-200 mb-2\">Phase d'Intensification</h5>\n                    <ul className=\"text-sm text-red-700 dark:text-red-300 list-disc list-inside space-y-1\">\n                      <li>Réduisez le volume, augmentez l'intensité</li>\n                      <li>Travail en force (85-95%)</li>\n                      <li>Repos plus longs entre séries</li>\n                    </ul>\n                  </div>\n                )}\n\n                {volumeMetrics.adaptationPhase === 'deload' && (\n                  <div className=\"bg-yellow-50 dark:bg-yellow-950 rounded-lg p-4\">\n                    <h5 className=\"font-medium text-yellow-800 dark:text-yellow-200 mb-2\">Semaine de Décharge</h5>\n                    <ul className=\"text-sm text-yellow-700 dark:text-yellow-300 list-disc list-inside space-y-1\">\n                      <li>Réduisez volume et intensité de 40-60%</li>\n                      <li>Focus sur la mobilité et récupération</li>\n                      <li>Préparez le prochain cycle</li>\n                    </ul>\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n};\n\nexport default VolumeAnalyticsEngine;"],"mappingscAAA,GAAAC,CAAA,QAAAC,YAAA,CAAAC,OAAA;AACA,MAAAC,MAAA;AAAA;AAAA,CAAAJ,cAAA,GAAAC,CAAA,QAAAE,OAAA;AACA,MAAAE,OAAA;AAAA;AAAA,CAAAL,cAAA,GAAAC,CAAA,QAAAE,OAAA;AACA,MAAAG,UAAA;AAAA;AAAA,CAAAN,cAAA,GAAAC,CAAA,QAAAE,OAAA;AACA,MAAAI,MAAA;AAAA;AAAA,CAAAP,cAAA,GAAAC,CAAA,QAAAE,OAAA;AACA,MAAAK,cAAA;AAAA;AAAA,CAAAR,cAAA,GAAAC,CAAA,QAAAE,OAAA;AAYA,MAAAM,UAAA;AAAA;AAAA,CAAAT,cAAA,GAAAC,CAAA,QAAAE,OAAA;AAA0C;AAAAH,cAAA,GAAAC,CAAA;AA6EnC,MAAMS,qBAAqB,GAAmCA,CAAC;EACpEC,MAAM;EACNC,SAAS;EAAA;EAAA,CAAAZ,cAAA,GAAAa,CAAA,WAAG,IAAI;EAChBC,WAAW;EAAA;EAAA,CAAAd,cAAA,GAAAa,CAAA,WAAG,EAAE;EAChBE,SAAS;EAAA;EAAA,CAAAf,cAAA,GAAAa,CAAA,WAAG,EAAE;AAAA,CACf,KAAI;EAAA;EAAAb,cAAA,GAAAgB,CAAA;EACH,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC;EAAA;EAAA,CAAAlB,cAAA,GAAAC,CAAA,QAAG,IAAAF,OAAA,CAAAoB,QAAQ,EAAuB,IAAI,CAAC;EAC9E,MAAM,CAACC,iBAAiB,EAAEC,oBAAoB,CAAC;EAAA;EAAA,CAAArB,cAAA,GAAAC,CAAA,QAAG,IAAAF,OAAA,CAAAoB,QAAQ,EAAsB,EAAE,CAAC;EACnF,MAAM,CAACG,cAAc,EAAEC,iBAAiB,CAAC;EAAA;EAAA,CAAAvB,cAAA,GAAAC,CAAA,QAAG,IAAAF,OAAA,CAAAoB,QAAQ,EAAe,EAAE,CAAC;EACtE,MAAM,CAACK,OAAO,EAAEC,UAAU,CAAC;EAAA;EAAA,CAAAzB,cAAA,GAAAC,CAAA,QAAG,IAAAF,OAAA,CAAAoB,QAAQ,EAAC,IAAI,CAAC;EAC5C,MAAM,CAACO,cAAc,EAAEC,iBAAiB,CAAC;EAAA;EAAA,CAAA3B,cAAA,GAAAC,CAAA,QAAG,IAAAF,OAAA,CAAAoB,QAAQ,EAACP,SAAS,CAAC;EAE/D;EAAA;EAAAZ,cAAA,GAAAC,CAAA;EACA,IAAAF,OAAA,CAAA6B,SAAS,EAAC,MAAK;IAAA;IAAA5B,cAAA,GAAAgB,CAAA;IAAAhB,cAAA,GAAAC,CAAA;IACb4B,kBAAkB,EAAE;EACtB,CAAC,EAAE,CAAClB,MAAM,EAAEe,cAAc,CAAC,CAAC;EAAC;EAAA1B,cAAA,GAAAC,CAAA;EAE7B,MAAM4B,kBAAkB,GAAG,MAAAA,CAAA,KAAW;IAAA;IAAA7B,cAAA,GAAAgB,CAAA;IAAAhB,cAAA,GAAAC,CAAA;IACpCwB,UAAU,CAAC,IAAI,CAAC;IAAC;IAAAzB,cAAA,GAAAC,CAAA;IACjB,IAAI;MACF,MAAM6B,QAAQ;MAAA;MAAA,CAAA9B,cAAA,GAAAC,CAAA,QAAG;QACf,IAAI,EAAE,CAAC;QACP,IAAI,EAAE,EAAE;QACR,KAAK,EAAE,EAAE;QACT,IAAI,EAAE;OACP,CAACyB,cAAc,CAAC;MAEjB,MAAMK,SAAS;MAAA;MAAA,CAAA/B,cAAA,GAAAC,CAAA,QAAG,IAAI+B,IAAI,EAAE;MAAC;MAAAhC,cAAA,GAAAC,CAAA;MAC7B8B,SAAS,CAACE,OAAO,CAACF,SAAS,CAACG,OAAO,EAAE,GAAGJ,QAAQ,CAAC;MAEjD,MAAM;QAAEK,IAAI;QAAEC;MAAK,CAAE;MAAA;MAAA,CAAApC,cAAA,GAAAC,CAAA,QAAG,MAAMQ,UAAA,CAAA4B,QAAQ,CACnCC,IAAI,CAAC,cAAc,CAAC,CACpBC,MAAM,CAAC;;;;SAIP,CAAC,CACDC,EAAE,CAAC,kBAAkB,EAAE7B,MAAM,CAAC,CAC9B8B,GAAG,CAAC,eAAe,EAAEV,SAAS,CAACW,WAAW,EAAE,CAAC,CAC7CC,KAAK,CAAC,eAAe,EAAE;QAAEC,SAAS,EAAE;MAAI,CAAE,CAAC;MAAC;MAAA5C,cAAA,GAAAC,CAAA;MAE/C,IAAImC,KAAK,EAAE;QAAA;QAAApC,cAAA,GAAAa,CAAA;QAAAb,cAAA,GAAAC,CAAA;QAAA,MAAMmC,KAAK;MAAA,CAAC;MAAA;MAAA;QAAApC,cAAA,GAAAa,CAAA;MAAA;MAEvB,MAAMgC,aAAa;MAAA;MAAA,CAAA7C,cAAA,GAAAC,CAAA;MAAiB;MAAA,CAAAD,cAAA,GAAAa,CAAA,WAAAsB,IAAI,EAAEW,GAAG,CAACC,GAAG,IAAK;QAAA;QAAA/C,cAAA,GAAAgB,CAAA;QAAAhB,cAAA,GAAAC,CAAA;QAAA;UACpD+C,EAAE,EAAED,GAAG,CAACC,EAAE;UACVC,QAAQ,EAAEF,GAAG,CAACG,SAAS,CAACC,IAAI;UAC5BC,YAAY,EAAEL,GAAG,CAACG,SAAS,CAACG,IAAI;UAChCC,YAAY,EAAEP,GAAG,CAACG,SAAS,CAACK,aAAa;UACzCC,MAAM;UAAE;UAAA,CAAAxD,cAAA,GAAAa,CAAA,WAAAkC,GAAG,CAACS,MAAM;UAAA;UAAA,CAAAxD,cAAA,GAAAa,CAAA,WAAI,CAAC;UACvB4C,IAAI;UAAE;UAAA,CAAAzD,cAAA,GAAAa,CAAA,WAAAkC,GAAG,CAACU,IAAI;UAAA;UAAA,CAAAzD,cAAA,GAAAa,CAAA,WAAI,CAAC;UACnB6C,GAAG,EAAEX,GAAG,CAACW,GAAG;UACZC,KAAK,EAAEZ,GAAG,CAACY,KAAK;UAChBC,QAAQ,EAAEb,GAAG,CAACc,SAAS;UACvBC,SAAS,EAAE,IAAI9B,IAAI,CAACe,GAAG,CAACgB,QAAQ,CAACC,IAAI,CAAC;UACtCC,SAAS,EAAElB,GAAG,CAACmB;SAChB;OAAC,CAAC;MAAA;MAAA,CAAAlE,cAAA,GAAAa,CAAA,WAAI,EAAE;MAAC;MAAAb,cAAA,GAAAC,CAAA;MAEVsB,iBAAiB,CAAC,CAAC,GAAGsB,aAAa,EAAE,GAAG/B,WAAW,CAAC,CAAC;IACvD,CAAC,CAAC,OAAOsB,KAAK,EAAE;MAAA;MAAApC,cAAA,GAAAC,CAAA;MACdkE,OAAO,CAAC/B,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IACpD,CAAC,SAAS;MAAA;MAAApC,cAAA,GAAAC,CAAA;MACRwB,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED;EACA,MAAM2C,sBAAsB;EAAA;EAAA,CAAApE,cAAA,GAAAC,CAAA,QAAG,IAAAF,OAAA,CAAAsE,WAAW,EAAElC,IAAkB,IAAmB;IAAA;IAAAnC,cAAA,GAAAgB,CAAA;IAAAhB,cAAA,GAAAC,CAAA;IAC/E,IAAIkC,IAAI,CAACmC,MAAM,KAAK,CAAC,EAAE;MAAA;MAAAtE,cAAA,GAAAa,CAAA;MAAAb,cAAA,GAAAC,CAAA;MACrB,OAAO;QACLsE,WAAW,EAAE,CAAC;QACdC,gBAAgB,EAAE,CAAC;QACnBC,UAAU,EAAE,CAAC;QACbC,iBAAiB,EAAE,CAAC;QACpBC,WAAW,EAAE,CAAC;QACdC,aAAa,EAAE,CAAC;QAChBC,YAAY,EAAE,CAAC;QACfC,wBAAwB,EAAE,IAAIC,GAAG,EAAE;QACnCC,sBAAsB,EAAE,IAAID,GAAG,EAAE;QACjCE,WAAW,EAAE,CAAC;QACdC,cAAc,EAAE,CAAC;QACjBC,gBAAgB,EAAE,CAAC;QACnBC,eAAe,EAAE,CAAC;QAClBC,sBAAsB,EAAE,UAAU;QAClCC,eAAe,EAAE;OAClB;IACH,CAAC;IAAA;IAAA;MAAAtF,cAAA,GAAAa,CAAA;IAAA;IAED;IACA,MAAM0D,WAAW;IAAA;IAAA,CAAAvE,cAAA,GAAAC,CAAA,QAAGkC,IAAI,CAACoD,MAAM,CAAC,CAACC,GAAG,EAAEzC,GAAG,KAAK;MAAA;MAAA/C,cAAA,GAAAgB,CAAA;MAAAhB,cAAA,GAAAC,CAAA;MAAA,OAAAuF,GAAG,GAAIzC,GAAG,CAACS,MAAM,GAAGT,GAAG,CAACU,IAAK;IAAD,CAAC,EAAE,CAAC,CAAC;IAE/E;IACA,MAAMgB,UAAU;IAAA;IAAA,CAAAzE,cAAA,GAAAC,CAAA,QAAGkC,IAAI,CAACoD,MAAM,CAAC,CAACC,GAAG,EAAEzC,GAAG,KAAI;MAAA;MAAA/C,cAAA,GAAAgB,CAAA;MAC1C,MAAM0C,GAAG;MAAA;MAAA,CAAA1D,cAAA,GAAAC,CAAA;MAAG;MAAA,CAAAD,cAAA,GAAAa,CAAA,WAAAkC,GAAG,CAACW,GAAG;MAAA;MAAA,CAAA1D,cAAA,GAAAa,CAAA,WAAI,CAAC,GAAC,CAAC;MAAA;MAAAb,cAAA,GAAAC,CAAA;MAC1B,OAAOuF,GAAG,GAAIzC,GAAG,CAACS,MAAM,GAAGT,GAAG,CAACU,IAAI,GAAGC,GAAI;IAC5C,CAAC,EAAE,CAAC,CAAC;IAEL;IACA,MAAMc,gBAAgB;IAAA;IAAA,CAAAxE,cAAA,GAAAC,CAAA,QAAGkC,IAAI,CAACoD,MAAM,CAAC,CAACC,GAAG,EAAEzC,GAAG,KAAI;MAAA;MAAA/C,cAAA,GAAAgB,CAAA;MAChD,MAAMyE,kBAAkB;MAAA;MAAA,CAAAzF,cAAA,GAAAC,CAAA,QAAG8C,GAAG,CAACW,GAAG;MAAA;MAAA,CAAA1D,cAAA,GAAAa,CAAA,WAChC6E,IAAI,CAACC,GAAG,CAAC,GAAG,EAAE,CAAC5C,GAAG,CAACW,GAAG,GAAG,CAAC,IAAI,KAAK,CAAC;MAAA;MAAA,CAAG;MAAA1D,cAAA,GAAAa,CAAA,WACtCkC,GAAG,CAACS,MAAM,GAAG,CAAC;MAAA;MAAA,CAAAxD,cAAA,GAAAa,CAAA,WAAG6E,IAAI,CAACC,GAAG,CAAC,EAAE,EAAE5C,GAAG,CAACS,MAAM,GAAG,CAAC,CAAC;MAAA;MAAA,CAAAxD,cAAA,GAAAa,CAAA,WAAG,EAAE,EAAC,EAAC,CAAC;MAAA;MAAAb,cAAA,GAAAC,CAAA;MACxD,OAAOuF,GAAG,GAAGC,kBAAkB;IACjC,CAAC,EAAE,CAAC,CAAC,GAAGtD,IAAI,CAACmC,MAAM;IAEnB;IACA,MAAMQ,wBAAwB;IAAA;IAAA,CAAA9E,cAAA,GAAAC,CAAA,QAAG,IAAI8E,GAAG,EAAkB;IAC1D,MAAMC,sBAAsB;IAAA;IAAA,CAAAhF,cAAA,GAAAC,CAAA,QAAG,IAAI8E,GAAG,EAAkB;IAAC;IAAA/E,cAAA,GAAAC,CAAA;IAEzDkC,IAAI,CAACyD,OAAO,CAAC7C,GAAG,IAAG;MAAA;MAAA/C,cAAA,GAAAgB,CAAA;MAAAhB,cAAA,GAAAC,CAAA;MACjB8C,GAAG,CAACO,YAAY,CAACsC,OAAO,CAACC,MAAM,IAAG;QAAA;QAAA7F,cAAA,GAAAgB,CAAA;QAChC,MAAM8E,aAAa;QAAA;QAAA,CAAA9F,cAAA,GAAAC,CAAA;QAAG;QAAA,CAAAD,cAAA,GAAAa,CAAA,WAAAiE,wBAAwB,CAACiB,GAAG,CAACF,MAAM,CAAC;QAAA;QAAA,CAAA7F,cAAA,GAAAa,CAAA,WAAI,CAAC;QAAC;QAAAb,cAAA,GAAAC,CAAA;QAChE6E,wBAAwB,CAAC/B,GAAG,CAAC8C,MAAM,EAAEC,aAAa,GAAI/C,GAAG,CAACS,MAAM,GAAGT,GAAG,CAACU,IAAK,CAAC;QAE7E,MAAMuC,gBAAgB;QAAA;QAAA,CAAAhG,cAAA,GAAAC,CAAA;QAAG;QAAA,CAAAD,cAAA,GAAAa,CAAA,WAAAmE,sBAAsB,CAACe,GAAG,CAACF,MAAM,CAAC;QAAA;QAAA,CAAA7F,cAAA,GAAAa,CAAA,WAAI,CAAC;QAChE,MAAMoF,YAAY;QAAA;QAAA,CAAAjG,cAAA,GAAAC,CAAA;QAAG;QAAA,CAAAD,cAAA,GAAAa,CAAA,WAAAkC,GAAG,CAACW,GAAG;QAAA;QAAA,CAAA1D,cAAA,GAAAa,CAAA,WAAI,CAAC;QAAC;QAAAb,cAAA,GAAAC,CAAA;QAClC+E,sBAAsB,CAACjC,GAAG,CAAC8C,MAAM,EAAEH,IAAI,CAACQ,GAAG,CAACF,gBAAgB,EAAEC,YAAY,CAAC,CAAC;MAC9E,CAAC,CAAC;IACJ,CAAC,CAAC;IAEF;IACA,MAAME,QAAQ;IAAA;IAAA,CAAAnG,cAAA,GAAAC,CAAA,QAAGyF,IAAI,CAACU,KAAK,CAACjE,IAAI,CAACmC,MAAM,GAAG,CAAC,CAAC;IAC5C,MAAM+B,SAAS;IAAA;IAAA,CAAArG,cAAA,GAAAC,CAAA,QAAGkC,IAAI,CAACmE,KAAK,CAAC,CAAC,EAAEH,QAAQ,CAAC;IACzC,MAAMI,UAAU;IAAA;IAAA,CAAAvG,cAAA,GAAAC,CAAA,QAAGkC,IAAI,CAACmE,KAAK,CAACH,QAAQ,CAAC;IAEvC,MAAMK,eAAe;IAAA;IAAA,CAAAxG,cAAA,GAAAC,CAAA,QAAGoG,SAAS,CAACd,MAAM,CAAC,CAACC,GAAG,EAAEzC,GAAG,KAAK;MAAA;MAAA/C,cAAA,GAAAgB,CAAA;MAAAhB,cAAA,GAAAC,CAAA;MAAA,OAAAuF,GAAG,GAAIzC,GAAG,CAACS,MAAM,GAAGT,GAAG,CAACU,IAAK;IAAD,CAAC,EAAE,CAAC,CAAC;IACxF,MAAMgD,gBAAgB;IAAA;IAAA,CAAAzG,cAAA,GAAAC,CAAA,QAAGsG,UAAU,CAAChB,MAAM,CAAC,CAACC,GAAG,EAAEzC,GAAG,KAAK;MAAA;MAAA/C,cAAA,GAAAgB,CAAA;MAAAhB,cAAA,GAAAC,CAAA;MAAA,OAAAuF,GAAG,GAAIzC,GAAG,CAACS,MAAM,GAAGT,GAAG,CAACU,IAAK;IAAD,CAAC,EAAE,CAAC,CAAC;IAE1F,MAAMwB,WAAW;IAAA;IAAA,CAAAjF,cAAA,GAAAC,CAAA,QAAGuG,eAAe,GAAG,CAAC;IAAA;IAAA,CAAAxG,cAAA,GAAAa,CAAA,WACrC6E,IAAI,CAACQ,GAAG,CAAC,CAAC,CAAC,EAAER,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE,CAACc,gBAAgB,GAAGD,eAAe,IAAIA,eAAe,CAAC,CAAC;IAAA;IAAA,CAAAxG,cAAA,GAAAa,CAAA,WAAG,CAAC;IAEvF;IACA,MAAM6F,UAAU;IAAA;IAAA,CAAA1G,cAAA,GAAAC,CAAA,QAAGkC,IAAI,CAACoD,MAAM,CAAC,CAACC,GAAG,EAAEzC,GAAG,KAAK;MAAA;MAAA/C,cAAA,GAAAgB,CAAA;MAAAhB,cAAA,GAAAC,CAAA;MAAA,OAAAuF,GAAG;MAAI;MAAA,CAAAxF,cAAA,GAAAa,CAAA,WAAAkC,GAAG,CAACW,GAAG;MAAA;MAAA,CAAA1D,cAAA,GAAAa,CAAA,WAAI,CAAC,EAAC;IAAD,CAAC,EAAE,CAAC,CAAC,GAAGsB,IAAI,CAACmC,MAAM;IACnF,MAAMO,YAAY;IAAA;IAAA,CAAA7E,cAAA,GAAAC,CAAA,QAAGyF,IAAI,CAACC,GAAG,CAAC,EAAE,EAAE,CAACe,UAAU,GAAG,CAAC,IAAI,CAAC,GAAInC,WAAW,GAAG,KAAM,CAAC;IAE/E;IACA,MAAMoC,UAAU;IAAA;IAAA,CAAA3G,cAAA,GAAAC,CAAA,QAAG,IAAI2G,GAAG,CAACzE,IAAI,CAACW,GAAG,CAACC,GAAG,IAAI;MAAA;MAAA/C,cAAA,GAAAgB,CAAA;MAAAhB,cAAA,GAAAC,CAAA;MAAA,OAAA8C,GAAG,CAACe,SAAS,CAAC+C,YAAY,EAAE;IAAF,CAAE,CAAC,CAAC,CAACC,IAAI;IAC9E,MAAMC,SAAS;IAAA;IAAA,CAAA/G,cAAA,GAAAC,CAAA,QAAGyB,cAAc,KAAK,IAAI;IAAA;IAAA,CAAA1B,cAAA,GAAAa,CAAA,WAAG,CAAC;IAAA;IAAA,CAAAb,cAAA,GAAAa,CAAA,WAAGa,cAAc,KAAK,IAAI;IAAA;IAAA,CAAA1B,cAAA,GAAAa,CAAA,WAAG,EAAE;IAAA;IAAA,CAAAb,cAAA,GAAAa,CAAA,WAAG,EAAE;IACjF,MAAMsE,gBAAgB;IAAA;IAAA,CAAAnF,cAAA,GAAAC,CAAA,QAAGyF,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEgB,UAAU,IAAII,SAAS,GAAG,GAAG,CAAC,CAAC,EAAC,CAAC;IAEtE;IACA,MAAMC,aAAa;IAAA;IAAA,CAAAhH,cAAA,GAAAC,CAAA,QAAGsE,WAAW,IAAIwC,SAAS,GAAG,CAAC,CAAC;IACnD,MAAM3B,eAAe;IAAA;IAAA,CAAApF,cAAA,GAAAC,CAAA,QAAG+G,aAAa,IAAI,CAAC,GAAG/B,WAAW,GAAG,GAAG,CAAC;IAE/D;IACA,IAAII,sBAAsB;IAAA;IAAA,CAAArF,cAAA,GAAAC,CAAA,QAA4C,UAAU;IAAC;IAAAD,cAAA,GAAAC,CAAA;IACjF,IAAI4E,YAAY,GAAG,CAAC,EAAE;MAAA;MAAA7E,cAAA,GAAAa,CAAA;MAAAb,cAAA,GAAAC,CAAA;MAAAoF,sBAAsB,GAAG,UAAU;IAAA,CAAC,MACrD;MAAA;MAAArF,cAAA,GAAAa,CAAA;MAAAb,cAAA,GAAAC,CAAA;MAAA,IAAI4E,YAAY,GAAG,CAAC,EAAE;QAAA;QAAA7E,cAAA,GAAAa,CAAA;QAAAb,cAAA,GAAAC,CAAA;QAAAoF,sBAAsB,GAAG,MAAM;MAAA,CAAC,MACtD;QAAA;QAAArF,cAAA,GAAAa,CAAA;QAAAb,cAAA,GAAAC,CAAA;QAAA,IAAI4E,YAAY,GAAG,CAAC,EAAE;UAAA;UAAA7E,cAAA,GAAAa,CAAA;UAAAb,cAAA,GAAAC,CAAA;UAAAoF,sBAAsB,GAAG,KAAK;QAAA,CAAC;QAAA;QAAA;UAAArF,cAAA,GAAAa,CAAA;QAAA;MAAD;IAAA;IAEzD;IACA,IAAIyE,eAAe;IAAA;IAAA,CAAAtF,cAAA,GAAAC,CAAA,SAAqC,cAAc;IAAC;IAAAD,cAAA,GAAAC,CAAA;IACvE,IAAIgF,WAAW,GAAG,GAAG,EAAE;MAAA;MAAAjF,cAAA,GAAAa,CAAA;MAAAb,cAAA,GAAAC,CAAA;MAAAqF,eAAe,GAAG,cAAc;IAAA,CAAC,MACnD;MAAA;MAAAtF,cAAA,GAAAa,CAAA;MAAAb,cAAA,GAAAC,CAAA;MAAA,IAAIuE,gBAAgB,GAAG,EAAE,EAAE;QAAA;QAAAxE,cAAA,GAAAa,CAAA;QAAAb,cAAA,GAAAC,CAAA;QAAAqF,eAAe,GAAG,iBAAiB;MAAA,CAAC,MAC/D;QAAA;QAAAtF,cAAA,GAAAa,CAAA;QAAAb,cAAA,GAAAC,CAAA;QAAA,IAAIgF,WAAW,GAAG,CAAC,GAAG,EAAE;UAAA;UAAAjF,cAAA,GAAAa,CAAA;UAAAb,cAAA,GAAAC,CAAA;UAAAqF,eAAe,GAAG,QAAQ;QAAA,CAAC,MACnD;UAAA;UAAAtF,cAAA,GAAAa,CAAA;UAAAb,cAAA,GAAAC,CAAA;UAAAqF,eAAe,GAAG,aAAa;QAAA;MAAA;IAAA;IAAC;IAAAtF,cAAA,GAAAC,CAAA;IAErC,OAAO;MACLsE,WAAW;MACXC,gBAAgB;MAChBC,UAAU;MACVC,iBAAiB,EAAEF,gBAAgB;MACnCG,WAAW,EAAEF,UAAU,GAAG,IAAI;MAAE;MAChCG,aAAa,EAAEH,UAAU,IAAID,gBAAgB,GAAG,GAAG,CAAC;MACpDK,YAAY;MACZC,wBAAwB;MACxBE,sBAAsB;MACtBC,WAAW;MACXC,cAAc,EAAED,WAAW,GAAG,GAAG;MAAE;MACnCE,gBAAgB;MAChBC,eAAe;MACfC,sBAAsB;MACtBC;KACD;EACH,CAAC,EAAE,CAAC5D,cAAc,CAAC,CAAC;EAEpB;EACA,MAAMuF,0BAA0B;EAAA;EAAA,CAAAjH,cAAA,GAAAC,CAAA,SAAG,IAAAF,OAAA,CAAAsE,WAAW,EAAElC,IAAkB,IAAyB;IAAA;IAAAnC,cAAA,GAAAgB,CAAA;IACzF,MAAMkG,cAAc;IAAA;IAAA,CAAAlH,cAAA,GAAAC,CAAA,SAAGkC,IAAI,CAACoD,MAAM,CAAC,CAAC4B,MAAM,EAAEpE,GAAG,KAAI;MAAA;MAAA/C,cAAA,GAAAgB,CAAA;MAAAhB,cAAA,GAAAC,CAAA;MACjD,IAAI,CAACkH,MAAM,CAACpE,GAAG,CAACE,QAAQ,CAAC,EAAE;QAAA;QAAAjD,cAAA,GAAAa,CAAA;QAAAb,cAAA,GAAAC,CAAA;QACzBkH,MAAM,CAACpE,GAAG,CAACE,QAAQ,CAAC,GAAG,EAAE;MAC3B,CAAC;MAAA;MAAA;QAAAjD,cAAA,GAAAa,CAAA;MAAA;MAAAb,cAAA,GAAAC,CAAA;MACDkH,MAAM,CAACpE,GAAG,CAACE,QAAQ,CAAC,CAACmE,IAAI,CAACrE,GAAG,CAAC;MAAC;MAAA/C,cAAA,GAAAC,CAAA;MAC/B,OAAOkH,MAAM;IACf,CAAC,EAAE,EAAkC,CAAC;IAAC;IAAAnH,cAAA,GAAAC,CAAA;IAEvC,OAAOoH,MAAM,CAACC,OAAO,CAACJ,cAAc,CAAC,CAACpE,GAAG,CAAC,CAAC,CAACG,QAAQ,EAAEsE,IAAI,CAAC,KAAI;MAAA;MAAAvH,cAAA,GAAAgB,CAAA;MAC7D,MAAMuD,WAAW;MAAA;MAAA,CAAAvE,cAAA,GAAAC,CAAA,SAAGsH,IAAI,CAAChC,MAAM,CAAC,CAACC,GAAG,EAAEzC,GAAG,KAAK;QAAA;QAAA/C,cAAA,GAAAgB,CAAA;QAAAhB,cAAA,GAAAC,CAAA;QAAA,OAAAuF,GAAG,GAAIzC,GAAG,CAACS,MAAM,GAAGT,GAAG,CAACU,IAAK;MAAD,CAAC,EAAE,CAAC,CAAC;MAC/E,MAAM+D,aAAa;MAAA;MAAA,CAAAxH,cAAA,GAAAC,CAAA,SAAGsE,WAAW,GAAGgD,IAAI,CAACjD,MAAM;MAE/C;MACA,MAAMmD,cAAc;MAAA;MAAA,CAAAzH,cAAA,GAAAC,CAAA,SAAGyF,IAAI,CAACQ,GAAG,CAAC,GAAGqB,IAAI,CAACzE,GAAG,CAACC,GAAG,IAAG;QAAA;QAAA/C,cAAA,GAAAgB,CAAA;QAAAhB,cAAA,GAAAC,CAAA;QAChD,IAAI8C,GAAG,CAACU,IAAI,KAAK,CAAC,EAAE;UAAA;UAAAzD,cAAA,GAAAa,CAAA;UAAAb,cAAA,GAAAC,CAAA;UAAA,OAAO8C,GAAG,CAACS,MAAM;QAAA,CAAC;QAAA;QAAA;UAAAxD,cAAA,GAAAa,CAAA;QAAA;QAAAb,cAAA,GAAAC,CAAA;QACtC,OAAO8C,GAAG,CAACS,MAAM,IAAI,CAAC,GAAGT,GAAG,CAACU,IAAI,GAAG,EAAE,CAAC;MACzC,CAAC,CAAC,CAAC;MAEH;MACA,MAAM0C,QAAQ;MAAA;MAAA,CAAAnG,cAAA,GAAAC,CAAA,SAAGyF,IAAI,CAACU,KAAK,CAACmB,IAAI,CAACjD,MAAM,GAAG,CAAC,CAAC;MAC5C,MAAMoD,WAAW;MAAA;MAAA,CAAA1H,cAAA,GAAAC,CAAA,SAAGsH,IAAI,CAACjB,KAAK,CAAC,CAAC,EAAEH,QAAQ,CAAC,CAACZ,MAAM,CAAC,CAACC,GAAG,EAAEzC,GAAG,KAAK;QAAA;QAAA/C,cAAA,GAAAgB,CAAA;QAAAhB,cAAA,GAAAC,CAAA;QAAA,OAAAuF,GAAG,GAAIzC,GAAG,CAACS,MAAM,GAAGT,GAAG,CAACU,IAAK;MAAD,CAAC,EAAE,CAAC,CAAC;MAClG,MAAMkE,UAAU;MAAA;MAAA,CAAA3H,cAAA,GAAAC,CAAA,SAAGsH,IAAI,CAACjB,KAAK,CAACH,QAAQ,CAAC,CAACZ,MAAM,CAAC,CAACC,GAAG,EAAEzC,GAAG,KAAK;QAAA;QAAA/C,cAAA,GAAAgB,CAAA;QAAAhB,cAAA,GAAAC,CAAA;QAAA,OAAAuF,GAAG,GAAIzC,GAAG,CAACS,MAAM,GAAGT,GAAG,CAACU,IAAK;MAAD,CAAC,EAAE,CAAC,CAAC;MAC9F,MAAMmE,iBAAiB;MAAA;MAAA,CAAA5H,cAAA,GAAAC,CAAA,SAAGyH,WAAW,GAAG,CAAC;MAAA;MAAA,CAAA1H,cAAA,GAAAa,CAAA,WAAI,CAAC8G,UAAU,GAAGD,WAAW,IAAIA,WAAW,GAAI,GAAG;MAAA;MAAA,CAAA1H,cAAA,GAAAa,CAAA,WAAG,CAAC;MAEhG;MACA,MAAM6F,UAAU;MAAA;MAAA,CAAA1G,cAAA,GAAAC,CAAA,SAAGsH,IAAI,CAAChC,MAAM,CAAC,CAACC,GAAG,EAAEzC,GAAG,KAAK;QAAA;QAAA/C,cAAA,GAAAgB,CAAA;QAAAhB,cAAA,GAAAC,CAAA;QAAA,OAAAuF,GAAG;QAAI;QAAA,CAAAxF,cAAA,GAAAa,CAAA,WAAAkC,GAAG,CAACW,GAAG;QAAA;QAAA,CAAA1D,cAAA,GAAAa,CAAA,WAAI,CAAC,EAAC;MAAD,CAAC,EAAE,CAAC,CAAC,GAAG0G,IAAI,CAACjD,MAAM;MACnF,MAAMuD,cAAc;MAAA;MAAA,CAAA7H,cAAA,GAAAC,CAAA,SAAGsH,IAAI,CAAChC,MAAM,CAAC,CAACC,GAAG,EAAEzC,GAAG,KAAK;QAAA;QAAA/C,cAAA,GAAAgB,CAAA;QAAAhB,cAAA,GAAAC,CAAA;QAAA,OAAAuF,GAAG;QAAI;QAAA,CAAAxF,cAAA,GAAAa,CAAA,WAAAkC,GAAG,CAACkB,SAAS;QAAA;QAAA,CAAAjE,cAAA,GAAAa,CAAA,WAAI,CAAC,EAAC;MAAD,CAAC,EAAE,CAAC,CAAC,GAAG0G,IAAI,CAACjD,MAAM;MAE7F;MACA,IAAIwD,gBAAgB;MAAA;MAAA,CAAA9H,cAAA,GAAAC,CAAA,SAA0C,YAAY;MAAC;MAAAD,cAAA,GAAAC,CAAA;MAC3E,IAAI2H,iBAAiB,GAAG,EAAE,EAAE;QAAA;QAAA5H,cAAA,GAAAa,CAAA;QAAAb,cAAA,GAAAC,CAAA;QAAA6H,gBAAgB,GAAG,WAAW;MAAA,CAAC,MACtD;QAAA;QAAA9H,cAAA,GAAAa,CAAA;QAAAb,cAAA,GAAAC,CAAA;QAAA,IAAI2H,iBAAiB,GAAG,CAAC,EAAE,EAAE;UAAA;UAAA5H,cAAA,GAAAa,CAAA;UAAAb,cAAA,GAAAC,CAAA;UAAA6H,gBAAgB,GAAG,WAAW;QAAA,CAAC;QAAA;QAAA;UAAA9H,cAAA,GAAAa,CAAA;QAAA;MAAD;MAEhE;MACA,MAAMkH,gBAAgB;MAAA;MAAA,CAAA/H,cAAA,GAAAC,CAAA,SAAG2H,iBAAiB,IAAIrD,WAAW,GAAG,IAAI,CAAC;MAEjE;MACA,MAAMyD,iBAAiB;MAAA;MAAA,CAAAhI,cAAA,GAAAC,CAAA,SAAa,EAAE;MAAC;MAAAD,cAAA,GAAAC,CAAA;MACvC,IAAI6H,gBAAgB,KAAK,WAAW,EAAE;QAAA;QAAA9H,cAAA,GAAAa,CAAA;QAAAb,cAAA,GAAAC,CAAA;QACpC+H,iBAAiB,CAACZ,IAAI,CAAC,kCAAkC,CAAC;QAAC;QAAApH,cAAA,GAAAC,CAAA;QAC3D+H,iBAAiB,CAACZ,IAAI,CAAC,uBAAuB,CAAC;MACjD,CAAC;MAAA;MAAA;QAAApH,cAAA,GAAAa,CAAA;MAAA;MAAAb,cAAA,GAAAC,CAAA;MACD,IAAIyG,UAAU,GAAG,GAAG,EAAE;QAAA;QAAA1G,cAAA,GAAAa,CAAA;QAAAb,cAAA,GAAAC,CAAA;QACpB+H,iBAAiB,CAACZ,IAAI,CAAC,uBAAuB,CAAC;MACjD,CAAC;MAAA;MAAA;QAAApH,cAAA,GAAAa,CAAA;MAAA;MAAAb,cAAA,GAAAC,CAAA;MACD,IAAI4H,cAAc,GAAG,CAAC,EAAE;QAAA;QAAA7H,cAAA,GAAAa,CAAA;QAAAb,cAAA,GAAAC,CAAA;QACtB+H,iBAAiB,CAACZ,IAAI,CAAC,wBAAwB,CAAC;MAClD,CAAC;MAAA;MAAA;QAAApH,cAAA,GAAAa,CAAA;MAAA;MAAAb,cAAA,GAAAC,CAAA;MACD,IAAI2H,iBAAiB,KAAK,CAAC,EAAE;QAAA;QAAA5H,cAAA,GAAAa,CAAA;QAAAb,cAAA,GAAAC,CAAA;QAC3B+H,iBAAiB,CAACZ,IAAI,CAAC,oCAAoC,CAAC;MAC9D,CAAC;MAAA;MAAA;QAAApH,cAAA,GAAAa,CAAA;MAAA;MAAAb,cAAA,GAAAC,CAAA;MAED,OAAO;QACLgD,QAAQ;QACRG,YAAY,EAAEmE,IAAI,CAAC,CAAC,CAAC,CAACnE,YAAY;QAClCE,YAAY,EAAEiE,IAAI,CAAC,CAAC,CAAC,CAACjE,YAAY;QAClCiB,WAAW;QACXiD,aAAa;QACbI,iBAAiB;QACjBH,cAAc;QACdjD,gBAAgB,EAAGiD,cAAc,GAAG,CAAC;QAAA;QAAA,CAAAzH,cAAA,GAAAa,CAAA,WAAI0G,IAAI,CAAChC,MAAM,CAAC,CAACC,GAAG,EAAEzC,GAAG,KAAK;UAAA;UAAA/C,cAAA,GAAAgB,CAAA;UAAAhB,cAAA,GAAAC,CAAA;UAAA,OAAAuF,GAAG,GAAGzC,GAAG,CAACS,MAAM;QAAN,CAAM,EAAE,CAAC,CAAC,GAAG+D,IAAI,CAACjD,MAAM,GAAImD,cAAc,GAAG,GAAG;QAAA;QAAA,CAAAzH,cAAA,GAAAa,CAAA,WAAG,CAAC,CAAC;QAClIoH,oBAAoB,EAAEL,iBAAiB,GAAG,GAAG;QAAE;QAC/ClB,UAAU;QACVmB,cAAc;QACdK,sBAAsB,EAAEX,IAAI,CAACY,MAAM,CAACpF,GAAG,IAAI;UAAA;UAAA/C,cAAA,GAAAgB,CAAA;UAAAhB,cAAA,GAAAC,CAAA;UAAA,OAAA8C,GAAG,CAACU,IAAI,IAAI,CAAC;QAAD,CAAC,CAAC,CAACa,MAAM,GAAGiD,IAAI,CAACjD,MAAM;QAC9EwD,gBAAgB;QAChBC,gBAAgB;QAChBC,iBAAiB,EAAEA,iBAAiB,CAAC1D,MAAM,GAAG,CAAC;QAAA;QAAA,CAAAtE,cAAA,GAAAa,CAAA,WAAGmH,iBAAiB;QAAA;QAAA,CAAAhI,cAAA,GAAAa,CAAA,WAAG,CAAC,8BAA8B,CAAC;OACvG;IACH,CAAC,CAAC,CAACuH,IAAI,CAAC,CAACC,CAAC,EAAExH,CAAC,KAAK;MAAA;MAAAb,cAAA,GAAAgB,CAAA;MAAAhB,cAAA,GAAAC,CAAA;MAAA,OAAAY,CAAC,CAAC0D,WAAW,GAAG8D,CAAC,CAAC9D,WAAW;IAAX,CAAW,CAAC,CAAC,CAAC;EACpD,CAAC,EAAE,EAAE,CAAC;EAEN;EAAA;EAAAvE,cAAA,GAAAC,CAAA;EACA,IAAAF,OAAA,CAAA6B,SAAS,EAAC,MAAK;IAAA;IAAA5B,cAAA,GAAAgB,CAAA;IAAAhB,cAAA,GAAAC,CAAA;IACb,IAAIqB,cAAc,CAACgD,MAAM,GAAG,CAAC,EAAE;MAAA;MAAAtE,cAAA,GAAAa,CAAA;MAC7B,MAAMyH,OAAO;MAAA;MAAA,CAAAtI,cAAA,GAAAC,CAAA,SAAGmE,sBAAsB,CAAC9C,cAAc,CAAC;MACtD,MAAMiH,SAAS;MAAA;MAAA,CAAAvI,cAAA,GAAAC,CAAA,SAAGgH,0BAA0B,CAAC3F,cAAc,CAAC;MAAC;MAAAtB,cAAA,GAAAC,CAAA;MAE7DiB,gBAAgB,CAACoH,OAAO,CAAC;MAAC;MAAAtI,cAAA,GAAAC,CAAA;MAC1BoB,oBAAoB,CAACkH,SAAS,CAAC;IACjC,CAAC;IAAA;IAAA;MAAAvI,cAAA,GAAAa,CAAA;IAAA;EACH,CAAC,EAAE,CAACS,cAAc,EAAE8C,sBAAsB,EAAE6C,0BAA0B,CAAC,CAAC;EAExE;EAAA;EAAAjH,cAAA,GAAAC,CAAA;EACA,MAAMuI,YAAY,GAAIC,MAAc,IAAY;IAAA;IAAAzI,cAAA,GAAAgB,CAAA;IAAAhB,cAAA,GAAAC,CAAA;IAC9C,IAAIwI,MAAM,IAAI,IAAI,EAAE;MAAA;MAAAzI,cAAA,GAAAa,CAAA;MAAAb,cAAA,GAAAC,CAAA;MAAA,OAAO,GAAG,CAACwI,MAAM,GAAG,IAAI,EAAEC,OAAO,CAAC,CAAC,CAAC,MAAM;IAAA,CAAC;IAAA;IAAA;MAAA1I,cAAA,GAAAa,CAAA;IAAA;IAAAb,cAAA,GAAAC,CAAA;IAC/D,OAAO,GAAGyF,IAAI,CAACiD,KAAK,CAACF,MAAM,CAAC,KAAK;EACnC,CAAC;EAAC;EAAAzI,cAAA,GAAAC,CAAA;EAEF,MAAM2I,uBAAuB,GAAIC,KAAuC,IAAY;IAAA;IAAA7I,cAAA,GAAAgB,CAAA;IAClF,MAAM8H,MAAM;IAAA;IAAA,CAAA9I,cAAA,GAAAC,CAAA,SAAG;MACb8I,YAAY,EAAE,aAAa;MAC3BC,eAAe,EAAE,YAAY;MAC7BC,WAAW,EAAE,cAAc;MAC3BC,MAAM,EAAE;KACT;IAAC;IAAAlJ,cAAA,GAAAC,CAAA;IACF,OAAO6I,MAAM,CAACD,KAAK,CAAC;EACtB,CAAC;EAAC;EAAA7I,cAAA,GAAAC,CAAA;EAEF,MAAMkJ,gBAAgB,GAAIC,cAAuD,IAAY;IAAA;IAAApJ,cAAA,GAAAgB,CAAA;IAC3F,MAAM8H,MAAM;IAAA;IAAA,CAAA9I,cAAA,GAAAC,CAAA,SAAG;MACboJ,GAAG,EAAE,cAAc;MACnBC,QAAQ,EAAE,eAAe;MACzBC,IAAI,EAAE,eAAe;MACrBC,QAAQ,EAAE;KACX;IAAC;IAAAxJ,cAAA,GAAAC,CAAA;IACF,OAAO6I,MAAM,CAACM,cAAc,CAAC;EAC/B,CAAC;EAAC;EAAApJ,cAAA,GAAAC,CAAA;EAEF,IAAIuB,OAAO,EAAE;IAAA;IAAAxB,cAAA,GAAAa,CAAA;IAAAb,cAAA,GAAAC,CAAA;IACX,OACE,IAAAwJ,aAAA,CAAAC,GAAA,EAACtJ,MAAA,CAAAuJ,IAAI;MAAC5I,SAAS,EAAEA,SAAS;MAAA6I,QAAA,EACxB,IAAAH,aAAA,CAAAC,GAAA,EAACtJ,MAAA,CAAAyJ,WAAW;QAAC9I,SAAS,EAAC,uCAAuC;QAAA6I,QAAA,EAC5D,IAAAH,aAAA,CAAAC,GAAA;UAAK3I,SAAS,EAAC;QAA8D;MAAO;IACxE,EACT;EAEX,CAAC;EAAA;EAAA;IAAAf,cAAA,GAAAa,CAAA;EAAA;EAAAb,cAAA,GAAAC,CAAA;EAED,IAAI,CAACgB,aAAa,EAAE;IAAA;IAAAjB,cAAA,GAAAa,CAAA;IAAAb,cAAA,GAAAC,CAAA;IAClB,OACE,IAAAwJ,aAAA,CAAAC,GAAA,EAACtJ,MAAA,CAAAuJ,IAAI;MAAC5I,SAAS,EAAEA,SAAS;MAAA6I,QAAA,EACxB,IAAAH,aAAA,CAAAK,IAAA,EAAC1J,MAAA,CAAAyJ,WAAW;QAAC9I,SAAS,EAAC,mBAAmB;QAAA6I,QAAA,GACxC,IAAAH,aAAA,CAAAC,GAAA,EAAClJ,cAAA,CAAAuJ,SAAS;UAAChJ,SAAS,EAAC;QAAsC,EAAG,EAC9D,IAAA0I,aAAA,CAAAC,GAAA;UAAG3I,SAAS,EAAC,eAAe;UAAA6I,QAAA;QAAA,EAA4C;MAAA;IAC5D,EACT;EAEX,CAAC;EAAA;EAAA;IAAA5J,cAAA,GAAAa,CAAA;EAAA;EAAAb,cAAA,GAAAC,CAAA;EAED,OACE,IAAAwJ,aAAA,CAAAK,IAAA;IAAK/I,SAAS,EAAE,aAAaA,SAAS,EAAE;IAAA6I,QAAA,GAEtC,IAAAH,aAAA,CAAAK,IAAA,EAAC1J,MAAA,CAAAuJ,IAAI;MAAAC,QAAA,GACH,IAAAH,aAAA,CAAAC,GAAA,EAACtJ,MAAA,CAAA4J,UAAU;QAAAJ,QAAA,EACT,IAAAH,aAAA,CAAAK,IAAA,EAAC1J,MAAA,CAAA6J,SAAS;UAAClJ,SAAS,EAAC,yBAAyB;UAAA6I,QAAA,GAC5C,IAAAH,aAAA,CAAAC,GAAA,EAAClJ,cAAA,CAAA0J,KAAK;YAACnJ,SAAS,EAAC;UAAyB,EAAG;QAAA;MAEnC,EACD,EACb,IAAA0I,aAAA,CAAAK,IAAA,EAAC1J,MAAA,CAAAyJ,WAAW;QAAAD,QAAA,GACV,IAAAH,aAAA,CAAAK,IAAA;UAAK/I,SAAS,EAAC,4CAA4C;UAAA6I,QAAA,GACzD,IAAAH,aAAA,CAAAK,IAAA;YAAK/I,SAAS,EAAC,aAAa;YAAA6I,QAAA,GAC1B,IAAAH,aAAA,CAAAC,GAAA;cAAK3I,SAAS,EAAC,kCAAkC;cAAA6I,QAAA,EAC9CpB,YAAY,CAACvH,aAAa,CAACsD,WAAW;YAAC,EACpC,EACN,IAAAkF,aAAA,CAAAC,GAAA;cAAK3I,SAAS,EAAC,uBAAuB;cAAA6I,QAAA;YAAA,EAAmB;UAAA,EACrD,EAEN,IAAAH,aAAA,CAAAK,IAAA;YAAK/I,SAAS,EAAC,aAAa;YAAA6I,QAAA,GAC1B,IAAAH,aAAA,CAAAK,IAAA;cAAK/I,SAAS,EAAC,mCAAmC;cAAA6I,QAAA,GAC/ClE,IAAI,CAACiD,KAAK,CAAC1H,aAAa,CAACuD,gBAAgB,CAAC;YAAA,EACvC,EACN,IAAAiF,aAAA,CAAAC,GAAA;cAAK3I,SAAS,EAAC,uBAAuB;cAAA6I,QAAA;YAAA,EAAqB;UAAA,EACvD,EAEN,IAAAH,aAAA,CAAAK,IAAA;YAAK/I,SAAS,EAAC,aAAa;YAAA6I,QAAA,GAC1B,IAAAH,aAAA,CAAAC,GAAA;cAAK3I,SAAS,EAAC,oCAAoC;cAAA6I,QAAA,EAChDlE,IAAI,CAACiD,KAAK,CAAC1H,aAAa,CAAC0D,WAAW;YAAC,EAClC,EACN,IAAA8E,aAAA,CAAAC,GAAA;cAAK3I,SAAS,EAAC,uBAAuB;cAAA6I,QAAA;YAAA,EAAmB;UAAA,EACrD,EAEN,IAAAH,aAAA,CAAAK,IAAA;YAAK/I,SAAS,EAAC,aAAa;YAAA6I,QAAA,GAC1B,IAAAH,aAAA,CAAAK,IAAA;cAAK/I,SAAS,EAAC,oCAAoC;cAAA6I,QAAA,GAChDlE,IAAI,CAACiD,KAAK,CAAC1H,aAAa,CAAC4D,YAAY,GAAG,EAAE,CAAC;YAAA,EACxC,EACN,IAAA4E,aAAA,CAAAC,GAAA;cAAK3I,SAAS,EAAC,uBAAuB;cAAA6I,QAAA;YAAA,EAAc;UAAA,EAChD;QAAA,EACF,EAGN,IAAAH,aAAA,CAAAK,IAAA;UAAK/I,SAAS,EAAC,2BAA2B;UAAA6I,QAAA,GACxC,IAAAH,aAAA,CAAAK,IAAA,EAACzJ,OAAA,CAAA8J,KAAK;YAACpJ,SAAS,EAAE,GAAG6H,uBAAuB,CAAC3H,aAAa,CAACqE,eAAe,CAAC,aAAa;YAAAsE,QAAA,cAC9E3I,aAAa,CAACqE,eAAe;UAAA,EAC/B,EAER,IAAAmE,aAAA,CAAAK,IAAA,EAACzJ,OAAA,CAAA8J,KAAK;YAACpJ,SAAS,EAAE,GAAGoI,gBAAgB,CAAClI,aAAa,CAACoE,sBAAsB,CAAC,aAAa;YAAAuE,QAAA,+BACvE3I,aAAa,CAACoE,sBAAsB;UAAA,EAC7C,EAER,IAAAoE,aAAA,CAAAK,IAAA,EAACzJ,OAAA,CAAA8J,KAAK;YAACC,OAAO,EAAC,SAAS;YAAAR,QAAA,oBACRlE,IAAI,CAACiD,KAAK,CAAC1H,aAAa,CAACkE,gBAAgB,GAAG,GAAG,CAAC;UAAA,EACxD;QAAA,EACJ;MAAA,EACM;IAAA,EACT,EAGP,IAAAsE,aAAA,CAAAK,IAAA,EAACvJ,MAAA,CAAA8J,IAAI;MAACC,YAAY,EAAC,QAAQ;MAACvJ,SAAS,EAAC,WAAW;MAAA6I,QAAA,GAC/C,IAAAH,aAAA,CAAAK,IAAA,EAACvJ,MAAA,CAAAgK,QAAQ;QAACxJ,SAAS,EAAC,yBAAyB;QAAA6I,QAAA,GAC3C,IAAAH,aAAA,CAAAC,GAAA,EAACnJ,MAAA,CAAAiK,WAAW;UAACC,KAAK,EAAC,QAAQ;UAAAb,QAAA;QAAA,EAAwB,EACnD,IAAAH,aAAA,CAAAC,GAAA,EAACnJ,MAAA,CAAAiK,WAAW;UAACC,KAAK,EAAC,SAAS;UAAAb,QAAA;QAAA,EAAsB,EAClD,IAAAH,aAAA,CAAAC,GAAA,EAACnJ,MAAA,CAAAiK,WAAW;UAACC,KAAK,EAAC,WAAW;UAAAb,QAAA;QAAA,EAAwB,EACtD,IAAAH,aAAA,CAAAC,GAAA,EAACnJ,MAAA,CAAAiK,WAAW;UAACC,KAAK,EAAC,aAAa;UAAAb,QAAA;QAAA,EAA0B;MAAA,EACjD,EAEX,IAAAH,aAAA,CAAAC,GAAA,EAACnJ,MAAA,CAAAmK,WAAW;QAACD,KAAK,EAAC,QAAQ;QAAAb,QAAA,EACzB,IAAAH,aAAA,CAAAK,IAAA,EAAC1J,MAAA,CAAAuJ,IAAI;UAAAC,QAAA,GACH,IAAAH,aAAA,CAAAC,GAAA,EAACtJ,MAAA,CAAA4J,UAAU;YAAAJ,QAAA,EACT,IAAAH,aAAA,CAAAK,IAAA,EAAC1J,MAAA,CAAA6J,SAAS;cAAClJ,SAAS,EAAC,yBAAyB;cAAA6I,QAAA,GAC5C,IAAAH,aAAA,CAAAC,GAAA,EAAClJ,cAAA,CAAAmK,UAAU;gBAAC5J,SAAS,EAAC;cAAS,EAAG;YAAA;UAExB,EACD,EACb,IAAA0I,aAAA,CAAAK,IAAA,EAAC1J,MAAA,CAAAyJ,WAAW;YAAC9I,SAAS,EAAC,WAAW;YAAA6I,QAAA,GAChC,IAAAH,aAAA,CAAAK,IAAA;cAAK/I,SAAS,EAAC,uCAAuC;cAAA6I,QAAA,GACpD,IAAAH,aAAA,CAAAK,IAAA;gBAAAF,QAAA,GACE,IAAAH,aAAA,CAAAK,IAAA;kBAAK/I,SAAS,EAAC,wCAAwC;kBAAA6I,QAAA,GACrD,IAAAH,aAAA,CAAAC,GAAA;oBAAM3I,SAAS,EAAC,qBAAqB;oBAAA6I,QAAA;kBAAA,EAAuB,EAC5D,IAAAH,aAAA,CAAAK,IAAA;oBAAM/I,SAAS,EAAE,qBAAqBE,aAAa,CAACgE,WAAW,GAAG,CAAC;oBAAA;oBAAA,CAAAjF,cAAA,GAAAa,CAAA,WAAG,gBAAgB;oBAAA;oBAAA,CAAAb,cAAA,GAAAa,CAAA,WAAGI,aAAa,CAACgE,WAAW,GAAG,CAAC;oBAAA;oBAAA,CAAAjF,cAAA,GAAAa,CAAA,WAAG,cAAc;oBAAA;oBAAA,CAAAb,cAAA,GAAAa,CAAA,WAAG,eAAe,IAAE;oBAAA+I,QAAA,GACxJ3I,aAAa,CAACgE,WAAW,GAAG,CAAC;oBAAA;oBAAA,CAAAjF,cAAA,GAAAa,CAAA,WAAG,GAAG;oBAAA;oBAAA,CAAAb,cAAA,GAAAa,CAAA,WAAG,EAAE,GAAE6E,IAAI,CAACiD,KAAK,CAAC1H,aAAa,CAACgE,WAAW,GAAG,GAAG,CAAC;kBAAA,EACjF;gBAAA,EACH,EACN,IAAAwE,aAAA,CAAAC,GAAA,EAACpJ,UAAA,CAAAsK,QAAQ;kBAACH,KAAK,EAAE/E,IAAI,CAACmF,GAAG,CAAC5J,aAAa,CAACgE,WAAW,CAAC,GAAG,GAAG;kBAAElE,SAAS,EAAC;gBAAK,EAAG;cAAA,EAC1E,EAEN,IAAA0I,aAAA,CAAAK,IAAA;gBAAAF,QAAA,GACE,IAAAH,aAAA,CAAAK,IAAA;kBAAK/I,SAAS,EAAC,wCAAwC;kBAAA6I,QAAA,GACrD,IAAAH,aAAA,CAAAC,GAAA;oBAAM3I,SAAS,EAAC,qBAAqB;oBAAA6I,QAAA;kBAAA,EAA0B,EAC/D,IAAAH,aAAA,CAAAK,IAAA;oBAAM/I,SAAS,EAAE,qBAAqBE,aAAa,CAACiE,cAAc,GAAG,CAAC;oBAAA;oBAAA,CAAAlF,cAAA,GAAAa,CAAA,WAAG,gBAAgB;oBAAA;oBAAA,CAAAb,cAAA,GAAAa,CAAA,WAAGI,aAAa,CAACiE,cAAc,GAAG,CAAC;oBAAA;oBAAA,CAAAlF,cAAA,GAAAa,CAAA,WAAG,cAAc;oBAAA;oBAAA,CAAAb,cAAA,GAAAa,CAAA,WAAG,eAAe,IAAE;oBAAA+I,QAAA,GAC9J3I,aAAa,CAACiE,cAAc,GAAG,CAAC;oBAAA;oBAAA,CAAAlF,cAAA,GAAAa,CAAA,WAAG,GAAG;oBAAA;oBAAA,CAAAb,cAAA,GAAAa,CAAA,WAAG,EAAE,GAAE6E,IAAI,CAACiD,KAAK,CAAC1H,aAAa,CAACiE,cAAc,GAAG,GAAG,CAAC;kBAAA,EACvF;gBAAA,EACH,EACN,IAAAuE,aAAA,CAAAC,GAAA,EAACpJ,UAAA,CAAAsK,QAAQ;kBAACH,KAAK,EAAE/E,IAAI,CAACmF,GAAG,CAAC5J,aAAa,CAACiE,cAAc,CAAC,GAAG,GAAG;kBAAEnE,SAAS,EAAC;gBAAK,EAAG;cAAA,EAC7E;YAAA,EACF,EAEN,IAAA0I,aAAA,CAAAK,IAAA;cAAK/I,SAAS,EAAC,4CAA4C;cAAA6I,QAAA,GACzD,IAAAH,aAAA,CAAAC,GAAA;gBAAI3I,SAAS,EAAC,mDAAmD;gBAAA6I,QAAA;cAAA,EAAyB,EAC1F,IAAAH,aAAA,CAAAK,IAAA;gBAAK/I,SAAS,EAAC,oDAAoD;gBAAA6I,QAAA;gBAChE;gBAAA,CAAA5J,cAAA,GAAAa,CAAA,WAAAI,aAAa,CAACgE,WAAW,GAAG,GAAG;gBAAA;gBAAA,CAAAjF,cAAA,GAAAa,CAAA,WAC9B,IAAA4I,aAAA,CAAAC,GAAA;kBAAAE,QAAA;gBAAA,EAA8D,CAC/D;gBACA;gBAAA,CAAA5J,cAAA,GAAAa,CAAA,WAAAI,aAAa,CAACgE,WAAW,GAAG,CAAC,GAAG;gBAAA;gBAAA,CAAAjF,cAAA,GAAAa,CAAA,WAC/B,IAAA4I,aAAA,CAAAC,GAAA;kBAAAE,QAAA;gBAAA,EAAoD,CACrD;gBACA;gBAAA,CAAA5J,cAAA,GAAAa,CAAA,WAAAI,aAAa,CAAC4D,YAAY,GAAG,CAAC;gBAAA;gBAAA,CAAA7E,cAAA,GAAAa,CAAA,WAC7B,IAAA4I,aAAA,CAAAC,GAAA;kBAAAE,QAAA;gBAAA,EAAoE,CACrE;gBACA;gBAAA,CAAA5J,cAAA,GAAAa,CAAA,WAAAI,aAAa,CAACkE,gBAAgB,GAAG,GAAG;gBAAA;gBAAA,CAAAnF,cAAA,GAAAa,CAAA,WACnC,IAAA4I,aAAA,CAAAC,GAAA;kBAAAE,QAAA;gBAAA,EAA6C,CAC9C;cAAA,EACG;YAAA,EACF;UAAA,EACM;QAAA;MACT,EACK,EAEd,IAAAH,aAAA,CAAAC,GAAA,EAACnJ,MAAA,CAAAmK,WAAW;QAACD,KAAK,EAAC,SAAS;QAAAb,QAAA,EAC1B,IAAAH,aAAA,CAAAK,IAAA,EAAC1J,MAAA,CAAAuJ,IAAI;UAAAC,QAAA,GACH,IAAAH,aAAA,CAAAC,GAAA,EAACtJ,MAAA,CAAA4J,UAAU;YAAAJ,QAAA,EACT,IAAAH,aAAA,CAAAK,IAAA,EAAC1J,MAAA,CAAA6J,SAAS;cAAClJ,SAAS,EAAC,yBAAyB;cAAA6I,QAAA,GAC5C,IAAAH,aAAA,CAAAC,GAAA,EAAClJ,cAAA,CAAAsK,MAAM;gBAAC/J,SAAS,EAAC;cAAS,EAAG;YAAA;UAEpB,EACD,EACb,IAAA0I,aAAA,CAAAC,GAAA,EAACtJ,MAAA,CAAAyJ,WAAW;YAAAD,QAAA,EACV,IAAAH,aAAA,CAAAC,GAAA;cAAK3I,SAAS,EAAC,WAAW;cAAA6I,QAAA,EACvBmB,KAAK,CAACzI,IAAI,CAACrB,aAAa,CAAC6D,wBAAwB,CAACwC,OAAO,EAAE,CAAC,CAC1Dc,IAAI,CAAC,CAAC,GAAEC,CAAC,CAAC,EAAE,GAAExH,CAAC,CAAC,KAAK;gBAAA;gBAAAb,cAAA,GAAAgB,CAAA;gBAAAhB,cAAA,GAAAC,CAAA;gBAAA,OAAAY,CAAC,GAAGwH,CAAC;cAAD,CAAC,CAAC,CAC3B/B,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CACXxD,GAAG,CAAC,CAAC,CAAC+C,MAAM,EAAE4C,MAAM,CAAC,KAAI;gBAAA;gBAAAzI,cAAA,GAAAgB,CAAA;gBACxB,MAAMgK,UAAU;gBAAA;gBAAA,CAAAhL,cAAA,GAAAC,CAAA,SAAIwI,MAAM,GAAGxH,aAAa,CAACsD,WAAW,GAAI,GAAG;gBAC7D,MAAM0G,SAAS;gBAAA;gBAAA,CAAAjL,cAAA,GAAAC,CAAA;gBAAG;gBAAA,CAAAD,cAAA,GAAAa,CAAA,WAAAI,aAAa,CAAC+D,sBAAsB,CAACe,GAAG,CAACF,MAAM,CAAC;gBAAA;gBAAA,CAAA7F,cAAA,GAAAa,CAAA,WAAI,CAAC;gBAAC;gBAAAb,cAAA,GAAAC,CAAA;gBAExE,OACE,IAAAwJ,aAAA,CAAAK,IAAA;kBAAkB/I,SAAS,EAAC,WAAW;kBAAA6I,QAAA,GACrC,IAAAH,aAAA,CAAAK,IAAA;oBAAK/I,SAAS,EAAC,mCAAmC;oBAAA6I,QAAA,GAChD,IAAAH,aAAA,CAAAC,GAAA;sBAAM3I,SAAS,EAAC,gCAAgC;sBAAA6I,QAAA,EAAE/D;oBAAM,EAAQ,EAChE,IAAA4D,aAAA,CAAAK,IAAA;sBAAK/I,SAAS,EAAC,yBAAyB;sBAAA6I,QAAA,GACtC,IAAAH,aAAA,CAAAK,IAAA;wBAAM/I,SAAS,EAAC,uBAAuB;wBAAA6I,QAAA,GACpCpB,YAAY,CAACC,MAAM,CAAC,QAAI/C,IAAI,CAACiD,KAAK,CAACqC,UAAU,CAAC;sBAAA,EAC1C,EACP,IAAAvB,aAAA,CAAAK,IAAA,EAACzJ,OAAA,CAAA8J,KAAK;wBAACC,OAAO,EAAC,SAAS;wBAACrJ,SAAS,EAAC,SAAS;wBAAA6I,QAAA,WACrCqB,SAAS,CAACvC,OAAO,CAAC,CAAC,CAAC;sBAAA,EACnB;oBAAA,EACJ;kBAAA,EACF,EACN,IAAAe,aAAA,CAAAC,GAAA,EAACpJ,UAAA,CAAAsK,QAAQ;oBAACH,KAAK,EAAEO,UAAU;oBAAEjK,SAAS,EAAC;kBAAK,EAAG;gBAAA,GAZvC8E,MAAM,CAaV;cAEV,CAAC;YAAC;UACA,EACM;QAAA;MACT,EACK,EAEd,IAAA4D,aAAA,CAAAC,GAAA,EAACnJ,MAAA,CAAAmK,WAAW;QAACD,KAAK,EAAC,WAAW;QAAAb,QAAA,EAC5B,IAAAH,aAAA,CAAAK,IAAA,EAAC1J,MAAA,CAAAuJ,IAAI;UAAAC,QAAA,GACH,IAAAH,aAAA,CAAAC,GAAA,EAACtJ,MAAA,CAAA4J,UAAU;YAAAJ,QAAA,EACT,IAAAH,aAAA,CAAAK,IAAA,EAAC1J,MAAA,CAAA6J,SAAS;cAAClJ,SAAS,EAAC,yBAAyB;cAAA6I,QAAA,GAC5C,IAAAH,aAAA,CAAAC,GAAA,EAAClJ,cAAA,CAAA0K,QAAQ;gBAACnK,SAAS,EAAC;cAAS,EAAG;YAAA;UAEtB,EACD,EACb,IAAA0I,aAAA,CAAAC,GAAA,EAACtJ,MAAA,CAAAyJ,WAAW;YAAAD,QAAA,EACV,IAAAH,aAAA,CAAAC,GAAA;cAAK3I,SAAS,EAAC,WAAW;cAAA6I,QAAA,EACvBxI,iBAAiB,CAACkF,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAACxD,GAAG,CAAEyF,SAAS,IAC3C;gBAAA;gBAAAvI,cAAA,GAAAgB,CAAA;gBAAAhB,cAAA,GAAAC,CAAA;gBAAA,WAAAwJ,aAAA,CAAAK,IAAA;kBAA8B/I,SAAS,EAAC,uBAAuB;kBAAA6I,QAAA,GAC7D,IAAAH,aAAA,CAAAK,IAAA;oBAAK/I,SAAS,EAAC,uCAAuC;oBAAA6I,QAAA,GACpD,IAAAH,aAAA,CAAAK,IAAA;sBAAAF,QAAA,GACE,IAAAH,aAAA,CAAAC,GAAA;wBAAI3I,SAAS,EAAC,aAAa;wBAAA6I,QAAA,EAAErB,SAAS,CAACtF;sBAAQ,EAAM,EACrD,IAAAwG,aAAA,CAAAK,IAAA;wBAAK/I,SAAS,EAAC,+CAA+C;wBAAA6I,QAAA,GAC5D,IAAAH,aAAA,CAAAC,GAAA,EAACrJ,OAAA,CAAA8J,KAAK;0BAACC,OAAO,EAAC,SAAS;0BAACrJ,SAAS,EAAC,SAAS;0BAAA6I,QAAA,EACzCrB,SAAS,CAACnF;wBAAY,EACjB,EACR,IAAAqG,aAAA,CAAAK,IAAA;0BAAAF,QAAA,gBAAgBlE,IAAI,CAACiD,KAAK,CAACJ,SAAS,CAACd,cAAc,CAAC;wBAAA,EAAU;sBAAA,EAC1D;oBAAA,EACF,EACN,IAAAgC,aAAA,CAAAC,GAAA,EAACrJ,OAAA,CAAA8J,KAAK;sBACJC,OAAO,EAAE7B,SAAS,CAACT,gBAAgB,KAAK,WAAW;sBAAA;sBAAA,CAAA9H,cAAA,GAAAa,CAAA,WAAG,SAAS;sBAAA;sBAAA,CAAAb,cAAA,GAAAa,CAAA,WACvD0H,SAAS,CAACT,gBAAgB,KAAK,WAAW;sBAAA;sBAAA,CAAA9H,cAAA,GAAAa,CAAA,WAAG,aAAa;sBAAA;sBAAA,CAAAb,cAAA,GAAAa,CAAA,WAAG,SAAS;sBAAA+I,QAAA,EAE7ErB,SAAS,CAACT;oBAAgB,EACrB;kBAAA,EACJ,EAEN,IAAA2B,aAAA,CAAAK,IAAA;oBAAK/I,SAAS,EAAC,qCAAqC;oBAAA6I,QAAA,GAClD,IAAAH,aAAA,CAAAK,IAAA;sBAAAF,QAAA,GACE,IAAAH,aAAA,CAAAC,GAAA;wBAAM3I,SAAS,EAAC,eAAe;wBAAA6I,QAAA;sBAAA,EAAqB,EACpD,IAAAH,aAAA,CAAAC,GAAA;wBAAK3I,SAAS,EAAC,aAAa;wBAAA6I,QAAA,EAAEpB,YAAY,CAACD,SAAS,CAAChE,WAAW;sBAAC,EAAO;oBAAA,EACpE,EACN,IAAAkF,aAAA,CAAAK,IAAA;sBAAAF,QAAA,GACE,IAAAH,aAAA,CAAAC,GAAA;wBAAM3I,SAAS,EAAC,eAAe;wBAAA6I,QAAA;sBAAA,EAAoB,EACnD,IAAAH,aAAA,CAAAK,IAAA;wBAAK/I,SAAS,EAAE,eAAewH,SAAS,CAACX,iBAAiB,GAAG,CAAC;wBAAA;wBAAA,CAAA5H,cAAA,GAAAa,CAAA,WAAG,gBAAgB;wBAAA;wBAAA,CAAAb,cAAA,GAAAa,CAAA,WAAG0H,SAAS,CAACX,iBAAiB,GAAG,CAAC;wBAAA;wBAAA,CAAA5H,cAAA,GAAAa,CAAA,WAAG,cAAc;wBAAA;wBAAA,CAAAb,cAAA,GAAAa,CAAA,WAAG,eAAe,IAAE;wBAAA+I,QAAA,GACrJrB,SAAS,CAACX,iBAAiB,GAAG,CAAC;wBAAA;wBAAA,CAAA5H,cAAA,GAAAa,CAAA,WAAG,GAAG;wBAAA;wBAAA,CAAAb,cAAA,GAAAa,CAAA,WAAG,EAAE,GAAE6E,IAAI,CAACiD,KAAK,CAACJ,SAAS,CAACX,iBAAiB,CAAC;sBAAA,EAChF;oBAAA,EACF,EACN,IAAA6B,aAAA,CAAAK,IAAA;sBAAAF,QAAA,GACE,IAAAH,aAAA,CAAAC,GAAA;wBAAM3I,SAAS,EAAC,eAAe;wBAAA6I,QAAA;sBAAA,EAAkB,EACjD,IAAAH,aAAA,CAAAK,IAAA;wBAAK/I,SAAS,EAAC,aAAa;wBAAA6I,QAAA,GAAErB,SAAS,CAAC7B,UAAU,CAACgC,OAAO,CAAC,CAAC,CAAC;sBAAA,EAAU;oBAAA,EACnE;kBAAA,EACF,EAEN,IAAAe,aAAA,CAAAK,IAAA;oBAAK/I,SAAS,EAAC,uBAAuB;oBAAA6I,QAAA,GACpC,IAAAH,aAAA,CAAAC,GAAA;sBAAAE,QAAA;oBAAA,EAAiC,EACjC,IAAAH,aAAA,CAAAC,GAAA;sBAAI3I,SAAS,EAAC,4BAA4B;sBAAA6I,QAAA,EACvCrB,SAAS,CAACP,iBAAiB,CAAClF,GAAG,CAAC,CAACqI,MAAM,EAAEC,KAAK,KAC7C;wBAAA;wBAAApL,cAAA,GAAAgB,CAAA;wBAAAhB,cAAA,GAAAC,CAAA;wBAAA,WAAAwJ,aAAA,CAAAC,GAAA;0BAAAE,QAAA,EAAiBuB;wBAAM,GAAdC,KAAK,CAAe;sBAAf,CACf;oBAAC,EACC;kBAAA,EACD;gBAAA,GA3CE7C,SAAS,CAACtF,QAAQ,CA4CtB;cA5CsB,CA6C7B;YAAC;UACE,EACM;QAAA;MACT,EACK,EAEd,IAAAwG,aAAA,CAAAC,GAAA,EAACnJ,MAAA,CAAAmK,WAAW;QAACD,KAAK,EAAC,aAAa;QAAAb,QAAA,EAC9B,IAAAH,aAAA,CAAAK,IAAA,EAAC1J,MAAA,CAAAuJ,IAAI;UAAAC,QAAA,GACH,IAAAH,aAAA,CAAAC,GAAA,EAACtJ,MAAA,CAAA4J,UAAU;YAAAJ,QAAA,EACT,IAAAH,aAAA,CAAAK,IAAA,EAAC1J,MAAA,CAAA6J,SAAS;cAAClJ,SAAS,EAAC,yBAAyB;cAAA6I,QAAA,GAC5C,IAAAH,aAAA,CAAAC,GAAA,EAAClJ,cAAA,CAAA6K,GAAG;gBAACtK,SAAS,EAAC;cAAS,EAAG;YAAA;UAEjB,EACD,EACb,IAAA0I,aAAA,CAAAK,IAAA,EAAC1J,MAAA,CAAAyJ,WAAW;YAAC9I,SAAS,EAAC,WAAW;YAAA6I,QAAA,GAChC,IAAAH,aAAA,CAAAK,IAAA;cAAK/I,SAAS,EAAC,uCAAuC;cAAA6I,QAAA,GACpD,IAAAH,aAAA,CAAAK,IAAA;gBAAK/I,SAAS,EAAC,8CAA8C;gBAAA6I,QAAA,GAC3D,IAAAH,aAAA,CAAAC,GAAA;kBAAI3I,SAAS,EAAC,qDAAqD;kBAAA6I,QAAA;gBAAA,EAE9D,EACL,IAAAH,aAAA,CAAAC,GAAA;kBAAK3I,SAAS,EAAC,mCAAmC;kBAAA6I,QAAA,EAC/CpB,YAAY,CAACvH,aAAa,CAACmE,eAAe;gBAAC,EACxC,EACN,IAAAqE,aAAA,CAAAC,GAAA;kBAAK3I,SAAS,EAAC,iDAAiD;kBAAA6I,QAAA;gBAAA,EAE1D;cAAA,EACF,EAEN,IAAAH,aAAA,CAAAK,IAAA;gBAAK/I,SAAS,EAAE,kBAAkBoI,gBAAgB,CAAClI,aAAa,CAACoE,sBAAsB,CAAC,CAACiG,OAAO,CAAC,KAAK,EAAE,mBAAmB,CAAC,EAAE;gBAAA1B,QAAA,GAC5H,IAAAH,aAAA,CAAAC,GAAA;kBAAI3I,SAAS,EAAC,kBAAkB;kBAAA6I,QAAA;gBAAA,EAE3B,EACL,IAAAH,aAAA,CAAAC,GAAA;kBAAK3I,SAAS,EAAC,8BAA8B;kBAAA6I,QAAA,EAC1C3I,aAAa,CAACoE;gBAAsB,EACjC,EACN,IAAAoE,aAAA,CAAAK,IAAA;kBAAK/I,SAAS,EAAC,cAAc;kBAAA6I,QAAA,0BACPlE,IAAI,CAACiD,KAAK,CAAC1H,aAAa,CAAC4D,YAAY,GAAG,EAAE,CAAC;gBAAA,EAC3D;cAAA,EACF;YAAA,EACF,EAEN,IAAA4E,aAAA,CAAAK,IAAA;cAAK/I,SAAS,EAAC,WAAW;cAAA6I,QAAA,GACxB,IAAAH,aAAA,CAAAC,GAAA;gBAAI3I,SAAS,EAAC,aAAa;gBAAA6I,QAAA;cAAA,EAAuC;cAEjE;cAAA,CAAA5J,cAAA,GAAAa,CAAA,WAAAI,aAAa,CAACqE,eAAe,KAAK,cAAc;cAAA;cAAA,CAAAtF,cAAA,GAAAa,CAAA,WAC/C,IAAA4I,aAAA,CAAAK,IAAA;gBAAK/I,SAAS,EAAC,4CAA4C;gBAAA6I,QAAA,GACzD,IAAAH,aAAA,CAAAC,GAAA;kBAAI3I,SAAS,EAAC,mDAAmD;kBAAA6I,QAAA;gBAAA,EAA0B,EAC3F,IAAAH,aAAA,CAAAK,IAAA;kBAAI/I,SAAS,EAAC,0EAA0E;kBAAA6I,QAAA,GACtF,IAAAH,aAAA,CAAAC,GAAA;oBAAAE,QAAA;kBAAA,EAA4C,EAC5C,IAAAH,aAAA,CAAAC,GAAA;oBAAAE,QAAA;kBAAA,EAA+C,EAC/C,IAAAH,aAAA,CAAAC,GAAA;oBAAAE,QAAA;kBAAA,EAAiD;gBAAA,EAC9C;cAAA,EACD,CACP;cAEA;cAAA,CAAA5J,cAAA,GAAAa,CAAA,WAAAI,aAAa,CAACqE,eAAe,KAAK,iBAAiB;cAAA;cAAA,CAAAtF,cAAA,GAAAa,CAAA,WAClD,IAAA4I,aAAA,CAAAK,IAAA;gBAAK/I,SAAS,EAAC,0CAA0C;gBAAA6I,QAAA,GACvD,IAAAH,aAAA,CAAAC,GAAA;kBAAI3I,SAAS,EAAC,iDAAiD;kBAAA6I,QAAA;gBAAA,EAA6B,EAC5F,IAAAH,aAAA,CAAAK,IAAA;kBAAI/I,SAAS,EAAC,wEAAwE;kBAAA6I,QAAA,GACpF,IAAAH,aAAA,CAAAC,GAAA;oBAAAE,QAAA;kBAAA,EAAkD,EAClD,IAAAH,aAAA,CAAAC,GAAA;oBAAAE,QAAA;kBAAA,EAAkC,EAClC,IAAAH,aAAA,CAAAC,GAAA;oBAAAE,QAAA;kBAAA,EAAsC;gBAAA,EACnC;cAAA,EACD,CACP;cAEA;cAAA,CAAA5J,cAAA,GAAAa,CAAA,WAAAI,aAAa,CAACqE,eAAe,KAAK,QAAQ;cAAA;cAAA,CAAAtF,cAAA,GAAAa,CAAA,WACzC,IAAA4I,aAAA,CAAAK,IAAA;gBAAK/I,SAAS,EAAC,gDAAgD;gBAAA6I,QAAA,GAC7D,IAAAH,aAAA,CAAAC,GAAA;kBAAI3I,SAAS,EAAC,uDAAuD;kBAAA6I,QAAA;gBAAA,EAAyB,EAC9F,IAAAH,aAAA,CAAAK,IAAA;kBAAI/I,SAAS,EAAC,8EAA8E;kBAAA6I,QAAA,GAC1F,IAAAH,aAAA,CAAAC,GAAA;oBAAAE,QAAA;kBAAA,EAA+C,EAC/C,IAAAH,aAAA,CAAAC,GAAA;oBAAAE,QAAA;kBAAA,EAA8C,EAC9C,IAAAH,aAAA,CAAAC,GAAA;oBAAAE,QAAA;kBAAA,EAAmC;gBAAA,EAChC;cAAA,EACD,CACP;YAAA,EACG;UAAA,EACM;QAAA;MACT,EACK;IAAA,EACT;EAAA,EACH;AAEV,CAAC;AAAC;AAAA5J,cAAA,GAAAC,CAAA;AA5lBWsL,OAAA,CAAA7K,qBAAqB,GAAAA,qBAAA;AA4lBhC;AAAAV,cAAA,GAAAC,CAAA;AAEFsL,OAAA,CAAAC,OAAA,GAAeD,OAAA,CAAA7K,qBAAqB","ignoreList":[]}