{"version":3,"names":["react_1","cov_q6n0riz01","s","__importStar","require","card_1","button_1","badge_1","progress_1","separator_1","lucide_react_1","supabase_1","sonner_1","AdvancedSessionTimer","userId","workoutId","onSessionEnd","onPhaseChange","className","b","f","sessionState","setSessionState","useState","isActive","isPaused","startTime","lastPauseTime","totalPausedTime","currentPhase","sessionId","metrics","setMetrics","totalDuration","activeDuration","restDuration","exerciseCount","setCount","avgRestTime","workRestRatio","caloriesBurned","currentTime","setCurrentTime","targetDuration","setTargetDuration","intervalRef","useRef","heartRateRef","updateTimer","useCallback","now","Date","elapsed","getTime","Math","floor","prev","useEffect","current","setInterval","clearInterval","saveInterval","saveSessionProgress","undefined","startSession","random","toString","substr","supabase","from","insert","id","user_id","workout_id","start_time","toISOString","phase","status","error","console","toast","success","description","togglePause","pauseDuration","endSession","finalMetrics","update","end_time","total_duration","active_duration","rest_duration","exercise_count","set_count","calories_burned","eq","formatTime","current_duration","last_update","changePhase","newPhase","phaseColors","warmup","workout","rest","cooldown","info","seconds","hours","minutes","secs","getPhaseColor","colors","progressPercentage","min","estimatedCalories","jsx_runtime_1","jsxs","Card","children","jsx","CardHeader","CardTitle","Timer","Badge","variant","CardContent","Progress","value","Button","onClick","Play","Fragment","size","Pause","Square","Separator","Activity","Clock","Target","Zap","toFixed","style","width","map","exports","default"],"sources":["/workspaces/MyFitHero/src/features/workout/components/AdvancedSessionTimer.tsx"],"sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Progress } from '@/components/ui/progress';\nimport { Separator } from '@/components/ui/separator';\nimport { \n  Play, \n  Pause, \n  Square, \n  Timer, \n  TrendingUp, \n  Zap, \n  Target,\n  Clock,\n  BarChart3,\n  Activity\n} from 'lucide-react';\nimport { supabase } from '@/lib/supabase';\nimport { toast } from 'sonner';\n\n// Types avancés pour le timer de session\ninterface SessionMetrics {\n  totalDuration: number;\n  activeDuration: number; // temps réel d'entraînement\n  restDuration: number;\n  exerciseCount: number;\n  setCount: number;\n  avgRestTime: number;\n  workRestRatio: number;\n  caloriesBurned: number;\n  heartRateZones?: {\n    zone1: number; // Recovery\n    zone2: number; // Aerobic\n    zone3: number; // Anaerobic\n    zone4: number; // VO2 Max\n    zone5: number; // Neuromuscular\n  };\n}\n\ninterface SessionState {\n  isActive: boolean;\n  isPaused: boolean;\n  startTime: Date | null;\n  lastPauseTime: Date | null;\n  totalPausedTime: number;\n  currentPhase: 'warmup' | 'workout' | 'rest' | 'cooldown';\n  sessionId: string | null;\n}\n\ninterface SessionTimerProps {\n  userId?: string;\n  workoutId?: string;\n  onSessionEnd?: (metrics: SessionMetrics) => void;\n  onPhaseChange?: (phase: SessionState['currentPhase']) => void;\n  className?: string;\n}\n\nexport const AdvancedSessionTimer: React.FC<SessionTimerProps> = ({\n  userId,\n  workoutId,\n  onSessionEnd,\n  onPhaseChange,\n  className = ''\n}) => {\n  // State principal\n  const [sessionState, setSessionState] = useState<SessionState>({\n    isActive: false,\n    isPaused: false,\n    startTime: null,\n    lastPauseTime: null,\n    totalPausedTime: 0,\n    currentPhase: 'warmup',\n    sessionId: null\n  });\n\n  const [metrics, setMetrics] = useState<SessionMetrics>({\n    totalDuration: 0,\n    activeDuration: 0,\n    restDuration: 0,\n    exerciseCount: 0,\n    setCount: 0,\n    avgRestTime: 0,\n    workRestRatio: 0,\n    caloriesBurned: 0\n  });\n\n  const [currentTime, setCurrentTime] = useState(0);\n  const [targetDuration, setTargetDuration] = useState(3600); // 1 heure par défaut\n  const intervalRef = useRef<NodeJS.Timeout | null>(null);\n  const heartRateRef = useRef<number>(0);\n\n  // Calcul du temps en temps réel\n  const updateTimer = useCallback(() => {\n    if (!sessionState.isActive || sessionState.isPaused || !sessionState.startTime) {\n      return;\n    }\n\n    const now = new Date();\n    const elapsed = now.getTime() - sessionState.startTime.getTime() - sessionState.totalPausedTime;\n    setCurrentTime(Math.floor(elapsed / 1000));\n\n    // Mise à jour des métriques en temps réel\n    setMetrics(prev => ({\n      ...prev,\n      totalDuration: Math.floor(elapsed / 1000),\n      activeDuration: Math.floor(elapsed / 1000) - prev.restDuration\n    }));\n  }, [sessionState]);\n\n  // Timer principal\n  useEffect(() => {\n    if (sessionState.isActive && !sessionState.isPaused) {\n      intervalRef.current = setInterval(updateTimer, 1000);\n    } else {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n        intervalRef.current = null;\n      }\n    }\n\n    return () => {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n    };\n  }, [sessionState.isActive, sessionState.isPaused, updateTimer]);\n\n  // Sauvegarde automatique toutes les 30 secondes\n  useEffect(() => {\n    if (sessionState.isActive && sessionState.sessionId) {\n      const saveInterval = setInterval(async () => {\n        await saveSessionProgress();\n      }, 30000);\n\n      return () => clearInterval(saveInterval);\n    }\n    // Retourne undefined explicitement si la condition n'est pas remplie\n    return undefined;\n  }, [sessionState.isActive, sessionState.sessionId]);\n\n  // Démarrage de session\n  const startSession = useCallback(async () => {\n    const sessionId = `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    const startTime = new Date();\n\n    setSessionState(prev => ({\n      ...prev,\n      isActive: true,\n      isPaused: false,\n      startTime,\n      sessionId,\n      currentPhase: 'warmup'\n    }));\n\n    // Sauvegarde initiale en base\n    if (userId) {\n      try {\n        await supabase.from('workout_sessions').insert({\n          id: sessionId,\n          user_id: userId,\n          workout_id: workoutId,\n          start_time: startTime.toISOString(),\n          phase: 'warmup',\n          status: 'active'\n        });\n      } catch (error) {\n        console.error('Erreur sauvegarde session:', error);\n      }\n    }\n\n    toast.success('Session démarrée !', {\n      description: 'Votre entraînement est maintenant tracké.'\n    });\n  }, [userId, workoutId]);\n\n  // Pause/Resume\n  const togglePause = useCallback(() => {\n    const now = new Date();\n\n    if (sessionState.isPaused) {\n      // Resume\n      const pauseDuration = now.getTime() - (sessionState.lastPauseTime?.getTime() || 0);\n      setSessionState(prev => ({\n        ...prev,\n        isPaused: false,\n        lastPauseTime: null,\n        totalPausedTime: prev.totalPausedTime + pauseDuration\n      }));\n    } else {\n      // Pause\n      setSessionState(prev => ({\n        ...prev,\n        isPaused: true,\n        lastPauseTime: now\n      }));\n    }\n  }, [sessionState.isPaused, sessionState.lastPauseTime]);\n\n  // Fin de session\n  const endSession = useCallback(async () => {\n    if (!sessionState.isActive) return;\n\n    const finalMetrics = {\n      ...metrics,\n      workRestRatio: metrics.restDuration > 0 ? metrics.activeDuration / metrics.restDuration : 0\n    };\n\n    setSessionState(prev => ({\n      ...prev,\n      isActive: false,\n      isPaused: false,\n      currentPhase: 'cooldown'\n    }));\n\n    // Sauvegarde finale\n    if (sessionState.sessionId && userId) {\n      try {\n        await supabase.from('workout_sessions').update({\n          end_time: new Date().toISOString(),\n          status: 'completed',\n          total_duration: finalMetrics.totalDuration,\n          active_duration: finalMetrics.activeDuration,\n          rest_duration: finalMetrics.restDuration,\n          exercise_count: finalMetrics.exerciseCount,\n          set_count: finalMetrics.setCount,\n          calories_burned: finalMetrics.caloriesBurned,\n          metrics: finalMetrics\n        }).eq('id', sessionState.sessionId);\n      } catch (error) {\n        console.error('Erreur sauvegarde finale:', error);\n      }\n    }\n\n    onSessionEnd?.(finalMetrics);\n    \n    toast.success('Session terminée !', {\n      description: `Durée: ${formatTime(finalMetrics.totalDuration)} | ${finalMetrics.setCount} séries`\n    });\n  }, [sessionState, metrics, userId, onSessionEnd]);\n\n  // Sauvegarde progressive\n  const saveSessionProgress = useCallback(async () => {\n    if (!sessionState.sessionId || !userId) return;\n\n    try {\n      await supabase.from('workout_sessions').update({\n        current_duration: currentTime,\n        metrics: metrics,\n        last_update: new Date().toISOString()\n      }).eq('id', sessionState.sessionId);\n    } catch (error) {\n      console.error('Erreur sauvegarde progress:', error);\n    }\n  }, [sessionState.sessionId, userId, currentTime, metrics]);\n\n  // Changement de phase\n  const changePhase = useCallback((newPhase: SessionState['currentPhase']) => {\n    setSessionState(prev => ({ ...prev, currentPhase: newPhase }));\n    onPhaseChange?.(newPhase);\n\n    // Analytics de phase\n    const phaseColors = {\n      warmup: 'bg-yellow-500',\n      workout: 'bg-red-500', \n      rest: 'bg-blue-500',\n      cooldown: 'bg-green-500'\n    };\n\n    toast.info(`Phase: ${newPhase}`, {\n      description: 'Transition détectée automatiquement'\n    });\n  }, [onPhaseChange]);\n\n  // Utilitaires\n  const formatTime = (seconds: number): string => {\n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor((seconds % 3600) / 60);\n    const secs = seconds % 60;\n    \n    if (hours > 0) {\n      return `${hours}h ${minutes}m ${secs}s`;\n    }\n    return `${minutes}m ${secs}s`;\n  };\n\n  const getPhaseColor = (phase: SessionState['currentPhase']): string => {\n    const colors = {\n      warmup: 'from-yellow-400 to-orange-500',\n      workout: 'from-red-500 to-pink-600',\n      rest: 'from-blue-400 to-cyan-500',\n      cooldown: 'from-green-400 to-emerald-500'\n    };\n    return colors[phase];\n  };\n\n  const progressPercentage = targetDuration > 0 ? Math.min((currentTime / targetDuration) * 100, 100) : 0;\n  const estimatedCalories = Math.floor(currentTime * 0.15); // Approximation\n\n  return (\n    <Card className={`w-full max-w-md mx-auto ${className}`}>\n      <CardHeader className=\"pb-4\">\n        <CardTitle className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-2\">\n            <Timer className=\"w-5 h-5\" />\n            <span>Session Timer</span>\n          </div>\n          <Badge \n            variant=\"outline\" \n            className={`bg-gradient-to-r ${getPhaseColor(sessionState.currentPhase)} text-white border-0`}\n          >\n            {sessionState.currentPhase}\n          </Badge>\n        </CardTitle>\n      </CardHeader>\n\n      <CardContent className=\"space-y-6\">\n        {/* Timer principal */}\n        <div className=\"text-center space-y-2\">\n          <div className=\"text-4xl font-bold font-mono tracking-wider\">\n            {formatTime(currentTime)}\n          </div>\n          <Progress \n            value={progressPercentage} \n            className=\"h-2\"\n          />\n          <div className=\"text-sm text-gray-500\">\n            Objectif: {formatTime(targetDuration)}\n          </div>\n        </div>\n\n        {/* Contrôles */}\n        <div className=\"flex justify-center gap-3\">\n          {!sessionState.isActive ? (\n            <Button \n              onClick={startSession}\n              className=\"bg-gradient-to-r from-green-500 to-emerald-600 hover:from-green-600 hover:to-emerald-700\"\n            >\n              <Play className=\"w-4 h-4 mr-2\" />\n              Démarrer\n            </Button>\n          ) : (\n            <>\n              <Button \n                onClick={togglePause}\n                variant=\"outline\"\n                size=\"sm\"\n              >\n                {sessionState.isPaused ? (\n                  <><Play className=\"w-4 h-4 mr-2\" />Reprendre</>\n                ) : (\n                  <><Pause className=\"w-4 h-4 mr-2\" />Pause</>\n                )}\n              </Button>\n              <Button \n                onClick={endSession}\n                variant=\"destructive\"\n                size=\"sm\"\n              >\n                <Square className=\"w-4 h-4 mr-2\" />\n                Terminer\n              </Button>\n            </>\n          )}\n        </div>\n\n        {/* Métriques en temps réel */}\n        {sessionState.isActive && (\n          <>\n            <Separator />\n            <div className=\"grid grid-cols-2 gap-4 text-sm\">\n              <div className=\"flex items-center gap-2\">\n                <Activity className=\"w-4 h-4 text-red-500\" />\n                <div>\n                  <div className=\"font-medium\">Actif</div>\n                  <div className=\"text-gray-500\">{formatTime(metrics.activeDuration)}</div>\n                </div>\n              </div>\n              \n              <div className=\"flex items-center gap-2\">\n                <Clock className=\"w-4 h-4 text-blue-500\" />\n                <div>\n                  <div className=\"font-medium\">Repos</div>\n                  <div className=\"text-gray-500\">{formatTime(metrics.restDuration)}</div>\n                </div>\n              </div>\n\n              <div className=\"flex items-center gap-2\">\n                <Target className=\"w-4 h-4 text-green-500\" />\n                <div>\n                  <div className=\"font-medium\">Séries</div>\n                  <div className=\"text-gray-500\">{metrics.setCount}</div>\n                </div>\n              </div>\n\n              <div className=\"flex items-center gap-2\">\n                <Zap className=\"w-4 h-4 text-orange-500\" />\n                <div>\n                  <div className=\"font-medium\">Calories</div>\n                  <div className=\"text-gray-500\">{estimatedCalories}</div>\n                </div>\n              </div>\n            </div>\n\n            {/* Ratio Work/Rest */}\n            <div className=\"space-y-2\">\n              <div className=\"flex justify-between text-sm\">\n                <span>Ratio Travail/Repos</span>\n                <span className=\"font-medium\">\n                  {metrics.restDuration > 0 ? (metrics.activeDuration / metrics.restDuration).toFixed(1) : '∞'}:1\n                </span>\n              </div>\n              \n              <div className=\"h-2 bg-gray-200 rounded-full overflow-hidden\">\n                <div \n                  className=\"h-full bg-gradient-to-r from-red-500 to-blue-500 transition-all duration-500\"\n                  style={{ \n                    width: `${Math.min((metrics.activeDuration / (metrics.activeDuration + metrics.restDuration)) * 100, 100)}%` \n                  }}\n                />\n              </div>\n            </div>\n          </>\n        )}\n\n        {/* Phases rapides */}\n        {sessionState.isActive && (\n          <>\n            <Separator />\n            <div className=\"flex gap-2\">\n              {(['warmup', 'workout', 'rest', 'cooldown'] as const).map((phase) => (\n                <Button\n                  key={phase}\n                  onClick={() => changePhase(phase)}\n                  variant={sessionState.currentPhase === phase ? \"default\" : \"outline\"}\n                  size=\"sm\"\n                  className=\"flex-1 text-xs\"\n                >\n                  {phase}\n                </Button>\n              ))}\n            </div>\n          </>\n        )}\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default AdvancedSessionTimer;"],"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","ignoreList":[]}