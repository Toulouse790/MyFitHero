{"version":3,"names":["cov_2dwcf0e4e0","actualCoverage","react_1","s","__importDefault","require","card_1","badge_1","progress_1","button_1","lucide_react_1","DashboardStats","dailyStats","isLoading","b","personalizedWorkout","onNavigate","className","f","getStatsCards","id","title","value","workouts_completed","target","unit","icon","Dumbbell","color","trend","isPositive","period","description","actionPath","total_calories","Flame","water_intake_ml","hydration_goal_ml","Droplets","sleep_hours","Moon","steps_count","Activity","Heart","statsCards","getProgressPercentage","Math","min","round","getProgressColor","percentage","getStatusBadge","jsx_runtime_1","jsx","Badge","children","variant","Array","map","_","index","Card","CardContent","jsxs","Target","Button","size","onClick","ArrowRight","stat","IconComponent","CardHeader","CardTitle","TrendingUp","TrendingDown","toLocaleString","Progress","Award","completedGoals","filter","length","totalGoals","exports","default"],"sources":["/workspaces/MyFitHero/src/features/analytics/components/DashboardStats.tsx"],"sourcesContent":["// src/features/analytics/components/DashboardStats.tsx\nimport React from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Progress } from '@/components/ui/progress';\nimport { Button } from '@/components/ui/button';\nimport { \n  Dumbbell,\n  Apple,\n  Droplets,\n  Moon,\n  Flame,\n  Heart,\n  TrendingUp,\n  TrendingDown,\n  Target,\n  Clock,\n  Activity,\n  Zap,\n  Award,\n  ArrowRight\n} from 'lucide-react';\nimport { DailyStats } from '@/shared/types/dashboard';\n\ninterface StatCard {\n  id: string;\n  title: string;\n  value: number;\n  target: number;\n  unit: string;\n  icon: React.ElementType;\n  color: string;\n  trend?: {\n    value: number;\n    isPositive: boolean;\n    period: string;\n  };\n  description?: string;\n  actionPath?: string;\n}\n\ninterface DashboardStatsProps {\n  dailyStats: DailyStats | null;\n  isLoading?: boolean;\n  personalizedWorkout: string;\n  onNavigate?: (path: string) => void;\n  className?: string;\n}\n\nexport const DashboardStats: React.FC<DashboardStatsProps> = ({\n  dailyStats,\n  isLoading = false,\n  personalizedWorkout,\n  onNavigate,\n  className = '',\n}) => {\n  \n  // Configuration des cartes de statistiques\n  const getStatsCards = (): StatCard[] => {\n    if (!dailyStats) return [];\n\n    return [\n      {\n        id: 'workout',\n        title: 'Entraînements',\n        value: dailyStats.workouts_completed || 0,\n        target: 1,\n        unit: 'séance',\n        icon: Dumbbell,\n        color: 'text-red-500',\n        trend: {\n          value: 15,\n          isPositive: true,\n          period: 'cette semaine'\n        },\n        description: (dailyStats.workouts_completed ?? 0) > 0 ? 'Objectif atteint !' : personalizedWorkout,\n        actionPath: '/workout'\n      },\n      {\n        id: 'calories',\n        title: 'Calories',\n        value: dailyStats.total_calories || 0,\n        target: 2200,\n        unit: 'kcal',\n        icon: Flame,\n        color: 'text-orange-500',\n        trend: {\n          value: 8,\n          isPositive: false,\n          period: 'vs hier'\n        },\n        description: 'Équilibre énergétique',\n        actionPath: '/nutrition'\n      },\n      {\n        id: 'hydration',\n        title: 'Hydratation',\n        value: dailyStats.water_intake_ml || 0,\n        target: dailyStats.hydration_goal_ml || 2500,\n        unit: 'ml',\n        icon: Droplets,\n        color: 'text-blue-500',\n        trend: {\n          value: 12,\n          isPositive: true,\n          period: 'objectif quotidien'\n        },\n        description: 'Bon niveau d\\'hydratation',\n        actionPath: '/hydration'\n      },\n      {\n        id: 'sleep',\n        title: 'Sommeil',\n        value: dailyStats.sleep_hours || 0,\n        target: 8,\n        unit: 'h',\n        icon: Moon,\n        color: 'text-purple-500',\n        trend: {\n          value: 5,\n          isPositive: true,\n          period: 'qualité'\n        },\n        description: 'Récupération optimale',\n        actionPath: '/sleep'\n      },\n      {\n        id: 'steps',\n        title: 'Pas',\n        value: dailyStats.steps_count || 0,\n        target: 10000,\n        unit: 'pas',\n        icon: Activity,\n        color: 'text-green-500',\n        trend: {\n          value: 3,\n          isPositive: false,\n          period: 'vs objectif'\n        },\n        description: 'Activité quotidienne',\n        actionPath: '/activity'\n      },\n      {\n        id: 'heart_rate',\n        title: 'Rythme cardiaque',\n        value: 72, // Mock data\n        target: 75,\n        unit: 'bpm',\n        icon: Heart,\n        color: 'text-pink-500',\n        trend: {\n          value: 2,\n          isPositive: true,\n          period: 'au repos'\n        },\n        description: 'Fréquence de repos',\n        actionPath: '/health'\n      }\n    ];\n  };\n\n  const statsCards = getStatsCards();\n\n  const getProgressPercentage = (value: number, target: number): number => {\n    return target > 0 ? Math.min(Math.round((value / target) * 100), 100) : 0;\n  };\n\n  const getProgressColor = (percentage: number): string => {\n    if (percentage >= 100) return 'bg-green-500';\n    if (percentage >= 75) return 'bg-blue-500';\n    if (percentage >= 50) return 'bg-yellow-500';\n    return 'bg-red-500';\n  };\n\n  const getStatusBadge = (value: number, target: number) => {\n    const percentage = getProgressPercentage(value, target);\n    if (percentage >= 100) return <Badge className=\"bg-green-500\">Objectif atteint</Badge>;\n    if (percentage >= 75) return <Badge variant=\"secondary\">En bonne voie</Badge>;\n    if (percentage >= 50) return <Badge variant=\"outline\">À mi-parcours</Badge>;\n    return <Badge variant=\"destructive\">Besoin d'effort</Badge>;\n  };\n\n  if (isLoading) {\n    return (\n      <div className={`grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 ${className}`}>\n        {[...Array(6)].map((_, index) => (\n          <Card key={index} className=\"animate-pulse\">\n            <CardContent className=\"p-6\">\n              <div className=\"space-y-4\">\n                <div className=\"h-4 bg-muted rounded w-3/4\"></div>\n                <div className=\"h-8 bg-muted rounded w-1/2\"></div>\n                <div className=\"h-2 bg-muted rounded w-full\"></div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    );\n  }\n\n  return (\n    <div className={`space-y-6 ${className}`}>\n      \n      {/* Titre de section */}\n      <div className=\"flex items-center justify-between\">\n        <h2 className=\"text-xl font-semibold flex items-center space-x-2\">\n          <Target className=\"h-5 w-5\" />\n          <span>Statistiques du jour</span>\n        </h2>\n        <Button variant=\"outline\" size=\"sm\" onClick={() => onNavigate?.('/analytics')}>\n          Voir tout\n          <ArrowRight className=\"h-3 w-3 ml-1\" />\n        </Button>\n      </div>\n\n      {/* Grille des cartes de statistiques */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {statsCards.map((stat) => {\n          const IconComponent = stat.icon;\n          const percentage = getProgressPercentage(stat.value, stat.target);\n          \n          return (\n            <Card \n              key={stat.id} \n              className=\"hover:shadow-lg transition-all duration-200 cursor-pointer\"\n              onClick={() => stat.actionPath && onNavigate?.(stat.actionPath)}\n            >\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"flex items-center justify-between text-sm font-medium\">\n                  <div className=\"flex items-center space-x-2\">\n                    <IconComponent className={`h-4 w-4 ${stat.color}`} />\n                    <span>{stat.title}</span>\n                  </div>\n                  {stat.trend && (\n                    <div className=\"flex items-center space-x-1 text-xs\">\n                      {stat.trend.isPositive ? (\n                        <TrendingUp className=\"h-3 w-3 text-green-500\" />\n                      ) : (\n                        <TrendingDown className=\"h-3 w-3 text-red-500\" />\n                      )}\n                      <span className={stat.trend.isPositive ? 'text-green-500' : 'text-red-500'}>\n                        {stat.trend.value}%\n                      </span>\n                    </div>\n                  )}\n                </CardTitle>\n              </CardHeader>\n              \n              <CardContent className=\"pt-0\">\n                <div className=\"space-y-4\">\n                  \n                  {/* Valeur principale */}\n                  <div className=\"flex items-baseline justify-between\">\n                    <div className=\"flex items-baseline space-x-1\">\n                      <span className=\"text-2xl font-bold\">{stat.value.toLocaleString()}</span>\n                      <span className=\"text-sm text-muted-foreground\">/ {stat.target.toLocaleString()}</span>\n                      <span className=\"text-xs text-muted-foreground\">{stat.unit}</span>\n                    </div>\n                    <div className=\"text-lg font-semibold text-primary\">\n                      {percentage}%\n                    </div>\n                  </div>\n\n                  {/* Barre de progression */}\n                  <div className=\"space-y-2\">\n                    <Progress \n                      value={percentage} \n                      className=\"h-2\"\n                    />\n                    <div className=\"flex justify-between items-center\">\n                      {getStatusBadge(stat.value, stat.target)}\n                      {stat.trend && (\n                        <span className=\"text-xs text-muted-foreground\">\n                          {stat.trend.period}\n                        </span>\n                      )}\n                    </div>\n                  </div>\n\n                  {/* Description */}\n                  {stat.description && (\n                    <p className=\"text-xs text-muted-foreground\">\n                      {stat.description}\n                    </p>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          );\n        })}\n      </div>\n\n      {/* Résumé rapide */}\n      <Card className=\"bg-gradient-to-r from-primary/5 to-primary/10\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"space-y-1\">\n              <h3 className=\"font-semibold flex items-center space-x-2\">\n                <Award className=\"h-4 w-4 text-primary\" />\n                <span>Performance du jour</span>\n              </h3>\n              <p className=\"text-sm text-muted-foreground\">\n                {(() => {\n                  const completedGoals = statsCards.filter(stat => \n                    getProgressPercentage(stat.value, stat.target) >= 100\n                  ).length;\n                  const totalGoals = statsCards.length;\n                  const percentage = Math.round((completedGoals / totalGoals) * 100);\n                  \n                  if (percentage >= 80) return 'Excellente journée ! Tu domines tes objectifs 🔥';\n                  if (percentage >= 60) return 'Bonne progression ! Continue comme ça 💪';\n                  if (percentage >= 40) return 'Tu es sur la bonne voie ! 👍';\n                  return 'Il est encore temps de rattraper ! 💫';\n                })()}\n              </p>\n            </div>\n            \n            <div className=\"text-right\">\n              <div className=\"text-2xl font-bold text-primary\">\n                {statsCards.filter(stat => \n                  getProgressPercentage(stat.value, stat.target) >= 100\n                ).length}/{statsCards.length}\n              </div>\n              <div className=\"text-xs text-muted-foreground\">\n                objectifs atteints\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default DashboardStats;"],"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","ignoreList":[]}