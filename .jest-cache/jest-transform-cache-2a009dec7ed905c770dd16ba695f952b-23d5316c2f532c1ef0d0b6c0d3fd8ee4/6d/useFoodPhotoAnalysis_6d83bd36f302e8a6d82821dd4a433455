c3e5e83193d9f3a30afa9a486e66c18a
"use strict";

/* istanbul ignore next */
function cov_4ydnn2zrv() {
  var path = "/workspaces/MyFitHero/src/features/nutrition/hooks/useFoodPhotoAnalysis.ts";
  var hash = "5850626d98ba8f38ae8683078683ef0d39444869";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/MyFitHero/src/features/nutrition/hooks/useFoodPhotoAnalysis.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 38
        }
      },
      "2": {
        start: {
          line: 5,
          column: 16
        },
        end: {
          line: 5,
          column: 32
        }
      },
      "3": {
        start: {
          line: 6,
          column: 26
        },
        end: {
          line: 6,
          column: 82
        }
      },
      "4": {
        start: {
          line: 7,
          column: 20
        },
        end: {
          line: 7,
          column: 55
        }
      },
      "5": {
        start: {
          line: 8,
          column: 29
        },
        end: {
          line: 167,
          column: 1
        }
      },
      "6": {
        start: {
          line: 9,
          column: 22
        },
        end: {
          line: 9,
          column: 49
        }
      },
      "7": {
        start: {
          line: 10,
          column: 30
        },
        end: {
          line: 15,
          column: 6
        }
      },
      "8": {
        start: {
          line: 19,
          column: 25
        },
        end: {
          line: 73,
          column: 15
        }
      },
      "9": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 26,
          column: 12
        }
      },
      "10": {
        start: {
          line: 20,
          column: 26
        },
        end: {
          line: 26,
          column: 9
        }
      },
      "11": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 72,
          column: 9
        }
      },
      "12": {
        start: {
          line: 28,
          column: 12
        },
        end: {
          line: 31,
          column: 15
        }
      },
      "13": {
        start: {
          line: 32,
          column: 27
        },
        end: {
          line: 32,
          column: 97
        }
      },
      "14": {
        start: {
          line: 33,
          column: 12
        },
        end: {
          line: 58,
          column: 13
        }
      },
      "15": {
        start: {
          line: 34,
          column: 16
        },
        end: {
          line: 40,
          column: 20
        }
      },
      "16": {
        start: {
          line: 34,
          column: 34
        },
        end: {
          line: 40,
          column: 17
        }
      },
      "17": {
        start: {
          line: 41,
          column: 16
        },
        end: {
          line: 45,
          column: 19
        }
      },
      "18": {
        start: {
          line: 48,
          column: 16
        },
        end: {
          line: 52,
          column: 20
        }
      },
      "19": {
        start: {
          line: 48,
          column: 34
        },
        end: {
          line: 52,
          column: 17
        }
      },
      "20": {
        start: {
          line: 53,
          column: 16
        },
        end: {
          line: 57,
          column: 19
        }
      },
      "21": {
        start: {
          line: 61,
          column: 33
        },
        end: {
          line: 61,
          column: 91
        }
      },
      "22": {
        start: {
          line: 62,
          column: 12
        },
        end: {
          line: 66,
          column: 16
        }
      },
      "23": {
        start: {
          line: 62,
          column: 30
        },
        end: {
          line: 66,
          column: 13
        }
      },
      "24": {
        start: {
          line: 67,
          column: 12
        },
        end: {
          line: 71,
          column: 15
        }
      },
      "25": {
        start: {
          line: 77,
          column: 23
        },
        end: {
          line: 84,
          column: 10
        }
      },
      "26": {
        start: {
          line: 78,
          column: 8
        },
        end: {
          line: 83,
          column: 12
        }
      },
      "27": {
        start: {
          line: 78,
          column: 26
        },
        end: {
          line: 83,
          column: 9
        }
      },
      "28": {
        start: {
          line: 80,
          column: 56
        },
        end: {
          line: 80,
          column: 82
        }
      },
      "29": {
        start: {
          line: 88,
          column: 25
        },
        end: {
          line: 93,
          column: 10
        }
      },
      "30": {
        start: {
          line: 89,
          column: 8
        },
        end: {
          line: 92,
          column: 12
        }
      },
      "31": {
        start: {
          line: 89,
          column: 26
        },
        end: {
          line: 92,
          column: 9
        }
      },
      "32": {
        start: {
          line: 91,
          column: 58
        },
        end: {
          line: 91,
          column: 78
        }
      },
      "33": {
        start: {
          line: 97,
          column: 27
        },
        end: {
          line: 115,
          column: 10
        }
      },
      "34": {
        start: {
          line: 98,
          column: 8
        },
        end: {
          line: 114,
          column: 12
        }
      },
      "35": {
        start: {
          line: 98,
          column: 26
        },
        end: {
          line: 114,
          column: 9
        }
      },
      "36": {
        start: {
          line: 101,
          column: 16
        },
        end: {
          line: 111,
          column: 17
        }
      },
      "37": {
        start: {
          line: 102,
          column: 35
        },
        end: {
          line: 102,
          column: 52
        }
      },
      "38": {
        start: {
          line: 103,
          column: 20
        },
        end: {
          line: 110,
          column: 22
        }
      },
      "39": {
        start: {
          line: 112,
          column: 16
        },
        end: {
          line: 112,
          column: 28
        }
      },
      "40": {
        start: {
          line: 119,
          column: 29
        },
        end: {
          line: 134,
          column: 36
        }
      },
      "41": {
        start: {
          line: 120,
          column: 8
        },
        end: {
          line: 127,
          column: 9
        }
      },
      "42": {
        start: {
          line: 121,
          column: 12
        },
        end: {
          line: 125,
          column: 15
        }
      },
      "43": {
        start: {
          line: 126,
          column: 12
        },
        end: {
          line: 126,
          column: 22
        }
      },
      "44": {
        start: {
          line: 128,
          column: 8
        },
        end: {
          line: 132,
          column: 11
        }
      },
      "45": {
        start: {
          line: 133,
          column: 8
        },
        end: {
          line: 133,
          column: 35
        }
      },
      "46": {
        start: {
          line: 138,
          column: 18
        },
        end: {
          line: 145,
          column: 10
        }
      },
      "47": {
        start: {
          line: 139,
          column: 8
        },
        end: {
          line: 144,
          column: 11
        }
      },
      "48": {
        start: {
          line: 149,
          column: 30
        },
        end: {
          line: 156,
          column: 29
        }
      },
      "49": {
        start: {
          line: 150,
          column: 8
        },
        end: {
          line: 155,
          column: 59
        }
      },
      "50": {
        start: {
          line: 150,
          column: 61
        },
        end: {
          line: 155,
          column: 9
        }
      },
      "51": {
        start: {
          line: 157,
          column: 4
        },
        end: {
          line: 166,
          column: 6
        }
      },
      "52": {
        start: {
          line: 168,
          column: 0
        },
        end: {
          line: 168,
          column: 52
        }
      },
      "53": {
        start: {
          line: 169,
          column: 0
        },
        end: {
          line: 169,
          column: 47
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 8,
            column: 29
          },
          end: {
            line: 8,
            column: 30
          }
        },
        loc: {
          start: {
            line: 8,
            column: 35
          },
          end: {
            line: 167,
            column: 1
          }
        },
        line: 8
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 19,
            column: 50
          },
          end: {
            line: 19,
            column: 51
          }
        },
        loc: {
          start: {
            line: 19,
            column: 71
          },
          end: {
            line: 73,
            column: 5
          }
        },
        line: 19
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 20,
            column: 17
          },
          end: {
            line: 20,
            column: 18
          }
        },
        loc: {
          start: {
            line: 20,
            column: 26
          },
          end: {
            line: 26,
            column: 9
          }
        },
        line: 20
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 34,
            column: 25
          },
          end: {
            line: 34,
            column: 26
          }
        },
        loc: {
          start: {
            line: 34,
            column: 34
          },
          end: {
            line: 40,
            column: 17
          }
        },
        line: 34
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 48,
            column: 25
          },
          end: {
            line: 48,
            column: 26
          }
        },
        loc: {
          start: {
            line: 48,
            column: 34
          },
          end: {
            line: 52,
            column: 17
          }
        },
        line: 48
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 62,
            column: 21
          },
          end: {
            line: 62,
            column: 22
          }
        },
        loc: {
          start: {
            line: 62,
            column: 30
          },
          end: {
            line: 66,
            column: 13
          }
        },
        line: 62
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 77,
            column: 48
          },
          end: {
            line: 77,
            column: 49
          }
        },
        loc: {
          start: {
            line: 77,
            column: 58
          },
          end: {
            line: 84,
            column: 5
          }
        },
        line: 77
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 78,
            column: 17
          },
          end: {
            line: 78,
            column: 18
          }
        },
        loc: {
          start: {
            line: 78,
            column: 26
          },
          end: {
            line: 83,
            column: 9
          }
        },
        line: 78
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 80,
            column: 51
          },
          end: {
            line: 80,
            column: 52
          }
        },
        loc: {
          start: {
            line: 80,
            column: 56
          },
          end: {
            line: 80,
            column: 82
          }
        },
        line: 80
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 88,
            column: 50
          },
          end: {
            line: 88,
            column: 51
          }
        },
        loc: {
          start: {
            line: 88,
            column: 62
          },
          end: {
            line: 93,
            column: 5
          }
        },
        line: 88
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 89,
            column: 17
          },
          end: {
            line: 89,
            column: 18
          }
        },
        loc: {
          start: {
            line: 89,
            column: 26
          },
          end: {
            line: 92,
            column: 9
          }
        },
        line: 89
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 91,
            column: 53
          },
          end: {
            line: 91,
            column: 54
          }
        },
        loc: {
          start: {
            line: 91,
            column: 58
          },
          end: {
            line: 91,
            column: 78
          }
        },
        line: 91
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 97,
            column: 52
          },
          end: {
            line: 97,
            column: 53
          }
        },
        loc: {
          start: {
            line: 97,
            column: 77
          },
          end: {
            line: 115,
            column: 5
          }
        },
        line: 97
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 98,
            column: 17
          },
          end: {
            line: 98,
            column: 18
          }
        },
        loc: {
          start: {
            line: 98,
            column: 26
          },
          end: {
            line: 114,
            column: 9
          }
        },
        line: 98
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 100,
            column: 50
          },
          end: {
            line: 100,
            column: 51
          }
        },
        loc: {
          start: {
            line: 100,
            column: 67
          },
          end: {
            line: 113,
            column: 13
          }
        },
        line: 100
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 119,
            column: 54
          },
          end: {
            line: 119,
            column: 55
          }
        },
        loc: {
          start: {
            line: 119,
            column: 66
          },
          end: {
            line: 134,
            column: 5
          }
        },
        line: 119
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 138,
            column: 43
          },
          end: {
            line: 138,
            column: 44
          }
        },
        loc: {
          start: {
            line: 138,
            column: 49
          },
          end: {
            line: 145,
            column: 5
          }
        },
        line: 138
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 149,
            column: 55
          },
          end: {
            line: 149,
            column: 56
          }
        },
        loc: {
          start: {
            line: 149,
            column: 61
          },
          end: {
            line: 156,
            column: 5
          }
        },
        line: 149
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 150,
            column: 42
          },
          end: {
            line: 150,
            column: 43
          }
        },
        loc: {
          start: {
            line: 150,
            column: 61
          },
          end: {
            line: 155,
            column: 9
          }
        },
        line: 150
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 33,
            column: 12
          },
          end: {
            line: 58,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 33,
            column: 12
          },
          end: {
            line: 58,
            column: 13
          }
        }, {
          start: {
            line: 47,
            column: 17
          },
          end: {
            line: 58,
            column: 13
          }
        }],
        line: 33
      },
      "1": {
        loc: {
          start: {
            line: 51,
            column: 27
          },
          end: {
            line: 51,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 51,
            column: 27
          },
          end: {
            line: 51,
            column: 39
          }
        }, {
          start: {
            line: 51,
            column: 43
          },
          end: {
            line: 51,
            column: 70
          }
        }],
        line: 51
      },
      "2": {
        loc: {
          start: {
            line: 55,
            column: 33
          },
          end: {
            line: 55,
            column: 82
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 55,
            column: 33
          },
          end: {
            line: 55,
            column: 45
          }
        }, {
          start: {
            line: 55,
            column: 49
          },
          end: {
            line: 55,
            column: 82
          }
        }],
        line: 55
      },
      "3": {
        loc: {
          start: {
            line: 61,
            column: 33
          },
          end: {
            line: 61,
            column: 91
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 61,
            column: 58
          },
          end: {
            line: 61,
            column: 71
          }
        }, {
          start: {
            line: 61,
            column: 74
          },
          end: {
            line: 61,
            column: 91
          }
        }],
        line: 61
      },
      "4": {
        loc: {
          start: {
            line: 80,
            column: 27
          },
          end: {
            line: 82,
            column: 47
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 81,
            column: 18
          },
          end: {
            line: 81,
            column: 36
          }
        }, {
          start: {
            line: 82,
            column: 18
          },
          end: {
            line: 82,
            column: 47
          }
        }],
        line: 80
      },
      "5": {
        loc: {
          start: {
            line: 101,
            column: 16
          },
          end: {
            line: 111,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 101,
            column: 16
          },
          end: {
            line: 111,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 101
      },
      "6": {
        loc: {
          start: {
            line: 120,
            column: 8
          },
          end: {
            line: 127,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 120,
            column: 8
          },
          end: {
            line: 127,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 120
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0]
    },
    inputSourceMap: {
      file: "/workspaces/MyFitHero/src/features/nutrition/hooks/useFoodPhotoAnalysis.ts",
      mappings: "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",
      names: [],
      sources: ["/workspaces/MyFitHero/src/features/nutrition/hooks/useFoodPhotoAnalysis.ts"],
      sourcesContent: ["// src/features/nutrition/hooks/useFoodPhotoAnalysis.ts\nimport { useState, useCallback } from 'react';\nimport { FoodRecognitionService, FoodAnalysisResult, RecognizedFood } from '@/features/nutrition/services/foodRecognition';\nimport { useToast } from '@/shared/hooks/use-toast';\n\nexport interface FoodPhotoAnalysisState {\n  isAnalyzing: boolean;\n  analysisResult: FoodAnalysisResult | undefined;\n  selectedFoods: RecognizedFood[];\n  error: string | undefined;\n}\n\nexport interface UseFoodPhotoAnalysisReturn {\n  // \xC9tat\n  state: FoodPhotoAnalysisState;\n  \n  // Actions\n  analyzeImage: (imageFile: File) => Promise<void>;\n  selectFood: (food: RecognizedFood) => void;\n  deselectFood: (foodId: string) => void;\n  adjustQuantity: (foodId: string, newQuantity: number) => void;\n  confirmSelection: () => Promise<RecognizedFood[]>;\n  reset: () => void;\n  \n  // Utilitaires\n  getTotalNutrition: () => {\n    calories: number;\n    protein: number;\n    carbs: number;\n    fat: number;\n  };\n}\n\nexport const useFoodPhotoAnalysis = (): UseFoodPhotoAnalysisReturn => {\n  const { toast } = useToast();\n  \n  const [state, setState] = useState<FoodPhotoAnalysisState>({\n    isAnalyzing: false,\n    analysisResult: null,\n    selectedFoods: [],\n    error: null\n  });\n\n  /**\n   * Analyser une image pour reconna\xEEtre les aliments\n   */\n  const analyzeImage = useCallback(async (imageFile: File) => {\n    setState(prev => ({\n      ...prev,\n      isAnalyzing: true,\n      error: null,\n      analysisResult: null,\n      selectedFoods: []\n    }));\n\n    try {\n      toast({\n        title: 'Analyse en cours...',\n        description: 'Reconnaissance des aliments dans votre photo',\n      });\n\n      const result = await FoodRecognitionService.analyzeImage(imageFile);\n\n      if (result.success) {\n        setState(prev => ({\n          ...prev,\n          isAnalyzing: false,\n          analysisResult: result,\n          selectedFoods: result.foods, // S\xE9lectionner tous les aliments par d\xE9faut\n          error: null\n        }));\n\n        toast({\n          title: 'Analyse termin\xE9e !',\n          description: `${result.foods.length} aliment(s) d\xE9tect\xE9(s)`,\n          variant: 'default'\n        });\n      } else {\n        setState(prev => ({\n          ...prev,\n          isAnalyzing: false,\n          error: result.error || 'Erreur lors de l\\'analyse'\n        }));\n\n        toast({\n          title: 'Erreur d\\'analyse',\n          description: result.error || 'Impossible d\\'analyser l\\'image',\n          variant: 'destructive'\n        });\n      }\n    } catch (error: any) {\n      const errorMessage = error instanceof Error ? error.message : 'Erreur inconnue';\n      \n      setState(prev => ({\n        ...prev,\n        isAnalyzing: false,\n        error: errorMessage\n      }));\n\n      toast({\n        title: 'Erreur',\n        description: errorMessage,\n        variant: 'destructive'\n      });\n    }\n  }, [toast]);\n\n  /**\n   * S\xE9lectionner un aliment d\xE9tect\xE9\n   */\n  const selectFood = useCallback((food: RecognizedFood) => {\n    setState(prev => ({\n      ...prev,\n      selectedFoods: prev.selectedFoods.some(f => f.food.id === food.food.id)\n        ? prev.selectedFoods\n        : [...prev.selectedFoods, food]\n    }));\n  }, []);\n\n  /**\n   * D\xE9s\xE9lectionner un aliment\n   */\n  const deselectFood = useCallback((foodId: string) => {\n    setState(prev => ({\n      ...prev,\n      selectedFoods: prev.selectedFoods.filter(f => f.food.id !== foodId)\n    }));\n  }, []);\n\n  /**\n   * Ajuster la quantit\xE9 d'un aliment s\xE9lectionn\xE9\n   */\n  const adjustQuantity = useCallback((foodId: string, newQuantity: number) => {\n    setState(prev => ({\n      ...prev,\n      selectedFoods: prev.selectedFoods.map((food, index) => {\n        if (food.food.id === foodId) {\n          const factor = newQuantity / 100; // Pour 100g\n          return {\n            ...food,\n            estimated_quantity: newQuantity,\n            estimated_calories: food.food.calories_per_100g * factor,\n            estimated_protein: food.food.protein_per_100g * factor,\n            estimated_carbs: food.food.carbs_per_100g * factor,\n            estimated_fat: food.food.fat_per_100g * factor\n          };\n        }\n        return food;\n      })\n    }));\n  }, []);\n\n  /**\n   * Confirmer la s\xE9lection et retourner les aliments s\xE9lectionn\xE9s\n   */\n  const confirmSelection = useCallback(async (): Promise<RecognizedFood[]> => {\n    if (state.selectedFoods.length === 0) {\n      toast({\n        title: 'Aucun aliment s\xE9lectionn\xE9',\n        description: 'Veuillez s\xE9lectionner au moins un aliment',\n        variant: 'destructive'\n      });\n      return [];\n    }\n\n    toast({\n      title: 'Aliments ajout\xE9s !',\n      description: `${state.selectedFoods.length} aliment(s) ajout\xE9(s) \xE0 votre journal`,\n      variant: 'default'\n    });\n\n    return state.selectedFoods;\n  }, [state.selectedFoods, toast]);\n\n  /**\n   * R\xE9initialiser l'\xE9tat\n   */\n  const reset = useCallback(() => {\n    setState({\n      isAnalyzing: false,\n      analysisResult: null,\n      selectedFoods: [],\n      error: null\n    });\n  }, []);\n\n  /**\n   * Calculer les totaux nutritionnels des aliments s\xE9lectionn\xE9s\n   */\n  const getTotalNutrition = useCallback(() => {\n    return state.selectedFoods.reduce(\n      (totals, food) => ({\n        calories: totals.calories + food.estimated_calories,\n        protein: totals.protein + food.estimated_protein,\n        carbs: totals.carbs + food.estimated_carbs,\n        fat: totals.fat + food.estimated_fat\n      }),\n      { calories: 0, protein: 0, carbs: 0, fat: 0 }\n    );\n  }, [state.selectedFoods]);\n\n  return {\n    state,\n    analyzeImage,\n    selectFood,\n    deselectFood,\n    adjustQuantity,\n    confirmSelection,\n    reset,\n    getTotalNutrition\n  };\n};\n\nexport default useFoodPhotoAnalysis;"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "5850626d98ba8f38ae8683078683ef0d39444869"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_4ydnn2zrv = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_4ydnn2zrv();
cov_4ydnn2zrv().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_4ydnn2zrv().s[1]++;
exports.useFoodPhotoAnalysis = void 0;
// src/features/nutrition/hooks/useFoodPhotoAnalysis.ts
const react_1 =
/* istanbul ignore next */
(cov_4ydnn2zrv().s[2]++, require("react"));
const foodRecognition_1 =
/* istanbul ignore next */
(cov_4ydnn2zrv().s[3]++, require("@/features/nutrition/services/foodRecognition"));
const use_toast_1 =
/* istanbul ignore next */
(cov_4ydnn2zrv().s[4]++, require("@/shared/hooks/use-toast"));
/* istanbul ignore next */
cov_4ydnn2zrv().s[5]++;
const useFoodPhotoAnalysis = () => {
  /* istanbul ignore next */
  cov_4ydnn2zrv().f[0]++;
  const {
    toast
  } =
  /* istanbul ignore next */
  (cov_4ydnn2zrv().s[6]++, (0, use_toast_1.useToast)());
  const [state, setState] =
  /* istanbul ignore next */
  (cov_4ydnn2zrv().s[7]++, (0, react_1.useState)({
    isAnalyzing: false,
    analysisResult: null,
    selectedFoods: [],
    error: null
  }));
  /**
   * Analyser une image pour reconnaître les aliments
   */
  const analyzeImage =
  /* istanbul ignore next */
  (cov_4ydnn2zrv().s[8]++, (0, react_1.useCallback)(async imageFile => {
    /* istanbul ignore next */
    cov_4ydnn2zrv().f[1]++;
    cov_4ydnn2zrv().s[9]++;
    setState(prev => {
      /* istanbul ignore next */
      cov_4ydnn2zrv().f[2]++;
      cov_4ydnn2zrv().s[10]++;
      return {
        ...prev,
        isAnalyzing: true,
        error: null,
        analysisResult: null,
        selectedFoods: []
      };
    });
    /* istanbul ignore next */
    cov_4ydnn2zrv().s[11]++;
    try {
      /* istanbul ignore next */
      cov_4ydnn2zrv().s[12]++;
      toast({
        title: 'Analyse en cours...',
        description: 'Reconnaissance des aliments dans votre photo'
      });
      const result =
      /* istanbul ignore next */
      (cov_4ydnn2zrv().s[13]++, await foodRecognition_1.FoodRecognitionService.analyzeImage(imageFile));
      /* istanbul ignore next */
      cov_4ydnn2zrv().s[14]++;
      if (result.success) {
        /* istanbul ignore next */
        cov_4ydnn2zrv().b[0][0]++;
        cov_4ydnn2zrv().s[15]++;
        setState(prev => {
          /* istanbul ignore next */
          cov_4ydnn2zrv().f[3]++;
          cov_4ydnn2zrv().s[16]++;
          return {
            ...prev,
            isAnalyzing: false,
            analysisResult: result,
            selectedFoods: result.foods,
            // Sélectionner tous les aliments par défaut
            error: null
          };
        });
        /* istanbul ignore next */
        cov_4ydnn2zrv().s[17]++;
        toast({
          title: 'Analyse terminée !',
          description: `${result.foods.length} aliment(s) détecté(s)`,
          variant: 'default'
        });
      } else {
        /* istanbul ignore next */
        cov_4ydnn2zrv().b[0][1]++;
        cov_4ydnn2zrv().s[18]++;
        setState(prev => {
          /* istanbul ignore next */
          cov_4ydnn2zrv().f[4]++;
          cov_4ydnn2zrv().s[19]++;
          return {
            ...prev,
            isAnalyzing: false,
            error:
            /* istanbul ignore next */
            (cov_4ydnn2zrv().b[1][0]++, result.error) ||
            /* istanbul ignore next */
            (cov_4ydnn2zrv().b[1][1]++, 'Erreur lors de l\'analyse')
          };
        });
        /* istanbul ignore next */
        cov_4ydnn2zrv().s[20]++;
        toast({
          title: 'Erreur d\'analyse',
          description:
          /* istanbul ignore next */
          (cov_4ydnn2zrv().b[2][0]++, result.error) ||
          /* istanbul ignore next */
          (cov_4ydnn2zrv().b[2][1]++, 'Impossible d\'analyser l\'image'),
          variant: 'destructive'
        });
      }
    } catch (error) {
      const errorMessage =
      /* istanbul ignore next */
      (cov_4ydnn2zrv().s[21]++, error instanceof Error ?
      /* istanbul ignore next */
      (cov_4ydnn2zrv().b[3][0]++, error.message) :
      /* istanbul ignore next */
      (cov_4ydnn2zrv().b[3][1]++, 'Erreur inconnue'));
      /* istanbul ignore next */
      cov_4ydnn2zrv().s[22]++;
      setState(prev => {
        /* istanbul ignore next */
        cov_4ydnn2zrv().f[5]++;
        cov_4ydnn2zrv().s[23]++;
        return {
          ...prev,
          isAnalyzing: false,
          error: errorMessage
        };
      });
      /* istanbul ignore next */
      cov_4ydnn2zrv().s[24]++;
      toast({
        title: 'Erreur',
        description: errorMessage,
        variant: 'destructive'
      });
    }
  }, [toast]));
  /**
   * Sélectionner un aliment détecté
   */
  const selectFood =
  /* istanbul ignore next */
  (cov_4ydnn2zrv().s[25]++, (0, react_1.useCallback)(food => {
    /* istanbul ignore next */
    cov_4ydnn2zrv().f[6]++;
    cov_4ydnn2zrv().s[26]++;
    setState(prev => {
      /* istanbul ignore next */
      cov_4ydnn2zrv().f[7]++;
      cov_4ydnn2zrv().s[27]++;
      return {
        ...prev,
        selectedFoods: prev.selectedFoods.some(f => {
          /* istanbul ignore next */
          cov_4ydnn2zrv().f[8]++;
          cov_4ydnn2zrv().s[28]++;
          return f.food.id === food.food.id;
        }) ?
        /* istanbul ignore next */
        (cov_4ydnn2zrv().b[4][0]++, prev.selectedFoods) :
        /* istanbul ignore next */
        (cov_4ydnn2zrv().b[4][1]++, [...prev.selectedFoods, food])
      };
    });
  }, []));
  /**
   * Désélectionner un aliment
   */
  const deselectFood =
  /* istanbul ignore next */
  (cov_4ydnn2zrv().s[29]++, (0, react_1.useCallback)(foodId => {
    /* istanbul ignore next */
    cov_4ydnn2zrv().f[9]++;
    cov_4ydnn2zrv().s[30]++;
    setState(prev => {
      /* istanbul ignore next */
      cov_4ydnn2zrv().f[10]++;
      cov_4ydnn2zrv().s[31]++;
      return {
        ...prev,
        selectedFoods: prev.selectedFoods.filter(f => {
          /* istanbul ignore next */
          cov_4ydnn2zrv().f[11]++;
          cov_4ydnn2zrv().s[32]++;
          return f.food.id !== foodId;
        })
      };
    });
  }, []));
  /**
   * Ajuster la quantité d'un aliment sélectionné
   */
  const adjustQuantity =
  /* istanbul ignore next */
  (cov_4ydnn2zrv().s[33]++, (0, react_1.useCallback)((foodId, newQuantity) => {
    /* istanbul ignore next */
    cov_4ydnn2zrv().f[12]++;
    cov_4ydnn2zrv().s[34]++;
    setState(prev => {
      /* istanbul ignore next */
      cov_4ydnn2zrv().f[13]++;
      cov_4ydnn2zrv().s[35]++;
      return {
        ...prev,
        selectedFoods: prev.selectedFoods.map((food, index) => {
          /* istanbul ignore next */
          cov_4ydnn2zrv().f[14]++;
          cov_4ydnn2zrv().s[36]++;
          if (food.food.id === foodId) {
            /* istanbul ignore next */
            cov_4ydnn2zrv().b[5][0]++;
            const factor =
            /* istanbul ignore next */
            (cov_4ydnn2zrv().s[37]++, newQuantity / 100); // Pour 100g
            /* istanbul ignore next */
            cov_4ydnn2zrv().s[38]++;
            return {
              ...food,
              estimated_quantity: newQuantity,
              estimated_calories: food.food.calories_per_100g * factor,
              estimated_protein: food.food.protein_per_100g * factor,
              estimated_carbs: food.food.carbs_per_100g * factor,
              estimated_fat: food.food.fat_per_100g * factor
            };
          } else
          /* istanbul ignore next */
          {
            cov_4ydnn2zrv().b[5][1]++;
          }
          cov_4ydnn2zrv().s[39]++;
          return food;
        })
      };
    });
  }, []));
  /**
   * Confirmer la sélection et retourner les aliments sélectionnés
   */
  const confirmSelection =
  /* istanbul ignore next */
  (cov_4ydnn2zrv().s[40]++, (0, react_1.useCallback)(async () => {
    /* istanbul ignore next */
    cov_4ydnn2zrv().f[15]++;
    cov_4ydnn2zrv().s[41]++;
    if (state.selectedFoods.length === 0) {
      /* istanbul ignore next */
      cov_4ydnn2zrv().b[6][0]++;
      cov_4ydnn2zrv().s[42]++;
      toast({
        title: 'Aucun aliment sélectionné',
        description: 'Veuillez sélectionner au moins un aliment',
        variant: 'destructive'
      });
      /* istanbul ignore next */
      cov_4ydnn2zrv().s[43]++;
      return [];
    } else
    /* istanbul ignore next */
    {
      cov_4ydnn2zrv().b[6][1]++;
    }
    cov_4ydnn2zrv().s[44]++;
    toast({
      title: 'Aliments ajoutés !',
      description: `${state.selectedFoods.length} aliment(s) ajouté(s) à votre journal`,
      variant: 'default'
    });
    /* istanbul ignore next */
    cov_4ydnn2zrv().s[45]++;
    return state.selectedFoods;
  }, [state.selectedFoods, toast]));
  /**
   * Réinitialiser l'état
   */
  const reset =
  /* istanbul ignore next */
  (cov_4ydnn2zrv().s[46]++, (0, react_1.useCallback)(() => {
    /* istanbul ignore next */
    cov_4ydnn2zrv().f[16]++;
    cov_4ydnn2zrv().s[47]++;
    setState({
      isAnalyzing: false,
      analysisResult: null,
      selectedFoods: [],
      error: null
    });
  }, []));
  /**
   * Calculer les totaux nutritionnels des aliments sélectionnés
   */
  const getTotalNutrition =
  /* istanbul ignore next */
  (cov_4ydnn2zrv().s[48]++, (0, react_1.useCallback)(() => {
    /* istanbul ignore next */
    cov_4ydnn2zrv().f[17]++;
    cov_4ydnn2zrv().s[49]++;
    return state.selectedFoods.reduce((totals, food) => {
      /* istanbul ignore next */
      cov_4ydnn2zrv().f[18]++;
      cov_4ydnn2zrv().s[50]++;
      return {
        calories: totals.calories + food.estimated_calories,
        protein: totals.protein + food.estimated_protein,
        carbs: totals.carbs + food.estimated_carbs,
        fat: totals.fat + food.estimated_fat
      };
    }, {
      calories: 0,
      protein: 0,
      carbs: 0,
      fat: 0
    });
  }, [state.selectedFoods]));
  /* istanbul ignore next */
  cov_4ydnn2zrv().s[51]++;
  return {
    state,
    analyzeImage,
    selectFood,
    deselectFood,
    adjustQuantity,
    confirmSelection,
    reset,
    getTotalNutrition
  };
};
/* istanbul ignore next */
cov_4ydnn2zrv().s[52]++;
exports.useFoodPhotoAnalysis = useFoodPhotoAnalysis;
/* istanbul ignore next */
cov_4ydnn2zrv().s[53]++;
exports.default = exports.useFoodPhotoAnalysis;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,