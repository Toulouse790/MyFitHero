{"version":3,"names":["cov_4ydnn2zrv","actualCoverage","s","react_1","require","foodRecognition_1","use_toast_1","useFoodPhotoAnalysis","f","toast","useToast","state","setState","useState","isAnalyzing","analysisResult","selectedFoods","error","analyzeImage","useCallback","imageFile","prev","title","description","result","FoodRecognitionService","success","b","foods","length","variant","errorMessage","Error","message","selectFood","food","some","id","deselectFood","foodId","filter","adjustQuantity","newQuantity","map","index","factor","estimated_quantity","estimated_calories","calories_per_100g","estimated_protein","protein_per_100g","estimated_carbs","carbs_per_100g","estimated_fat","fat_per_100g","confirmSelection","reset","getTotalNutrition","reduce","totals","calories","protein","carbs","fat","exports","default"],"sources":["/workspaces/MyFitHero/src/features/nutrition/hooks/useFoodPhotoAnalysis.ts"],"sourcesContent":["// src/features/nutrition/hooks/useFoodPhotoAnalysis.ts\nimport { useState, useCallback } from 'react';\nimport { FoodRecognitionService, FoodAnalysisResult, RecognizedFood } from '@/features/nutrition/services/foodRecognition';\nimport { useToast } from '@/shared/hooks/use-toast';\n\nexport interface FoodPhotoAnalysisState {\n  isAnalyzing: boolean;\n  analysisResult: FoodAnalysisResult | undefined;\n  selectedFoods: RecognizedFood[];\n  error: string | undefined;\n}\n\nexport interface UseFoodPhotoAnalysisReturn {\n  // État\n  state: FoodPhotoAnalysisState;\n  \n  // Actions\n  analyzeImage: (imageFile: File) => Promise<void>;\n  selectFood: (food: RecognizedFood) => void;\n  deselectFood: (foodId: string) => void;\n  adjustQuantity: (foodId: string, newQuantity: number) => void;\n  confirmSelection: () => Promise<RecognizedFood[]>;\n  reset: () => void;\n  \n  // Utilitaires\n  getTotalNutrition: () => {\n    calories: number;\n    protein: number;\n    carbs: number;\n    fat: number;\n  };\n}\n\nexport const useFoodPhotoAnalysis = (): UseFoodPhotoAnalysisReturn => {\n  const { toast } = useToast();\n  \n  const [state, setState] = useState<FoodPhotoAnalysisState>({\n    isAnalyzing: false,\n    analysisResult: null,\n    selectedFoods: [],\n    error: null\n  });\n\n  /**\n   * Analyser une image pour reconnaître les aliments\n   */\n  const analyzeImage = useCallback(async (imageFile: File) => {\n    setState(prev => ({\n      ...prev,\n      isAnalyzing: true,\n      error: null,\n      analysisResult: null,\n      selectedFoods: []\n    }));\n\n    try {\n      toast({\n        title: 'Analyse en cours...',\n        description: 'Reconnaissance des aliments dans votre photo',\n      });\n\n      const result = await FoodRecognitionService.analyzeImage(imageFile);\n\n      if (result.success) {\n        setState(prev => ({\n          ...prev,\n          isAnalyzing: false,\n          analysisResult: result,\n          selectedFoods: result.foods, // Sélectionner tous les aliments par défaut\n          error: null\n        }));\n\n        toast({\n          title: 'Analyse terminée !',\n          description: `${result.foods.length} aliment(s) détecté(s)`,\n          variant: 'default'\n        });\n      } else {\n        setState(prev => ({\n          ...prev,\n          isAnalyzing: false,\n          error: result.error || 'Erreur lors de l\\'analyse'\n        }));\n\n        toast({\n          title: 'Erreur d\\'analyse',\n          description: result.error || 'Impossible d\\'analyser l\\'image',\n          variant: 'destructive'\n        });\n      }\n    } catch (error: any) {\n      const errorMessage = error instanceof Error ? error.message : 'Erreur inconnue';\n      \n      setState(prev => ({\n        ...prev,\n        isAnalyzing: false,\n        error: errorMessage\n      }));\n\n      toast({\n        title: 'Erreur',\n        description: errorMessage,\n        variant: 'destructive'\n      });\n    }\n  }, [toast]);\n\n  /**\n   * Sélectionner un aliment détecté\n   */\n  const selectFood = useCallback((food: RecognizedFood) => {\n    setState(prev => ({\n      ...prev,\n      selectedFoods: prev.selectedFoods.some(f => f.food.id === food.food.id)\n        ? prev.selectedFoods\n        : [...prev.selectedFoods, food]\n    }));\n  }, []);\n\n  /**\n   * Désélectionner un aliment\n   */\n  const deselectFood = useCallback((foodId: string) => {\n    setState(prev => ({\n      ...prev,\n      selectedFoods: prev.selectedFoods.filter(f => f.food.id !== foodId)\n    }));\n  }, []);\n\n  /**\n   * Ajuster la quantité d'un aliment sélectionné\n   */\n  const adjustQuantity = useCallback((foodId: string, newQuantity: number) => {\n    setState(prev => ({\n      ...prev,\n      selectedFoods: prev.selectedFoods.map((food, index) => {\n        if (food.food.id === foodId) {\n          const factor = newQuantity / 100; // Pour 100g\n          return {\n            ...food,\n            estimated_quantity: newQuantity,\n            estimated_calories: food.food.calories_per_100g * factor,\n            estimated_protein: food.food.protein_per_100g * factor,\n            estimated_carbs: food.food.carbs_per_100g * factor,\n            estimated_fat: food.food.fat_per_100g * factor\n          };\n        }\n        return food;\n      })\n    }));\n  }, []);\n\n  /**\n   * Confirmer la sélection et retourner les aliments sélectionnés\n   */\n  const confirmSelection = useCallback(async (): Promise<RecognizedFood[]> => {\n    if (state.selectedFoods.length === 0) {\n      toast({\n        title: 'Aucun aliment sélectionné',\n        description: 'Veuillez sélectionner au moins un aliment',\n        variant: 'destructive'\n      });\n      return [];\n    }\n\n    toast({\n      title: 'Aliments ajoutés !',\n      description: `${state.selectedFoods.length} aliment(s) ajouté(s) à votre journal`,\n      variant: 'default'\n    });\n\n    return state.selectedFoods;\n  }, [state.selectedFoods, toast]);\n\n  /**\n   * Réinitialiser l'état\n   */\n  const reset = useCallback(() => {\n    setState({\n      isAnalyzing: false,\n      analysisResult: null,\n      selectedFoods: [],\n      error: null\n    });\n  }, []);\n\n  /**\n   * Calculer les totaux nutritionnels des aliments sélectionnés\n   */\n  const getTotalNutrition = useCallback(() => {\n    return state.selectedFoods.reduce(\n      (totals, food) => ({\n        calories: totals.calories + food.estimated_calories,\n        protein: totals.protein + food.estimated_protein,\n        carbs: totals.carbs + food.estimated_carbs,\n        fat: totals.fat + food.estimated_fat\n      }),\n      { calories: 0, protein: 0, carbs: 0, fat: 0 }\n    );\n  }, [state.selectedFoods]);\n\n  return {\n    state,\n    analyzeImage,\n    selectFood,\n    deselectFood,\n    adjustQuantity,\n    confirmSelection,\n    reset,\n    getTotalNutrition\n  };\n};\n\nexport default useFoodPhotoAnalysis;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}