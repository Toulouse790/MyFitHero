{"version":3,"names":["cov_yjsjap97v","actualCoverage","exports","useSports","s","useSportsFallback","use_toast_1","require","react_query_1","react_1","__importDefault","supabase_1","CACHE_TTL","MEMO_KEY","memoryCache","fetchAllSports","f","b","expiry","Date","now","data","cached","sessionStorage","getItem","parsed","JSON","parse","error","supabase","from","select","order","ascending","console","payload","setItem","stringify","mapRow","row","id","name","emoji","icon","undefined","category","positions","isPopular","is_popular","userCount","user_count","SportsService","getSports","rows","map","getPopularSports","limit","filter","r","slice","searchSports","query","length","localRows","toLowerCase","includes","ilike","getSportById","eq","single","suggestSport","sportName","opts","userData","auth","getUser","sport_name","description","sport","suggested_position","locale","user_id","user","insert","clearCache","removeItem","options","queryClient","useQueryClient","toast","useToast","useQuery","queryKey","queryFn","staleTime","gcTime","enabled","sports","isLoading","title","variant","loading","refreshSports","invalidateQueries","state","setState","default","useState","useEffect","then","catch","e"],"sources":["/workspaces/MyFitHero/src/lib/services/sportsService.ts"],"sourcesContent":["// client/src/services/sportsService.ts\nimport { createClient, SupabaseClient } from '@supabase/supabase-js';\nimport { useToast } from '@/shared/hooks/use-toast';\nimport { useQuery, useQueryClient } from '@tanstack/react-query';\nimport React from 'react';\nimport { supabase } from '@/lib/supabase';\n\n/* ------------------------------------------------------------------ */\n/*                            TYPES                                   */\n/* ------------------------------------------------------------------ */\n\nexport interface SportOption {\n  id: string;\n  name: string;\n  emoji?: string;\n  icon?: string;\n  category?: string;\n  description?: string;\n  positions?: string[];\n  isPopular?: boolean;\n  userCount?: number;\n}\n\nexport interface SportRow {\n  id: string;\n  name: string;\n  emoji: string | undefined;\n  icon: string | undefined;\n  category: string | undefined;\n  positions: string[] | undefined;\n  is_popular: boolean | undefined;\n  user_count: number | undefined;\n  updated_at: string;\n}\n\nexport interface SportSuggestionPayload {\n  sport_name: string;\n  suggested_position?: string;\n  locale?: string;\n  user_id?: string;\n}\n\n/* ------------------------------------------------------------------ */\n/*                       CONSTANTES / CACHE                           */\n/* ------------------------------------------------------------------ */\n\nconst CACHE_TTL = 5 * 60_000; // 5 min\nconst MEMO_KEY = 'sports-cache-v1';\n\n/* m√©moire : { data, expiry } */\nlet memoryCache: { data: SportRow[]; expiry: number } | undefined = null;\n\n/* ------------------------------------------------------------------ */\n/*                       FONCTIONS BAS NIVEAU                         */\n/* ------------------------------------------------------------------ */\n\n/** Lecture (et mise en cache) de la table `sports_library` */\nasync function fetchAllSports(): Promise<SportRow[]> {\n  // 1. Cache m√©moire\n  if (memoryCache && memoryCache.expiry > Date.now()) {\n    return memoryCache.data;\n  }\n\n  // 2. Cache sessionStorage (pour F5)\n  const cached = sessionStorage.getItem(MEMO_KEY);\n  if (cached) {\n    const parsed = JSON.parse(cached) as { data: SportRow[]; expiry: number };\n    if (parsed.expiry > Date.now()) {\n      memoryCache = parsed;\n      return parsed.data;\n    }\n  }\n\n  // 3. Requ√™te Supabase\n  const { data, error }: any = await supabase\n    .from('sports_library')\n    .select('id, name, emoji, icon, category, positions, is_popular, user_count, updated_at')\n    .order('name', { ascending: true });\n\n  if (error) {\n    console.error('[sportService] fetchAllSports:', error);\n    throw error;\n  }\n\n  // 4. Cache\n  const payload = { data, expiry: Date.now() + CACHE_TTL };\n  memoryCache = payload;\n  sessionStorage.setItem(MEMO_KEY, JSON.stringify(payload));\n\n  return data as SportRow[];\n}\n\n/** Conversion SQL ‚Üí SportOption (c√¥t√© UI) */\nfunction mapRow(row: SportRow | Partial<SportRow>): SportOption {\n  return {\n    id: row.id || '',\n    name: row.name || '',\n    emoji: row.emoji || 'üèÉ‚Äç‚ôÇÔ∏è',\n    icon: row.icon || undefined,\n    category: row.category || undefined,\n    positions: row.positions || [],\n    isPopular: (row as SportRow).is_popular || false,\n    userCount: (row as SportRow).user_count || 0,\n  };\n}\n\n/* ------------------------------------------------------------------ */\n/*                M√âTHODES PUBLIQUES ‚Äì ACC√àS/SEARCH                    */\n/* ------------------------------------------------------------------ */\n\nexport const SportsService = {\n  /** Tous les sports (avec cache)  */\n  async getSports(): Promise<SportOption[]> {\n    const rows = await fetchAllSports();\n    return rows.map(mapRow);\n  },\n\n  /** Sports populaires */\n  async getPopularSports(limit = 12): Promise<SportOption[]> {\n    const rows = await fetchAllSports();\n    return rows\n      .filter((r: any) => r.is_popular)\n      .slice(0, limit)\n      .map(mapRow);\n  },\n\n  /** Recherche full-text ; retourne max 15 r√©sultats */\n  async searchSports(query: string): Promise<SportOption[]> {\n    if (!query || query.length < 2) return [];\n\n    // Recherche locale d‚Äôabord (perfs)\n    const localRows = (await fetchAllSports()).filter((r: any) =>\n      r.name.toLowerCase().includes(query.toLowerCase())\n    );\n\n    if (localRows.length > 0) return localRows.map(mapRow);\n\n        // Recherche SQL ILIKE\n    const { data, error }: any = await supabase\n      .from('sports_library')\n      .select('id, name, emoji, icon, category, positions')\n      .ilike('name', `%${query}%`)\n      .order('name')\n      .limit(15);\n\n    if (error) {\n      console.error('[sportService] searchSports:', error);\n      return [];\n    }\n    return (data ?? []).map(mapRow);\n  },\n\n  /** D√©tails d'un sport */\n  async getSportById(id: string): Promise<SportOption | null> {\n    const { data, error }: any = await supabase\n      .from('sports_library')\n      .select('id, name, emoji, icon, category, positions')\n      .eq('id', id)\n      .single();\n\n    if (error || !data) {\n      console.error('[sportService] getSportById:', error);\n      return null;\n    }\n    return mapRow(data as SportRow);\n  },\n\n  /** Suggestion utilisateur ‚Üí table `sport_suggestions` */\n  async suggestSport(\n    sportName: string,\n    opts: { suggested_position?: string; locale?: string } = {}\n  ): Promise<boolean> {\n    const { data: userData } = await supabase.auth.getUser();\n    const payload: SportSuggestionPayload = {\n      sport_name: sportName,\n      description: sport.name + \" sport\",\n      suggested_position: opts.suggested_position,\n      locale: opts.locale ?? 'fr',\n      user_id: userData?.user?.id ?? undefined,\n    };\n\n    const { error } = await supabase.from('sport_suggestions').insert(payload);\n\n    if (error) {\n      console.error('[sportService] suggestSport:', error);\n      return false;\n    }\n    return true;\n  },\n\n  /** Invalidation totale du cache */\n  clearCache() {\n    memoryCache = null;\n    sessionStorage.removeItem(MEMO_KEY);\n  },\n};\n\n/* ------------------------------------------------------------------ */\n/*                       HOOKS REACT (React Query)                     */\n/* ------------------------------------------------------------------ */\n\nexport function useSports(options?: { enabled?: boolean }) {\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  const query = useQuery({\n    queryKey: ['sports', 'all'],\n    queryFn: () => SportsService.getSports(),\n    staleTime: CACHE_TTL,\n    gcTime: CACHE_TTL * 2,\n    enabled: options?.enabled ?? true,\n  });\n\n  const { data: sports = [], isLoading, error } = query;\n\n  if (error) {\n    console.error(error);\n    toast({\n      title: 'Erreur',\n      description: 'Impossible de charger la liste des sports',\n      variant: 'destructive',\n    });\n  }\n\n  return {\n    sports,\n    loading: isLoading,\n    error: error ? 'Erreur de chargement' : null,\n    refreshSports: () => {\n      SportsService.clearCache();\n      queryClient.invalidateQueries({ queryKey: ['sports', 'all'] });\n    },\n  };\n}\n\n/* ------------------------------------------------------------------ */\n/*          HOOK L√âGER Fallback (si React Query n‚Äôest pas utilis√©)     */\n/* ------------------------------------------------------------------ */\n\nexport function useSportsFallback() {\n  const { toast } = useToast();\n  const [state, setState] = React.useState<{\n    sports: SportOption[];\n    loading: boolean;\n    error: string | undefined;\n  }>({\n    sports: [],\n    loading: true,\n    error: null,\n  });\n\n  React.useEffect(() => {\n    SportsService.getSports()\n      .then(s => setState({ sports: s, loading: false, error: null }))\n      .catch(e => {\n        console.error(e);\n        toast({\n          title: 'Erreur',\n          description: 'Impossible de charger les sports',\n          variant: 'destructive',\n        });\n        setState({\n          sports: [],\n          loading: false,\n          error: 'Erreur de chargement',\n        });\n      });\n  }, [toast]);\n\n  return { ...state, refreshSports: SportsService.clearCache };\n}\n"],"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","ignoreList":[]}