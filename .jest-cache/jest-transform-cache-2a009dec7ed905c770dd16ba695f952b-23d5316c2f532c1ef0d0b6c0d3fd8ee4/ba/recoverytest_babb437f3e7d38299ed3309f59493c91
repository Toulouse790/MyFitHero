e332e1915a72d4684b530d26597dc479
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
/**
 * TESTS UNITAIRES - MODULE RECOVERY
 * Tests complets pour la récupération et régénération
 */
const globals_1 = require("@jest/globals");
// Mock des services
globals_1.jest.mock('@/features/recovery/services/recoveryService');
globals_1.jest.mock('@/lib/supabase');
const react_1 = require("@testing-library/react");
const RecoveryDashboard_1 = require("@/features/recovery/components/RecoveryDashboard");
const RecoveryPlan_1 = require("@/features/recovery/components/RecoveryPlan");
const StretchingSession_1 = require("@/features/recovery/components/StretchingSession");
const RecoveryMetrics_1 = require("@/features/recovery/components/RecoveryMetrics");
const recoveryService_1 = require("@/features/recovery/services/recoveryService");
const recoveryStore_1 = require("@/features/recovery/store/recoveryStore");
const mocks_1 = require("@/test/mocks");
(0, globals_1.describe)('Recovery Module - Tests Complets', () => {
    (0, globals_1.beforeEach)(() => {
        globals_1.jest.clearAllMocks();
        recoveryStore_1.recoveryStore.getState().reset();
    });
    (0, globals_1.afterEach)(() => {
        globals_1.jest.restoreAllMocks();
    });
    (0, globals_1.describe)('RecoveryDashboard Component', () => {
        (0, globals_1.it)('doit afficher le tableau de bord de récupération', async () => {
            const mockRecoveryStats = {
                overallRecoveryScore: 85,
                muscleRecoveryStatus: {
                    legs: 90,
                    arms: 80,
                    core: 75,
                    back: 88
                },
                recommendedActions: [
                    { type: 'stretch', target: 'core', duration: 15 },
                    { type: 'rest', target: 'arms', duration: 30 }
                ]
            };
            recoveryService_1.recoveryService.getRecoveryStats.mockResolvedValue(mockRecoveryStats);
            (0, react_1.render)((0, jsx_runtime_1.jsx)(RecoveryDashboard_1.RecoveryDashboard, { userId: mocks_1.mockUser.id }));
            await (0, react_1.waitFor)(() => {
                (0, globals_1.expect)(react_1.screen.getByText(/score de récupération/i)).toBeInTheDocument();
            });
            (0, globals_1.expect)(react_1.screen.getByText('85')).toBeInTheDocument(); // Score global
            (0, globals_1.expect)(react_1.screen.getByText(/jambes.*90%/i)).toBeInTheDocument();
            (0, globals_1.expect)(react_1.screen.getByText(/étirements recommandés/i)).toBeInTheDocument();
        });
        (0, globals_1.it)('doit gérer les erreurs de chargement gracieusement', async () => {
            recoveryService_1.recoveryService.getRecoveryStats.mockRejectedValue(new Error('Erreur réseau'));
            (0, react_1.render)((0, jsx_runtime_1.jsx)(RecoveryDashboard_1.RecoveryDashboard, { userId: mocks_1.mockUser.id }));
            await (0, react_1.waitFor)(() => {
                (0, globals_1.expect)(react_1.screen.getByText(/erreur de chargement/i)).toBeInTheDocument();
            });
        });
        (0, globals_1.it)('doit mettre à jour les données en temps réel', async () => {
            const initialStats = { overallRecoveryScore: 75 };
            const updatedStats = { overallRecoveryScore: 80 };
            recoveryService_1.recoveryService.getRecoveryStats
                .mockResolvedValueOnce(initialStats)
                .mockResolvedValueOnce(updatedStats);
            (0, react_1.render)((0, jsx_runtime_1.jsx)(RecoveryDashboard_1.RecoveryDashboard, { userId: mocks_1.mockUser.id }));
            await (0, react_1.waitFor)(() => {
                (0, globals_1.expect)(react_1.screen.getByText('75')).toBeInTheDocument();
            });
            // Simulation d'une mise à jour
            react_1.fireEvent.click(react_1.screen.getByText(/actualiser/i));
            await (0, react_1.waitFor)(() => {
                (0, globals_1.expect)(react_1.screen.getByText('80')).toBeInTheDocument();
            });
        });
    });
    (0, globals_1.describe)('RecoveryPlan Component', () => {
        (0, globals_1.it)('doit générer un plan de récupération personnalisé', async () => {
            const mockPlan = {
                id: 'plan-123',
                duration: 14, // jours
                phases: [
                    {
                        name: 'Récupération Active',
                        duration: 7,
                        activities: [
                            { type: 'stretching', duration: 20, intensity: 'low' },
                            { type: 'massage', duration: 15, intensity: 'medium' }
                        ]
                    },
                    {
                        name: 'Récupération Intensive',
                        duration: 7,
                        activities: [
                            { type: 'yoga', duration: 30, intensity: 'medium' },
                            { type: 'meditation', duration: 10, intensity: 'low' }
                        ]
                    }
                ]
            };
            recoveryService_1.recoveryService.generateRecoveryPlan.mockResolvedValue(mockPlan);
            (0, react_1.render)((0, jsx_runtime_1.jsx)(RecoveryPlan_1.RecoveryPlan, { userId: mocks_1.mockUser.id, workoutHistory: mocks_1.mockRecoveryData.workouts }));
            await (0, react_1.waitFor)(() => {
                (0, globals_1.expect)(react_1.screen.getByText(/plan de récupération/i)).toBeInTheDocument();
            });
            (0, globals_1.expect)(react_1.screen.getByText('Récupération Active')).toBeInTheDocument();
            (0, globals_1.expect)(react_1.screen.getByText('Récupération Intensive')).toBeInTheDocument();
            (0, globals_1.expect)(react_1.screen.getByText(/14 jours/i)).toBeInTheDocument();
        });
        (0, globals_1.it)('doit permettre de personnaliser le plan', async () => {
            const mockPlan = { id: 'plan-123', phases: [] };
            recoveryService_1.recoveryService.generateRecoveryPlan.mockResolvedValue(mockPlan);
            recoveryService_1.recoveryService.customizeRecoveryPlan.mockResolvedValue({
                ...mockPlan,
                customized: true
            });
            (0, react_1.render)((0, jsx_runtime_1.jsx)(RecoveryPlan_1.RecoveryPlan, { userId: mocks_1.mockUser.id, workoutHistory: [] }));
            await (0, react_1.waitFor)(() => {
                (0, globals_1.expect)(react_1.screen.getByText(/personnaliser/i)).toBeInTheDocument();
            });
            react_1.fireEvent.click(react_1.screen.getByText(/personnaliser/i));
            await (0, react_1.waitFor)(() => {
                (0, globals_1.expect)(recoveryService_1.recoveryService.customizeRecoveryPlan).toHaveBeenCalledWith(mockPlan.id, globals_1.expect.any(Object));
            });
        });
    });
    (0, globals_1.describe)('StretchingSession Component', () => {
        (0, globals_1.it)('doit guider une session d\'étirements', async () => {
            const mockSession = {
                id: 'stretch-session-123',
                exercises: [
                    {
                        name: 'Étirement des ischio-jambiers',
                        duration: 30,
                        instructions: 'Penchez-vous en avant lentement',
                        targetMuscles: ['hamstrings']
                    },
                    {
                        name: 'Étirement des quadriceps',
                        duration: 30,
                        instructions: 'Pliez votre jambe vers l\'arrière',
                        targetMuscles: ['quadriceps']
                    }
                ],
                totalDuration: 300 // 5 minutes
            };
            recoveryService_1.recoveryService.getStretchingSession.mockResolvedValue(mockSession);
            (0, react_1.render)((0, jsx_runtime_1.jsx)(StretchingSession_1.StretchingSession, { sessionId: "stretch-session-123" }));
            await (0, react_1.waitFor)(() => {
                (0, globals_1.expect)(react_1.screen.getByText(/étirement des ischio-jambiers/i)).toBeInTheDocument();
            });
            (0, globals_1.expect)(react_1.screen.getByText(/30 secondes/i)).toBeInTheDocument();
            (0, globals_1.expect)(react_1.screen.getByText(/penchez-vous en avant/i)).toBeInTheDocument();
        });
        (0, globals_1.it)('doit suivre le progrès de la session', async () => {
            const mockSession = {
                exercises: [
                    { name: 'Exercise 1', duration: 30 },
                    { name: 'Exercise 2', duration: 30 }
                ]
            };
            recoveryService_1.recoveryService.getStretchingSession.mockResolvedValue(mockSession);
            (0, react_1.render)((0, jsx_runtime_1.jsx)(StretchingSession_1.StretchingSession, { sessionId: "test-session" }));
            await (0, react_1.waitFor)(() => {
                (0, globals_1.expect)(react_1.screen.getByText(/exercise 1/i)).toBeInTheDocument();
            });
            // Démarrer la session
            react_1.fireEvent.click(react_1.screen.getByText(/commencer/i));
            (0, globals_1.expect)(react_1.screen.getByText(/en cours/i)).toBeInTheDocument();
            // Passer à l'exercice suivant
            react_1.fireEvent.click(react_1.screen.getByText(/suivant/i));
            (0, globals_1.expect)(react_1.screen.getByText(/exercise 2/i)).toBeInTheDocument();
        });
        (0, globals_1.it)('doit enregistrer la complétion de la session', async () => {
            const mockSession = {
                exercises: [{ name: 'Test Exercise', duration: 10 }]
            };
            recoveryService_1.recoveryService.getStretchingSession.mockResolvedValue(mockSession);
            recoveryService_1.recoveryService.recordSessionCompletion.mockResolvedValue({});
            (0, react_1.render)((0, jsx_runtime_1.jsx)(StretchingSession_1.StretchingSession, { sessionId: "test-session" }));
            await (0, react_1.waitFor)(() => {
                react_1.fireEvent.click(react_1.screen.getByText(/commencer/i));
            });
            // Terminer la session
            react_1.fireEvent.click(react_1.screen.getByText(/terminer/i));
            await (0, react_1.waitFor)(() => {
                (0, globals_1.expect)(recoveryService_1.recoveryService.recordSessionCompletion).toHaveBeenCalledWith('test-session', globals_1.expect.any(Object));
            });
        });
    });
    (0, globals_1.describe)('RecoveryMetrics Component', () => {
        (0, globals_1.it)('doit afficher les métriques de récupération', () => {
            const mockMetrics = {
                heartRateVariability: 42,
                sleepQuality: 85,
                muscleStiffness: 25,
                energyLevel: 80,
                stressLevel: 30
            };
            (0, react_1.render)((0, jsx_runtime_1.jsx)(RecoveryMetrics_1.RecoveryMetrics, { metrics: mockMetrics }));
            (0, globals_1.expect)(react_1.screen.getByText(/variabilité cardiaque/i)).toBeInTheDocument();
            (0, globals_1.expect)(react_1.screen.getByText('42')).toBeInTheDocument();
            (0, globals_1.expect)(react_1.screen.getByText(/qualité du sommeil/i)).toBeInTheDocument();
            (0, globals_1.expect)(react_1.screen.getByText('85%')).toBeInTheDocument();
        });
        (0, globals_1.it)('doit calculer le score de récupération global', () => {
            const mockMetrics = {
                heartRateVariability: 45,
                sleepQuality: 90,
                muscleStiffness: 15,
                energyLevel: 85,
                stressLevel: 20
            };
            (0, react_1.render)((0, jsx_runtime_1.jsx)(RecoveryMetrics_1.RecoveryMetrics, { metrics: mockMetrics }));
            // Score calculé basé sur les métriques
            const expectedScore = Math.round((mockMetrics.heartRateVariability +
                mockMetrics.sleepQuality +
                (100 - mockMetrics.muscleStiffness) +
                mockMetrics.energyLevel +
                (100 - mockMetrics.stressLevel)) / 5);
            (0, globals_1.expect)(react_1.screen.getByText(expectedScore.toString())).toBeInTheDocument();
        });
    });
    (0, globals_1.describe)('Recovery Service', () => {
        (0, globals_1.it)('doit calculer le score de récupération avec précision', () => {
            const recoveryData = {
                heartRateVariability: 40,
                sleepHours: 7.5,
                sleepQuality: 80,
                workoutIntensityLast24h: 75,
                muscleStiffnessRating: 30
            };
            const score = recoveryService_1.recoveryService.calculateRecoveryScore(recoveryData);
            (0, globals_1.expect)(score).toBeGreaterThanOrEqual(0);
            (0, globals_1.expect)(score).toBeLessThanOrEqual(100);
            (0, globals_1.expect)(typeof score).toBe('number');
        });
        (0, globals_1.it)('doit recommander des actions de récupération', () => {
            const lowRecoveryData = {
                overallScore: 45,
                muscleStiffness: 80,
                energyLevel: 30,
                sleepQuality: 50
            };
            const recommendations = recoveryService_1.recoveryService.getRecoveryRecommendations(lowRecoveryData);
            (0, globals_1.expect)(recommendations).toContain(globals_1.expect.objectContaining({
                type: globals_1.expect.stringMatching(/stretch|rest|sleep/i)
            }));
            (0, globals_1.expect)(recommendations.length).toBeGreaterThan(0);
        });
        (0, globals_1.it)('doit optimiser les plans de récupération', () => {
            const userProfile = {
                fitnessLevel: 'intermediate',
                availableTime: 30, // minutes par jour
                preferences: ['stretching', 'yoga'],
                injuries: ['lower_back']
            };
            const plan = recoveryService_1.recoveryService.optimizeRecoveryPlan(userProfile);
            (0, globals_1.expect)(plan.phases).toBeDefined();
            (0, globals_1.expect)(plan.phases.length).toBeGreaterThan(0);
            // Vérifier que les préférences sont prises en compte
            const hasPreferredActivities = plan.phases.some(phase => phase.activities.some(activity => userProfile.preferences.includes(activity.type)));
            (0, globals_1.expect)(hasPreferredActivities).toBe(true);
        });
    });
    (0, globals_1.describe)('Recovery Store', () => {
        (0, globals_1.it)('doit gérer l\'état de récupération', () => {
            const { getState, setState } = recoveryStore_1.recoveryStore;
            setState({
                currentScore: 85,
                isLoading: false,
                activeSession: 'session-123'
            });
            const state = getState();
            (0, globals_1.expect)(state.currentScore).toBe(85);
            (0, globals_1.expect)(state.isLoading).toBe(false);
            (0, globals_1.expect)(state.activeSession).toBe('session-123');
        });
        (0, globals_1.it)('doit mettre à jour les métriques de récupération', () => {
            const newMetrics = {
                heartRateVariability: 50,
                sleepQuality: 90,
                muscleStiffness: 20
            };
            recoveryStore_1.recoveryStore.getState().updateMetrics(newMetrics);
            const state = recoveryStore_1.recoveryStore.getState();
            (0, globals_1.expect)(state.metrics).toEqual(globals_1.expect.objectContaining(newMetrics));
        });
    });
    (0, globals_1.describe)('Intégration Recovery-Workout', () => {
        (0, globals_1.it)('doit adapter les recommandations selon l\'historique d\'entraînement', () => {
            const recentWorkouts = [
                { date: '2024-01-15', type: 'strength', intensity: 85, duration: 60 },
                { date: '2024-01-14', type: 'cardio', intensity: 70, duration: 45 },
                { date: '2024-01-13', type: 'strength', intensity: 90, duration: 75 }
            ];
            const recommendations = recoveryService_1.recoveryService.getWorkoutBasedRecommendations(recentWorkouts);
            (0, globals_1.expect)(recommendations).toContain(globals_1.expect.objectContaining({
                reason: globals_1.expect.stringContaining('intense')
            }));
        });
        (0, globals_1.it)('doit synchroniser les données de récupération avec les plans d\'entraînement', async () => {
            const recoveryScore = 65; // Score moyen
            recoveryService_1.recoveryService.syncWithWorkoutPlanning.mockResolvedValue({
                adjustedIntensity: 'moderate',
                recommendedRestDays: 1,
                modifiedExercises: ['reduced_weight_training']
            });
            const syncResult = await recoveryService_1.recoveryService.syncWithWorkoutPlanning(recoveryScore);
            (0, globals_1.expect)(syncResult.adjustedIntensity).toBe('moderate');
            (0, globals_1.expect)(syncResult.recommendedRestDays).toBe(1);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL3dvcmtzcGFjZXMvTXlGaXRIZXJvL3NyYy9fX3Rlc3RzX18vdW5pdC9yZWNvdmVyeS50ZXN0LnRzeCIsIm1hcHBpbmdzIjoiOzs7QUFBQTs7O0dBR0c7QUFFSCwyQ0FBa0Y7QUFVbEYsb0JBQW9CO0FBQ3BCLGNBQUksQ0FBQyxJQUFJLENBQUMsOENBQThDLENBQUMsQ0FBQztBQUMxRCxjQUFJLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUM7QUFYNUIsa0RBQTRFO0FBQzVFLHdGQUFxRjtBQUNyRiw4RUFBMkU7QUFDM0Usd0ZBQXFGO0FBQ3JGLG9GQUFpRjtBQUNqRixrRkFBK0U7QUFDL0UsMkVBQXdFO0FBQ3hFLHdDQUEwRDtBQU0xRCxJQUFBLGtCQUFRLEVBQUMsa0NBQWtDLEVBQUUsR0FBRyxFQUFFO0lBQ2hELElBQUEsb0JBQVUsRUFBQyxHQUFHLEVBQUU7UUFDZCxjQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7UUFDckIsNkJBQWEsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUNuQyxDQUFDLENBQUMsQ0FBQztJQUVILElBQUEsbUJBQVMsRUFBQyxHQUFHLEVBQUU7UUFDYixjQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7SUFDekIsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFBLGtCQUFRLEVBQUMsNkJBQTZCLEVBQUUsR0FBRyxFQUFFO1FBQzNDLElBQUEsWUFBRSxFQUFDLGtEQUFrRCxFQUFFLEtBQUssSUFBSSxFQUFFO1lBQ2hFLE1BQU0saUJBQWlCLEdBQUc7Z0JBQ3hCLG9CQUFvQixFQUFFLEVBQUU7Z0JBQ3hCLG9CQUFvQixFQUFFO29CQUNwQixJQUFJLEVBQUUsRUFBRTtvQkFDUixJQUFJLEVBQUUsRUFBRTtvQkFDUixJQUFJLEVBQUUsRUFBRTtvQkFDUixJQUFJLEVBQUUsRUFBRTtpQkFDVDtnQkFDRCxrQkFBa0IsRUFBRTtvQkFDbEIsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLEVBQUUs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QyxDQUFDO1lBRUgsTUFBTSxVQUFVLEdBQUcsTUFBTSxpQ0FBZSxDQUFDLHVCQUF1QixDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBRWhGLElBQUEsZ0JBQU0sRUFBQyxVQUFVLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7WUFDdEQsSUFBQSxnQkFBTSxFQUFDLFVBQVUsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNqRCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL3dvcmtzcGFjZXMvTXlGaXRIZXJvL3NyYy9fX3Rlc3RzX18vdW5pdC9yZWNvdmVyeS50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRFU1RTIFVOSVRBSVJFUyAtIE1PRFVMRSBSRUNPVkVSWVxuICogVGVzdHMgY29tcGxldHMgcG91ciBsYSByw6ljdXDDqXJhdGlvbiBldCByw6lnw6luw6lyYXRpb25cbiAqL1xuXG5pbXBvcnQgeyBkZXNjcmliZSwgaXQsIGV4cGVjdCwgYmVmb3JlRWFjaCwgYWZ0ZXJFYWNoLCBqZXN0IH0gZnJvbSAnQGplc3QvZ2xvYmFscyc7XG5pbXBvcnQgeyByZW5kZXIsIHNjcmVlbiwgZmlyZUV2ZW50LCB3YWl0Rm9yIH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdCc7XG5pbXBvcnQgeyBSZWNvdmVyeURhc2hib2FyZCB9IGZyb20gJ0AvZmVhdHVyZXMvcmVjb3ZlcnkvY29tcG9uZW50cy9SZWNvdmVyeURhc2hib2FyZCc7XG5pbXBvcnQgeyBSZWNvdmVyeVBsYW4gfSBmcm9tICdAL2ZlYXR1cmVzL3JlY292ZXJ5L2NvbXBvbmVudHMvUmVjb3ZlcnlQbGFuJztcbmltcG9ydCB7IFN0cmV0Y2hpbmdTZXNzaW9uIH0gZnJvbSAnQC9mZWF0dXJlcy9yZWNvdmVyeS9jb21wb25lbnRzL1N0cmV0Y2hpbmdTZXNzaW9uJztcbmltcG9ydCB7IFJlY292ZXJ5TWV0cmljcyB9IGZyb20gJ0AvZmVhdHVyZXMvcmVjb3ZlcnkvY29tcG9uZW50cy9SZWNvdmVyeU1ldHJpY3MnO1xuaW1wb3J0IHsgcmVjb3ZlcnlTZXJ2aWNlIH0gZnJvbSAnQC9mZWF0dXJlcy9yZWNvdmVyeS9zZXJ2aWNlcy9yZWNvdmVyeVNlcnZpY2UnO1xuaW1wb3J0IHsgcmVjb3ZlcnlTdG9yZSB9IGZyb20gJ0AvZmVhdHVyZXMvcmVjb3Zlcnkvc3RvcmUvcmVjb3ZlcnlTdG9yZSc7XG5pbXBvcnQgeyBtb2NrVXNlciwgbW9ja1JlY292ZXJ5RGF0YSB9IGZyb20gJ0AvdGVzdC9tb2Nrcyc7XG5cbi8vIE1vY2sgZGVzIHNlcnZpY2VzXG5qZXN0Lm1vY2soJ0AvZmVhdHVyZXMvcmVjb3Zlcnkvc2VydmljZXMvcmVjb3ZlcnlTZXJ2aWNlJyk7XG5qZXN0Lm1vY2soJ0AvbGliL3N1cGFiYXNlJyk7XG5cbmRlc2NyaWJlKCdSZWNvdmVyeSBNb2R1bGUgLSBUZXN0cyBDb21wbGV0cycsICgpID0+IHtcbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgamVzdC5jbGVhckFsbE1vY2tzKCk7XG4gICAgcmVjb3ZlcnlTdG9yZS5nZXRTdGF0ZSgpLnJlc2V0KCk7XG4gIH0pO1xuXG4gIGFmdGVyRWFjaCgoKSA9PiB7XG4gICAgamVzdC5yZXN0b3JlQWxsTW9ja3MoKTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ1JlY292ZXJ5RGFzaGJvYXJkIENvbXBvbmVudCcsICgpID0+IHtcbiAgICBpdCgnZG9pdCBhZmZpY2hlciBsZSB0YWJsZWF1IGRlIGJvcmQgZGUgcsOpY3Vww6lyYXRpb24nLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBtb2NrUmVjb3ZlcnlTdGF0cyA9IHtcbiAgICAgICAgb3ZlcmFsbFJlY292ZXJ5U2NvcmU6IDg1LFxuICAgICAgICBtdXNjbGVSZWNvdmVyeVN0YXR1czoge1xuICAgICAgICAgIGxlZ3M6IDkwLFxuICAgICAgICAgIGFybXM6IDgwLFxuICAgICAgICAgIGNvcmU6IDc1LFxuICAgICAgICAgIGJhY2s6IDg4XG4gICAgICAgIH0sXG4gICAgICAgIHJlY29tbWVuZGVkQWN0aW9uczogW1xuICAgICAgICAgIHsgdHlwZTogJ3N0cmV0Y2gnLCB0YXJnZXQ6ICdjb3JlJywgZHVyYXRpb246IDE1IH0sXG4gICAgICAgICAgeyB0eXBlOiAncmVzdCcsIHRhcmdldDogJ2FybXMnLCBkdXJhdGlvbjogMzAgfVxuICAgICAgICBdXG4gICAgICB9O1xuXG4gICAgICAocmVjb3ZlcnlTZXJ2aWNlLmdldFJlY292ZXJ5U3RhdHMgYXMgamVzdC5Nb2NrKS5tb2NrUmVzb2x2ZWRWYWx1ZShtb2NrUmVjb3ZlcnlTdGF0cyk7XG5cbiAgICAgIHJlbmRlcig8UmVjb3ZlcnlEYXNoYm9hcmQgdXNlcklkPXttb2NrVXNlci5pZH0gLz4pO1xuXG4gICAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoL3Njb3JlIGRlIHLDqWN1cMOpcmF0aW9uL2kpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgICAgfSk7XG5cbiAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCc4NScpKS50b0JlSW5UaGVEb2N1bWVudCgpOyAvLyBTY29yZSBnbG9iYWxcbiAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KC9qYW1iZXMuKjkwJS9pKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KC/DqXRpcmVtZW50cyByZWNvbW1hbmTDqXMvaSkpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgfSk7XG5cbiAgICBpdCgnZG9pdCBnw6lyZXIgbGVzIGVycmV1cnMgZGUgY2hhcmdlbWVudCBncmFjaWV1c2VtZW50JywgYXN5bmMgKCkgPT4ge1xuICAgICAgKHJlY292ZXJ5U2VydmljZS5nZXRSZWNvdmVyeVN0YXRzIGFzIGplc3QuTW9jaykubW9ja1JlamVjdGVkVmFsdWUoXG4gICAgICAgIG5ldyBFcnJvcignRXJyZXVyIHLDqXNlYXUnKVxuICAgICAgKTtcblxuICAgICAgcmVuZGVyKDxSZWNvdmVyeURhc2hib2FyZCB1c2VySWQ9e21vY2tVc2VyLmlkfSAvPik7XG5cbiAgICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgvZXJyZXVyIGRlIGNoYXJnZW1lbnQvaSkpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGl0KCdkb2l0IG1ldHRyZSDDoCBqb3VyIGxlcyBkb25uw6llcyBlbiB0ZW1wcyByw6llbCcsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGluaXRpYWxTdGF0cyA9IHsgb3ZlcmFsbFJlY292ZXJ5U2NvcmU6IDc1IH07XG4gICAgICBjb25zdCB1cGRhdGVkU3RhdHMgPSB7IG92ZXJhbGxSZWNvdmVyeVNjb3JlOiA4MCB9O1xuXG4gICAgICAocmVjb3ZlcnlTZXJ2aWNlLmdldFJlY292ZXJ5U3RhdHMgYXMgamVzdC5Nb2NrKVxuICAgICAgICAubW9ja1Jlc29sdmVkVmFsdWVPbmNlKGluaXRpYWxTdGF0cylcbiAgICAgICAgLm1vY2tSZXNvbHZlZFZhbHVlT25jZSh1cGRhdGVkU3RhdHMpO1xuXG4gICAgICByZW5kZXIoPFJlY292ZXJ5RGFzaGJvYXJkIHVzZXJJZD17bW9ja1VzZXIuaWR9IC8+KTtcblxuICAgICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG4gICAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCc3NScpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIFNpbXVsYXRpb24gZCd1bmUgbWlzZSDDoCBqb3VyXG4gICAgICBmaXJlRXZlbnQuY2xpY2soc2NyZWVuLmdldEJ5VGV4dCgvYWN0dWFsaXNlci9pKSk7XG5cbiAgICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgnODAnKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnUmVjb3ZlcnlQbGFuIENvbXBvbmVudCcsICgpID0+IHtcbiAgICBpdCgnZG9pdCBnw6luw6lyZXIgdW4gcGxhbiBkZSByw6ljdXDDqXJhdGlvbiBwZXJzb25uYWxpc8OpJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgbW9ja1BsYW4gPSB7XG4gICAgICAgIGlkOiAncGxhbi0xMjMnLFxuICAgICAgICBkdXJhdGlvbjogMTQsIC8vIGpvdXJzXG4gICAgICAgIHBoYXNlczogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIG5hbWU6ICdSw6ljdXDDqXJhdGlvbiBBY3RpdmUnLFxuICAgICAgICAgICAgZHVyYXRpb246IDcsXG4gICAgICAgICAgICBhY3Rpdml0aWVzOiBbXG4gICAgICAgICAgICAgIHsgdHlwZTogJ3N0cmV0Y2hpbmcnLCBkdXJhdGlvbjogMjAsIGludGVuc2l0eTogJ2xvdycgfSxcbiAgICAgICAgICAgICAgeyB0eXBlOiAnbWFzc2FnZScsIGR1cmF0aW9uOiAxNSwgaW50ZW5zaXR5OiAnbWVkaXVtJyB9XG4gICAgICAgICAgICBdXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBuYW1lOiAnUsOpY3Vww6lyYXRpb24gSW50ZW5zaXZlJyxcbiAgICAgICAgICAgIGR1cmF0aW9uOiA3LFxuICAgICAgICAgICAgYWN0aXZpdGllczogW1xuICAgICAgICAgICAgICB7IHR5cGU6ICd5b2dhJywgZHVyYXRpb246IDMwLCBpbnRlbnNpdHk6ICdtZWRpdW0nIH0sXG4gICAgICAgICAgICAgIHsgdHlwZTogJ21lZGl0YXRpb24nLCBkdXJhdGlvbjogMTAsIGludGVuc2l0eTogJ2xvdycgfVxuICAgICAgICAgICAgXVxuICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgICAgfTtcblxuICAgICAgKHJlY292ZXJ5U2VydmljZS5nZW5lcmF0ZVJlY292ZXJ5UGxhbiBhcyBqZXN0Lk1vY2spLm1vY2tSZXNvbHZlZFZhbHVlKG1vY2tQbGFuKTtcblxuICAgICAgcmVuZGVyKDxSZWNvdmVyeVBsYW4gdXNlcklkPXttb2NrVXNlci5pZH0gd29ya291dEhpc3Rvcnk9e21vY2tSZWNvdmVyeURhdGEud29ya291dHN9IC8+KTtcblxuICAgICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG4gICAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KC9wbGFuIGRlIHLDqWN1cMOpcmF0aW9uL2kpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgICAgfSk7XG5cbiAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCdSw6ljdXDDqXJhdGlvbiBBY3RpdmUnKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCdSw6ljdXDDqXJhdGlvbiBJbnRlbnNpdmUnKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KC8xNCBqb3Vycy9pKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICB9KTtcblxuICAgIGl0KCdkb2l0IHBlcm1ldHRyZSBkZSBwZXJzb25uYWxpc2VyIGxlIHBsYW4nLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBtb2NrUGxhbiA9IHsgaWQ6ICdwbGFuLTEyMycsIHBoYXNlczogW10gfTtcbiAgICAgIChyZWNvdmVyeVNlcnZpY2UuZ2VuZXJhdGVSZWNvdmVyeVBsYW4gYXMgamVzdC5Nb2NrKS5tb2NrUmVzb2x2ZWRWYWx1ZShtb2NrUGxhbik7XG4gICAgICAocmVjb3ZlcnlTZXJ2aWNlLmN1c3RvbWl6ZVJlY292ZXJ5UGxhbiBhcyBqZXN0Lk1vY2spLm1vY2tSZXNvbHZlZFZhbHVlKHtcbiAgICAgICAgLi4ubW9ja1BsYW4sXG4gICAgICAgIGN1c3RvbWl6ZWQ6IHRydWVcbiAgICAgIH0pO1xuXG4gICAgICByZW5kZXIoPFJlY292ZXJ5UGxhbiB1c2VySWQ9e21vY2tVc2VyLmlkfSB3b3Jrb3V0SGlzdG9yeT17W119IC8+KTtcblxuICAgICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG4gICAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KC9wZXJzb25uYWxpc2VyL2kpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgICAgfSk7XG5cbiAgICAgIGZpcmVFdmVudC5jbGljayhzY3JlZW4uZ2V0QnlUZXh0KC9wZXJzb25uYWxpc2VyL2kpKTtcblxuICAgICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG4gICAgICAgIGV4cGVjdChyZWNvdmVyeVNlcnZpY2UuY3VzdG9taXplUmVjb3ZlcnlQbGFuKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcbiAgICAgICAgICBtb2NrUGxhbi5pZCxcbiAgICAgICAgICBleHBlY3QuYW55KE9iamVjdClcbiAgICAgICAgKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnU3RyZXRjaGluZ1Nlc3Npb24gQ29tcG9uZW50JywgKCkgPT4ge1xuICAgIGl0KCdkb2l0IGd1aWRlciB1bmUgc2Vzc2lvbiBkXFwnw6l0aXJlbWVudHMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBtb2NrU2Vzc2lvbiA9IHtcbiAgICAgICAgaWQ6ICdzdHJldGNoLXNlc3Npb24tMTIzJyxcbiAgICAgICAgZXhlcmNpc2VzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgbmFtZTogJ8OJdGlyZW1lbnQgZGVzIGlzY2hpby1qYW1iaWVycycsXG4gICAgICAgICAgICBkdXJhdGlvbjogMzAsXG4gICAgICAgICAgICBpbnN0cnVjdGlvbnM6ICdQZW5jaGV6LXZvdXMgZW4gYXZhbnQgbGVudGVtZW50JyxcbiAgICAgICAgICAgIHRhcmdldE11c2NsZXM6IFsnaGFtc3RyaW5ncyddXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBuYW1lOiAnw4l0aXJlbWVudCBkZXMgcXVhZHJpY2VwcycsXG4gICAgICAgICAgICBkdXJhdGlvbjogMzAsXG4gICAgICAgICAgICBpbnN0cnVjdGlvbnM6ICdQbGlleiB2b3RyZSBqYW1iZSB2ZXJzIGxcXCdhcnJpw6hyZScsXG4gICAgICAgICAgICB0YXJnZXRNdXNjbGVzOiBbJ3F1YWRyaWNlcHMnXVxuICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgdG90YWxEdXJhdGlvbjogMzAwIC8vIDUgbWludXRlc1xuICAgICAgfTtcblxuICAgICAgKHJlY292ZXJ5U2VydmljZS5nZXRTdHJldGNoaW5nU2Vzc2lvbiBhcyBqZXN0Lk1vY2spLm1vY2tSZXNvbHZlZFZhbHVlKG1vY2tTZXNzaW9uKTtcblxuICAgICAgcmVuZGVyKDxTdHJldGNoaW5nU2Vzc2lvbiBzZXNzaW9uSWQ9XCJzdHJldGNoLXNlc3Npb24tMTIzXCIgLz4pO1xuXG4gICAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoL8OpdGlyZW1lbnQgZGVzIGlzY2hpby1qYW1iaWVycy9pKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICAgIH0pO1xuXG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgvMzAgc2Vjb25kZXMvaSkpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgvcGVuY2hlei12b3VzIGVuIGF2YW50L2kpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgIH0pO1xuXG4gICAgaXQoJ2RvaXQgc3VpdnJlIGxlIHByb2dyw6hzIGRlIGxhIHNlc3Npb24nLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBtb2NrU2Vzc2lvbiA9IHtcbiAgICAgICAgZXhlcmNpc2VzOiBbXG4gICAgICAgICAgeyBuYW1lOiAnRXhlcmNpc2UgMScsIGR1cmF0aW9uOiAzMCB9LFxuICAgICAgICAgIHsgbmFtZTogJ0V4ZXJjaXNlIDInLCBkdXJhdGlvbjogMzAgfVxuICAgICAgICBdXG4gICAgICB9O1xuXG4gICAgICAocmVjb3ZlcnlTZXJ2aWNlLmdldFN0cmV0Y2hpbmdTZXNzaW9uIGFzIGplc3QuTW9jaykubW9ja1Jlc29sdmVkVmFsdWUobW9ja1Nlc3Npb24pO1xuXG4gICAgICByZW5kZXIoPFN0cmV0Y2hpbmdTZXNzaW9uIHNlc3Npb25JZD1cInRlc3Qtc2Vzc2lvblwiIC8+KTtcblxuICAgICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG4gICAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KC9leGVyY2lzZSAxL2kpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIETDqW1hcnJlciBsYSBzZXNzaW9uXG4gICAgICBmaXJlRXZlbnQuY2xpY2soc2NyZWVuLmdldEJ5VGV4dCgvY29tbWVuY2VyL2kpKTtcblxuICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoL2VuIGNvdXJzL2kpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgICAgXG4gICAgICAvLyBQYXNzZXIgw6AgbCdleGVyY2ljZSBzdWl2YW50XG4gICAgICBmaXJlRXZlbnQuY2xpY2soc2NyZWVuLmdldEJ5VGV4dCgvc3VpdmFudC9pKSk7XG5cbiAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KC9leGVyY2lzZSAyL2kpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgIH0pO1xuXG4gICAgaXQoJ2RvaXQgZW5yZWdpc3RyZXIgbGEgY29tcGzDqXRpb24gZGUgbGEgc2Vzc2lvbicsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IG1vY2tTZXNzaW9uID0ge1xuICAgICAgICBleGVyY2lzZXM6IFt7IG5hbWU6ICdUZXN0IEV4ZXJjaXNlJywgZHVyYXRpb246IDEwIH1dXG4gICAgICB9O1xuXG4gICAgICAocmVjb3ZlcnlTZXJ2aWNlLmdldFN0cmV0Y2hpbmdTZXNzaW9uIGFzIGplc3QuTW9jaykubW9ja1Jlc29sdmVkVmFsdWUobW9ja1Nlc3Npb24pO1xuICAgICAgKHJlY292ZXJ5U2VydmljZS5yZWNvcmRTZXNzaW9uQ29tcGxldGlvbiBhcyBqZXN0Lk1vY2spLm1vY2tSZXNvbHZlZFZhbHVlKHt9KTtcblxuICAgICAgcmVuZGVyKDxTdHJldGNoaW5nU2Vzc2lvbiBzZXNzaW9uSWQ9XCJ0ZXN0LXNlc3Npb25cIiAvPik7XG5cbiAgICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgICBmaXJlRXZlbnQuY2xpY2soc2NyZWVuLmdldEJ5VGV4dCgvY29tbWVuY2VyL2kpKTtcbiAgICAgIH0pO1xuXG4gICAgICAvLyBUZXJtaW5lciBsYSBzZXNzaW9uXG4gICAgICBmaXJlRXZlbnQuY2xpY2soc2NyZWVuLmdldEJ5VGV4dCgvdGVybWluZXIvaSkpO1xuXG4gICAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICAgICAgZXhwZWN0KHJlY292ZXJ5U2VydmljZS5yZWNvcmRTZXNzaW9uQ29tcGxldGlvbikudG9IYXZlQmVlbkNhbGxlZFdpdGgoXG4gICAgICAgICAgJ3Rlc3Qtc2Vzc2lvbicsXG4gICAgICAgICAgZXhwZWN0LmFueShPYmplY3QpXG4gICAgICAgICk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ1JlY292ZXJ5TWV0cmljcyBDb21wb25lbnQnLCAoKSA9PiB7XG4gICAgaXQoJ2RvaXQgYWZmaWNoZXIgbGVzIG3DqXRyaXF1ZXMgZGUgcsOpY3Vww6lyYXRpb24nLCAoKSA9PiB7XG4gICAgICBjb25zdCBtb2NrTWV0cmljcyA9IHtcbiAgICAgICAgaGVhcnRSYXRlVmFyaWFiaWxpdHk6IDQyLFxuICAgICAgICBzbGVlcFF1YWxpdHk6IDg1LFxuICAgICAgICBtdXNjbGVTdGlmZm5lc3M6IDI1LFxuICAgICAgICBlbmVyZ3lMZXZlbDogODAsXG4gICAgICAgIHN0cmVzc0xldmVsOiAzMFxuICAgICAgfTtcblxuICAgICAgcmVuZGVyKDxSZWNvdmVyeU1ldHJpY3MgbWV0cmljcz17bW9ja01ldHJpY3N9IC8+KTtcblxuICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoL3ZhcmlhYmlsaXTDqSBjYXJkaWFxdWUvaSkpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgnNDInKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KC9xdWFsaXTDqSBkdSBzb21tZWlsL2kpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoJzg1JScpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgIH0pO1xuXG4gICAgaXQoJ2RvaXQgY2FsY3VsZXIgbGUgc2NvcmUgZGUgcsOpY3Vww6lyYXRpb24gZ2xvYmFsJywgKCkgPT4ge1xuICAgICAgY29uc3QgbW9ja01ldHJpY3MgPSB7XG4gICAgICAgIGhlYXJ0UmF0ZVZhcmlhYmlsaXR5OiA0NSxcbiAgICAgICAgc2xlZXBRdWFsaXR5OiA5MCxcbiAgICAgICAgbXVzY2xlU3RpZmZuZXNzOiAxNSxcbiAgICAgICAgZW5lcmd5TGV2ZWw6IDg1LFxuICAgICAgICBzdHJlc3NMZXZlbDogMjBcbiAgICAgIH07XG5cbiAgICAgIHJlbmRlcig8UmVjb3ZlcnlNZXRyaWNzIG1ldHJpY3M9e21vY2tNZXRyaWNzfSAvPik7XG5cbiAgICAgIC8vIFNjb3JlIGNhbGN1bMOpIGJhc8OpIHN1ciBsZXMgbcOpdHJpcXVlc1xuICAgICAgY29uc3QgZXhwZWN0ZWRTY29yZSA9IE1hdGgucm91bmQoXG4gICAgICAgIChtb2NrTWV0cmljcy5oZWFydFJhdGVWYXJpYWJpbGl0eSArIFxuICAgICAgICAgbW9ja01ldHJpY3Muc2xlZXBRdWFsaXR5ICsgXG4gICAgICAgICAoMTAwIC0gbW9ja01ldHJpY3MubXVzY2xlU3RpZmZuZXNzKSArIFxuICAgICAgICAgbW9ja01ldHJpY3MuZW5lcmd5TGV2ZWwgKyBcbiAgICAgICAgICgxMDAgLSBtb2NrTWV0cmljcy5zdHJlc3NMZXZlbCkpIC8gNVxuICAgICAgKTtcblxuICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoZXhwZWN0ZWRTY29yZS50b1N0cmluZygpKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ1JlY292ZXJ5IFNlcnZpY2UnLCAoKSA9PiB7XG4gICAgaXQoJ2RvaXQgY2FsY3VsZXIgbGUgc2NvcmUgZGUgcsOpY3Vww6lyYXRpb24gYXZlYyBwcsOpY2lzaW9uJywgKCkgPT4ge1xuICAgICAgY29uc3QgcmVjb3ZlcnlEYXRhID0ge1xuICAgICAgICBoZWFydFJhdGVWYXJpYWJpbGl0eTogNDAsXG4gICAgICAgIHNsZWVwSG91cnM6IDcuNSxcbiAgICAgICAgc2xlZXBRdWFsaXR5OiA4MCxcbiAgICAgICAgd29ya291dEludGVuc2l0eUxhc3QyNGg6IDc1LFxuICAgICAgICBtdXNjbGVTdGlmZm5lc3NSYXRpbmc6IDMwXG4gICAgICB9O1xuXG4gICAgICBjb25zdCBzY29yZSA9IHJlY292ZXJ5U2VydmljZS5jYWxjdWxhdGVSZWNvdmVyeVNjb3JlKHJlY292ZXJ5RGF0YSk7XG5cbiAgICAgIGV4cGVjdChzY29yZSkudG9CZUdyZWF0ZXJUaGFuT3JFcXVhbCgwKTtcbiAgICAgIGV4cGVjdChzY29yZSkudG9CZUxlc3NUaGFuT3JFcXVhbCgxMDApO1xuICAgICAgZXhwZWN0KHR5cGVvZiBzY29yZSkudG9CZSgnbnVtYmVyJyk7XG4gICAgfSk7XG5cbiAgICBpdCgnZG9pdCByZWNvbW1hbmRlciBkZXMgYWN0aW9ucyBkZSByw6ljdXDDqXJhdGlvbicsICgpID0+IHtcbiAgICAgIGNvbnN0IGxvd1JlY292ZXJ5RGF0YSA9IHtcbiAgICAgICAgb3ZlcmFsbFNjb3JlOiA0NSxcbiAgICAgICAgbXVzY2xlU3RpZmZuZXNzOiA4MCxcbiAgICAgICAgZW5lcmd5TGV2ZWw6IDMwLFxuICAgICAgICBzbGVlcFF1YWxpdHk6IDUwXG4gICAgICB9O1xuXG4gICAgICBjb25zdCByZWNvbW1lbmRhdGlvbnMgPSByZWNvdmVyeVNlcnZpY2UuZ2V0UmVjb3ZlcnlSZWNvbW1lbmRhdGlvbnMobG93UmVjb3ZlcnlEYXRhKTtcblxuICAgICAgZXhwZWN0KHJlY29tbWVuZGF0aW9ucykudG9Db250YWluKFxuICAgICAgICBleHBlY3Qub2JqZWN0Q29udGFpbmluZyh7XG4gICAgICAgICAgdHlwZTogZXhwZWN0LnN0cmluZ01hdGNoaW5nKC9zdHJldGNofHJlc3R8c2xlZXAvaSlcbiAgICAgICAgfSlcbiAgICAgICk7XG4gICAgICBleHBlY3QocmVjb21tZW5kYXRpb25zLmxlbmd0aCkudG9CZUdyZWF0ZXJUaGFuKDApO1xuICAgIH0pO1xuXG4gICAgaXQoJ2RvaXQgb3B0aW1pc2VyIGxlcyBwbGFucyBkZSByw6ljdXDDqXJhdGlvbicsICgpID0+IHtcbiAgICAgIGNvbnN0IHVzZXJQcm9maWxlID0ge1xuICAgICAgICBmaXRuZXNzTGV2ZWw6ICdpbnRlcm1lZGlhdGUnLFxuICAgICAgICBhdmFpbGFibGVUaW1lOiAzMCwgLy8gbWludXRlcyBwYXIgam91clxuICAgICAgICBwcmVmZXJlbmNlczogWydzdHJldGNoaW5nJywgJ3lvZ2EnXSxcbiAgICAgICAgaW5qdXJpZXM6IFsnbG93ZXJfYmFjayddXG4gICAgICB9O1xuXG4gICAgICBjb25zdCBwbGFuID0gcmVjb3ZlcnlTZXJ2aWNlLm9wdGltaXplUmVjb3ZlcnlQbGFuKHVzZXJQcm9maWxlKTtcblxuICAgICAgZXhwZWN0KHBsYW4ucGhhc2VzKS50b0JlRGVmaW5lZCgpO1xuICAgICAgZXhwZWN0KHBsYW4ucGhhc2VzLmxlbmd0aCkudG9CZUdyZWF0ZXJUaGFuKDApO1xuICAgICAgXG4gICAgICAvLyBWw6lyaWZpZXIgcXVlIGxlcyBwcsOpZsOpcmVuY2VzIHNvbnQgcHJpc2VzIGVuIGNvbXB0ZVxuICAgICAgY29uc3QgaGFzUHJlZmVycmVkQWN0aXZpdGllcyA9IHBsYW4ucGhhc2VzLnNvbWUocGhhc2UgPT5cbiAgICAgICAgcGhhc2UuYWN0aXZpdGllcy5zb21lKGFjdGl2aXR5ID0+XG4gICAgICAgICAgdXNlclByb2ZpbGUucHJlZmVyZW5jZXMuaW5jbHVkZXMoYWN0aXZpdHkudHlwZSlcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICAgIGV4cGVjdChoYXNQcmVmZXJyZWRBY3Rpdml0aWVzKS50b0JlKHRydWUpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnUmVjb3ZlcnkgU3RvcmUnLCAoKSA9PiB7XG4gICAgaXQoJ2RvaXQgZ8OpcmVyIGxcXCfDqXRhdCBkZSByw6ljdXDDqXJhdGlvbicsICgpID0+IHtcbiAgICAgIGNvbnN0IHsgZ2V0U3RhdGUsIHNldFN0YXRlIH0gPSByZWNvdmVyeVN0b3JlO1xuICAgICAgXG4gICAgICBzZXRTdGF0ZSh7XG4gICAgICAgIGN1cnJlbnRTY29yZTogODUsXG4gICAgICAgIGlzTG9hZGluZzogZmFsc2UsXG4gICAgICAgIGFjdGl2ZVNlc3Npb246ICdzZXNzaW9uLTEyMydcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCBzdGF0ZSA9IGdldFN0YXRlKCk7XG4gICAgICBleHBlY3Qoc3RhdGUuY3VycmVudFNjb3JlKS50b0JlKDg1KTtcbiAgICAgIGV4cGVjdChzdGF0ZS5pc0xvYWRpbmcpLnRvQmUoZmFsc2UpO1xuICAgICAgZXhwZWN0KHN0YXRlLmFjdGl2ZVNlc3Npb24pLnRvQmUoJ3Nlc3Npb24tMTIzJyk7XG4gICAgfSk7XG5cbiAgICBpdCgnZG9pdCBtZXR0cmUgw6Agam91ciBsZXMgbcOpdHJpcXVlcyBkZSByw6ljdXDDqXJhdGlvbicsICgpID0+IHtcbiAgICAgIGNvbnN0IG5ld01ldHJpY3MgPSB7XG4gICAgICAgIGhlYXJ0UmF0ZVZhcmlhYmlsaXR5OiA1MCxcbiAgICAgICAgc2xlZXBRdWFsaXR5OiA5MCxcbiAgICAgICAgbXVzY2xlU3RpZmZuZXNzOiAyMFxuICAgICAgfTtcblxuICAgICAgcmVjb3ZlcnlTdG9yZS5nZXRTdGF0ZSgpLnVwZGF0ZU1ldHJpY3MobmV3TWV0cmljcyk7XG5cbiAgICAgIGNvbnN0IHN0YXRlID0gcmVjb3ZlcnlTdG9yZS5nZXRTdGF0ZSgpO1xuICAgICAgZXhwZWN0KHN0YXRlLm1ldHJpY3MpLnRvRXF1YWwoZXhwZWN0Lm9iamVjdENvbnRhaW5pbmcobmV3TWV0cmljcykpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnSW50w6lncmF0aW9uIFJlY292ZXJ5LVdvcmtvdXQnLCAoKSA9PiB7XG4gICAgaXQoJ2RvaXQgYWRhcHRlciBsZXMgcmVjb21tYW5kYXRpb25zIHNlbG9uIGxcXCdoaXN0b3JpcXVlIGRcXCdlbnRyYcOubmVtZW50JywgKCkgPT4ge1xuICAgICAgY29uc3QgcmVjZW50V29ya291dHMgPSBbXG4gICAgICAgIHsgZGF0ZTogJzIwMjQtMDEtMTUnLCB0eXBlOiAnc3RyZW5ndGgnLCBpbnRlbnNpdHk6IDg1LCBkdXJhdGlvbjogNjAgfSxcbiAgICAgICAgeyBkYXRlOiAnMjAyNC0wMS0xNCcsIHR5cGU6ICdjYXJkaW8nLCBpbnRlbnNpdHk6IDcwLCBkdXJhdGlvbjogNDUgfSxcbiAgICAgICAgeyBkYXRlOiAnMjAyNC0wMS0xMycsIHR5cGU6ICdzdHJlbmd0aCcsIGludGVuc2l0eTogOTAsIGR1cmF0aW9uOiA3NSB9XG4gICAgICBdO1xuXG4gICAgICBjb25zdCByZWNvbW1lbmRhdGlvbnMgPSByZWNvdmVyeVNlcnZpY2UuZ2V0V29ya291dEJhc2VkUmVjb21tZW5kYXRpb25zKHJlY2VudFdvcmtvdXRzKTtcblxuICAgICAgZXhwZWN0KHJlY29tbWVuZGF0aW9ucykudG9Db250YWluKFxuICAgICAgICBleHBlY3Qub2JqZWN0Q29udGFpbmluZyh7XG4gICAgICAgICAgcmVhc29uOiBleHBlY3Quc3RyaW5nQ29udGFpbmluZygnaW50ZW5zZScpXG4gICAgICAgIH0pXG4gICAgICApO1xuICAgIH0pO1xuXG4gICAgaXQoJ2RvaXQgc3luY2hyb25pc2VyIGxlcyBkb25uw6llcyBkZSByw6ljdXDDqXJhdGlvbiBhdmVjIGxlcyBwbGFucyBkXFwnZW50cmHDrm5lbWVudCcsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHJlY292ZXJ5U2NvcmUgPSA2NTsgLy8gU2NvcmUgbW95ZW5cbiAgICAgIFxuICAgICAgKHJlY292ZXJ5U2VydmljZS5zeW5jV2l0aFdvcmtvdXRQbGFubmluZyBhcyBqZXN0Lk1vY2spLm1vY2tSZXNvbHZlZFZhbHVlKHtcbiAgICAgICAgYWRqdXN0ZWRJbnRlbnNpdHk6ICdtb2RlcmF0ZScsXG4gICAgICAgIHJlY29tbWVuZGVkUmVzdERheXM6IDEsXG4gICAgICAgIG1vZGlmaWVkRXhlcmNpc2VzOiBbJ3JlZHVjZWRfd2VpZ2h0X3RyYWluaW5nJ11cbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCBzeW5jUmVzdWx0ID0gYXdhaXQgcmVjb3ZlcnlTZXJ2aWNlLnN5bmNXaXRoV29ya291dFBsYW5uaW5nKHJlY292ZXJ5U2NvcmUpO1xuXG4gICAgICBleHBlY3Qoc3luY1Jlc3VsdC5hZGp1c3RlZEludGVuc2l0eSkudG9CZSgnbW9kZXJhdGUnKTtcbiAgICAgIGV4cGVjdChzeW5jUmVzdWx0LnJlY29tbWVuZGVkUmVzdERheXMpLnRvQmUoMSk7XG4gICAgfSk7XG4gIH0pO1xufSk7Il0sInZlcnNpb24iOjN9