{"file":"/workspaces/MyFitHero/src/__tests__/unit/recovery.test.tsx","mappings":"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","names":[],"sources":["/workspaces/MyFitHero/src/__tests__/unit/recovery.test.tsx"],"sourcesContent":["/**\n * TESTS UNITAIRES - MODULE RECOVERY\n * Tests complets pour la récupération et régénération\n */\n\nimport { describe, it, expect, beforeEach, afterEach, jest } from '@jest/globals';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport { RecoveryDashboard } from '@/features/recovery/components/RecoveryDashboard';\nimport { RecoveryPlan } from '@/features/recovery/components/RecoveryPlan';\nimport { StretchingSession } from '@/features/recovery/components/StretchingSession';\nimport { RecoveryMetrics } from '@/features/recovery/components/RecoveryMetrics';\nimport { recoveryService } from '@/features/recovery/services/recoveryService';\nimport { recoveryStore } from '@/features/recovery/store/recoveryStore';\nimport { mockUser, mockRecoveryData } from '@/test/mocks';\n\n// Mock des services\njest.mock('@/features/recovery/services/recoveryService');\njest.mock('@/lib/supabase');\n\ndescribe('Recovery Module - Tests Complets', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    recoveryStore.getState().reset();\n  });\n\n  afterEach(() => {\n    jest.restoreAllMocks();\n  });\n\n  describe('RecoveryDashboard Component', () => {\n    it('doit afficher le tableau de bord de récupération', async () => {\n      const mockRecoveryStats = {\n        overallRecoveryScore: 85,\n        muscleRecoveryStatus: {\n          legs: 90,\n          arms: 80,\n          core: 75,\n          back: 88\n        },\n        recommendedActions: [\n          { type: 'stretch', target: 'core', duration: 15 },\n          { type: 'rest', target: 'arms', duration: 30 }\n        ]\n      };\n\n      (recoveryService.getRecoveryStats as jest.Mock).mockResolvedValue(mockRecoveryStats);\n\n      render(<RecoveryDashboard userId={mockUser.id} />);\n\n      await waitFor(() => {\n        expect(screen.getByText(/score de récupération/i)).toBeInTheDocument();\n      });\n\n      expect(screen.getByText('85')).toBeInTheDocument(); // Score global\n      expect(screen.getByText(/jambes.*90%/i)).toBeInTheDocument();\n      expect(screen.getByText(/étirements recommandés/i)).toBeInTheDocument();\n    });\n\n    it('doit gérer les erreurs de chargement gracieusement', async () => {\n      (recoveryService.getRecoveryStats as jest.Mock).mockRejectedValue(\n        new Error('Erreur réseau')\n      );\n\n      render(<RecoveryDashboard userId={mockUser.id} />);\n\n      await waitFor(() => {\n        expect(screen.getByText(/erreur de chargement/i)).toBeInTheDocument();\n      });\n    });\n\n    it('doit mettre à jour les données en temps réel', async () => {\n      const initialStats = { overallRecoveryScore: 75 };\n      const updatedStats = { overallRecoveryScore: 80 };\n\n      (recoveryService.getRecoveryStats as jest.Mock)\n        .mockResolvedValueOnce(initialStats)\n        .mockResolvedValueOnce(updatedStats);\n\n      render(<RecoveryDashboard userId={mockUser.id} />);\n\n      await waitFor(() => {\n        expect(screen.getByText('75')).toBeInTheDocument();\n      });\n\n      // Simulation d'une mise à jour\n      fireEvent.click(screen.getByText(/actualiser/i));\n\n      await waitFor(() => {\n        expect(screen.getByText('80')).toBeInTheDocument();\n      });\n    });\n  });\n\n  describe('RecoveryPlan Component', () => {\n    it('doit générer un plan de récupération personnalisé', async () => {\n      const mockPlan = {\n        id: 'plan-123',\n        duration: 14, // jours\n        phases: [\n          {\n            name: 'Récupération Active',\n            duration: 7,\n            activities: [\n              { type: 'stretching', duration: 20, intensity: 'low' },\n              { type: 'massage', duration: 15, intensity: 'medium' }\n            ]\n          },\n          {\n            name: 'Récupération Intensive',\n            duration: 7,\n            activities: [\n              { type: 'yoga', duration: 30, intensity: 'medium' },\n              { type: 'meditation', duration: 10, intensity: 'low' }\n            ]\n          }\n        ]\n      };\n\n      (recoveryService.generateRecoveryPlan as jest.Mock).mockResolvedValue(mockPlan);\n\n      render(<RecoveryPlan userId={mockUser.id} workoutHistory={mockRecoveryData.workouts} />);\n\n      await waitFor(() => {\n        expect(screen.getByText(/plan de récupération/i)).toBeInTheDocument();\n      });\n\n      expect(screen.getByText('Récupération Active')).toBeInTheDocument();\n      expect(screen.getByText('Récupération Intensive')).toBeInTheDocument();\n      expect(screen.getByText(/14 jours/i)).toBeInTheDocument();\n    });\n\n    it('doit permettre de personnaliser le plan', async () => {\n      const mockPlan = { id: 'plan-123', phases: [] };\n      (recoveryService.generateRecoveryPlan as jest.Mock).mockResolvedValue(mockPlan);\n      (recoveryService.customizeRecoveryPlan as jest.Mock).mockResolvedValue({\n        ...mockPlan,\n        customized: true\n      });\n\n      render(<RecoveryPlan userId={mockUser.id} workoutHistory={[]} />);\n\n      await waitFor(() => {\n        expect(screen.getByText(/personnaliser/i)).toBeInTheDocument();\n      });\n\n      fireEvent.click(screen.getByText(/personnaliser/i));\n\n      await waitFor(() => {\n        expect(recoveryService.customizeRecoveryPlan).toHaveBeenCalledWith(\n          mockPlan.id,\n          expect.any(Object)\n        );\n      });\n    });\n  });\n\n  describe('StretchingSession Component', () => {\n    it('doit guider une session d\\'étirements', async () => {\n      const mockSession = {\n        id: 'stretch-session-123',\n        exercises: [\n          {\n            name: 'Étirement des ischio-jambiers',\n            duration: 30,\n            instructions: 'Penchez-vous en avant lentement',\n            targetMuscles: ['hamstrings']\n          },\n          {\n            name: 'Étirement des quadriceps',\n            duration: 30,\n            instructions: 'Pliez votre jambe vers l\\'arrière',\n            targetMuscles: ['quadriceps']\n          }\n        ],\n        totalDuration: 300 // 5 minutes\n      };\n\n      (recoveryService.getStretchingSession as jest.Mock).mockResolvedValue(mockSession);\n\n      render(<StretchingSession sessionId=\"stretch-session-123\" />);\n\n      await waitFor(() => {\n        expect(screen.getByText(/étirement des ischio-jambiers/i)).toBeInTheDocument();\n      });\n\n      expect(screen.getByText(/30 secondes/i)).toBeInTheDocument();\n      expect(screen.getByText(/penchez-vous en avant/i)).toBeInTheDocument();\n    });\n\n    it('doit suivre le progrès de la session', async () => {\n      const mockSession = {\n        exercises: [\n          { name: 'Exercise 1', duration: 30 },\n          { name: 'Exercise 2', duration: 30 }\n        ]\n      };\n\n      (recoveryService.getStretchingSession as jest.Mock).mockResolvedValue(mockSession);\n\n      render(<StretchingSession sessionId=\"test-session\" />);\n\n      await waitFor(() => {\n        expect(screen.getByText(/exercise 1/i)).toBeInTheDocument();\n      });\n\n      // Démarrer la session\n      fireEvent.click(screen.getByText(/commencer/i));\n\n      expect(screen.getByText(/en cours/i)).toBeInTheDocument();\n      \n      // Passer à l'exercice suivant\n      fireEvent.click(screen.getByText(/suivant/i));\n\n      expect(screen.getByText(/exercise 2/i)).toBeInTheDocument();\n    });\n\n    it('doit enregistrer la complétion de la session', async () => {\n      const mockSession = {\n        exercises: [{ name: 'Test Exercise', duration: 10 }]\n      };\n\n      (recoveryService.getStretchingSession as jest.Mock).mockResolvedValue(mockSession);\n      (recoveryService.recordSessionCompletion as jest.Mock).mockResolvedValue({});\n\n      render(<StretchingSession sessionId=\"test-session\" />);\n\n      await waitFor(() => {\n        fireEvent.click(screen.getByText(/commencer/i));\n      });\n\n      // Terminer la session\n      fireEvent.click(screen.getByText(/terminer/i));\n\n      await waitFor(() => {\n        expect(recoveryService.recordSessionCompletion).toHaveBeenCalledWith(\n          'test-session',\n          expect.any(Object)\n        );\n      });\n    });\n  });\n\n  describe('RecoveryMetrics Component', () => {\n    it('doit afficher les métriques de récupération', () => {\n      const mockMetrics = {\n        heartRateVariability: 42,\n        sleepQuality: 85,\n        muscleStiffness: 25,\n        energyLevel: 80,\n        stressLevel: 30\n      };\n\n      render(<RecoveryMetrics metrics={mockMetrics} />);\n\n      expect(screen.getByText(/variabilité cardiaque/i)).toBeInTheDocument();\n      expect(screen.getByText('42')).toBeInTheDocument();\n      expect(screen.getByText(/qualité du sommeil/i)).toBeInTheDocument();\n      expect(screen.getByText('85%')).toBeInTheDocument();\n    });\n\n    it('doit calculer le score de récupération global', () => {\n      const mockMetrics = {\n        heartRateVariability: 45,\n        sleepQuality: 90,\n        muscleStiffness: 15,\n        energyLevel: 85,\n        stressLevel: 20\n      };\n\n      render(<RecoveryMetrics metrics={mockMetrics} />);\n\n      // Score calculé basé sur les métriques\n      const expectedScore = Math.round(\n        (mockMetrics.heartRateVariability + \n         mockMetrics.sleepQuality + \n         (100 - mockMetrics.muscleStiffness) + \n         mockMetrics.energyLevel + \n         (100 - mockMetrics.stressLevel)) / 5\n      );\n\n      expect(screen.getByText(expectedScore.toString())).toBeInTheDocument();\n    });\n  });\n\n  describe('Recovery Service', () => {\n    it('doit calculer le score de récupération avec précision', () => {\n      const recoveryData = {\n        heartRateVariability: 40,\n        sleepHours: 7.5,\n        sleepQuality: 80,\n        workoutIntensityLast24h: 75,\n        muscleStiffnessRating: 30\n      };\n\n      const score = recoveryService.calculateRecoveryScore(recoveryData);\n\n      expect(score).toBeGreaterThanOrEqual(0);\n      expect(score).toBeLessThanOrEqual(100);\n      expect(typeof score).toBe('number');\n    });\n\n    it('doit recommander des actions de récupération', () => {\n      const lowRecoveryData = {\n        overallScore: 45,\n        muscleStiffness: 80,\n        energyLevel: 30,\n        sleepQuality: 50\n      };\n\n      const recommendations = recoveryService.getRecoveryRecommendations(lowRecoveryData);\n\n      expect(recommendations).toContain(\n        expect.objectContaining({\n          type: expect.stringMatching(/stretch|rest|sleep/i)\n        })\n      );\n      expect(recommendations.length).toBeGreaterThan(0);\n    });\n\n    it('doit optimiser les plans de récupération', () => {\n      const userProfile = {\n        fitnessLevel: 'intermediate',\n        availableTime: 30, // minutes par jour\n        preferences: ['stretching', 'yoga'],\n        injuries: ['lower_back']\n      };\n\n      const plan = recoveryService.optimizeRecoveryPlan(userProfile);\n\n      expect(plan.phases).toBeDefined();\n      expect(plan.phases.length).toBeGreaterThan(0);\n      \n      // Vérifier que les préférences sont prises en compte\n      const hasPreferredActivities = plan.phases.some(phase =>\n        phase.activities.some(activity =>\n          userProfile.preferences.includes(activity.type)\n        )\n      );\n      expect(hasPreferredActivities).toBe(true);\n    });\n  });\n\n  describe('Recovery Store', () => {\n    it('doit gérer l\\'état de récupération', () => {\n      const { getState, setState } = recoveryStore;\n      \n      setState({\n        currentScore: 85,\n        isLoading: false,\n        activeSession: 'session-123'\n      });\n\n      const state = getState();\n      expect(state.currentScore).toBe(85);\n      expect(state.isLoading).toBe(false);\n      expect(state.activeSession).toBe('session-123');\n    });\n\n    it('doit mettre à jour les métriques de récupération', () => {\n      const newMetrics = {\n        heartRateVariability: 50,\n        sleepQuality: 90,\n        muscleStiffness: 20\n      };\n\n      recoveryStore.getState().updateMetrics(newMetrics);\n\n      const state = recoveryStore.getState();\n      expect(state.metrics).toEqual(expect.objectContaining(newMetrics));\n    });\n  });\n\n  describe('Intégration Recovery-Workout', () => {\n    it('doit adapter les recommandations selon l\\'historique d\\'entraînement', () => {\n      const recentWorkouts = [\n        { date: '2024-01-15', type: 'strength', intensity: 85, duration: 60 },\n        { date: '2024-01-14', type: 'cardio', intensity: 70, duration: 45 },\n        { date: '2024-01-13', type: 'strength', intensity: 90, duration: 75 }\n      ];\n\n      const recommendations = recoveryService.getWorkoutBasedRecommendations(recentWorkouts);\n\n      expect(recommendations).toContain(\n        expect.objectContaining({\n          reason: expect.stringContaining('intense')\n        })\n      );\n    });\n\n    it('doit synchroniser les données de récupération avec les plans d\\'entraînement', async () => {\n      const recoveryScore = 65; // Score moyen\n      \n      (recoveryService.syncWithWorkoutPlanning as jest.Mock).mockResolvedValue({\n        adjustedIntensity: 'moderate',\n        recommendedRestDays: 1,\n        modifiedExercises: ['reduced_weight_training']\n      });\n\n      const syncResult = await recoveryService.syncWithWorkoutPlanning(recoveryScore);\n\n      expect(syncResult.adjustedIntensity).toBe('moderate');\n      expect(syncResult.recommendedRestDays).toBe(1);\n    });\n  });\n});"],"version":3}