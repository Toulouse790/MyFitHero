30a5751c42a032dc8555a27d866f3aa3
"use strict";

/* istanbul ignore next */
function cov_17qdgjcyro() {
  var path = "/workspaces/MyFitHero/src/lib/services/socialService.ts";
  var hash = "8775139aece27d51611833f39440dc7aac0adf9a";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/MyFitHero/src/lib/services/socialService.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 31
        }
      },
      "2": {
        start: {
          line: 4,
          column: 19
        },
        end: {
          line: 4,
          column: 44
        }
      },
      "3": {
        start: {
          line: 5,
          column: 19
        },
        end: {
          line: 5,
          column: 38
        }
      },
      "4": {
        start: {
          line: 9,
          column: 8
        },
        end: {
          line: 35,
          column: 9
        }
      },
      "5": {
        start: {
          line: 10,
          column: 51
        },
        end: {
          line: 26,
          column: 58
        }
      },
      "6": {
        start: {
          line: 27,
          column: 12
        },
        end: {
          line: 28,
          column: 29
        }
      },
      "7": {
        start: {
          line: 28,
          column: 16
        },
        end: {
          line: 28,
          column: 29
        }
      },
      "8": {
        start: {
          line: 29,
          column: 12
        },
        end: {
          line: 29,
          column: 31
        }
      },
      "9": {
        start: {
          line: 33,
          column: 12
        },
        end: {
          line: 33,
          column: 65
        }
      },
      "10": {
        start: {
          line: 34,
          column: 12
        },
        end: {
          line: 34,
          column: 29
        }
      },
      "11": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 77,
          column: 9
        }
      },
      "12": {
        start: {
          line: 39,
          column: 51
        },
        end: {
          line: 52,
          column: 26
        }
      },
      "13": {
        start: {
          line: 53,
          column: 12
        },
        end: {
          line: 54,
          column: 29
        }
      },
      "14": {
        start: {
          line: 54,
          column: 16
        },
        end: {
          line: 54,
          column: 29
        }
      },
      "15": {
        start: {
          line: 56,
          column: 12
        },
        end: {
          line: 71,
          column: 16
        }
      },
      "16": {
        start: {
          line: 56,
          column: 48
        },
        end: {
          line: 71,
          column: 13
        }
      },
      "17": {
        start: {
          line: 75,
          column: 12
        },
        end: {
          line: 75,
          column: 64
        }
      },
      "18": {
        start: {
          line: 76,
          column: 12
        },
        end: {
          line: 76,
          column: 29
        }
      },
      "19": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 94,
          column: 9
        }
      },
      "20": {
        start: {
          line: 81,
          column: 30
        },
        end: {
          line: 85,
          column: 14
        }
      },
      "21": {
        start: {
          line: 86,
          column: 12
        },
        end: {
          line: 87,
          column: 28
        }
      },
      "22": {
        start: {
          line: 87,
          column: 16
        },
        end: {
          line: 87,
          column: 28
        }
      },
      "23": {
        start: {
          line: 88,
          column: 12
        },
        end: {
          line: 88,
          column: 24
        }
      },
      "24": {
        start: {
          line: 92,
          column: 12
        },
        end: {
          line: 92,
          column: 71
        }
      },
      "25": {
        start: {
          line: 93,
          column: 12
        },
        end: {
          line: 93,
          column: 25
        }
      },
      "26": {
        start: {
          line: 97,
          column: 8
        },
        end: {
          line: 110,
          column: 9
        }
      },
      "27": {
        start: {
          line: 98,
          column: 30
        },
        end: {
          line: 101,
          column: 39
        }
      },
      "28": {
        start: {
          line: 102,
          column: 12
        },
        end: {
          line: 103,
          column: 28
        }
      },
      "29": {
        start: {
          line: 103,
          column: 16
        },
        end: {
          line: 103,
          column: 28
        }
      },
      "30": {
        start: {
          line: 104,
          column: 12
        },
        end: {
          line: 104,
          column: 24
        }
      },
      "31": {
        start: {
          line: 108,
          column: 12
        },
        end: {
          line: 108,
          column: 73
        }
      },
      "32": {
        start: {
          line: 109,
          column: 12
        },
        end: {
          line: 109,
          column: 25
        }
      },
      "33": {
        start: {
          line: 114,
          column: 8
        },
        end: {
          line: 143,
          column: 9
        }
      },
      "34": {
        start: {
          line: 115,
          column: 24
        },
        end: {
          line: 127,
          column: 29
        }
      },
      "35": {
        start: {
          line: 128,
          column: 12
        },
        end: {
          line: 129,
          column: 51
        }
      },
      "36": {
        start: {
          line: 129,
          column: 16
        },
        end: {
          line: 129,
          column: 51
        }
      },
      "37": {
        start: {
          line: 130,
          column: 12
        },
        end: {
          line: 131,
          column: 59
        }
      },
      "38": {
        start: {
          line: 131,
          column: 16
        },
        end: {
          line: 131,
          column: 59
        }
      },
      "39": {
        start: {
          line: 132,
          column: 12
        },
        end: {
          line: 133,
          column: 57
        }
      },
      "40": {
        start: {
          line: 133,
          column: 16
        },
        end: {
          line: 133,
          column: 57
        }
      },
      "41": {
        start: {
          line: 134,
          column: 51
        },
        end: {
          line: 134,
          column: 62
        }
      },
      "42": {
        start: {
          line: 135,
          column: 12
        },
        end: {
          line: 136,
          column: 29
        }
      },
      "43": {
        start: {
          line: 136,
          column: 16
        },
        end: {
          line: 136,
          column: 29
        }
      },
      "44": {
        start: {
          line: 137,
          column: 12
        },
        end: {
          line: 137,
          column: 31
        }
      },
      "45": {
        start: {
          line: 141,
          column: 12
        },
        end: {
          line: 141,
          column: 68
        }
      },
      "46": {
        start: {
          line: 142,
          column: 12
        },
        end: {
          line: 142,
          column: 29
        }
      },
      "47": {
        start: {
          line: 146,
          column: 8
        },
        end: {
          line: 162,
          column: 9
        }
      },
      "48": {
        start: {
          line: 147,
          column: 30
        },
        end: {
          line: 153,
          column: 14
        }
      },
      "49": {
        start: {
          line: 154,
          column: 12
        },
        end: {
          line: 155,
          column: 28
        }
      },
      "50": {
        start: {
          line: 155,
          column: 16
        },
        end: {
          line: 155,
          column: 28
        }
      },
      "51": {
        start: {
          line: 156,
          column: 12
        },
        end: {
          line: 156,
          column: 24
        }
      },
      "52": {
        start: {
          line: 160,
          column: 12
        },
        end: {
          line: 160,
          column: 66
        }
      },
      "53": {
        start: {
          line: 161,
          column: 12
        },
        end: {
          line: 161,
          column: 25
        }
      },
      "54": {
        start: {
          line: 165,
          column: 8
        },
        end: {
          line: 186,
          column: 9
        }
      },
      "55": {
        start: {
          line: 166,
          column: 51
        },
        end: {
          line: 175,
          column: 25
        }
      },
      "56": {
        start: {
          line: 176,
          column: 12
        },
        end: {
          line: 177,
          column: 29
        }
      },
      "57": {
        start: {
          line: 177,
          column: 16
        },
        end: {
          line: 177,
          column: 29
        }
      },
      "58": {
        start: {
          line: 179,
          column: 12
        },
        end: {
          line: 179,
          column: 55
        }
      },
      "59": {
        start: {
          line: 180,
          column: 12
        },
        end: {
          line: 180,
          column: 28
        }
      },
      "60": {
        start: {
          line: 184,
          column: 12
        },
        end: {
          line: 184,
          column: 67
        }
      },
      "61": {
        start: {
          line: 185,
          column: 12
        },
        end: {
          line: 185,
          column: 24
        }
      },
      "62": {
        start: {
          line: 189,
          column: 8
        },
        end: {
          line: 226,
          column: 9
        }
      },
      "63": {
        start: {
          line: 190,
          column: 51
        },
        end: {
          line: 204,
          column: 58
        }
      },
      "64": {
        start: {
          line: 205,
          column: 12
        },
        end: {
          line: 206,
          column: 29
        }
      },
      "65": {
        start: {
          line: 206,
          column: 16
        },
        end: {
          line: 206,
          column: 29
        }
      },
      "66": {
        start: {
          line: 207,
          column: 35
        },
        end: {
          line: 207,
          column: 46
        }
      },
      "67": {
        start: {
          line: 208,
          column: 27
        },
        end: {
          line: 208,
          column: 29
        }
      },
      "68": {
        start: {
          line: 209,
          column: 30
        },
        end: {
          line: 209,
          column: 32
        }
      },
      "69": {
        start: {
          line: 210,
          column: 12
        },
        end: {
          line: 219,
          column: 15
        }
      },
      "70": {
        start: {
          line: 211,
          column: 34
        },
        end: {
          line: 211,
          column: 57
        }
      },
      "71": {
        start: {
          line: 212,
          column: 33
        },
        end: {
          line: 212,
          column: 67
        }
      },
      "72": {
        start: {
          line: 213,
          column: 16
        },
        end: {
          line: 218,
          column: 17
        }
      },
      "73": {
        start: {
          line: 214,
          column: 20
        },
        end: {
          line: 214,
          column: 45
        }
      },
      "74": {
        start: {
          line: 217,
          column: 20
        },
        end: {
          line: 217,
          column: 42
        }
      },
      "75": {
        start: {
          line: 220,
          column: 12
        },
        end: {
          line: 220,
          column: 41
        }
      },
      "76": {
        start: {
          line: 224,
          column: 12
        },
        end: {
          line: 224,
          column: 73
        }
      },
      "77": {
        start: {
          line: 225,
          column: 12
        },
        end: {
          line: 225,
          column: 49
        }
      },
      "78": {
        start: {
          line: 230,
          column: 8
        },
        end: {
          line: 289,
          column: 9
        }
      },
      "79": {
        start: {
          line: 233,
          column: 36
        },
        end: {
          line: 278,
          column: 13
        }
      },
      "80": {
        start: {
          line: 280,
          column: 12
        },
        end: {
          line: 282,
          column: 13
        }
      },
      "81": {
        start: {
          line: 281,
          column: 16
        },
        end: {
          line: 281,
          column: 78
        }
      },
      "82": {
        start: {
          line: 281,
          column: 55
        },
        end: {
          line: 281,
          column: 76
        }
      },
      "83": {
        start: {
          line: 283,
          column: 12
        },
        end: {
          line: 283,
          column: 51
        }
      },
      "84": {
        start: {
          line: 287,
          column: 12
        },
        end: {
          line: 287,
          column: 69
        }
      },
      "85": {
        start: {
          line: 288,
          column: 12
        },
        end: {
          line: 288,
          column: 22
        }
      },
      "86": {
        start: {
          line: 293,
          column: 8
        },
        end: {
          line: 352,
          column: 9
        }
      },
      "87": {
        start: {
          line: 295,
          column: 30
        },
        end: {
          line: 345,
          column: 13
        }
      },
      "88": {
        start: {
          line: 346,
          column: 12
        },
        end: {
          line: 346,
          column: 45
        }
      },
      "89": {
        start: {
          line: 350,
          column: 12
        },
        end: {
          line: 350,
          column: 69
        }
      },
      "90": {
        start: {
          line: 351,
          column: 12
        },
        end: {
          line: 351,
          column: 22
        }
      },
      "91": {
        start: {
          line: 355,
          column: 8
        },
        end: {
          line: 375,
          column: 9
        }
      },
      "92": {
        start: {
          line: 356,
          column: 51
        },
        end: {
          line: 366,
          column: 25
        }
      },
      "93": {
        start: {
          line: 367,
          column: 12
        },
        end: {
          line: 368,
          column: 29
        }
      },
      "94": {
        start: {
          line: 368,
          column: 16
        },
        end: {
          line: 368,
          column: 29
        }
      },
      "95": {
        start: {
          line: 369,
          column: 12
        },
        end: {
          line: 369,
          column: 28
        }
      },
      "96": {
        start: {
          line: 373,
          column: 12
        },
        end: {
          line: 373,
          column: 62
        }
      },
      "97": {
        start: {
          line: 374,
          column: 12
        },
        end: {
          line: 374,
          column: 24
        }
      },
      "98": {
        start: {
          line: 378,
          column: 8
        },
        end: {
          line: 391,
          column: 9
        }
      },
      "99": {
        start: {
          line: 379,
          column: 30
        },
        end: {
          line: 382,
          column: 14
        }
      },
      "100": {
        start: {
          line: 383,
          column: 12
        },
        end: {
          line: 384,
          column: 28
        }
      },
      "101": {
        start: {
          line: 384,
          column: 16
        },
        end: {
          line: 384,
          column: 28
        }
      },
      "102": {
        start: {
          line: 385,
          column: 12
        },
        end: {
          line: 385,
          column: 24
        }
      },
      "103": {
        start: {
          line: 389,
          column: 12
        },
        end: {
          line: 389,
          column: 60
        }
      },
      "104": {
        start: {
          line: 390,
          column: 12
        },
        end: {
          line: 390,
          column: 25
        }
      },
      "105": {
        start: {
          line: 395,
          column: 8
        },
        end: {
          line: 415,
          column: 9
        }
      },
      "106": {
        start: {
          line: 397,
          column: 30
        },
        end: {
          line: 408,
          column: 13
        }
      },
      "107": {
        start: {
          line: 409,
          column: 12
        },
        end: {
          line: 409,
          column: 29
        }
      },
      "108": {
        start: {
          line: 413,
          column: 12
        },
        end: {
          line: 413,
          column: 70
        }
      },
      "109": {
        start: {
          line: 414,
          column: 12
        },
        end: {
          line: 414,
          column: 29
        }
      },
      "110": {
        start: {
          line: 419,
          column: 8
        },
        end: {
          line: 458,
          column: 9
        }
      },
      "111": {
        start: {
          line: 421,
          column: 30
        },
        end: {
          line: 427,
          column: 13
        }
      },
      "112": {
        start: {
          line: 428,
          column: 33
        },
        end: {
          line: 447,
          column: 13
        }
      },
      "113": {
        start: {
          line: 448,
          column: 12
        },
        end: {
          line: 452,
          column: 14
        }
      },
      "114": {
        start: {
          line: 456,
          column: 12
        },
        end: {
          line: 456,
          column: 76
        }
      },
      "115": {
        start: {
          line: 457,
          column: 12
        },
        end: {
          line: 457,
          column: 29
        }
      },
      "116": {
        start: {
          line: 462,
          column: 8
        },
        end: {
          line: 480,
          column: 9
        }
      },
      "117": {
        start: {
          line: 464,
          column: 12
        },
        end: {
          line: 469,
          column: 14
        }
      },
      "118": {
        start: {
          line: 473,
          column: 12
        },
        end: {
          line: 473,
          column: 78
        }
      },
      "119": {
        start: {
          line: 474,
          column: 12
        },
        end: {
          line: 479,
          column: 14
        }
      },
      "120": {
        start: {
          line: 483,
          column: 0
        },
        end: {
          line: 483,
          column: 44
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 8,
            column: 4
          },
          end: {
            line: 8,
            column: 5
          }
        },
        loc: {
          start: {
            line: 8,
            column: 29
          },
          end: {
            line: 36,
            column: 5
          }
        },
        line: 8
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 37,
            column: 4
          },
          end: {
            line: 37,
            column: 5
          }
        },
        loc: {
          start: {
            line: 37,
            column: 37
          },
          end: {
            line: 78,
            column: 5
          }
        },
        line: 37
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 56,
            column: 37
          },
          end: {
            line: 56,
            column: 38
          }
        },
        loc: {
          start: {
            line: 56,
            column: 48
          },
          end: {
            line: 71,
            column: 13
          }
        },
        line: 56
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 79,
            column: 4
          },
          end: {
            line: 79,
            column: 5
          }
        },
        loc: {
          start: {
            line: 79,
            column: 46
          },
          end: {
            line: 95,
            column: 5
          }
        },
        line: 79
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 96,
            column: 4
          },
          end: {
            line: 96,
            column: 5
          }
        },
        loc: {
          start: {
            line: 96,
            column: 44
          },
          end: {
            line: 111,
            column: 5
          }
        },
        line: 96
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 113,
            column: 4
          },
          end: {
            line: 113,
            column: 5
          }
        },
        loc: {
          start: {
            line: 113,
            column: 62
          },
          end: {
            line: 144,
            column: 5
          }
        },
        line: 113
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 145,
            column: 4
          },
          end: {
            line: 145,
            column: 5
          }
        },
        loc: {
          start: {
            line: 145,
            column: 45
          },
          end: {
            line: 163,
            column: 5
          }
        },
        line: 145
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 164,
            column: 4
          },
          end: {
            line: 164,
            column: 5
          }
        },
        loc: {
          start: {
            line: 164,
            column: 49
          },
          end: {
            line: 187,
            column: 5
          }
        },
        line: 164
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 188,
            column: 4
          },
          end: {
            line: 188,
            column: 5
          }
        },
        loc: {
          start: {
            line: 188,
            column: 36
          },
          end: {
            line: 227,
            column: 5
          }
        },
        line: 188
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 210,
            column: 35
          },
          end: {
            line: 210,
            column: 36
          }
        },
        loc: {
          start: {
            line: 210,
            column: 54
          },
          end: {
            line: 219,
            column: 13
          }
        },
        line: 210
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 229,
            column: 4
          },
          end: {
            line: 229,
            column: 5
          }
        },
        loc: {
          start: {
            line: 229,
            column: 69
          },
          end: {
            line: 290,
            column: 5
          }
        },
        line: 229
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 281,
            column: 46
          },
          end: {
            line: 281,
            column: 47
          }
        },
        loc: {
          start: {
            line: 281,
            column: 55
          },
          end: {
            line: 281,
            column: 76
          }
        },
        line: 281
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 292,
            column: 4
          },
          end: {
            line: 292,
            column: 5
          }
        },
        loc: {
          start: {
            line: 292,
            column: 66
          },
          end: {
            line: 353,
            column: 5
          }
        },
        line: 292
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 354,
            column: 4
          },
          end: {
            line: 354,
            column: 5
          }
        },
        loc: {
          start: {
            line: 354,
            column: 39
          },
          end: {
            line: 376,
            column: 5
          }
        },
        line: 354
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 377,
            column: 4
          },
          end: {
            line: 377,
            column: 5
          }
        },
        loc: {
          start: {
            line: 377,
            column: 35
          },
          end: {
            line: 392,
            column: 5
          }
        },
        line: 377
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 394,
            column: 4
          },
          end: {
            line: 394,
            column: 5
          }
        },
        loc: {
          start: {
            line: 394,
            column: 33
          },
          end: {
            line: 416,
            column: 5
          }
        },
        line: 394
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 418,
            column: 4
          },
          end: {
            line: 418,
            column: 5
          }
        },
        loc: {
          start: {
            line: 418,
            column: 56
          },
          end: {
            line: 459,
            column: 5
          }
        },
        line: 418
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 461,
            column: 4
          },
          end: {
            line: 461,
            column: 5
          }
        },
        loc: {
          start: {
            line: 461,
            column: 41
          },
          end: {
            line: 481,
            column: 5
          }
        },
        line: 461
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 27,
            column: 12
          },
          end: {
            line: 28,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 27,
            column: 12
          },
          end: {
            line: 28,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 27
      },
      "1": {
        loc: {
          start: {
            line: 29,
            column: 19
          },
          end: {
            line: 29,
            column: 30
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 29,
            column: 19
          },
          end: {
            line: 29,
            column: 24
          }
        }, {
          start: {
            line: 29,
            column: 28
          },
          end: {
            line: 29,
            column: 30
          }
        }],
        line: 29
      },
      "2": {
        loc: {
          start: {
            line: 53,
            column: 12
          },
          end: {
            line: 54,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 53,
            column: 12
          },
          end: {
            line: 54,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 53
      },
      "3": {
        loc: {
          start: {
            line: 56,
            column: 20
          },
          end: {
            line: 56,
            column: 31
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 56,
            column: 20
          },
          end: {
            line: 56,
            column: 25
          }
        }, {
          start: {
            line: 56,
            column: 29
          },
          end: {
            line: 56,
            column: 31
          }
        }],
        line: 56
      },
      "4": {
        loc: {
          start: {
            line: 86,
            column: 12
          },
          end: {
            line: 87,
            column: 28
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 86,
            column: 12
          },
          end: {
            line: 87,
            column: 28
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 86
      },
      "5": {
        loc: {
          start: {
            line: 102,
            column: 12
          },
          end: {
            line: 103,
            column: 28
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 102,
            column: 12
          },
          end: {
            line: 103,
            column: 28
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 102
      },
      "6": {
        loc: {
          start: {
            line: 113,
            column: 50
          },
          end: {
            line: 113,
            column: 60
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 113,
            column: 58
          },
          end: {
            line: 113,
            column: 60
          }
        }],
        line: 113
      },
      "7": {
        loc: {
          start: {
            line: 128,
            column: 12
          },
          end: {
            line: 129,
            column: 51
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 128,
            column: 12
          },
          end: {
            line: 129,
            column: 51
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 128
      },
      "8": {
        loc: {
          start: {
            line: 130,
            column: 12
          },
          end: {
            line: 131,
            column: 59
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 130,
            column: 12
          },
          end: {
            line: 131,
            column: 59
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 130
      },
      "9": {
        loc: {
          start: {
            line: 132,
            column: 12
          },
          end: {
            line: 133,
            column: 57
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 132,
            column: 12
          },
          end: {
            line: 133,
            column: 57
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 132
      },
      "10": {
        loc: {
          start: {
            line: 135,
            column: 12
          },
          end: {
            line: 136,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 135,
            column: 12
          },
          end: {
            line: 136,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 135
      },
      "11": {
        loc: {
          start: {
            line: 137,
            column: 19
          },
          end: {
            line: 137,
            column: 30
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 137,
            column: 19
          },
          end: {
            line: 137,
            column: 24
          }
        }, {
          start: {
            line: 137,
            column: 28
          },
          end: {
            line: 137,
            column: 30
          }
        }],
        line: 137
      },
      "12": {
        loc: {
          start: {
            line: 154,
            column: 12
          },
          end: {
            line: 155,
            column: 28
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 154,
            column: 12
          },
          end: {
            line: 155,
            column: 28
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 154
      },
      "13": {
        loc: {
          start: {
            line: 176,
            column: 12
          },
          end: {
            line: 177,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 176,
            column: 12
          },
          end: {
            line: 177,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 176
      },
      "14": {
        loc: {
          start: {
            line: 205,
            column: 12
          },
          end: {
            line: 206,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 205,
            column: 12
          },
          end: {
            line: 206,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 205
      },
      "15": {
        loc: {
          start: {
            line: 207,
            column: 35
          },
          end: {
            line: 207,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 207,
            column: 35
          },
          end: {
            line: 207,
            column: 40
          }
        }, {
          start: {
            line: 207,
            column: 44
          },
          end: {
            line: 207,
            column: 46
          }
        }],
        line: 207
      },
      "16": {
        loc: {
          start: {
            line: 213,
            column: 16
          },
          end: {
            line: 218,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 213,
            column: 16
          },
          end: {
            line: 218,
            column: 17
          }
        }, {
          start: {
            line: 216,
            column: 21
          },
          end: {
            line: 218,
            column: 17
          }
        }],
        line: 213
      },
      "17": {
        loc: {
          start: {
            line: 229,
            column: 25
          },
          end: {
            line: 229,
            column: 40
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 229,
            column: 32
          },
          end: {
            line: 229,
            column: 40
          }
        }],
        line: 229
      },
      "18": {
        loc: {
          start: {
            line: 229,
            column: 57
          },
          end: {
            line: 229,
            column: 67
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 229,
            column: 65
          },
          end: {
            line: 229,
            column: 67
          }
        }],
        line: 229
      },
      "19": {
        loc: {
          start: {
            line: 280,
            column: 12
          },
          end: {
            line: 282,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 280,
            column: 12
          },
          end: {
            line: 282,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 280
      },
      "20": {
        loc: {
          start: {
            line: 280,
            column: 16
          },
          end: {
            line: 280,
            column: 41
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 280,
            column: 16
          },
          end: {
            line: 280,
            column: 32
          }
        }, {
          start: {
            line: 280,
            column: 36
          },
          end: {
            line: 280,
            column: 41
          }
        }],
        line: 280
      },
      "21": {
        loc: {
          start: {
            line: 292,
            column: 32
          },
          end: {
            line: 292,
            column: 52
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 292,
            column: 43
          },
          end: {
            line: 292,
            column: 52
          }
        }],
        line: 292
      },
      "22": {
        loc: {
          start: {
            line: 292,
            column: 54
          },
          end: {
            line: 292,
            column: 64
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 292,
            column: 62
          },
          end: {
            line: 292,
            column: 64
          }
        }],
        line: 292
      },
      "23": {
        loc: {
          start: {
            line: 367,
            column: 12
          },
          end: {
            line: 368,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 367,
            column: 12
          },
          end: {
            line: 368,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 367
      },
      "24": {
        loc: {
          start: {
            line: 383,
            column: 12
          },
          end: {
            line: 384,
            column: 28
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 383,
            column: 12
          },
          end: {
            line: 384,
            column: 28
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 383
      },
      "25": {
        loc: {
          start: {
            line: 418,
            column: 39
          },
          end: {
            line: 418,
            column: 54
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 418,
            column: 48
          },
          end: {
            line: 418,
            column: 54
          }
        }],
        line: 418
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0],
      "18": [0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0],
      "22": [0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0]
    },
    inputSourceMap: {
      file: "/workspaces/MyFitHero/src/lib/services/socialService.ts",
      mappings: "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",
      names: [],
      sources: ["/workspaces/MyFitHero/src/lib/services/socialService.ts"],
      sourcesContent: ["import { supabase } from '@/lib/supabase';\nimport { subDays } from 'date-fns';\n\n// Types pour les fonctionnalit\xE9s sociales\nexport interface UserConnection {\n  id: string;\n  user_id: string;\n  friend_id: string;\n  status: 'pending' | 'accepted' | 'blocked';\n  created_at: string;\n  updated_at: string;\n  friend_profile: {\n    username: string;\n    avatar_url?: string;\n    sport?: string;\n    sport_position?: string;\n    level?: number;\n    is_online?: boolean;\n    last_seen?: string;\n  };\n}\n\nexport interface Challenge {\n  id: string;\n  creator_id: string;\n  title: string;\n  description: string;\n  pillar: 'workout' | 'nutrition' | 'hydration' | 'sleep' | 'general';\n  challenge_type: 'individual' | 'team' | 'community';\n  target_value: number;\n  target_unit: string;\n  duration_days: number;\n  start_date: string;\n  end_date: string;\n  participants_count: number;\n  max_participants?: number;\n  reward_points: number;\n  difficulty: 'easy' | 'medium' | 'hard' | 'expert';\n  is_active: boolean;\n  created_at: string;\n  creator_profile: {\n    username: string;\n    avatar_url?: string;\n    sport?: string;\n  };\n}\n\nexport interface ChallengeParticipation {\n  id: string;\n  challenge_id: string;\n  user_id: string;\n  current_progress: number;\n  completion_percentage: number;\n  completed_at?: string;\n  position?: number;\n  points_earned: number;\n  created_at: string;\n}\n\nexport interface LeaderboardEntry {\n  user_id: string;\n  username: string;\n  avatar_url?: string;\n  sport?: string;\n  sport_position?: string;\n  level: number;\n  total_points: number;\n  weekly_points: number;\n  monthly_points: number;\n  challenges_completed: number;\n  current_streak: number;\n  rank: number;\n  change_from_last_week: number;\n}\n\nexport interface SocialPost {\n  id: string;\n  user_id: string;\n  content: string;\n  post_type: 'achievement' | 'workout' | 'progress' | 'challenge' | 'general';\n  media_urls?: string[];\n  achievements?: {\n    type: string;\n    value: number;\n    unit: string;\n    milestone: boolean;\n  }[];\n  workout_data?: {\n    duration: number;\n    exercises: string[];\n    calories_burned?: number;\n  };\n  likes_count: number;\n  comments_count: number;\n  shares_count: number;\n  created_at: string;\n  author_profile: {\n    username: string;\n    avatar_url?: string;\n    sport?: string;\n    level?: number;\n  };\n  is_liked?: boolean;\n  is_bookmarked?: boolean;\n}\n\nexport interface SocialStats {\n  friends_count: number;\n  followers_count: number;\n  following_count: number;\n  total_posts: number;\n  total_likes_received: number;\n  total_challenges_created: number;\n  total_challenges_completed: number;\n  community_rank: number;\n  sport_rank?: number;\n  influence_score: number;\n}\n\nclass SocialService {\n  // Gestion des amis et connexions\n  async getFriends(userId: string): Promise<UserConnection[]> {\n    try {\n      const { data: _data, error: _error } = await supabase\n        .from('user_connections')\n        .select(\n          `\n          *,\n          friend_profile:user_profiles!friend_id(\n            username,\n            avatar_url,\n            sport,\n            sport_position,\n            level,\n            is_online,\n            last_seen\n          )\n        `\n        )\n        .eq('user_id', userId)\n        .eq('status', 'accepted')\n        .order('updated_at', { ascending: false });\n\n      if (_error) throw _error;\n      return _data || [];\n    } catch (catchError) {\n      // Erreur silencieuse\n      console.error('Error fetching friends:', catchError);\n      throw catchError;\n    }\n  }\n\n  async searchUsers(query: string, userId: string): Promise<UserConnection[]> {\n    try {\n      const { data: _data, error: _error } = await supabase\n        .from('user_profiles')\n        .select(\n          `\n          id,\n          username,\n          avatar_url,\n          sport,\n          sport_position,\n          level,\n          is_online\n        `\n        )\n        .ilike('username', `%${query}%`)\n        .neq('id', userId)\n        .limit(20);\n\n      if (_error) throw _error;\n\n      // Formatage des r\xE9sultats pour correspondre \xE0 UserConnection\n      return (_data || []).map((user: any) => ({\n        id: '',\n        user_id: userId,\n        friend_id: user.id,\n        status: 'pending' as const,\n        created_at: '',\n        updated_at: '',\n        friend_profile: {\n          username: user.username,\n          avatar_url: user.avatar_url,\n          sport: user.sport,\n          sport_position: user.sport_position,\n          level: user.level,\n          is_online: user.is_online,\n        },\n      }));\n    } catch (catchError) {\n      // Erreur silencieuse\n      console.error('Error searching users:', catchError);\n      throw catchError;\n    }\n  }\n\n  async sendFriendRequest(userId: string, friendId: string): Promise<boolean> {\n    try {\n      const { error } = await supabase.from('user_connections').insert({\n        user_id: userId,\n        friend_id: friendId,\n        status: 'pending',\n      });\n\n      if (error) throw error;\n      return true;\n    } catch (catchError) {\n      // Erreur silencieuse\n      console.error('Error sending friend request:', catchError);\n      return false;\n    }\n  }\n\n  async acceptFriendRequest(connectionId: string): Promise<boolean> {\n    try {\n      const { error } = await supabase\n        .from('user_connections')\n        .update({ status: 'accepted', updated_at: new Date().toISOString() })\n        .eq('id', connectionId);\n\n      if (error) throw error;\n      return true;\n    } catch (catchError) {\n      // Erreur silencieuse\n      console.error('Error accepting friend request:', catchError);\n      return false;\n    }\n  }\n\n  // Gestion des d\xE9fis\n  async getChallenges(\n    pillar?: string,\n    difficulty?: string,\n    type?: string,\n    limit = 20\n  ): Promise<Challenge[]> {\n    try {\n      let query = supabase\n        .from('challenges')\n        .select(\n          `\n          *,\n          creator_profile:user_profiles!creator_id(\n            username,\n            avatar_url,\n            sport\n          )\n        `\n        )\n        .eq('is_active', true)\n        .order('created_at', { ascending: false })\n        .limit(limit);\n\n      if (pillar) query = query.eq('pillar', pillar);\n      if (difficulty) query = query.eq('difficulty', difficulty);\n      if (type) query = query.eq('challenge_type', type);\n\n      const { data: _data, error: _error } = await query;\n      if (_error) throw _error;\n      return _data || [];\n    } catch (catchError) {\n      // Erreur silencieuse\n      console.error('Error fetching challenges:', catchError);\n      throw catchError;\n    }\n  }\n\n  async joinChallenge(challengeId: string, userId: string): Promise<boolean> {\n    try {\n      const { error } = await supabase.from('challenge_participants').insert({\n        challenge_id: challengeId,\n        user_id: userId,\n        joined_at: new Date().toISOString(),\n        completion_percentage: 0,\n        points_earned: 0,\n      });\n\n      if (error) throw error;\n      return true;\n    } catch (catchError) {\n      // Erreur silencieuse\n      console.error('Error joining challenge:', catchError);\n      return false;\n    }\n  }\n\n  async createChallenge(userId: string, challengeData: Partial<Challenge>): Promise<string | null> {\n    try {\n      const { data: _data, error: _error } = await supabase\n        .from('challenges')\n        .insert({\n          creator_id: userId,\n          ...challengeData,\n          is_active: true,\n          participants_count: 1,\n        })\n        .select('id')\n        .single();\n\n      if (_error) throw _error;\n\n      // Auto-joindre le cr\xE9ateur au d\xE9fi\n      await this.joinChallenge(_data.id, userId);\n\n      return _data.id;\n    } catch (catchError) {\n      // Erreur silencieuse\n      console.error('Error creating challenge:', catchError);\n      return null;\n    }\n  }\n\n  async getUserChallenges(userId: string): Promise<{\n    active: (Challenge & ChallengeParticipation)[];\n    completed: (Challenge & ChallengeParticipation)[];\n  }> {\n    try {\n      const { data: _data, error: _error } = await supabase\n        .from('challenge_participations')\n        .select(\n          `\n          *,\n          challenge:challenges(\n            *,\n            creator_profile:user_profiles!creator_id(\n              username,\n              avatar_url,\n              sport\n            )\n          )\n        `\n        )\n        .eq('user_id', userId)\n        .order('created_at', { ascending: false });\n\n      if (_error) throw _error;\n\n      const participations = _data || [];\n      const active: (Challenge & ChallengeParticipation)[] = [];\n      const completed: (Challenge & ChallengeParticipation)[] = [];\n\n      participations.forEach((participation: any) => {\n        const challenge = participation.challenge;\n        const combined = { ...challenge, ...participation };\n\n        if (participation.completed_at) {\n          completed.push(combined);\n        } else {\n          active.push(combined);\n        }\n      });\n\n      return { active, completed };\n    } catch (catchError) {\n      // Erreur silencieuse\n      console.error('Error fetching user challenges:', catchError);\n      return { active: [], completed: [] };\n    }\n  }\n\n  // Classements et leaderboards\n  async getLeaderboard(\n    type: 'global' | 'sport' | 'friends' = 'global',\n    sport?: string,\n    userId?: string,\n    limit = 50\n  ): Promise<LeaderboardEntry[]> {\n    try {\n      // Pour cet exemple, on utilise des donn\xE9es mock\xE9es\n      // En production, cela serait calcul\xE9 \xE0 partir de vraies statistiques\n      const mockLeaderboard: LeaderboardEntry[] = [\n        {\n          user_id: '1',\n          username: 'Rugby_Beast_33',\n          avatar_url: '/avatars/user1.jpg',\n          sport: 'rugby',\n          sport_position: 'pilier',\n          level: 15,\n          total_points: 24500,\n          weekly_points: 1200,\n          monthly_points: 4800,\n          challenges_completed: 47,\n          current_streak: 12,\n          rank: 1,\n          change_from_last_week: 2,\n        },\n        {\n          user_id: '2',\n          username: 'FitNinja_Pro',\n          avatar_url: '/avatars/user2.jpg',\n          sport: 'basketball',\n          sport_position: 'meneur',\n          level: 13,\n          total_points: 22100,\n          weekly_points: 980,\n          monthly_points: 4200,\n          challenges_completed: 39,\n          current_streak: 8,\n          rank: 2,\n          change_from_last_week: -1,\n        },\n        {\n          user_id: '3',\n          username: 'Marathon_Queen',\n          avatar_url: '/avatars/user3.jpg',\n          sport: 'running',\n          level: 14,\n          total_points: 21800,\n          weekly_points: 1100,\n          monthly_points: 4500,\n          challenges_completed: 52,\n          current_streak: 15,\n          rank: 3,\n          change_from_last_week: 1,\n        },\n      ];\n\n      // Simulation du filtrage par sport\n      if (type === 'sport' && sport) {\n        return mockLeaderboard.filter(entry => entry.sport === sport);\n      }\n\n      return mockLeaderboard.slice(0, limit);\n    } catch (catchError) {\n      // Erreur silencieuse\n      console.error('Error fetching leaderboard:', catchError);\n      return [];\n    }\n  }\n\n  // Feed social et posts\n  async getSocialFeed(\n    userId: string,\n    feedType: 'friends' | 'global' | 'sport' = 'friends',\n    limit = 20\n  ): Promise<SocialPost[]> {\n    try {\n      // Donn\xE9es mock\xE9es pour demonstration\n      const mockPosts: SocialPost[] = [\n        {\n          id: '1',\n          user_id: '2',\n          content:\n            'Nouveau PR au d\xE9velopp\xE9 couch\xE9 ! 120kg x5 reps \uD83D\uDCAA Les entra\xEEnements payent enfin !',\n          post_type: 'achievement',\n          achievements: [\n            {\n              type: 'bench_press_pr',\n              value: 120,\n              unit: 'kg',\n              milestone: true,\n            },\n          ],\n          likes_count: 23,\n          comments_count: 8,\n          shares_count: 3,\n          created_at: new Date().toISOString(),\n          author_profile: {\n            username: 'FitNinja_Pro',\n            avatar_url: '/avatars/user2.jpg',\n            sport: 'basketball',\n            level: 13,\n          },\n          is_liked: false,\n          is_bookmarked: false,\n        },\n        {\n          id: '2',\n          user_id: '1',\n          content: \"Session m\xEAl\xE9e ce matin avec l'\xE9quipe. Ready pour le match de samedi ! \uD83C\uDFC9\",\n          post_type: 'workout',\n          workout_data: {\n            duration: 90,\n            exercises: ['M\xEAl\xE9e', 'Scrum', 'Pouss\xE9e tra\xEEneau'],\n            calories_burned: 650,\n          },\n          likes_count: 18,\n          comments_count: 5,\n          shares_count: 1,\n          created_at: subDays(new Date(), 1).toISOString(),\n          author_profile: {\n            username: 'Rugby_Beast_33',\n            avatar_url: '/avatars/user1.jpg',\n            sport: 'rugby',\n            level: 15,\n          },\n          is_liked: true,\n          is_bookmarked: false,\n        },\n      ];\n\n      return mockPosts.slice(0, limit);\n    } catch (catchError) {\n      // Erreur silencieuse\n      console.error('Error fetching social feed:', catchError);\n      return [];\n    }\n  }\n\n  async createPost(userId: string, postData: Partial<SocialPost>): Promise<string | null> {\n    try {\n      const { data: _data, error: _error } = await supabase\n        .from('social_posts')\n        .insert({\n          user_id: userId,\n          ...postData,\n          likes_count: 0,\n          comments_count: 0,\n          shares_count: 0,\n        })\n        .select('id')\n        .single();\n\n      if (_error) throw _error;\n      return _data.id;\n    } catch (catchError) {\n      // Erreur silencieuse\n      console.error('Error creating post:', catchError);\n      return null;\n    }\n  }\n\n  async likePost(postId: string, userId: string): Promise<boolean> {\n    try {\n      const { error } = await supabase.from('post_likes').insert({\n        post_id: postId,\n        user_id: userId,\n      });\n\n      if (error) throw error;\n      return true;\n    } catch (catchError) {\n      // Erreur silencieuse\n      console.error('Error liking post:', catchError);\n      return false;\n    }\n  }\n\n  // Statistiques sociales\n  async getSocialStats(userId: string): Promise<SocialStats> {\n    try {\n      // En production, ces donn\xE9es seraient calcul\xE9es depuis la base\n      const mockStats: SocialStats = {\n        friends_count: 24,\n        followers_count: 156,\n        following_count: 89,\n        total_posts: 45,\n        total_likes_received: 892,\n        total_challenges_created: 8,\n        total_challenges_completed: 23,\n        community_rank: 47,\n        sport_rank: 12,\n        influence_score: 78,\n      };\n\n      return mockStats;\n    } catch (catchError) {\n      // Erreur silencieuse\n      console.error('Error fetching social stats:', catchError);\n      throw catchError;\n    }\n  }\n\n  // Comparaisons avec amis\n  async getFriendsComparison(\n    userId: string,\n    period: 'week' | 'month' = 'week'\n  ): Promise<{\n    user_stats: any;\n    friends_stats: unknown[];\n    user_rank: number;\n  }> {\n    try {\n      // Donn\xE9es mock\xE9es pour la comparaison\n      const userStats = {\n        workouts_completed: 5,\n        total_calories_burned: 2800,\n        water_intake_liters: 14.5,\n        sleep_hours_avg: 7.2,\n        challenges_completed: 2,\n      };\n\n      const friendsStats = [\n        {\n          user_id: '1',\n          username: 'Rugby_Beast_33',\n          workouts_completed: 6,\n          total_calories_burned: 3200,\n          water_intake_liters: 16.8,\n          sleep_hours_avg: 8.1,\n          challenges_completed: 3,\n        },\n        {\n          user_id: '2',\n          username: 'FitNinja_Pro',\n          workouts_completed: 4,\n          total_calories_burned: 2400,\n          water_intake_liters: 12.3,\n          sleep_hours_avg: 6.8,\n          challenges_completed: 1,\n        },\n      ];\n\n      return {\n        user_stats: userStats,\n        friends_stats: friendsStats,\n        user_rank: 2,\n      };\n    } catch (catchError) {\n      // Erreur silencieuse\n      console.error('Error fetching friends comparison:', catchError);\n      throw catchError;\n    }\n  }\n\n  // Notifications sociales\n  async getSocialNotifications(userId: string): Promise<{\n    friend_requests: UserConnection[];\n    challenge_invites: Challenge[];\n    mentions: SocialPost[];\n    achievements: unknown[];\n  }> {\n    try {\n      // Donn\xE9es mock\xE9es pour les notifications\n      return {\n        friend_requests: [],\n        challenge_invites: [],\n        mentions: [],\n        achievements: [],\n      };\n    } catch (catchError) {\n      // Erreur silencieuse\n      console.error('Error fetching social notifications:', catchError);\n      return {\n        friend_requests: [],\n        challenge_invites: [],\n        mentions: [],\n        achievements: [],\n      };\n    }\n  }\n}\n\nexport const socialService = new SocialService();\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "8775139aece27d51611833f39440dc7aac0adf9a"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_17qdgjcyro = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_17qdgjcyro();
cov_17qdgjcyro().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_17qdgjcyro().s[1]++;
exports.socialService = void 0;
const supabase_1 =
/* istanbul ignore next */
(cov_17qdgjcyro().s[2]++, require("@/lib/supabase"));
const date_fns_1 =
/* istanbul ignore next */
(cov_17qdgjcyro().s[3]++, require("date-fns"));
class SocialService {
  // Gestion des amis et connexions
  async getFriends(userId) {
    /* istanbul ignore next */
    cov_17qdgjcyro().f[0]++;
    cov_17qdgjcyro().s[4]++;
    try {
      const {
        data: _data,
        error: _error
      } =
      /* istanbul ignore next */
      (cov_17qdgjcyro().s[5]++, await supabase_1.supabase.from('user_connections').select(`
          *,
          friend_profile:user_profiles!friend_id(
            username,
            avatar_url,
            sport,
            sport_position,
            level,
            is_online,
            last_seen
          )
        `).eq('user_id', userId).eq('status', 'accepted').order('updated_at', {
        ascending: false
      }));
      /* istanbul ignore next */
      cov_17qdgjcyro().s[6]++;
      if (_error) {
        /* istanbul ignore next */
        cov_17qdgjcyro().b[0][0]++;
        cov_17qdgjcyro().s[7]++;
        throw _error;
      } else
      /* istanbul ignore next */
      {
        cov_17qdgjcyro().b[0][1]++;
      }
      cov_17qdgjcyro().s[8]++;
      return /* istanbul ignore next */(cov_17qdgjcyro().b[1][0]++, _data) ||
      /* istanbul ignore next */
      (cov_17qdgjcyro().b[1][1]++, []);
    } catch (catchError) {
      /* istanbul ignore next */
      cov_17qdgjcyro().s[9]++;
      // Erreur silencieuse
      console.error('Error fetching friends:', catchError);
      /* istanbul ignore next */
      cov_17qdgjcyro().s[10]++;
      throw catchError;
    }
  }
  async searchUsers(query, userId) {
    /* istanbul ignore next */
    cov_17qdgjcyro().f[1]++;
    cov_17qdgjcyro().s[11]++;
    try {
      const {
        data: _data,
        error: _error
      } =
      /* istanbul ignore next */
      (cov_17qdgjcyro().s[12]++, await supabase_1.supabase.from('user_profiles').select(`
          id,
          username,
          avatar_url,
          sport,
          sport_position,
          level,
          is_online
        `).ilike('username', `%${query}%`).neq('id', userId).limit(20));
      /* istanbul ignore next */
      cov_17qdgjcyro().s[13]++;
      if (_error) {
        /* istanbul ignore next */
        cov_17qdgjcyro().b[2][0]++;
        cov_17qdgjcyro().s[14]++;
        throw _error;
      } else
      /* istanbul ignore next */
      {
        cov_17qdgjcyro().b[2][1]++;
      }
      // Formatage des résultats pour correspondre à UserConnection
      cov_17qdgjcyro().s[15]++;
      return (
      /* istanbul ignore next */
      (cov_17qdgjcyro().b[3][0]++, _data) ||
      /* istanbul ignore next */
      (cov_17qdgjcyro().b[3][1]++, [])).map(user => {
        /* istanbul ignore next */
        cov_17qdgjcyro().f[2]++;
        cov_17qdgjcyro().s[16]++;
        return {
          id: '',
          user_id: userId,
          friend_id: user.id,
          status: 'pending',
          created_at: '',
          updated_at: '',
          friend_profile: {
            username: user.username,
            avatar_url: user.avatar_url,
            sport: user.sport,
            sport_position: user.sport_position,
            level: user.level,
            is_online: user.is_online
          }
        };
      });
    } catch (catchError) {
      /* istanbul ignore next */
      cov_17qdgjcyro().s[17]++;
      // Erreur silencieuse
      console.error('Error searching users:', catchError);
      /* istanbul ignore next */
      cov_17qdgjcyro().s[18]++;
      throw catchError;
    }
  }
  async sendFriendRequest(userId, friendId) {
    /* istanbul ignore next */
    cov_17qdgjcyro().f[3]++;
    cov_17qdgjcyro().s[19]++;
    try {
      const {
        error
      } =
      /* istanbul ignore next */
      (cov_17qdgjcyro().s[20]++, await supabase_1.supabase.from('user_connections').insert({
        user_id: userId,
        friend_id: friendId,
        status: 'pending'
      }));
      /* istanbul ignore next */
      cov_17qdgjcyro().s[21]++;
      if (error) {
        /* istanbul ignore next */
        cov_17qdgjcyro().b[4][0]++;
        cov_17qdgjcyro().s[22]++;
        throw error;
      } else
      /* istanbul ignore next */
      {
        cov_17qdgjcyro().b[4][1]++;
      }
      cov_17qdgjcyro().s[23]++;
      return true;
    } catch (catchError) {
      /* istanbul ignore next */
      cov_17qdgjcyro().s[24]++;
      // Erreur silencieuse
      console.error('Error sending friend request:', catchError);
      /* istanbul ignore next */
      cov_17qdgjcyro().s[25]++;
      return false;
    }
  }
  async acceptFriendRequest(connectionId) {
    /* istanbul ignore next */
    cov_17qdgjcyro().f[4]++;
    cov_17qdgjcyro().s[26]++;
    try {
      const {
        error
      } =
      /* istanbul ignore next */
      (cov_17qdgjcyro().s[27]++, await supabase_1.supabase.from('user_connections').update({
        status: 'accepted',
        updated_at: new Date().toISOString()
      }).eq('id', connectionId));
      /* istanbul ignore next */
      cov_17qdgjcyro().s[28]++;
      if (error) {
        /* istanbul ignore next */
        cov_17qdgjcyro().b[5][0]++;
        cov_17qdgjcyro().s[29]++;
        throw error;
      } else
      /* istanbul ignore next */
      {
        cov_17qdgjcyro().b[5][1]++;
      }
      cov_17qdgjcyro().s[30]++;
      return true;
    } catch (catchError) {
      /* istanbul ignore next */
      cov_17qdgjcyro().s[31]++;
      // Erreur silencieuse
      console.error('Error accepting friend request:', catchError);
      /* istanbul ignore next */
      cov_17qdgjcyro().s[32]++;
      return false;
    }
  }
  // Gestion des défis
  async getChallenges(pillar, difficulty, type, limit =
  /* istanbul ignore next */
  (cov_17qdgjcyro().b[6][0]++, 20)) {
    /* istanbul ignore next */
    cov_17qdgjcyro().f[5]++;
    cov_17qdgjcyro().s[33]++;
    try {
      let query =
      /* istanbul ignore next */
      (cov_17qdgjcyro().s[34]++, supabase_1.supabase.from('challenges').select(`
          *,
          creator_profile:user_profiles!creator_id(
            username,
            avatar_url,
            sport
          )
        `).eq('is_active', true).order('created_at', {
        ascending: false
      }).limit(limit));
      /* istanbul ignore next */
      cov_17qdgjcyro().s[35]++;
      if (pillar) {
        /* istanbul ignore next */
        cov_17qdgjcyro().b[7][0]++;
        cov_17qdgjcyro().s[36]++;
        query = query.eq('pillar', pillar);
      } else
      /* istanbul ignore next */
      {
        cov_17qdgjcyro().b[7][1]++;
      }
      cov_17qdgjcyro().s[37]++;
      if (difficulty) {
        /* istanbul ignore next */
        cov_17qdgjcyro().b[8][0]++;
        cov_17qdgjcyro().s[38]++;
        query = query.eq('difficulty', difficulty);
      } else
      /* istanbul ignore next */
      {
        cov_17qdgjcyro().b[8][1]++;
      }
      cov_17qdgjcyro().s[39]++;
      if (type) {
        /* istanbul ignore next */
        cov_17qdgjcyro().b[9][0]++;
        cov_17qdgjcyro().s[40]++;
        query = query.eq('challenge_type', type);
      } else
      /* istanbul ignore next */
      {
        cov_17qdgjcyro().b[9][1]++;
      }
      const {
        data: _data,
        error: _error
      } =
      /* istanbul ignore next */
      (cov_17qdgjcyro().s[41]++, await query);
      /* istanbul ignore next */
      cov_17qdgjcyro().s[42]++;
      if (_error) {
        /* istanbul ignore next */
        cov_17qdgjcyro().b[10][0]++;
        cov_17qdgjcyro().s[43]++;
        throw _error;
      } else
      /* istanbul ignore next */
      {
        cov_17qdgjcyro().b[10][1]++;
      }
      cov_17qdgjcyro().s[44]++;
      return /* istanbul ignore next */(cov_17qdgjcyro().b[11][0]++, _data) ||
      /* istanbul ignore next */
      (cov_17qdgjcyro().b[11][1]++, []);
    } catch (catchError) {
      /* istanbul ignore next */
      cov_17qdgjcyro().s[45]++;
      // Erreur silencieuse
      console.error('Error fetching challenges:', catchError);
      /* istanbul ignore next */
      cov_17qdgjcyro().s[46]++;
      throw catchError;
    }
  }
  async joinChallenge(challengeId, userId) {
    /* istanbul ignore next */
    cov_17qdgjcyro().f[6]++;
    cov_17qdgjcyro().s[47]++;
    try {
      const {
        error
      } =
      /* istanbul ignore next */
      (cov_17qdgjcyro().s[48]++, await supabase_1.supabase.from('challenge_participants').insert({
        challenge_id: challengeId,
        user_id: userId,
        joined_at: new Date().toISOString(),
        completion_percentage: 0,
        points_earned: 0
      }));
      /* istanbul ignore next */
      cov_17qdgjcyro().s[49]++;
      if (error) {
        /* istanbul ignore next */
        cov_17qdgjcyro().b[12][0]++;
        cov_17qdgjcyro().s[50]++;
        throw error;
      } else
      /* istanbul ignore next */
      {
        cov_17qdgjcyro().b[12][1]++;
      }
      cov_17qdgjcyro().s[51]++;
      return true;
    } catch (catchError) {
      /* istanbul ignore next */
      cov_17qdgjcyro().s[52]++;
      // Erreur silencieuse
      console.error('Error joining challenge:', catchError);
      /* istanbul ignore next */
      cov_17qdgjcyro().s[53]++;
      return false;
    }
  }
  async createChallenge(userId, challengeData) {
    /* istanbul ignore next */
    cov_17qdgjcyro().f[7]++;
    cov_17qdgjcyro().s[54]++;
    try {
      const {
        data: _data,
        error: _error
      } =
      /* istanbul ignore next */
      (cov_17qdgjcyro().s[55]++, await supabase_1.supabase.from('challenges').insert({
        creator_id: userId,
        ...challengeData,
        is_active: true,
        participants_count: 1
      }).select('id').single());
      /* istanbul ignore next */
      cov_17qdgjcyro().s[56]++;
      if (_error) {
        /* istanbul ignore next */
        cov_17qdgjcyro().b[13][0]++;
        cov_17qdgjcyro().s[57]++;
        throw _error;
      } else
      /* istanbul ignore next */
      {
        cov_17qdgjcyro().b[13][1]++;
      }
      // Auto-joindre le créateur au défi
      cov_17qdgjcyro().s[58]++;
      await this.joinChallenge(_data.id, userId);
      /* istanbul ignore next */
      cov_17qdgjcyro().s[59]++;
      return _data.id;
    } catch (catchError) {
      /* istanbul ignore next */
      cov_17qdgjcyro().s[60]++;
      // Erreur silencieuse
      console.error('Error creating challenge:', catchError);
      /* istanbul ignore next */
      cov_17qdgjcyro().s[61]++;
      return null;
    }
  }
  async getUserChallenges(userId) {
    /* istanbul ignore next */
    cov_17qdgjcyro().f[8]++;
    cov_17qdgjcyro().s[62]++;
    try {
      const {
        data: _data,
        error: _error
      } =
      /* istanbul ignore next */
      (cov_17qdgjcyro().s[63]++, await supabase_1.supabase.from('challenge_participations').select(`
          *,
          challenge:challenges(
            *,
            creator_profile:user_profiles!creator_id(
              username,
              avatar_url,
              sport
            )
          )
        `).eq('user_id', userId).order('created_at', {
        ascending: false
      }));
      /* istanbul ignore next */
      cov_17qdgjcyro().s[64]++;
      if (_error) {
        /* istanbul ignore next */
        cov_17qdgjcyro().b[14][0]++;
        cov_17qdgjcyro().s[65]++;
        throw _error;
      } else
      /* istanbul ignore next */
      {
        cov_17qdgjcyro().b[14][1]++;
      }
      const participations =
      /* istanbul ignore next */
      (cov_17qdgjcyro().s[66]++,
      /* istanbul ignore next */
      (cov_17qdgjcyro().b[15][0]++, _data) ||
      /* istanbul ignore next */
      (cov_17qdgjcyro().b[15][1]++, []));
      const active =
      /* istanbul ignore next */
      (cov_17qdgjcyro().s[67]++, []);
      const completed =
      /* istanbul ignore next */
      (cov_17qdgjcyro().s[68]++, []);
      /* istanbul ignore next */
      cov_17qdgjcyro().s[69]++;
      participations.forEach(participation => {
        /* istanbul ignore next */
        cov_17qdgjcyro().f[9]++;
        const challenge =
        /* istanbul ignore next */
        (cov_17qdgjcyro().s[70]++, participation.challenge);
        const combined =
        /* istanbul ignore next */
        (cov_17qdgjcyro().s[71]++, {
          ...challenge,
          ...participation
        });
        /* istanbul ignore next */
        cov_17qdgjcyro().s[72]++;
        if (participation.completed_at) {
          /* istanbul ignore next */
          cov_17qdgjcyro().b[16][0]++;
          cov_17qdgjcyro().s[73]++;
          completed.push(combined);
        } else {
          /* istanbul ignore next */
          cov_17qdgjcyro().b[16][1]++;
          cov_17qdgjcyro().s[74]++;
          active.push(combined);
        }
      });
      /* istanbul ignore next */
      cov_17qdgjcyro().s[75]++;
      return {
        active,
        completed
      };
    } catch (catchError) {
      /* istanbul ignore next */
      cov_17qdgjcyro().s[76]++;
      // Erreur silencieuse
      console.error('Error fetching user challenges:', catchError);
      /* istanbul ignore next */
      cov_17qdgjcyro().s[77]++;
      return {
        active: [],
        completed: []
      };
    }
  }
  // Classements et leaderboards
  async getLeaderboard(type =
  /* istanbul ignore next */
  (cov_17qdgjcyro().b[17][0]++, 'global'), sport, userId, limit =
  /* istanbul ignore next */
  (cov_17qdgjcyro().b[18][0]++, 50)) {
    /* istanbul ignore next */
    cov_17qdgjcyro().f[10]++;
    cov_17qdgjcyro().s[78]++;
    try {
      // Pour cet exemple, on utilise des données mockées
      // En production, cela serait calculé à partir de vraies statistiques
      const mockLeaderboard =
      /* istanbul ignore next */
      (cov_17qdgjcyro().s[79]++, [{
        user_id: '1',
        username: 'Rugby_Beast_33',
        avatar_url: '/avatars/user1.jpg',
        sport: 'rugby',
        sport_position: 'pilier',
        level: 15,
        total_points: 24500,
        weekly_points: 1200,
        monthly_points: 4800,
        challenges_completed: 47,
        current_streak: 12,
        rank: 1,
        change_from_last_week: 2
      }, {
        user_id: '2',
        username: 'FitNinja_Pro',
        avatar_url: '/avatars/user2.jpg',
        sport: 'basketball',
        sport_position: 'meneur',
        level: 13,
        total_points: 22100,
        weekly_points: 980,
        monthly_points: 4200,
        challenges_completed: 39,
        current_streak: 8,
        rank: 2,
        change_from_last_week: -1
      }, {
        user_id: '3',
        username: 'Marathon_Queen',
        avatar_url: '/avatars/user3.jpg',
        sport: 'running',
        level: 14,
        total_points: 21800,
        weekly_points: 1100,
        monthly_points: 4500,
        challenges_completed: 52,
        current_streak: 15,
        rank: 3,
        change_from_last_week: 1
      }]);
      // Simulation du filtrage par sport
      /* istanbul ignore next */
      cov_17qdgjcyro().s[80]++;
      if (
      /* istanbul ignore next */
      (cov_17qdgjcyro().b[20][0]++, type === 'sport') &&
      /* istanbul ignore next */
      (cov_17qdgjcyro().b[20][1]++, sport)) {
        /* istanbul ignore next */
        cov_17qdgjcyro().b[19][0]++;
        cov_17qdgjcyro().s[81]++;
        return mockLeaderboard.filter(entry => {
          /* istanbul ignore next */
          cov_17qdgjcyro().f[11]++;
          cov_17qdgjcyro().s[82]++;
          return entry.sport === sport;
        });
      } else
      /* istanbul ignore next */
      {
        cov_17qdgjcyro().b[19][1]++;
      }
      cov_17qdgjcyro().s[83]++;
      return mockLeaderboard.slice(0, limit);
    } catch (catchError) {
      /* istanbul ignore next */
      cov_17qdgjcyro().s[84]++;
      // Erreur silencieuse
      console.error('Error fetching leaderboard:', catchError);
      /* istanbul ignore next */
      cov_17qdgjcyro().s[85]++;
      return [];
    }
  }
  // Feed social et posts
  async getSocialFeed(userId, feedType =
  /* istanbul ignore next */
  (cov_17qdgjcyro().b[21][0]++, 'friends'), limit =
  /* istanbul ignore next */
  (cov_17qdgjcyro().b[22][0]++, 20)) {
    /* istanbul ignore next */
    cov_17qdgjcyro().f[12]++;
    cov_17qdgjcyro().s[86]++;
    try {
      // Données mockées pour demonstration
      const mockPosts =
      /* istanbul ignore next */
      (cov_17qdgjcyro().s[87]++, [{
        id: '1',
        user_id: '2',
        content: 'Nouveau PR au développé couché ! 120kg x5 reps 💪 Les entraînements payent enfin !',
        post_type: 'achievement',
        achievements: [{
          type: 'bench_press_pr',
          value: 120,
          unit: 'kg',
          milestone: true
        }],
        likes_count: 23,
        comments_count: 8,
        shares_count: 3,
        created_at: new Date().toISOString(),
        author_profile: {
          username: 'FitNinja_Pro',
          avatar_url: '/avatars/user2.jpg',
          sport: 'basketball',
          level: 13
        },
        is_liked: false,
        is_bookmarked: false
      }, {
        id: '2',
        user_id: '1',
        content: "Session mêlée ce matin avec l'équipe. Ready pour le match de samedi ! 🏉",
        post_type: 'workout',
        workout_data: {
          duration: 90,
          exercises: ['Mêlée', 'Scrum', 'Poussée traîneau'],
          calories_burned: 650
        },
        likes_count: 18,
        comments_count: 5,
        shares_count: 1,
        created_at: (0, date_fns_1.subDays)(new Date(), 1).toISOString(),
        author_profile: {
          username: 'Rugby_Beast_33',
          avatar_url: '/avatars/user1.jpg',
          sport: 'rugby',
          level: 15
        },
        is_liked: true,
        is_bookmarked: false
      }]);
      /* istanbul ignore next */
      cov_17qdgjcyro().s[88]++;
      return mockPosts.slice(0, limit);
    } catch (catchError) {
      /* istanbul ignore next */
      cov_17qdgjcyro().s[89]++;
      // Erreur silencieuse
      console.error('Error fetching social feed:', catchError);
      /* istanbul ignore next */
      cov_17qdgjcyro().s[90]++;
      return [];
    }
  }
  async createPost(userId, postData) {
    /* istanbul ignore next */
    cov_17qdgjcyro().f[13]++;
    cov_17qdgjcyro().s[91]++;
    try {
      const {
        data: _data,
        error: _error
      } =
      /* istanbul ignore next */
      (cov_17qdgjcyro().s[92]++, await supabase_1.supabase.from('social_posts').insert({
        user_id: userId,
        ...postData,
        likes_count: 0,
        comments_count: 0,
        shares_count: 0
      }).select('id').single());
      /* istanbul ignore next */
      cov_17qdgjcyro().s[93]++;
      if (_error) {
        /* istanbul ignore next */
        cov_17qdgjcyro().b[23][0]++;
        cov_17qdgjcyro().s[94]++;
        throw _error;
      } else
      /* istanbul ignore next */
      {
        cov_17qdgjcyro().b[23][1]++;
      }
      cov_17qdgjcyro().s[95]++;
      return _data.id;
    } catch (catchError) {
      /* istanbul ignore next */
      cov_17qdgjcyro().s[96]++;
      // Erreur silencieuse
      console.error('Error creating post:', catchError);
      /* istanbul ignore next */
      cov_17qdgjcyro().s[97]++;
      return null;
    }
  }
  async likePost(postId, userId) {
    /* istanbul ignore next */
    cov_17qdgjcyro().f[14]++;
    cov_17qdgjcyro().s[98]++;
    try {
      const {
        error
      } =
      /* istanbul ignore next */
      (cov_17qdgjcyro().s[99]++, await supabase_1.supabase.from('post_likes').insert({
        post_id: postId,
        user_id: userId
      }));
      /* istanbul ignore next */
      cov_17qdgjcyro().s[100]++;
      if (error) {
        /* istanbul ignore next */
        cov_17qdgjcyro().b[24][0]++;
        cov_17qdgjcyro().s[101]++;
        throw error;
      } else
      /* istanbul ignore next */
      {
        cov_17qdgjcyro().b[24][1]++;
      }
      cov_17qdgjcyro().s[102]++;
      return true;
    } catch (catchError) {
      /* istanbul ignore next */
      cov_17qdgjcyro().s[103]++;
      // Erreur silencieuse
      console.error('Error liking post:', catchError);
      /* istanbul ignore next */
      cov_17qdgjcyro().s[104]++;
      return false;
    }
  }
  // Statistiques sociales
  async getSocialStats(userId) {
    /* istanbul ignore next */
    cov_17qdgjcyro().f[15]++;
    cov_17qdgjcyro().s[105]++;
    try {
      // En production, ces données seraient calculées depuis la base
      const mockStats =
      /* istanbul ignore next */
      (cov_17qdgjcyro().s[106]++, {
        friends_count: 24,
        followers_count: 156,
        following_count: 89,
        total_posts: 45,
        total_likes_received: 892,
        total_challenges_created: 8,
        total_challenges_completed: 23,
        community_rank: 47,
        sport_rank: 12,
        influence_score: 78
      });
      /* istanbul ignore next */
      cov_17qdgjcyro().s[107]++;
      return mockStats;
    } catch (catchError) {
      /* istanbul ignore next */
      cov_17qdgjcyro().s[108]++;
      // Erreur silencieuse
      console.error('Error fetching social stats:', catchError);
      /* istanbul ignore next */
      cov_17qdgjcyro().s[109]++;
      throw catchError;
    }
  }
  // Comparaisons avec amis
  async getFriendsComparison(userId, period =
  /* istanbul ignore next */
  (cov_17qdgjcyro().b[25][0]++, 'week')) {
    /* istanbul ignore next */
    cov_17qdgjcyro().f[16]++;
    cov_17qdgjcyro().s[110]++;
    try {
      // Données mockées pour la comparaison
      const userStats =
      /* istanbul ignore next */
      (cov_17qdgjcyro().s[111]++, {
        workouts_completed: 5,
        total_calories_burned: 2800,
        water_intake_liters: 14.5,
        sleep_hours_avg: 7.2,
        challenges_completed: 2
      });
      const friendsStats =
      /* istanbul ignore next */
      (cov_17qdgjcyro().s[112]++, [{
        user_id: '1',
        username: 'Rugby_Beast_33',
        workouts_completed: 6,
        total_calories_burned: 3200,
        water_intake_liters: 16.8,
        sleep_hours_avg: 8.1,
        challenges_completed: 3
      }, {
        user_id: '2',
        username: 'FitNinja_Pro',
        workouts_completed: 4,
        total_calories_burned: 2400,
        water_intake_liters: 12.3,
        sleep_hours_avg: 6.8,
        challenges_completed: 1
      }]);
      /* istanbul ignore next */
      cov_17qdgjcyro().s[113]++;
      return {
        user_stats: userStats,
        friends_stats: friendsStats,
        user_rank: 2
      };
    } catch (catchError) {
      /* istanbul ignore next */
      cov_17qdgjcyro().s[114]++;
      // Erreur silencieuse
      console.error('Error fetching friends comparison:', catchError);
      /* istanbul ignore next */
      cov_17qdgjcyro().s[115]++;
      throw catchError;
    }
  }
  // Notifications sociales
  async getSocialNotifications(userId) {
    /* istanbul ignore next */
    cov_17qdgjcyro().f[17]++;
    cov_17qdgjcyro().s[116]++;
    try {
      /* istanbul ignore next */
      cov_17qdgjcyro().s[117]++;
      // Données mockées pour les notifications
      return {
        friend_requests: [],
        challenge_invites: [],
        mentions: [],
        achievements: []
      };
    } catch (catchError) {
      /* istanbul ignore next */
      cov_17qdgjcyro().s[118]++;
      // Erreur silencieuse
      console.error('Error fetching social notifications:', catchError);
      /* istanbul ignore next */
      cov_17qdgjcyro().s[119]++;
      return {
        friend_requests: [],
        challenge_invites: [],
        mentions: [],
        achievements: []
      };
    }
  }
}
/* istanbul ignore next */
cov_17qdgjcyro().s[120]++;
exports.socialService = new SocialService();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,