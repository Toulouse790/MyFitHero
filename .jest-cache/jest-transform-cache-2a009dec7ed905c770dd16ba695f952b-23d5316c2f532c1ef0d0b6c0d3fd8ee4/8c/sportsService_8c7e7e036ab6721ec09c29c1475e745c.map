{"version":3,"names":["cov_c4vktkvt","actualCoverage","s","exports","useSports","sports_config_1","require","SportsService","getSportsByCategory","category","f","Promise","resolve","setTimeout","error","console","getPositionsBySport","sport","getPositionsForSport","searchSports","query","trim","b","AVAILABLE_SPORTS","getRecommendedSports","profile","recommendations","score","reasons","matchingCriteria","age","includes","id","push","objectives","length","experience","healthConditions","availability","equipment","popularity","Math","round","sort","a","slice","analyzePosition","position","positionAnalyses","football","strengths","weaknesses","recommendedTraining","physicalDemands","basketball","sportAnalyses","undefined","getSportStatistics","sportId","getSportById","statistics","totalPlayers","averageAge","genderDistribution","male","female","popularPositions","percentage","difficultyLevel","injuryRate","running","getSimilarSports","similarSports","filter","validateSportForProfile","isRecommended","warnings","adaptations","benefits","default"],"sources":["/workspaces/MyFitHero/src/features/auth/services/sportsService.ts"],"sourcesContent":["import { \n  AVAILABLE_SPORTS,\n  getSportsByCategory,\n  getPopularSports,\n  searchSports,\n  getSportById,\n  getPositionsForSport,\n  type SportOption \n} from '@/core/config/sports.config';\n\nexport interface UserProfile {\n  age?: number;\n  sport?: string;\n  position?: string;\n  experience?: string;\n  objectives?: string[];\n  healthConditions?: string[];\n  availability?: string;\n  equipment?: string;\n}\n\nexport interface SportRecommendation {\n  sport: SportOption;\n  score: number;\n  reasons: string[];\n  matchingCriteria: string[];\n}\n\nexport interface PositionAnalysis {\n  position: string;\n  strengths: string[];\n  weaknesses: string[];\n  recommendedTraining: string[];\n  physicalDemands: string[];\n}\n\n/**\n * Service pour la gestion des sports et positions\n */\nexport class SportsService {\n  /**\n   * Récupère les sports par catégorie\n   */\n  static async getSportsByCategory(category: string): Promise<SportOption[]> {\n    try {\n      await new Promise(resolve => setTimeout(resolve, 100)); // Simulation async\n      return getSportsByCategory(category);\n    } catch (error: any) {\n      console.error('Erreur lors de la récupération des sports par catégorie:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Récupère les positions disponibles pour un sport\n   */\n  static async getPositionsBySport(sport: string): Promise<string[]> {\n    try {\n      await new Promise(resolve => setTimeout(resolve, 100)); // Simulation async\n      return getPositionsForSport(sport);\n    } catch (error: any) {\n      console.error('Erreur lors de la récupération des positions:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Recherche des sports par nom ou catégorie\n   */\n  static async searchSports(query: string): Promise<SportOption[]> {\n    try {\n      await new Promise(resolve => setTimeout(resolve, 150)); // Simulation async\n      if (!query.trim()) {\n        return AVAILABLE_SPORTS;\n      }\n      return searchSports(query);\n    } catch (error: any) {\n      console.error('Erreur lors de la recherche de sports:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Recommande des sports selon le profil utilisateur\n   */\n  static async getRecommendedSports(profile: UserProfile): Promise<SportRecommendation[]> {\n    try {\n      await new Promise(resolve => setTimeout(resolve, 200)); // Simulation async\n      \n      const recommendations: SportRecommendation[] = [];\n\n      for (const sport of AVAILABLE_SPORTS) {\n        let score = 0;\n        const reasons: string[] = [];\n        const matchingCriteria: string[] = [];\n\n        // Score basé sur l'âge\n        if (profile.age) {\n          if (profile.age >= 50 && ['walking', 'swimming', 'tai-chi', 'golf'].includes(sport.id)) {\n            score += 20;\n            reasons.push('Adapté à votre tranche d\\'âge');\n            matchingCriteria.push('age-appropriate');\n          } else if (profile.age < 30 && ['football', 'basketball', 'rugby'].includes(sport.id)) {\n            score += 15;\n            reasons.push('Sport dynamique pour jeunes adultes');\n            matchingCriteria.push('youth-oriented');\n          }\n        }\n\n        // Score basé sur les objectifs\n        if (profile.objectives && profile.objectives.length > 0) {\n          if (profile.objectives.includes('lose-weight') && \n              ['running', 'cycling', 'swimming'].includes(sport.id)) {\n            score += 25;\n            reasons.push('Excellent pour la perte de poids');\n            matchingCriteria.push('weight-loss');\n          }\n          \n          if (profile.objectives.includes('gain-muscle') && \n              ['weightlifting', 'crossfit', 'rugby'].includes(sport.id)) {\n            score += 25;\n            reasons.push('Idéal pour le développement musculaire');\n            matchingCriteria.push('muscle-building');\n          }\n          \n          if (profile.objectives.includes('improve-endurance') && \n              ['running', 'cycling', 'swimming', 'football'].includes(sport.id)) {\n            score += 20;\n            reasons.push('Améliore l\\'endurance cardiovasculaire');\n            matchingCriteria.push('endurance');\n          }\n          \n          if (profile.objectives.includes('stress-relief') && \n              ['yoga', 'tai-chi', 'swimming'].includes(sport.id)) {\n            score += 20;\n            reasons.push('Excellent pour la gestion du stress');\n            matchingCriteria.push('stress-relief');\n          }\n        }\n\n        // Score basé sur l'expérience\n        if (profile.experience) {\n          if (profile.experience === 'beginner' && sport.category === 'endurance') {\n            score += 15;\n            reasons.push('Facile à débuter');\n            matchingCriteria.push('beginner-friendly');\n          } else if (profile.experience === 'advanced' && \n                     ['crossfit', 'boxing', 'rugby'].includes(sport.id)) {\n            score += 15;\n            reasons.push('Défis techniques avancés');\n            matchingCriteria.push('advanced-challenges');\n          }\n        }\n\n        // Score basé sur les conditions de santé\n        if (profile.healthConditions) {\n          if (profile.healthConditions.includes('back-pain') && \n              ['swimming', 'cycling'].includes(sport.id)) {\n            score += 20;\n            reasons.push('Faible impact sur le dos');\n            matchingCriteria.push('back-friendly');\n          }\n          \n          if (profile.healthConditions.includes('knee-issues') && \n              ['swimming', 'cycling', 'upper-body'].includes(sport.id)) {\n            score += 20;\n            reasons.push('Préserve les genoux');\n            matchingCriteria.push('knee-friendly');\n          }\n          \n          if (profile.healthConditions.includes('hypertension') && \n              ['walking', 'swimming', 'yoga'].includes(sport.id)) {\n            score += 15;\n            reasons.push('Adapté à l\\'hypertension');\n            matchingCriteria.push('cardio-safe');\n          }\n        }\n\n        // Score basé sur la disponibilité\n        if (profile.availability) {\n          if (profile.availability === '1-2-sessions' && \n              ['running', 'cycling', 'swimming'].includes(sport.id)) {\n            score += 10;\n            reasons.push('Flexible en temps');\n            matchingCriteria.push('time-flexible');\n          } else if (profile.availability === 'daily' && \n                     ['weightlifting', 'crossfit'].includes(sport.id)) {\n            score += 15;\n            reasons.push('Adapté à un entraînement quotidien');\n            matchingCriteria.push('daily-suitable');\n          }\n        }\n\n        // Score basé sur l'équipement\n        if (profile.equipment) {\n          if (profile.equipment === 'none' && \n              ['running', 'bodyweight', 'calisthenics'].includes(sport.id)) {\n            score += 25;\n            reasons.push('Aucun équipement requis');\n            matchingCriteria.push('equipment-free');\n          } else if (profile.equipment === 'home-gym' && \n                     ['weightlifting', 'crossfit'].includes(sport.id)) {\n            score += 20;\n            reasons.push('Parfait pour home gym');\n            matchingCriteria.push('home-gym-suitable');\n          }\n        }\n\n        // Bonus popularité\n        score += (sport.popularity || 0) * 0.1;\n\n        // Ne garder que les sports avec un score significatif\n        if (score > 10) {\n          recommendations.push({\n            sport,\n            score: Math.round(score),\n            reasons,\n            matchingCriteria\n          });\n        }\n      }\n\n      // Trier par score décroissant et limiter à 5 recommandations\n      return recommendations\n        .sort((a, b) => b.score - a.score)\n        .slice(0, 5);\n\n    } catch (error: any) {\n      console.error('Erreur lors du calcul des recommandations:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Analyse les caractéristiques d'une position\n   */\n  static async analyzePosition(sport: string, position: string): Promise<PositionAnalysis | null> {\n    try {\n      await new Promise(resolve => setTimeout(resolve, 100)); // Simulation async\n\n      const positionAnalyses: Record<string, Record<string, PositionAnalysis>> = {\n        football: {\n          'Gardien': {\n            position: 'Gardien',\n            strengths: ['Réflexes excellents', 'Leadership naturel', 'Vision du jeu'],\n            weaknesses: ['Moins de course', 'Pression constante', 'Solitude du poste'],\n            recommendedTraining: [\n              'Exercices de réflexes',\n              'Plongeons et parades',\n              'Travail des appuis',\n              'Relances précises',\n              'Condition physique générale'\n            ],\n            physicalDemands: ['Détente verticale', 'Souplesse', 'Réactivité', 'Force des bras']\n          },\n          'Attaquant': {\n            position: 'Attaquant',\n            strengths: ['Finition clinique', 'Sens du but', 'Vitesse d\\'exécution'],\n            weaknesses: ['Pression de marquer', 'Dépendance aux autres', 'Périodes sans ballon'],\n            recommendedTraining: [\n              'Finition sous pression',\n              'Travail dans la surface',\n              'Courses d\\'appel',\n              'Jeu de tête',\n              'Explosivité'\n            ],\n            physicalDemands: ['Vitesse', 'Détente', 'Force explosive', 'Agilité']\n          },\n          'Milieu central': {\n            position: 'Milieu central',\n            strengths: ['Vision panoramique', 'Polyvalence', 'Intelligence tactique'],\n            weaknesses: ['Pression défensive', 'Beaucoup de courses', 'Décisions rapides'],\n            recommendedTraining: [\n              'Endurance aérobie',\n              'Passes sous pression',\n              'Transition défense-attaque',\n              'Placement tactique',\n              'Condition physique complète'\n            ],\n            physicalDemands: ['Endurance', 'Force générale', 'Coordination', 'Résistance']\n          }\n        },\n        basketball: {\n          'Meneur': {\n            position: 'Meneur',\n            strengths: ['Vision de jeu', 'Leadership', 'Créativité'],\n            weaknesses: ['Pression de l\\'organisation', 'Responsabilité du rythme', 'Défense difficile'],\n            recommendedTraining: [\n              'Dribbles variés',\n              'Passes en mouvement',\n              'Lecture de défense',\n              'Condition physique',\n              'Tir extérieur'\n            ],\n            physicalDemands: ['Agilité', 'Vitesse', 'Endurance', 'Coordination']\n          },\n          'Pivot': {\n            position: 'Pivot',\n            strengths: ['Domination physique', 'Rebonds', 'Présence défensive'],\n            weaknesses: ['Mobilité limitée', 'Fautes faciles', 'Moins de touches'],\n            recommendedTraining: [\n              'Jeu dos au panier',\n              'Rebonds offensifs/défensifs',\n              'Déplacements défensifs',\n              'Force fonctionnelle',\n              'Coordination'\n            ],\n            physicalDemands: ['Force', 'Taille', 'Puissance', 'Résistance']\n          }\n        }\n      };\n\n      const sportAnalyses = positionAnalyses[sport];\n      if (!sportAnalyses) return null;\n\n      return sportAnalyses[position] || undefined;\n\n    } catch (error: any) {\n      console.error('Erreur lors de l\\'analyse de position:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Obtient les statistiques d'un sport\n   */\n  static async getSportStatistics(sportId: string): Promise<{\n    totalPlayers: number;\n    averageAge: number;\n    genderDistribution: { male: number; female: number };\n    popularPositions: { position: string; percentage: number }[];\n    difficultyLevel: number;\n    injuryRate: number;\n  } | null> {\n    try {\n      await new Promise(resolve => setTimeout(resolve, 100)); // Simulation async\n\n      const sport = getSportById(sportId);\n      if (!sport) return null;\n\n      // Données simulées mais réalistes\n      const statistics = {\n        football: {\n          totalPlayers: 4500000,\n          averageAge: 24,\n          genderDistribution: { male: 78, female: 22 },\n          popularPositions: [\n            { position: 'Milieu central', percentage: 20 },\n            { position: 'Défenseur central', percentage: 18 },\n            { position: 'Attaquant', percentage: 15 },\n            { position: 'Arrière latéral', percentage: 15 }\n          ],\n          difficultyLevel: 7,\n          injuryRate: 15\n        },\n        basketball: {\n          totalPlayers: 2100000,\n          averageAge: 22,\n          genderDistribution: { male: 65, female: 35 },\n          popularPositions: [\n            { position: 'Arrière', percentage: 25 },\n            { position: 'Ailier', percentage: 22 },\n            { position: 'Meneur', percentage: 20 },\n            { position: 'Pivot', percentage: 18 }\n          ],\n          difficultyLevel: 8,\n          injuryRate: 12\n        },\n        running: {\n          totalPlayers: 8200000,\n          averageAge: 35,\n          genderDistribution: { male: 52, female: 48 },\n          popularPositions: [\n            { position: 'Fond', percentage: 40 },\n            { position: 'Demi-fond', percentage: 35 },\n            { position: 'Sprint', percentage: 15 },\n            { position: 'Trail', percentage: 10 }\n          ],\n          difficultyLevel: 4,\n          injuryRate: 8\n        }\n      };\n\n      return statistics[sportId as keyof typeof statistics] || {\n        totalPlayers: 1000000,\n        averageAge: 28,\n        genderDistribution: { male: 60, female: 40 },\n        popularPositions: [],\n        difficultyLevel: 6,\n        injuryRate: 10\n      };\n\n    } catch (error: any) {\n      console.error('Erreur lors de la récupération des statistiques:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Obtient les sports similaires\n   */\n  static async getSimilarSports(sportId: string): Promise<SportOption[]> {\n    try {\n      await new Promise(resolve => setTimeout(resolve, 100)); // Simulation async\n\n      const sport = getSportById(sportId);\n      if (!sport) return [];\n\n      // Retourner les sports de la même catégorie\n      const similarSports = getSportsByCategory(sport.category)\n        .filter(s => s.id !== sportId)\n        .slice(0, 4);\n\n      return similarSports;\n\n    } catch (error: any) {\n      console.error('Erreur lors de la récupération des sports similaires:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Valide si un sport est adapté à un profil\n   */\n  static async validateSportForProfile(sportId: string, profile: UserProfile): Promise<{\n    isRecommended: boolean;\n    warnings: string[];\n    adaptations: string[];\n    benefits: string[];\n  }> {\n    try {\n      await new Promise(resolve => setTimeout(resolve, 150)); // Simulation async\n\n      const sport = getSportById(sportId);\n      if (!sport) {\n        return {\n          isRecommended: false,\n          warnings: ['Sport non trouvé'],\n          adaptations: [],\n          benefits: []\n        };\n      }\n\n      let isRecommended = true;\n      const warnings: string[] = [];\n      const adaptations: string[] = [];\n      const benefits: string[] = [];\n\n      // Vérifications basées sur l'âge\n      if (profile.age) {\n        if (profile.age >= 60 && ['rugby', 'boxing'].includes(sportId)) {\n          warnings.push('Sport à fort contact physique');\n          adaptations.push('Privilégier les entraînements techniques');\n          isRecommended = false;\n        } else if (profile.age >= 50 && ['running', 'cycling'].includes(sportId)) {\n          adaptations.push('Commencer progressivement');\n          adaptations.push('Surveillance de la fréquence cardiaque recommandée');\n        }\n      }\n\n      // Vérifications basées sur les conditions de santé\n      if (profile.healthConditions) {\n        if (profile.healthConditions.includes('back-pain') && \n            ['weightlifting', 'rugby'].includes(sportId)) {\n          warnings.push('Risque d\\'aggravation des douleurs dorsales');\n          adaptations.push('Échauffement prolongé obligatoire');\n          adaptations.push('Éviter les charges lourdes au début');\n        }\n\n        if (profile.healthConditions.includes('knee-issues') && \n            ['running', 'football'].includes(sportId)) {\n          warnings.push('Impact élevé sur les genoux');\n          adaptations.push('Privilégier les surfaces souples');\n          adaptations.push('Renforcement musculaire préventif');\n        }\n\n        if (profile.healthConditions.includes('hypertension') && \n            ['weightlifting', 'boxing'].includes(sportId)) {\n          warnings.push('Surveillance de la tension artérielle requise');\n          adaptations.push('Éviter les efforts maximaux');\n          adaptations.push('Privilégier l\\'endurance modérée');\n        }\n      }\n\n      // Bénéfices généraux\n      benefits.push('Amélioration de la condition physique générale');\n      benefits.push('Développement de la coordination');\n      \n      if (sport.category === 'endurance') {\n        benefits.push('Renforcement du système cardiovasculaire');\n        benefits.push('Amélioration de l\\'endurance');\n      }\n      \n      if (sport.category === 'force') {\n        benefits.push('Développement de la force musculaire');\n        benefits.push('Amélioration de la densité osseuse');\n      }\n\n      if (['football', 'basketball'].includes(sportId)) {\n        benefits.push('Développement de l\\'esprit d\\'équipe');\n        benefits.push('Amélioration des réflexes');\n      }\n\n      return {\n        isRecommended,\n        warnings,\n        adaptations,\n        benefits\n      };\n\n    } catch (error: any) {\n      console.error('Erreur lors de la validation:', error);\n      return {\n        isRecommended: false,\n        warnings: ['Erreur lors de l\\'analyse'],\n        adaptations: [],\n        benefits: []\n      };\n    }\n  }\n}\n\n/**\n * Hook React pour utiliser le service des sports\n */\nexport function useSports() {\n  return {\n    getSportsByCategory: SportsService.getSportsByCategory,\n    getPositionsBySport: SportsService.getPositionsBySport,\n    searchSports: SportsService.searchSports,\n    getRecommendedSports: SportsService.getRecommendedSports,\n    analyzePosition: SportsService.analyzePosition,\n    getSportStatistics: SportsService.getSportStatistics,\n    getSimilarSports: SportsService.getSimilarSports,\n    validateSportForProfile: SportsService.validateSportForProfile\n  };\n}\n\nexport type { SportOption };\nexport default SportsService;"],"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","ignoreList":[]}