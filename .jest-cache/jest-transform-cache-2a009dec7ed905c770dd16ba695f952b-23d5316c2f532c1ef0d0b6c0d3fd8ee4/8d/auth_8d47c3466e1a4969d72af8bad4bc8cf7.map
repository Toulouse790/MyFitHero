{"version":3,"names":["supabase_1","cov_1gj617hy8z","s","require","exports","authClient","register","email","username","password","f","data","error","supabase","auth","signUp","options","full_name","b","message","user","profileError","from","insert","id","created_at","Date","toISOString","updated_at","console","signIn","signInWithPassword","signOut","resetPassword","resetPasswordForEmail","redirectTo","window","location","origin"],"sources":["/workspaces/MyFitHero/src/lib/auth.ts"],"sourcesContent":["import { supabase } from '@/lib/supabase';\n\ninterface AuthResult {\n  user?: any;\n  error?: string;\n}\n\nexport const authClient = {\n  async register(email: string, username: string, password: string): Promise<AuthResult> {\n    try {\n      const { data, error }: any = await supabase.auth.signUp({\n        email,\n        password,\n        options: {\n          data: {\n            username,\n            full_name: username,\n          }\n        }\n      });\n\n      if (error) {\n        return { error: error.message };\n      }\n\n      if (data.user) {\n        // Create user profile in profiles table\n        const { error: profileError } = await supabase\n          .from('user_profiles')\n          .insert([{\n            id: data.user.id,\n            email: data.user.email,\n            username,\n            full_name: username,\n            created_at: new Date().toISOString(),\n            updated_at: new Date().toISOString()\n          }]);\n\n        if (profileError) {\n          console.error('Error creating profile:', profileError);\n          // Don't return error here, user is created but profile might need manual fix\n        }\n\n        return { user: data.user };\n      }\n\n      return { error: 'Échec de la création du compte' };\n    } catch (error: any) {\n      console.error('Registration error:', error);\n      return { error: 'Une erreur est survenue lors de l\\'inscription' };\n    }\n  },\n\n  async signIn(email: string, password: string): Promise<AuthResult> {\n    try {\n      const { data, error }: any = await supabase.auth.signInWithPassword({\n        email,\n        password,\n      });\n\n      if (error) {\n        return { error: error.message };\n      }\n\n      if (data.user) {\n        return { user: data.user };\n      }\n\n      return { error: 'Échec de la connexion' };\n    } catch (error: any) {\n      console.error('Sign in error:', error);\n      return { error: 'Une erreur est survenue lors de la connexion' };\n    }\n  },\n\n  async signOut(): Promise<AuthResult> {\n    try {\n      const { error } = await supabase.auth.signOut();\n      \n      if (error) {\n        return { error: error.message };\n      }\n\n      return {};\n    } catch (error: any) {\n      console.error('Sign out error:', error);\n      return { error: 'Une erreur est survenue lors de la déconnexion' };\n    }\n  },\n\n  async resetPassword(email: string): Promise<AuthResult> {\n    try {\n      const { error } = await supabase.auth.resetPasswordForEmail(email, {\n        redirectTo: `${window.location.origin}/auth/reset-password`,\n      });\n\n      if (error) {\n        return { error: error.message };\n      }\n\n      return {};\n    } catch (error: any) {\n      console.error('Reset password error:', error);\n      return { error: 'Une erreur est survenue lors de la réinitialisation' };\n    }\n  }\n};"],"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","ignoreList":[]}