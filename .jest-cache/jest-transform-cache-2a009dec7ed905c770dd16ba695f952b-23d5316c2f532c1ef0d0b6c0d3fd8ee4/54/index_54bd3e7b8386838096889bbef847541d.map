{"version":3,"names":["react_1","cov_1b40tgt5a5","s","__importStar","require","wouter_1","zustand_1","middleware_1","supabase_1","pwaConfig","enableOfflineMode","enablePushNotifications","enableBackgroundSync","cacheStrategy","exports","appStore","create","subscribeWithSelector","persist","set","_get","f","user","isAuthenticated","isLoading","onboarding","currentStep","totalSteps","completedModules","userData","conversationHistory","aiRecommendations","isCompleted","preferences","theme","language","units","notifications","workoutReminders","nutritionReminders","hydrationReminders","sleepReminders","socialNotifications","challengeUpdates","systemUpdates","pushNotifications","emailNotifications","privacy","profile_visibility","workout_sharing","progress_sharing","location_sharing","challenge_participation","cache","workouts","exercises","nutritionEntries","sleepEntries","hydrationEntries","wellnessEntries","socialData","analytics","ui","currentPage","isOffline","lastSyncTime","pendingSyncs","setUser","updateOnboarding","newState","state","updatePreferences","newPreferences","updateCache","cacheKey","data","clearCache","_state","addPendingSync","sync","removePendingSync","syncId","filter","id","name","partialize","useUSLocation","location","setLocation","useState","setIsLoading","error","setError","getUSLocation","useCallback","position","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","enableHighAccuracy","timeout","maximumAge","response","fetch","coords","longitude","latitude","import","meta","env","VITE_MAPBOX_TOKEN","json","b","features","length","feature","context","find","c","startsWith","short_code","replace","city","text","zip","timezone","getTimezoneFromState","stateTimezones","CA","NY","TX","FL","IL","PA","OH","GA","NC","MI","NJ","VA","WA","AZ","MA","TN","IN","MO","MD","WI","CO","MN","SC","AL","LA","KY","OR","OK","CT","UT","IA","NV","AR","MS","KS","NM","NE","WV","ID","HI","AK","NH","ME","MT","RI","DE","SD","ND","DC","VT","WY","useUSUnits","isImperial","convertWeight","value","fromUnit","toUnit","targetUnit","unit","Math","round","convertHeight","feet","inches","totalInches","cm","convertDistance","convertVolume","convertTemperature","useConversationalAI","isProcessing","setIsProcessing","sendMessage","message","method","headers","Authorization","supabase","auth","getSession","session","access_token","body","JSON","stringify","usMarket","ok","Error","userMessage","Date","now","type","content","timestamp","aiMessage","suggestedResponses","recommendations","err","errorMessage","generateRecommendations","useOfflineSync","isSyncing","setIsSyncing","syncPendingData","updatedSync","retryCount","console","addToSyncQueue","random","toString","substr","toISOString","onLine","useEffect","handleOnline","window","addEventListener","removeEventListener","OnboardingPage","lazy","then","DashboardPage","NotFoundPage","AppLoadingSpinner","AppErrorBoundary","appRoutes","path","component","exact","title","description","requiresAuth","requiresOnboarding","AuthGuard","children","useLocation","checkAuth","userError","from","select","eq","single","getState","subscription","onAuthStateChange","event","unsubscribe","jsx_runtime_1","jsx","Fragment","MyFitHeroIndex","isInitialized","setIsInitialized","appVersion","buildNumber","initializeApp","registration","serviceWorker","register","Notification","permission","requestPermission","updateOnlineStatus","process","NODE_ENV","updatePageMetadata","route","document","metaDescription","querySelector","setAttribute","currentRouteInfo","pathname","showProgress","jsxs","className","Suspense","fallback","Router","map","Component","Route","default","memo"],"sources":["/workspaces/MyFitHero/src/pages/index.tsx"],"sourcesContent":["// ====================================================================\n// MyFitHero - Index Principal - Architecturé pour le Marché US\n// ====================================================================\n\nimport React, {\n  useState,\n  useCallback,\n  useEffect,\n  lazy,\n  Suspense,\n  ReactNode,\n} from 'react';\nimport { Router, Route, useLocation } from 'wouter';\nimport { create } from 'zustand';\nimport { persist, subscribeWithSelector } from 'zustand/middleware';\nimport { onCLS, onFCP, onLCP, onTTFB, onINP } from 'web-vitals';\nimport { supabase } from '@/lib/supabase'; // Utiliser l'instance centralisée\nimport type { UserProfile } from '@/shared/types/userProfile'; // Utiliser le type standard\n\n// ====================================================================\n// Configuration et Types de Base\n// ====================================================================\n\n// Interfaces pour les données de géolocalisation\ninterface GeolocationContext {\n  id: string;\n  short_code?: string;\n  text?: string;\n}\n\n// Types TypeScript complets pour l'application\n// Utilisation du type UserProfile standard pour la cohérence\ntype User = UserProfile;\n\ninterface FitnessProfile {\n  // Données anthropométriques (US units par défaut)\n  weight_lbs: number;\n  height_ft: number;\n  height_in: number;\n  age: number;\n  gender: 'male' | 'female' | undefined; // Aligné avec Supabase\n  body_fat_percentage?: number;\n\n  // Sports US populaires\n  primary_sport: USMainSports;\n  secondary_sports: USMainSports[];\n  position?: string;\n  experience_level: 'beginner' | 'intermediate' | 'advanced' | 'professional';\n\n  // Objectifs fitness\n  fitness_goals: FitnessGoal[];\n  target_weight_lbs?: number;\n  weekly_workout_frequency: number;\n\n  // Équipements disponibles\n  available_equipment: Equipment[];\n  gym_membership: boolean;\n  home_gym_setup: boolean;\n\n  // Préférences nutritionnelles US\n  dietary_restrictions: DietaryRestriction[];\n  calorie_goal_daily: number;\n  protein_goal_grams: number;\n\n  // Objectifs d'hydratation (fl oz)\n  daily_water_goal_floz: number;\n\n  // Préférences de sommeil\n  target_sleep_hours: number;\n  sleep_schedule: {\n    bedtime: string; // Format HH:MM\n    wake_time: string; // Format HH:MM\n  };\n\n  // Préférences sociales\n  privacy_level: 'public' | 'friends' | 'private';\n  share_workouts: boolean;\n  join_challenges: boolean;\n}\n\ntype USMainSports =\n  | 'basketball'\n  | 'football'\n  | 'baseball'\n  | 'soccer'\n  | 'tennis'\n  | 'swimming'\n  | 'running'\n  | 'cycling'\n  | 'weightlifting'\n  | 'crossfit'\n  | 'yoga'\n  | 'pilates'\n  | 'martial_arts'\n  | 'rock_climbing'\n  | 'skiing'\n  | 'snowboarding'\n  | 'surfing'\n  | 'golf'\n  | 'volleyball'\n  | 'gymnastics';\n\ntype FitnessGoal =\n  | 'weight_loss'\n  | 'muscle_gain'\n  | 'strength_building'\n  | 'endurance_improvement'\n  | 'flexibility_increase'\n  | 'sport_performance'\n  | 'general_fitness'\n  | 'rehabilitation'\n  | 'stress_relief'\n  | 'better_sleep';\n\ntype Equipment =\n  | 'dumbbells'\n  | 'barbell'\n  | 'kettlebells'\n  | 'resistance_bands'\n  | 'pull_up_bar'\n  | 'yoga_mat'\n  | 'treadmill'\n  | 'stationary_bike'\n  | 'rowing_machine'\n  | 'squat_rack'\n  | 'bench'\n  | 'cable_machine'\n  | 'medicine_ball'\n  | 'foam_roller'\n  | 'jump_rope';\n\ntype DietaryRestriction =\n  | 'vegetarian'\n  | 'vegan'\n  | 'pescatarian'\n  | 'keto'\n  | 'paleo'\n  | 'gluten_free'\n  | 'dairy_free'\n  | 'nut_free'\n  | 'low_carb'\n  | 'low_fat'\n  | 'mediterranean'\n  | 'intermittent_fasting'\n  | 'none';\n\n// Types pour l'onboarding conversationnel\ninterface OnboardingState {\n  currentStep: number;\n  totalSteps: number;\n  completedModules: OnboardingModule[];\n  userData: Partial<User>;\n  conversationHistory: ConversationMessage[];\n  aiRecommendations: AIRecommendation[];\n  isCompleted: boolean;\n}\n\ninterface OnboardingModule {\n  id: string;\n  name: string;\n  type: 'sport' | 'nutrition' | 'sleep' | 'hydration' | 'mental_wellness' | 'social';\n  icon: string;\n  isCompleted: boolean;\n  isOptional: boolean;\n  estimatedMinutes: number;\n  usRelevance: number; // Score de pertinence pour le marché US (0-10)\n}\n\ninterface ConversationMessage {\n  id: string;\n  type: 'ai' | 'user';\n  content: string;\n  timestamp: Date;\n  context?: Record<string, string | number | boolean> | undefined;\n  suggestedResponses?: string[];\n}\n\ninterface AIRecommendation {\n  id: string;\n  type: 'workout' | 'nutrition' | 'hydration' | 'sleep' | 'mental_health';\n  title: string;\n  description: string;\n  confidence: number;\n  usContext: string; // Contexte spécifique au marché US\n  actionable: boolean;\n  priority: 'low' | 'medium' | 'high';\n}\n\n// Types pour les workouts\ninterface Workout {\n  id: string;\n  user_id: string;\n  name: string;\n  type: WorkoutType;\n  duration_minutes: number;\n  exercises: Exercise[];\n  created_at: string;\n  completed_at?: string;\n  calories_burned?: number;\n  notes?: string;\n  rating?: number; // 1-5 stars\n  us_sport_specific?: boolean;\n  equipment_used: Equipment[];\n}\n\ninterface Exercise {\n  id: string;\n  name: string;\n  category: ExerciseCategory;\n  muscle_groups: MuscleGroup[];\n  sets: ExerciseSet[];\n  instructions: string[];\n  video_url?: string;\n  thumbnail_url?: string;\n  difficulty_level: 'beginner' | 'intermediate' | 'advanced';\n  us_sport_relevance: USMainSports[];\n  equipment_required: Equipment[];\n  alternative_exercises: string[];\n}\n\ninterface ExerciseSet {\n  id: string;\n  exercise_id: string;\n  set_number: number;\n  reps?: number;\n  weight_lbs?: number;\n  duration_seconds?: number;\n  distance_miles?: number;\n  rest_seconds: number;\n  perceived_exertion?: number; // RPE 1-10\n  notes?: string;\n  is_warmup: boolean;\n  is_failure: boolean;\n}\n\ntype WorkoutType =\n  | 'strength'\n  | 'cardio'\n  | 'hiit'\n  | 'yoga'\n  | 'pilates'\n  | 'sport_specific'\n  | 'flexibility'\n  | 'rehabilitation'\n  | 'circuit'\n  | 'crossfit';\n\ntype ExerciseCategory =\n  | 'compound'\n  | 'isolation'\n  | 'cardio'\n  | 'plyometric'\n  | 'stability'\n  | 'flexibility'\n  | 'core'\n  | 'functional';\n\ntype MuscleGroup =\n  | 'chest'\n  | 'back'\n  | 'shoulders'\n  | 'biceps'\n  | 'triceps'\n  | 'forearms'\n  | 'core'\n  | 'quadriceps'\n  | 'hamstrings'\n  | 'glutes'\n  | 'calves'\n  | 'full_body';\n\n// Types pour la nutrition\ninterface NutritionEntry {\n  id: string;\n  user_id: string;\n  date: string;\n  meals: Meal[];\n  daily_totals: NutritionTotals;\n  water_intake_floz: number;\n  supplements: Supplement[];\n  notes?: string;\n}\n\ninterface Meal {\n  id: string;\n  type: 'breakfast' | 'lunch' | 'dinner' | 'snack';\n  foods: FoodItem[];\n  time: string;\n  calories: number;\n  macros: Macronutrients;\n}\n\ninterface FoodItem {\n  id: string;\n  name: string;\n  brand?: string;\n  serving_size: string;\n  serving_unit: USFoodUnit;\n  quantity: number;\n  calories_per_serving: number;\n  macros_per_serving: Macronutrients;\n  micronutrients?: Micronutrients;\n  is_us_food: boolean; // True pour les aliments spécifiquement US\n  barcode?: string;\n}\n\ninterface Macronutrients {\n  protein_g: number;\n  carbs_g: number;\n  fat_g: number;\n  fiber_g: number;\n  sugar_g: number;\n}\n\ninterface Micronutrients {\n  vitamin_c_mg?: number;\n  vitamin_d_iu?: number;\n  calcium_mg?: number;\n  iron_mg?: number;\n  sodium_mg?: number;\n  potassium_mg?: number;\n}\n\ninterface NutritionTotals {\n  calories: number;\n  macros: Macronutrients;\n  goal_calories: number;\n  goal_macros: Macronutrients;\n  percentage_complete: number;\n}\n\ninterface Supplement {\n  id: string;\n  name: string;\n  dosage: string;\n  time_taken: string;\n  notes?: string;\n}\n\ntype USFoodUnit =\n  | 'oz'\n  | 'lb'\n  | 'cup'\n  | 'tbsp'\n  | 'tsp'\n  | 'fl_oz'\n  | 'pint'\n  | 'quart'\n  | 'gallon'\n  | 'slice'\n  | 'piece'\n  | 'serving';\n\n// Types pour le sommeil\ninterface SleepEntry {\n  id: string;\n  user_id: string;\n  date: string;\n  bedtime: string;\n  sleep_time?: string;\n  wake_time: string;\n  total_sleep_hours: number;\n  sleep_quality: number; // 1-10\n  sleep_stages?: SleepStages;\n  sleep_environment: SleepEnvironment;\n  sleep_factors: SleepFactor[];\n  notes?: string;\n}\n\ninterface SleepStages {\n  deep_sleep_minutes: number;\n  rem_sleep_minutes: number;\n  light_sleep_minutes: number;\n  awake_minutes: number;\n}\n\ninterface SleepEnvironment {\n  temperature_f: number;\n  humidity_percentage: number;\n  noise_level: 'silent' | 'quiet' | 'moderate' | 'loud';\n  light_level: 'dark' | 'dim' | 'moderate' | 'bright';\n  comfort_rating: number; // 1-10\n}\n\ntype SleepFactor =\n  | 'caffeine'\n  | 'alcohol'\n  | 'exercise'\n  | 'stress'\n  | 'medication'\n  | 'screen_time'\n  | 'meal_timing'\n  | 'room_temperature'\n  | 'noise'\n  | 'travel'\n  | 'illness';\n\n// Types pour l'hydratation\ninterface HydrationEntry {\n  id: string;\n  user_id: string;\n  date: string;\n  entries: WaterIntake[];\n  daily_goal_floz: number;\n  total_intake_floz: number;\n  percentage_complete: number;\n  reminders_sent: number;\n  climate_factor: ClimateFactor;\n}\n\ninterface WaterIntake {\n  id: string;\n  time: string;\n  amount_floz: number;\n  source: HydrationSource;\n  temperature: 'cold' | 'room' | 'warm' | 'hot';\n  notes?: string;\n}\n\ntype HydrationSource =\n  | 'water'\n  | 'sports_drink'\n  | 'tea'\n  | 'coffee'\n  | 'juice'\n  | 'soda'\n  | 'milk'\n  | 'protein_shake'\n  | 'other';\n\ninterface ClimateFactor {\n  temperature_f: number;\n  humidity_percentage: number;\n  activity_level: 'sedentary' | 'light' | 'moderate' | 'intense';\n  sweat_rate: 'low' | 'medium' | 'high';\n}\n\n// Types pour le bien-être mental\ninterface MentalWellnessEntry {\n  id: string;\n  user_id: string;\n  date: string;\n  mood_rating: number; // 1-10\n  stress_level: number; // 1-10\n  energy_level: number; // 1-10\n  anxiety_level: number; // 1-10\n  meditation_minutes: number;\n  gratitude_notes: string[];\n  mood_factors: MoodFactor[];\n  activities: WellnessActivity[];\n  notes?: string;\n}\n\ntype MoodFactor =\n  | 'work_stress'\n  | 'relationship'\n  | 'finances'\n  | 'health'\n  | 'weather'\n  | 'sleep_quality'\n  | 'exercise'\n  | 'nutrition'\n  | 'social_interaction'\n  | 'achievement'\n  | 'relaxation'\n  | 'other';\n\ninterface WellnessActivity {\n  id: string;\n  type: WellnessActivityType;\n  duration_minutes: number;\n  rating: number; // 1-10\n  notes?: string;\n}\n\ntype WellnessActivityType =\n  | 'meditation'\n  | 'breathing_exercise'\n  | 'journaling'\n  | 'mindfulness'\n  | 'yoga'\n  | 'nature_walk'\n  | 'reading'\n  | 'music'\n  | 'art'\n  | 'social_time'\n  | 'hobby';\n\n// Types pour l'aspect social\ninterface SocialProfile {\n  id: string;\n  user_id: string;\n  display_name: string;\n  bio?: string;\n  avatar_url?: string;\n  privacy_settings: PrivacySettings;\n  stats: SocialStats;\n  badges: Badge[];\n  friends: Friend[];\n  groups: Group[];\n  challenges: Challenge[];\n}\n\ninterface PrivacySettings {\n  profile_visibility: 'public' | 'friends' | 'private';\n  workout_sharing: boolean;\n  progress_sharing: boolean;\n  location_sharing: boolean;\n  challenge_participation: boolean;\n}\n\ninterface SocialStats {\n  total_workouts: number;\n  total_calories_burned: number;\n  total_workout_minutes: number;\n  current_streak_days: number;\n  longest_streak_days: number;\n  challenges_completed: number;\n  friends_count: number;\n  groups_count: number;\n}\n\ninterface Badge {\n  id: string;\n  name: string;\n  description: string;\n  icon_url: string;\n  earned_date: string;\n  category: BadgeCategory;\n  rarity: 'common' | 'uncommon' | 'rare' | 'epic' | 'legendary';\n}\n\ntype BadgeCategory =\n  | 'workout_consistency'\n  | 'weight_loss'\n  | 'strength_gain'\n  | 'endurance'\n  | 'social'\n  | 'challenge'\n  | 'milestone'\n  | 'special_event'\n  | 'us_sport_specific';\n\ninterface Friend {\n  id: string;\n  user_id: string;\n  friend_user_id: string;\n  status: 'pending' | 'accepted' | 'blocked';\n  created_at: string;\n  friend_profile: {\n    display_name: string;\n    avatar_url?: string;\n    current_streak: number;\n    recent_activity: string;\n  };\n}\n\ninterface Group {\n  id: string;\n  name: string;\n  description: string;\n  category: GroupCategory;\n  member_count: number;\n  is_public: boolean;\n  created_by: string;\n  created_at: string;\n  us_region?: string; // Pour les groupes régionaux US\n}\n\ntype GroupCategory =\n  | 'sport_specific'\n  | 'location_based'\n  | 'goal_oriented'\n  | 'age_group'\n  | 'workout_type'\n  | 'nutrition_focused'\n  | 'beginner_friendly'\n  | 'competitive'\n  | 'support_group';\n\ninterface Challenge {\n  id: string;\n  name: string;\n  description: string;\n  type: ChallengeType;\n  goal_value: number;\n  goal_unit: string;\n  start_date: string;\n  end_date: string;\n  participants: ChallengeParticipant[];\n  prizes: Prize[];\n  is_us_themed: boolean; // Défis à thème américain\n  difficulty: 'easy' | 'medium' | 'hard' | 'extreme';\n}\n\ntype ChallengeType =\n  | 'step_count'\n  | 'workout_frequency'\n  | 'calories_burned'\n  | 'weight_loss'\n  | 'strength_gain'\n  | 'consistency'\n  | 'sport_specific'\n  | 'team_based'\n  | 'charity'\n  | 'seasonal';\n\ninterface ChallengeParticipant {\n  user_id: string;\n  display_name: string;\n  current_progress: number;\n  position: number;\n  joined_date: string;\n}\n\ninterface Prize {\n  position: number;\n  description: string;\n  value?: number;\n  sponsor?: string;\n}\n\n// Types pour les analytics et métriques\ninterface UserAnalytics {\n  user_id: string;\n  period: 'week' | 'month' | 'quarter' | 'year';\n  fitness_metrics: FitnessMetrics;\n  nutrition_metrics: NutritionMetrics;\n  sleep_metrics: SleepMetrics;\n  hydration_metrics: HydrationMetrics;\n  wellness_metrics: WellnessMetrics;\n  social_metrics: SocialMetrics;\n  generated_at: string;\n}\n\ninterface FitnessMetrics {\n  total_workouts: number;\n  total_exercise_minutes: number;\n  average_workout_duration: number;\n  calories_burned: number;\n  strength_progression: StrengthProgression[];\n  cardio_progression: CardioProgression[];\n  consistency_score: number; // 0-100\n  favorite_exercises: string[];\n  workout_frequency_by_day: Record<string, number>;\n}\n\ninterface StrengthProgression {\n  exercise_name: string;\n  start_weight_lbs: number;\n  current_weight_lbs: number;\n  max_weight_lbs: number;\n  progression_percentage: number;\n}\n\ninterface CardioProgression {\n  activity: string;\n  start_performance: number;\n  current_performance: number;\n  best_performance: number;\n  unit: string;\n  improvement_percentage: number;\n}\n\ninterface NutritionMetrics {\n  average_daily_calories: number;\n  calorie_goal_adherence: number; // Pourcentage\n  macro_distribution: Macronutrients;\n  hydration_adherence: number; // Pourcentage\n  meal_consistency: number; // Score 0-100\n  supplement_adherence: number; // Pourcentage\n  favorite_foods: string[];\n  nutrition_score: number; // Score global 0-100\n}\n\ninterface SleepMetrics {\n  average_sleep_duration: number;\n  sleep_quality_average: number;\n  bedtime_consistency: number; // Score 0-100\n  sleep_debt_hours: number;\n  best_sleep_factors: SleepFactor[];\n  worst_sleep_factors: SleepFactor[];\n  sleep_trend: 'improving' | 'stable' | 'declining';\n}\n\ninterface HydrationMetrics {\n  average_daily_intake_floz: number;\n  hydration_goal_adherence: number; // Pourcentage\n  hydration_consistency: number; // Score 0-100\n  preferred_hydration_sources: HydrationSource[];\n  dehydration_risk_days: number;\n}\n\ninterface WellnessMetrics {\n  average_mood_rating: number;\n  average_stress_level: number;\n  average_energy_level: number;\n  meditation_minutes_total: number;\n  wellness_activities_count: number;\n  mood_trend: 'improving' | 'stable' | 'declining';\n  top_mood_factors: MoodFactor[];\n}\n\ninterface SocialMetrics {\n  social_engagement_score: number; // 0-100\n  friends_added: number;\n  challenges_joined: number;\n  challenges_completed: number;\n  workout_shares: number;\n  community_interactions: number;\n  influence_score: number; // Impact sur les autres utilisateurs\n}\n\n// ====================================================================\n// Configuration PWA et Service Worker\n// ====================================================================\n\ninterface PWAConfig {\n  enableOfflineMode: boolean;\n  enablePushNotifications: boolean;\n  enableBackgroundSync: boolean;\n  cacheStrategy: 'networkFirst' | 'cacheFirst' | 'staleWhileRevalidate';\n}\n\nconst pwaConfig: PWAConfig = {\n  enableOfflineMode: true,\n  enablePushNotifications: true,\n  enableBackgroundSync: true,\n  cacheStrategy: 'staleWhileRevalidate',\n};\n\n// ====================================================================\n// Store Zustand Global pour la Gestion d'État\n// ====================================================================\n\ninterface AppState {\n  // État d'authentification\n  user: User | undefined;\n  isAuthenticated: boolean;\n  isLoading: boolean;\n\n  // État d'onboarding\n  onboarding: OnboardingState;\n\n  // Préférences utilisateur\n  preferences: {\n    theme: 'light' | 'dark' | 'system';\n    language: 'en' | 'fr';\n    units: 'imperial' | 'metric';\n    notifications: NotificationSettings;\n    privacy: PrivacySettings;\n  };\n\n  // Cache des données\n  cache: {\n    workouts: Workout[];\n    exercises: Exercise[];\n    nutritionEntries: NutritionEntry[];\n    sleepEntries: SleepEntry[];\n    hydrationEntries: HydrationEntry[];\n    wellnessEntries: MentalWellnessEntry[];\n    socialData: SocialProfile | undefined;\n    analytics: UserAnalytics | undefined;\n  };\n\n  // État de l'interface\n  ui: {\n    currentPage: string;\n    isOffline: boolean;\n    lastSyncTime: string | undefined;\n    pendingSyncs: PendingSync[];\n  };\n\n  // Actions\n  setUser: (user: User | null) => void;\n  updateOnboarding: (state: Partial<OnboardingState>) => void;\n  updatePreferences: (preferences: Partial<AppState['preferences']>) => void;\n  updateCache: (cacheKey: keyof AppState['cache'], data: unknown) => void;\n  clearCache: () => void;\n  addPendingSync: (sync: PendingSync) => void;\n  removePendingSync: (syncId: string) => void;\n}\n\ninterface NotificationSettings {\n  workoutReminders: boolean;\n  nutritionReminders: boolean;\n  hydrationReminders: boolean;\n  sleepReminders: boolean;\n  socialNotifications: boolean;\n  challengeUpdates: boolean;\n  systemUpdates: boolean;\n  pushNotifications: boolean;\n  emailNotifications: boolean;\n}\n\ninterface PendingSync {\n  id: string;\n  type: 'workout' | 'nutrition' | 'sleep' | 'hydration' | 'wellness';\n  data: unknown;\n  timestamp: string;\n  retryCount: number;\n}\n\nconst appStore = create<AppState>()(\n  subscribeWithSelector(\n    persist(\n      (set, _get) => ({\n        // État initial\n        user: null,\n        isAuthenticated: false,\n        isLoading: true,\n\n        onboarding: {\n          currentStep: 0,\n          totalSteps: 6,\n          completedModules: [],\n          userData: {},\n          conversationHistory: [],\n          aiRecommendations: [],\n          isCompleted: false,\n        },\n\n        preferences: {\n          theme: 'system',\n          language: 'en',\n          units: 'imperial', // US par défaut\n          notifications: {\n            workoutReminders: true,\n            nutritionReminders: true,\n            hydrationReminders: true,\n            sleepReminders: true,\n            socialNotifications: true,\n            challengeUpdates: true,\n            systemUpdates: true,\n            pushNotifications: true,\n            emailNotifications: false,\n          },\n          privacy: {\n            profile_visibility: 'friends',\n            workout_sharing: true,\n            progress_sharing: true,\n            location_sharing: false,\n            challenge_participation: true,\n          },\n        },\n\n        cache: {\n          workouts: [],\n          exercises: [],\n          nutritionEntries: [],\n          sleepEntries: [],\n          hydrationEntries: [],\n          wellnessEntries: [],\n          socialData: null,\n          analytics: null,\n        },\n\n        ui: {\n          currentPage: '/',\n          isOffline: false,\n          lastSyncTime: null,\n          pendingSyncs: [],\n        },\n\n        // Actions\n        setUser: user => set({ user, isAuthenticated: !!user }),\n\n        updateOnboarding: newState =>\n          set(state => ({\n            onboarding: { ...state.onboarding, ...newState },\n          })),\n\n        updatePreferences: newPreferences =>\n          set(state => ({\n            preferences: { ...state.preferences, ...newPreferences },\n          })),\n\n        updateCache: (cacheKey, data) =>\n          set(state => ({\n            cache: { ...state.cache, [cacheKey]: data },\n          })),\n\n        clearCache: () =>\n          set(_state => ({\n            cache: {\n              workouts: [],\n              exercises: [],\n              nutritionEntries: [],\n              sleepEntries: [],\n              hydrationEntries: [],\n              wellnessEntries: [],\n              socialData: null,\n              analytics: null,\n            },\n          })),\n\n        addPendingSync: sync =>\n          set(state => ({\n            ui: {\n              ...state.ui,\n              pendingSyncs: [...state.ui.pendingSyncs, sync],\n            },\n          })),\n\n        removePendingSync: syncId =>\n          set(state => ({\n            ui: {\n              ...state.ui,\n              pendingSyncs: state.ui.pendingSyncs.filter(sync => sync.id !== syncId),\n            },\n          })),\n      }),\n      {\n        name: 'myfithero-store',\n        partialize: state => ({\n          user: state.user,\n          preferences: state.preferences,\n          onboarding: state.onboarding,\n        }),\n      }\n    )\n  )\n);\n\n// ====================================================================\n// Hooks Personnalisés pour l'Application\n// ====================================================================\n\n// Hook pour la géolocalisation US\nconst useUSLocation = () => {\n  const [location, setLocation] = useState<{\n    state: string;\n    city: string;\n    zip: string;\n    timezone: string;\n  } | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const getUSLocation = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      // Utiliser l'API de géolocalisation du navigateur\n      const position = await new Promise<GeolocationPosition>((resolve, reject) => {\n        navigator.geolocation.getCurrentPosition(resolve, reject, {\n          enableHighAccuracy: true,\n          timeout: 10000,\n          maximumAge: 300000, // 5 minutes\n        });\n      });\n\n      // Convertir les coordonnées en adresse US via une API de geocoding\n      const response = await fetch(\n        `https://api.mapbox.com/geocoding/v5/mapbox.places/${position.coords.longitude},${position.coords.latitude}.json?access_token=${import.meta.env.VITE_MAPBOX_TOKEN}&country=us&types=place,postcode`\n      );\n\n      const data = await response.json();\n\n      if (data.features && data.features.length > 0) {\n        const feature = data.features[0];\n        const context = feature.context || [];\n\n        const state =\n          context.find((c: GeolocationContext) => c.id.startsWith('region'))?.short_code?.replace('US-', '') || '';\n        const city = feature.text || '';\n        const zip = context.find((c: GeolocationContext) => c.id.startsWith('postcode'))?.text || '';\n\n        // Déterminer le fuseau horaire basé sur l'état\n        const timezone = getTimezoneFromState(state);\n\n        setLocation({ state, city, zip, timezone });\n      }\n    } catch (error: any) {\n      setError('Unable to determine your location. Please ensure location services are enabled.');\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  return { location, isLoading, error, getUSLocation };\n};\n\n// Fonction utilitaire pour déterminer le fuseau horaire\nconst getTimezoneFromState = (state: string): string => {\n  const stateTimezones: Record<string, string> = {\n    CA: 'America/Los_Angeles',\n    NY: 'America/New_York',\n    TX: 'America/Chicago',\n    FL: 'America/New_York',\n    IL: 'America/Chicago',\n    PA: 'America/New_York',\n    OH: 'America/New_York',\n    GA: 'America/New_York',\n    NC: 'America/New_York',\n    MI: 'America/New_York',\n    NJ: 'America/New_York',\n    VA: 'America/New_York',\n    WA: 'America/Los_Angeles',\n    AZ: 'America/Phoenix',\n    MA: 'America/New_York',\n    TN: 'America/Chicago',\n    IN: 'America/New_York',\n    MO: 'America/Chicago',\n    MD: 'America/New_York',\n    WI: 'America/Chicago',\n    CO: 'America/Denver',\n    MN: 'America/Chicago',\n    SC: 'America/New_York',\n    AL: 'America/Chicago',\n    LA: 'America/Chicago',\n    KY: 'America/New_York',\n    OR: 'America/Los_Angeles',\n    OK: 'America/Chicago',\n    CT: 'America/New_York',\n    UT: 'America/Denver',\n    IA: 'America/Chicago',\n    NV: 'America/Los_Angeles',\n    AR: 'America/Chicago',\n    MS: 'America/Chicago',\n    KS: 'America/Chicago',\n    NM: 'America/Denver',\n    NE: 'America/Chicago',\n    WV: 'America/New_York',\n    ID: 'America/Denver',\n    HI: 'Pacific/Honolulu',\n    AK: 'America/Anchorage',\n    NH: 'America/New_York',\n    ME: 'America/New_York',\n    MT: 'America/Denver',\n    RI: 'America/New_York',\n    DE: 'America/New_York',\n    SD: 'America/Chicago',\n    ND: 'America/Chicago',\n    DC: 'America/New_York',\n    VT: 'America/New_York',\n    WY: 'America/Denver',\n  };\n\n  return stateTimezones[state] || 'America/New_York';\n};\n\n// Hook pour les conversions d'unités US\nconst useUSUnits = () => {\n  const { preferences } = appStore();\n  const isImperial = preferences.units === 'imperial';\n\n  const convertWeight = useCallback(\n    (value: number, fromUnit: 'lbs' | 'kg', toUnit?: 'lbs' | 'kg') => {\n      const targetUnit = toUnit || (isImperial ? 'lbs' : 'kg');\n\n      if (fromUnit === targetUnit) return { value, unit: targetUnit };\n\n      if (fromUnit === 'lbs' && targetUnit === 'kg') {\n        return { value: Math.round(value * 0.453592 * 10) / 10, unit: 'kg' };\n      } else if (fromUnit === 'kg' && targetUnit === 'lbs') {\n        return { value: Math.round(value * 2.20462 * 10) / 10, unit: 'lbs' };\n      }\n\n      return { value, unit: fromUnit };\n    },\n    [isImperial]\n  );\n\n  const convertHeight = useCallback(\n    (feet: number, inches: number, targetUnit?: 'ft_in' | 'cm') => {\n      const unit = targetUnit || (isImperial ? 'ft_in' : 'cm');\n\n      if (unit === 'ft_in') {\n        return { feet, inches, unit: 'ft_in' };\n      } else {\n        const totalInches = feet * 12 + inches;\n        const cm = Math.round(totalInches * 2.54);\n        return { value: cm, unit: 'cm' };\n      }\n    },\n    [isImperial]\n  );\n\n  const convertDistance = useCallback(\n    (value: number, fromUnit: 'miles' | 'km', toUnit?: 'miles' | 'km') => {\n      const targetUnit = toUnit || (isImperial ? 'miles' : 'km');\n\n      if (fromUnit === targetUnit) return { value, unit: targetUnit };\n\n      if (fromUnit === 'miles' && targetUnit === 'km') {\n        return { value: Math.round(value * 1.60934 * 100) / 100, unit: 'km' };\n      } else if (fromUnit === 'km' && targetUnit === 'miles') {\n        return { value: Math.round(value * 0.621371 * 100) / 100, unit: 'miles' };\n      }\n\n      return { value, unit: fromUnit };\n    },\n    [isImperial]\n  );\n\n  const convertVolume = useCallback(\n    (value: number, fromUnit: 'floz' | 'ml' | 'liters', toUnit?: string) => {\n      const targetUnit = toUnit || (isImperial ? 'floz' : 'ml');\n\n      if (fromUnit === targetUnit) return { value, unit: targetUnit };\n\n      // Conversions vers fl oz\n      if (targetUnit === 'floz') {\n        if (fromUnit === 'ml')\n          return { value: Math.round(value * 0.033814 * 10) / 10, unit: 'floz' };\n        if (fromUnit === 'liters')\n          return { value: Math.round(value * 33.814 * 10) / 10, unit: 'floz' };\n      }\n\n      // Conversions vers ml\n      if (targetUnit === 'ml') {\n        if (fromUnit === 'floz') return { value: Math.round(value * 29.5735), unit: 'ml' };\n        if (fromUnit === 'liters') return { value: value * 1000, unit: 'ml' };\n      }\n\n      return { value, unit: fromUnit };\n    },\n    [isImperial]\n  );\n\n  const convertTemperature = useCallback(\n    (value: number, fromUnit: 'F' | 'C', toUnit?: 'F' | 'C') => {\n      const targetUnit = toUnit || (isImperial ? 'F' : 'C');\n\n      if (fromUnit === targetUnit) return { value, unit: targetUnit };\n\n      if (fromUnit === 'F' && targetUnit === 'C') {\n        return { value: Math.round((((value - 32) * 5) / 9) * 10) / 10, unit: 'C' };\n      } else if (fromUnit === 'C' && targetUnit === 'F') {\n        return { value: Math.round(((value * 9) / 5 + 32) * 10) / 10, unit: 'F' };\n      }\n\n      return { value, unit: fromUnit };\n    },\n    [isImperial]\n  );\n\n  return {\n    isImperial,\n    convertWeight,\n    convertHeight,\n    convertDistance,\n    convertVolume,\n    convertTemperature,\n  };\n};\n\n// Hook pour l'IA conversationnelle\nconst useConversationalAI = () => {\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const { onboarding, updateOnboarding } = appStore();\n\n  const sendMessage = useCallback(\n    async (message: string, context?: Record<string, string | number | boolean>) => {\n      setIsProcessing(true);\n      setError(null);\n\n      try {\n        const response = await fetch('/api/ai/conversation', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${(await supabase.auth.getSession()).data.session?.access_token}`,\n          },\n          body: JSON.stringify({\n            message,\n            context: {\n              ...context,\n              conversationHistory: onboarding.conversationHistory,\n              currentStep: onboarding.currentStep,\n              userData: onboarding.userData,\n              usMarket: true,\n            },\n          }),\n        });\n\n        if (!response.ok) {\n          throw new Error('Failed to get AI response');\n        }\n\n        const data = await response.json();\n\n        // Ajouter les messages à l'historique\n        const userMessage: ConversationMessage = {\n          id: `user_${Date.now()}`,\n          type: 'user',\n          content: message,\n          timestamp: new Date(),\n          context,\n        };\n\n        const aiMessage: ConversationMessage = {\n          id: `ai_${Date.now()}`,\n          type: 'ai',\n          content: data.response,\n          timestamp: new Date(),\n          context: data.context,\n          suggestedResponses: data.suggestedResponses,\n        };\n\n        updateOnboarding({\n          conversationHistory: [...onboarding.conversationHistory, userMessage, aiMessage],\n          aiRecommendations: data.recommendations || onboarding.aiRecommendations,\n        });\n\n        return { response: data.response, recommendations: data.recommendations };\n      } catch (err) {\n        const errorMessage = err instanceof Error ? err.message : 'AI service unavailable';\n        setError(errorMessage);\n        throw new Error(errorMessage);\n      } finally {\n        setIsProcessing(false);\n      }\n    },\n    [onboarding, updateOnboarding]\n  );\n\n  const generateRecommendations = useCallback(\n    async (type: 'workout' | 'nutrition' | 'hydration' | 'sleep') => {\n      setIsProcessing(true);\n      setError(null);\n\n      try {\n        const response = await fetch('/api/ai/recommendations', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${(await supabase.auth.getSession()).data.session?.access_token}`,\n          },\n          body: JSON.stringify({\n            type,\n            userData: onboarding.userData,\n            usMarket: true,\n            preferences: {\n              units: 'imperial',\n              language: 'en',\n            },\n          }),\n        });\n\n        if (!response.ok) {\n          throw new Error('Failed to generate recommendations');\n        }\n\n        const recommendations = await response.json();\n\n        updateOnboarding({\n          aiRecommendations: [...onboarding.aiRecommendations, ...recommendations],\n        });\n\n        return recommendations;\n      } catch (err) {\n        const errorMessage =\n          err instanceof Error ? err.message : 'Failed to generate recommendations';\n        setError(errorMessage);\n        throw new Error(errorMessage);\n      } finally {\n        setIsProcessing(false);\n      }\n    },\n    [onboarding, updateOnboarding]\n  );\n\n  return {\n    sendMessage,\n    generateRecommendations,\n    isProcessing,\n    error,\n    conversationHistory: onboarding.conversationHistory,\n    recommendations: onboarding.aiRecommendations,\n  };\n};\n\n// Hook pour la synchronisation offline\nconst useOfflineSync = () => {\n  const { ui, addPendingSync, removePendingSync } = appStore();\n  const [isSyncing, setIsSyncing] = useState(false);\n\n  const syncPendingData = useCallback(async () => {\n    if (isSyncing || ui.pendingSyncs.length === 0) return;\n\n    setIsSyncing(true);\n\n    for (const sync of ui.pendingSyncs) {\n      try {\n        const response = await fetch(`/api/sync/${sync.type}`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${(await supabase.auth.getSession()).data.session?.access_token}`,\n          },\n          body: JSON.stringify(sync.data),\n        });\n\n        if (response.ok) {\n          removePendingSync(sync.id);\n        } else {\n          // Incrémenter le compteur de retry\n          const updatedSync = { ...sync, retryCount: sync.retryCount + 1 };\n\n          // Supprimer après 3 tentatives échouées\n          if (updatedSync.retryCount >= 3) {\n            removePendingSync(sync.id);\n            console.error(`Failed to sync ${sync.type} after 3 attempts:`, sync.data);\n          }\n        }\n      } catch {\n      // Erreur silencieuse\n      // Erreur silencieuse\n      }\n    }\n\n    setIsSyncing(false);\n  }, [isSyncing, ui.pendingSyncs, removePendingSync]);\n\n  const addToSyncQueue = useCallback(\n    (type: PendingSync['type'], data: unknown) => {\n      const sync: PendingSync = {\n        id: `${type}_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n        type,\n        data,\n        timestamp: new Date().toISOString(),\n        retryCount: 0,\n      };\n\n      addPendingSync(sync);\n\n      // Essayer de synchroniser immédiatement si en ligne\n      if (navigator.onLine) {\n        syncPendingData();\n      }\n    },\n    [addPendingSync, syncPendingData]\n  );\n\n  // Écouter les changements de connectivité\n  useEffect(() => {\n    const handleOnline = () => {\n      syncPendingData();\n    };\n\n    window.addEventListener('online', handleOnline);\n    return () => window.removeEventListener('online', handleOnline);\n  }, [syncPendingData]);\n\n  return {\n    addToSyncQueue,\n    syncPendingData,\n    isSyncing,\n    pendingSyncs: ui.pendingSyncs,\n    isOffline: !navigator.onLine,\n  };\n};\n\n// ====================================================================\n// Composants Lazy-loaded pour les pages principales avec optimisations\n// ====================================================================\n\n// Pages principales avec code splitting optimisé\nconst OnboardingPage = lazy(() => \n  import(\n    /* webpackChunkName: \"onboarding\" */\n    /* webpackPrefetch: true */\n    '../features/auth/pages/ProfileComplete'\n  )\n);\n\nconst DashboardPage = lazy(() => \n  import(\n    /* webpackChunkName: \"dashboard\" */\n    /* webpackPreload: true */\n    '../features/dashboard/pages/Dashboard'\n  )\n);\n\nconst NotFoundPage = lazy(() => \n  import(\n    /* webpackChunkName: \"pages\" */\n    './NotFound'\n  )\n);\n\nconst AppLoadingSpinner = lazy(() => \n  import(\n    /* webpackChunkName: \"core\" */\n    '../components/LoadingScreen'\n  )\n);\n\nconst AppErrorBoundary = lazy(() => \n  import(\n    /* webpackChunkName: \"core\" */\n    '../components/ErrorBoundary'\n  )\n);\n\n// ====================================================================\n// Définition des Routes de l'Application\n// ====================================================================\n\n// ====================================================================\n// Configuration des Routes de l'Application\n// ====================================================================\n\ninterface RouteConfig {\n  path: string;\n  component: React.ComponentType<Record<string, unknown>>;\n  exact?: boolean;\n  requiresAuth?: boolean;\n  requiresOnboarding?: boolean;\n  title?: string;\n  description?: string;\n}\n\nconst appRoutes: RouteConfig[] = [\n  // Routes publiques avec optimisations\n  {\n    path: '/',\n    component: lazy(() => \n      import(\n        /* webpackChunkName: \"landing\" */\n        /* webpackPrefetch: true */\n        '../features/landing/pages/LandingPage'\n      )\n    ),\n    exact: true,\n    title: 'MyFitHero - AI-Powered Fitness for Americans',\n    description:\n      'The ultimate US-ready fitness & wellness app with AI coaching, nutrition tracking, and social features.',\n  },\n  {\n    path: '/login',\n    component: lazy(() => \n      import(\n        /* webpackChunkName: \"auth\" */\n        /* webpackPrefetch: true */\n        '../features/auth/pages/AuthPage'\n      )\n    ),\n    title: 'Sign In - MyFitHero',\n    description: 'Sign in to your MyFitHero account and continue your fitness journey.',\n  },\n  {\n    path: '/register',\n    component: lazy(() => \n      import(\n        /* webpackChunkName: \"auth\" */\n        /* webpackPrefetch: true */\n        '../features/auth/pages/AuthPage'\n      )\n    ),\n    title: 'Create Account - MyFitHero',\n    description: 'Join thousands of Americans achieving their fitness goals with MyFitHero.',\n  },\n\n  // Routes d'onboarding\n  {\n    path: '/onboarding',\n    component: OnboardingPage,\n    requiresAuth: true,\n    title: 'Welcome to MyFitHero',\n    description: \"Let's personalize your fitness journey with our AI-powered onboarding.\",\n  },\n  {\n    path: '/onboarding/:step',\n    component: OnboardingPage,\n    requiresAuth: true,\n    title: 'Setup Your Profile - MyFitHero',\n    description: 'Personalized fitness setup designed specifically for Americans.',\n  },\n\n  // Routes principales de l'application avec optimisations\n  {\n    path: '/dashboard',\n    component: DashboardPage,\n    requiresAuth: true,\n    requiresOnboarding: true,\n    title: 'Dashboard - MyFitHero',\n    description: 'Your personalized fitness dashboard with AI insights and progress tracking.',\n  },\n  {\n    path: '/workouts',\n    component: lazy(() => \n      import(\n        /* webpackChunkName: \"workout\" */\n        /* webpackPrefetch: true */\n        '../features/workout/pages/WorkoutPage'\n      )\n    ),\n    requiresAuth: true,\n    requiresOnboarding: true,\n    title: 'Workouts - MyFitHero',\n    description: 'AI-powered workouts tailored for your sport and fitness goals.',\n  },\n  {\n    path: '/workouts/:id',\n    component: lazy(() => \n      import(\n        /* webpackChunkName: \"workout-detail\" */\n        '../features/workout/pages/WorkoutDetailPage'\n      )\n    ),\n    requiresAuth: true,\n    requiresOnboarding: true,\n    title: 'Workout Details - MyFitHero',\n  },\n  {\n    path: '/nutrition',\n    component: lazy(() => \n      import(\n        /* webpackChunkName: \"nutrition\" */\n        /* webpackPrefetch: true */\n        '../features/nutrition/pages/NutritionPage'\n      )\n    ),\n    requiresAuth: true,\n    requiresOnboarding: true,\n    title: 'Nutrition - MyFitHero',\n    description: 'Track your nutrition with the most comprehensive US food database.',\n  },\n  {\n    path: '/sleep',\n    component: lazy(() => \n      import(\n        /* webpackChunkName: \"sleep\" */\n        '../features/sleep/pages/SleepPage'\n      )\n    ),\n    requiresAuth: true,\n    requiresOnboarding: true,\n    title: 'Sleep Tracking - MyFitHero',\n    description: 'Optimize your recovery with advanced sleep analytics and recommendations.',\n  },\n  {\n    path: '/hydration',\n    component: lazy(() => import('@/features/hydration/pages/HydrationPage')),\n    requiresAuth: true,\n    requiresOnboarding: true,\n    title: 'Hydration - MyFitHero',\n    description: 'Stay hydrated with personalized goals and smart reminders in fl oz.',\n  },\n  {\n    path: '/wellness',\n    component: lazy(() => import('@/features/recovery/pages/RecoveryPage')),\n    requiresAuth: true,\n    requiresOnboarding: true,\n    title: 'Mental Wellness - MyFitHero',\n    description: 'Track your mental health, mood, and stress with AI-powered insights.',\n  },\n  {\n    path: '/social',\n    component: lazy(() => import('@/features/social/pages/SocialPage')),\n    requiresAuth: true,\n    requiresOnboarding: true,\n    title: 'Community - MyFitHero',\n    description: 'Connect with friends, join challenges, and share your fitness journey.',\n  },\n  {\n    path: '/social/challenges',\n    component: lazy(() => import('@/features/social/pages/ChallengesPage')),\n    requiresAuth: true,\n    requiresOnboarding: true,\n    title: 'Fitness Challenges - MyFitHero',\n    description: 'Join community challenges and compete with friends across America.',\n  },\n  {\n    path: '/analytics',\n    component: lazy(() => import('@/features/analytics/pages/AnalyticsPage')),\n    requiresAuth: true,\n    requiresOnboarding: true,\n    title: 'Progress Analytics - MyFitHero',\n    description: 'Detailed analytics and insights about your fitness progress and trends.',\n  },\n  {\n    path: '/profile',\n    component: lazy(() => import('@/features/profile/pages/ProfilePage')),\n    requiresAuth: true,\n    title: 'Your Profile - MyFitHero',\n    description: 'Manage your profile, preferences, and fitness goals.',\n  },\n  {\n    path: '/settings',\n    component: lazy(() => import('@/features/profile/pages/SettingsPage')),\n    requiresAuth: true,\n    title: 'Settings - MyFitHero',\n    description: 'Customize your MyFitHero experience, privacy, and notifications.',\n  },\n\n  // Routes spécialisées\n  {\n    path: '/ai-coach',\n    component: lazy(() => import('@/features/ai-coach/pages/AICoachPage')),\n    requiresAuth: true,\n    requiresOnboarding: true,\n    title: 'AI Coach - MyFitHero',\n    description: 'Get personalized coaching and recommendations from your AI fitness assistant.',\n  },\n  {\n    path: '/exercises',\n    component: lazy(() => import('@/features/workout/pages/ExercisesPage')),\n    requiresAuth: true,\n    title: 'Exercise Library - MyFitHero',\n    description: 'Comprehensive exercise library with 450+ video-guided workouts.',\n  },\n  {\n    path: '/exercises/:id',\n    component: lazy(() => import('@/features/workout/pages/ExerciseDetailPage')),\n    requiresAuth: true,\n    title: 'Exercise Details - MyFitHero',\n  },\n  {\n    path: '/recovery',\n    component: lazy(() => import('@/features/recovery/pages/RecoveryPage')),\n    requiresAuth: true,\n    requiresOnboarding: true,\n    title: 'Recovery - MyFitHero',\n    description: 'Optimize your recovery with personalized insights and recommendations.',\n  },\n  {\n    path: '/wearables',\n    component: lazy(() => import('@/features/wearables/pages/WearableHubPage')),\n    requiresAuth: true,\n    requiresOnboarding: true,\n    title: 'Wearable Hub - MyFitHero',\n    description: 'Connect and sync your fitness devices for comprehensive tracking.',\n  },\n  {\n    path: '/admin',\n    component: lazy(() => import('@/features/admin/pages/AdminPage')),\n    requiresAuth: true,\n    title: 'Admin - MyFitHero',\n    description: 'Administrative interface for MyFitHero management.',\n  },\n\n  // Routes utilitaires\n  {\n    path: '/privacy',\n    component: lazy(() => import('./PrivacyPage')),\n    title: 'Privacy Policy - MyFitHero',\n    description: 'Your privacy matters. Learn how we protect your fitness data.',\n  },\n  {\n    path: '/terms',\n    component: lazy(() => import('./TermsPage')),\n    title: 'Terms of Service - MyFitHero',\n    description: 'Terms and conditions for using MyFitHero fitness application.',\n  },\n  {\n    path: '/support',\n    component: lazy(() => import('./SupportPage')),\n    title: 'Support - MyFitHero',\n    description: 'Get help and support for your MyFitHero experience.',\n  },\n];\n\n// ====================================================================\n// Composant d'Authentification Guards\n// ====================================================================\n\ninterface AuthGuardProps {\n  children: ReactNode;\n  requiresAuth?: boolean | undefined;\n  requiresOnboarding?: boolean | undefined;\n}\n\nconst AuthGuard: React.FC<AuthGuardProps> = ({\n  children,\n  requiresAuth = false,\n  requiresOnboarding = false,\n}) => {\n  const { user, isAuthenticated, onboarding } = appStore();\n  const [, setLocation] = useLocation();\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const checkAuth = async () => {\n      try {\n        const {\n          data: { session },\n          error,\n        } = await supabase.auth.getSession();\n\n        if (error) {\n        }\n\n        if (session && !user) {\n          // Charger les données utilisateur\n          const { data: userData, error: userError } = await supabase\n            .from('user_profiles')\n            .select('*')\n            .eq('id', session.user.id)\n            .single();\n\n          if (userData && !userError) {\n            appStore.getState().setUser(userData);\n          }\n        }\n      } catch {\n      // Erreur silencieuse\n      // Erreur silencieuse\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    checkAuth();\n  }, [user]);\n\n  // Écouter les changements d'authentification\n  useEffect(() => {\n    const {\n      data: { subscription },\n    } = supabase.auth.onAuthStateChange(async (event: string, session: any) => {\n      if (event === 'SIGNED_IN' && session) {\n        // Utilisateur connecté\n        const { data: userData } = await supabase\n          .from('user_profiles')\n          .select('*')\n          .eq('id', session.user.id)\n          .single();\n\n        if (userData) {\n          appStore.getState().setUser(userData);\n        }\n      } else if (event === 'SIGNED_OUT') {\n        // Utilisateur déconnecté\n        appStore.getState().setUser(null);\n        appStore.getState().clearCache();\n        setLocation('/');\n      }\n    });\n\n    return () => subscription.unsubscribe();\n  }, [setLocation]);\n\n  if (isLoading) {\n    return <AppLoadingSpinner message=\"Checking authentication...\" />;\n  }\n\n  // Vérification d'authentification\n  if (requiresAuth && !isAuthenticated) {\n    setLocation('/auth');\n    return null;\n  }\n\n  // Vérification d'onboarding\n  if (requiresOnboarding && isAuthenticated && !onboarding.isCompleted) {\n    setLocation('/onboarding');\n    return null;\n  }\n\n  return <>{children}</>;\n};\n\n// ====================================================================\n// Composant Principal MyFitHero Index\n// ====================================================================\n\nconst MyFitHeroIndex: React.FC = () => {\n  const { isLoading, preferences } = appStore();\n  const [isInitialized, setIsInitialized] = useState(false);\n  const [appVersion] = useState('4.0.0');\n  const [buildNumber] = useState('20250801');\n\n  // Initialisation de l'application\n  useEffect(() => {\n    const initializeApp = async () => {\n      try {\n        // Vérifier le support PWA\n        if ('serviceWorker' in navigator && pwaConfig.enableOfflineMode) {\n          const registration = await navigator.serviceWorker.register('/sw.js');\n        }\n\n        // Configurer les notifications push\n        if (pwaConfig.enablePushNotifications && 'Notification' in window) {\n          if (Notification.permission === 'default') {\n            await Notification.requestPermission();\n          }\n        }\n\n        // Détecter le statut de connectivité\n        const updateOnlineStatus = () => {\n          appStore.getState().ui.isOffline = !navigator.onLine;\n        };\n\n        window.addEventListener('online', updateOnlineStatus);\n        window.addEventListener('offline', updateOnlineStatus);\n\n        // Configurer les métriques de performance\n        if (process.env.NODE_ENV === 'production') {\n          // Web Vitals et autres métriques\n\n        }\n\n        setIsInitialized(true);\n      } catch {\n      // Erreur silencieuse\n      // Erreur silencieuse\n        setIsInitialized(true); // Continue même en cas d'erreur\n      }\n    };\n\n    initializeApp();\n  }, []);\n\n  // Gestion des métadonnées de page\n  useEffect(() => {\n    const updatePageMetadata = (route: RouteConfig) => {\n      if (route.title) {\n        document.title = route.title;\n      }\n\n      if (route.description) {\n        const metaDescription = document.querySelector('meta[name=\"description\"]');\n        if (metaDescription) {\n          metaDescription.setAttribute('content', route.description);\n        }\n      }\n    };\n\n    // Écouter les changements de route - simplified\n    const currentRouteInfo: RouteConfig = {\n      path: window.location.pathname,\n      component: () => null,\n      title: 'MyFitHero - US Fitness App',\n      description: 'AI-powered fitness coaching for the US market'\n    };\n    \n    updatePageMetadata(currentRouteInfo);\n  }, []);\n\n  // Affichage du chargement initial\n  if (!isInitialized || isLoading) {\n    return <AppLoadingSpinner message=\"Initializing MyFitHero...\" showProgress />;\n  }\n\n  return (\n    <AppErrorBoundary>\n      <div className=\"app-container min-h-screen bg-gray-50\" data-theme={preferences.theme}>\n        <Suspense fallback={<AppLoadingSpinner />}>\n          <Router>\n            {/* Routes principales */}\n            {appRoutes.map(({ path, component: Component, requiresAuth, requiresOnboarding }) => (\n              <Route key={path} path={path}>\n                <AuthGuard requiresAuth={requiresAuth} requiresOnboarding={requiresOnboarding}>\n                  <Component />\n                </AuthGuard>\n              </Route>\n            ))}\n\n            {/* Route catch-all pour 404 */}\n            <Route>\n              <NotFoundPage />\n            </Route>\n          </Router>\n        </Suspense>\n\n        {/* Composants Analytics et Monitoring */}\n\n        {/* Informations de version (visible en développement) */}\n        {process.env.NODE_ENV === 'development' && (\n          <div className=\"fixed bottom-4 left-4 bg-black/80 text-white text-xs p-2 rounded-lg font-mono\">\n            MyFitHero - v{appVersion} (build {buildNumber})\n          </div>\n        )}\n      </div>\n    </AppErrorBoundary>\n  );\n};\n\nexport default React.memo(MyFitHeroIndex);\n\n// ====================================================================\n// Exports Utilitaires pour l'Application\n// ====================================================================\n\n// REMARQUE: Les exports suivants sont nécessaires mais causent des warnings Fast Refresh\n// Ils seront déplacés dans des fichiers dédiés à terme\n\n// eslint-disable-next-line react-refresh/only-export-components\nexport { useUSLocation, useUSUnits, useConversationalAI, useOfflineSync, appStore };\n\n// Types exportés (peuvent rester car ne cassent pas Fast Refresh)\nexport type {\n  User,\n  FitnessProfile,\n  USMainSports,\n  FitnessGoal,\n  Equipment,\n  OnboardingState,\n  OnboardingModule,\n  ConversationMessage,\n  AIRecommendation,\n  Workout,\n  Exercise,\n  ExerciseSet,\n  NutritionEntry,\n  Meal,\n  FoodItem,\n  SleepEntry,\n  HydrationEntry,\n  MentalWellnessEntry,\n  SocialProfile,\n  Challenge,\n  UserAnalytics,\n};\n\n// Export des utilitaires\n// eslint-disable-next-line react-refresh/only-export-components\nexport { pwaConfig, AppErrorBoundary, AppLoadingSpinner, AuthGuard };\n"],"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","ignoreList":[]}