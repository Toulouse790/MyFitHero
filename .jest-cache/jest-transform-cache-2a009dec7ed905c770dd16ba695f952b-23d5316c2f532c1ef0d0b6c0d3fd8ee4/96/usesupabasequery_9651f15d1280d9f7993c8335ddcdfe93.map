{"version":3,"names":["cov_gcqfp6thj","actualCoverage","s","exports","useSupabaseQuery","useSupabaseTable","useSupabaseRow","react_1","require","supabase_1","queryCache","Map","queryKey","queryFn","options","b","f","enabled","refetchOnWindowFocus","refetchInterval","staleTime","cacheTime","retry","retryDelay","data","setData","useState","loading","setLoading","error","setError","lastUpdated","setLastUpdated","isStale","setIsStale","retryCountRef","useRef","intervalRef","cacheKey","join","getCachedData","useCallback","cached","get","Date","now","timestamp","setCachedData","newData","set","fetchData","isRetry","cachedData","result","Error","message","current","err","errorObj","console","setTimeout","refetch","useEffect","handleFocus","window","addEventListener","removeEventListener","setInterval","clearInterval","timeout","clearTimeout","delete","table","queryBuilder","JSON","stringify","toString","query","supabase","from","select","id","String","eq","single","default"],"sources":["/workspaces/MyFitHero/src/features/ai-coach/hooks/use-supabase-query.ts"],"sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from 'react';\nimport { supabase } from '@/lib/supabase';\nimport { PostgrestFilterBuilder } from '@supabase/postgrest-js';\n\ninterface UseSupabaseQueryOptions {\n  enabled?: boolean;\n  refetchOnWindowFocus?: boolean;\n  refetchInterval?: number;\n  staleTime?: number;\n  cacheTime?: number;\n  retry?: number;\n  retryDelay?: number;\n}\n\ninterface UseSupabaseQueryResult<T> {\n  data: T | undefined;\n  loading: boolean;\n  error: Error | undefined;\n  refetch: () => Promise<void>;\n  isStale: boolean;\n  lastUpdated: Date | undefined;\n}\n\n// Cache simple en mémoire\nconst queryCache = new Map<\n  string,\n  {\n    data: any;\n    timestamp: number;\n    staleTime: number;\n  }\n>();\n\nexport function useSupabaseQuery<T>(\n  queryKey: string[],\n  queryFn: () => Promise<{ data: T | undefined; error: any }>,\n  options: UseSupabaseQueryOptions = {}\n): UseSupabaseQueryResult<T> {\n  const {\n    enabled = true,\n    refetchOnWindowFocus = false,\n    refetchInterval,\n    staleTime = 5 * 60 * 1000, // 5 minutes\n    cacheTime = 10 * 60 * 1000, // 10 minutes\n    retry = 3,\n    retryDelay = 1000,\n  } = options;\n\n  const [data, setData] = useState<T | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<Error | null>(null);\n  const [lastUpdated, setLastUpdated] = useState<Date | null>(null);\n  const [isStale, setIsStale] = useState(false);\n\n  const retryCountRef = useRef(0);\n  const intervalRef = useRef<NodeJS.Timeout>();\n  const cacheKey = queryKey.join(':');\n\n  // Vérifier le cache\n  const getCachedData = useCallback(() => {\n    const cached = queryCache.get(cacheKey);\n    if (cached && Date.now() - cached.timestamp < cached.staleTime) {\n      return cached.data;\n    }\n    return null;\n  }, [cacheKey]);\n\n  // Mettre en cache\n  const setCachedData = useCallback(\n    (newData: T) => {\n      queryCache.set(cacheKey, {\n        data: newData,\n        timestamp: Date.now(),\n        staleTime,\n      });\n    },\n    [cacheKey, staleTime]\n  );\n\n  // Fonction de fetch avec retry\n  const fetchData = useCallback(\n    async (isRetry = false) => {\n      if (!enabled) return;\n\n      // Vérifier le cache d'abord\n      const cachedData = getCachedData();\n      if (cachedData && !isRetry) {\n        setData(cachedData);\n        setLoading(false);\n        setError(null);\n        setIsStale(false);\n        return;\n      }\n\n      try {\n        if (!isRetry) {\n          setLoading(true);\n          setError(null);\n        }\n\n        const result = await queryFn();\n\n        if (result.error) {\n          throw new Error(result.error.message || 'Erreur lors de la requête');\n        }\n\n        setData(result.data);\n        setError(null);\n        setLastUpdated(new Date());\n        setIsStale(false);\n        retryCountRef.current = 0;\n\n        // Mettre en cache\n        if (result.data) {\n          setCachedData(result.data);\n        }\n      } catch (err) {\n        const errorObj = err as Error;\n        console.error('Erreur useSupabaseQuery:', errorObj);\n\n        if (retryCountRef.current < retry) {\n          retryCountRef.current++;\n          setTimeout(() => {\n            fetchData(true);\n          }, retryDelay * retryCountRef.current);\n        } else {\n          setError(errorObj);\n          retryCountRef.current = 0;\n        }\n      } finally {\n        if (!isRetry) {\n          setLoading(false);\n        }\n      }\n    },\n    [enabled, queryFn, getCachedData, setCachedData, retry, retryDelay]\n  );\n\n  // Refetch manuel\n  const refetch = useCallback(async () => {\n    retryCountRef.current = 0;\n    await fetchData();\n  }, [fetchData]);\n\n  // Effect principal\n  useEffect(() => {\n    fetchData();\n  }, [fetchData]);\n\n  // Refetch sur focus\n  useEffect(() => {\n    if (!refetchOnWindowFocus) return;\n\n    const handleFocus = () => {\n      if (!loading && enabled) {\n        fetchData();\n      }\n    };\n\n    window.addEventListener('focus', handleFocus);\n    return () => window.removeEventListener('focus', handleFocus);\n  }, [refetchOnWindowFocus, loading, enabled, fetchData]);\n\n  // Refetch interval\n  useEffect(() => {\n    if (!refetchInterval || !enabled) return;\n\n    intervalRef.current = setInterval(() => {\n      fetchData();\n    }, refetchInterval);\n\n    return () => {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n    };\n  }, [refetchInterval, enabled, fetchData]);\n\n  // Marquer comme stale après staleTime\n  useEffect(() => {\n    if (!lastUpdated) return;\n\n    const timeout = setTimeout(() => {\n      setIsStale(true);\n    }, staleTime);\n\n    return () => clearTimeout(timeout);\n  }, [lastUpdated, staleTime]);\n\n  // Cleanup du cache\n  useEffect(() => {\n    return () => {\n      // Nettoyer le cache après cacheTime\n      setTimeout(() => {\n        const cached = queryCache.get(cacheKey);\n        if (cached && Date.now() - cached.timestamp > cacheTime) {\n          queryCache.delete(cacheKey);\n        }\n      }, cacheTime);\n    };\n  }, [cacheKey, cacheTime]);\n\n  return {\n    data,\n    loading,\n    error,\n    refetch,\n    isStale,\n    lastUpdated,\n  };\n}\n\n// Hook spécialisé pour les requêtes de table\nexport function useSupabaseTable<T>(\n  table: string,\n  queryBuilder?: (\n    qb: PostgrestFilterBuilder<any, any, any, any>\n  ) => PostgrestFilterBuilder<any, any, any, any>,\n  options?: UseSupabaseQueryOptions\n) {\n  return useSupabaseQuery<T[]>(\n    ['table', table, JSON.stringify(queryBuilder?.toString() || '')],\n    async () => {\n      let query = supabase.from(table).select('*');\n\n      if (queryBuilder) {\n        query = queryBuilder(query as any);\n      }\n\n      return await query;\n    },\n    options\n  );\n}\n\n// Hook pour une seule ligne\nexport function useSupabaseRow<T>(\n  table: string,\n  id: string | number,\n  options?: UseSupabaseQueryOptions\n) {\n  return useSupabaseQuery<T>(\n    ['row', table, String(id)],\n    async () => {\n      return await supabase.from(table).select('*').eq('id', id).single();\n    },\n    options\n  );\n}\n\nexport default useSupabaseQuery;\n"],"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","ignoreList":[]}