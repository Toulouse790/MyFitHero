6e6e069f9870a8ff207a664629037c03
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
jest.mock('../../../features/workout/services/WorkoutService');
/**
 * TESTS UNITAIRES EXHAUSTIFS - MODULE WORKOUT (RÃ‰EL)
 * Tests basÃ©s sur les composants et services existants
 */
const react_1 = require("@testing-library/react");
const WorkoutSession_1 = require("../../../features/workout/components/WorkoutSession");
const WorkoutService_1 = require("../../../features/workout/services/WorkoutService");
describe('ðŸ’ª WORKOUT MODULE - Tests Unitaires Complets', () => {
    describe('WorkoutSessionComponent', () => {
        const mockSession = {
            id: 'session-123',
            name: 'Push Day - Upper Body',
            description: 'EntraÃ®nement focalisÃ© sur le haut du corps',
            duration_minutes: 75,
            calories_burned: 450,
            difficulty: 'intermediate',
            workout_type: 'strength',
            exercises: [
                {
                    id: 'ex-1',
                    name: 'Bench Press',
                    category: 'chest',
                    sets: 4,
                    reps: 8,
                    weight: 80,
                    rest_seconds: 120,
                    completed: false
                },
                {
                    id: 'ex-2',
                    name: 'Overhead Press',
                    category: 'shoulders',
                    sets: 3,
                    reps: 10,
                    weight: 50,
                    rest_seconds: 90,
                    completed: false
                }
            ]
        };
        const mockProps = {
            currentSession: mockSession,
            sessionTimer: 0,
            isSessionActive: false,
            onStartSession: jest.fn(),
            onPauseSession: jest.fn(),
            onEndSession: jest.fn(),
            onCompleteExercise: jest.fn()
        };
        beforeEach(() => {
            jest.clearAllMocks();
        });
        it('affiche correctement les dÃ©tails de la session', () => {
            (0, react_1.render)((0, jsx_runtime_1.jsx)(WorkoutSession_1.WorkoutSessionComponent, { ...mockProps }));
            expect(react_1.screen.getByText('Push Day - Upper Body')).toBeInTheDocument();
            expect(react_1.screen.getByText(/intermediate/i)).toBeInTheDocument();
            expect(react_1.screen.getByText('Bench Press')).toBeInTheDocument();
            expect(react_1.screen.getByText('Overhead Press')).toBeInTheDocument();
        });
        it('dÃ©marre une session quand le bouton start est cliquÃ©', () => {
            (0, react_1.render)((0, jsx_runtime_1.jsx)(WorkoutSession_1.WorkoutSessionComponent, { ...mockProps }));
            const startButton = react_1.screen.getByRole('button', { name: /dÃ©marrer/i });
            react_1.fireEvent.click(startButton);
            expect(mockProps.onStartSession).toHaveBeenCalledTimes(1);
        });
        it('affiche le timer correctement quand la session est active', () => {
            const activeProps = {
                ...mockProps,
                isSessionActive: true,
                sessionTimer: 300 // 5 minutes = 300 secondes
            };
            (0, react_1.render)((0, jsx_runtime_1.jsx)(WorkoutSession_1.WorkoutSessionComponent, { ...activeProps }));
            expect(react_1.screen.getByText('05:00')).toBeInTheDocument();
        });
        it('calcule la progression correctement', () => {
            const sessionWithProgress = {
                ...mockSession,
                exercises: [
                    { ...mockSession.exercises[0], completed: true },
                    { ...mockSession.exercises[1], completed: false }
                ]
            };
            (0, react_1.render)((0, jsx_runtime_1.jsx)(WorkoutSession_1.WorkoutSessionComponent, { ...mockProps, currentSession: sessionWithProgress }));
            // 1 exercice sur 2 complÃ©tÃ© = 50%
            expect(react_1.screen.getByRole('progressbar')).toHaveAttribute('aria-valuenow', '50');
        });
        it('permet de marquer un exercice comme complÃ©tÃ©', () => {
            (0, react_1.render)((0, jsx_runtime_1.jsx)(WorkoutSession_1.WorkoutSessionComponent, { ...mockProps }));
            const completeButton = react_1.screen.getAllByRole('button')[1]; // Premier exercice
            react_1.fireEvent.click(completeButton);
            expect(mockProps.onCompleteExercise).toHaveBeenCalledWith('ex-1');
        });
        it('gÃ¨re le cas oÃ¹ aucune session n\'est active', () => {
            const noSessionProps = {
                ...mockProps,
                currentSession: null
            };
            (0, react_1.render)((0, jsx_runtime_1.jsx)(WorkoutSession_1.WorkoutSessionComponent, { ...noSessionProps }));
            expect(react_1.screen.getByText(/aucune session active/i)).toBeInTheDocument();
            expect(react_1.screen.getByText(/commencez une nouvelle sÃ©ance/i)).toBeInTheDocument();
        });
        it('affiche les boutons de contrÃ´le appropriÃ©s selon l\'Ã©tat', () => {
            // Session inactive
            (0, react_1.render)((0, jsx_runtime_1.jsx)(WorkoutSession_1.WorkoutSessionComponent, { ...mockProps }));
            expect(react_1.screen.getByRole('button', { name: /dÃ©marrer/i })).toBeInTheDocument();
            // Session active
            const activeProps = { ...mockProps, isSessionActive: true };
            (0, react_1.render)((0, jsx_runtime_1.jsx)(WorkoutSession_1.WorkoutSessionComponent, { ...activeProps }));
            expect(react_1.screen.getByRole('button', { name: /pause/i })).toBeInTheDocument();
        });
    });
    describe('WorkoutService', () => {
        beforeEach(() => {
            jest.clearAllMocks();
            // Setup fetch mock
            global.fetch = jest.fn();
        });
        afterEach(() => {
            jest.restoreAllMocks();
        });
        it('rÃ©cupÃ¨re les workouts d\'un utilisateur', async () => {
            const mockWorkouts = [
                { id: '1', name: 'Workout 1', type: 'strength' },
                { id: '2', name: 'Workout 2', type: 'cardio' }
            ];
            fetch.mockResolvedValue({
                ok: true,
                json: () => Promise.resolve(mockWorkouts)
            });
            const result = await WorkoutService_1.WorkoutService.getWorkouts('user-123');
            expect(fetch).toHaveBeenCalledWith('/api/workouts/user/user-123?');
            expect(result).toEqual(mockWorkouts);
        });
        it('gÃ¨re les erreurs de rÃ©cupÃ©ration gracieusement', async () => {
            fetch.mockResolvedValue({
                ok: false,
                status: 500
            });
            // Le service devrait retourner des donnÃ©es mock en cas d'erreur
            const result = await WorkoutService_1.WorkoutService.getWorkouts('user-123');
            expect(Array.isArray(result)).toBe(true);
            expect(result.length).toBeGreaterThan(0); // Mock workouts
        });
        it('applique les filtres correctement', async () => {
            const filters = {
                type: 'strength',
                difficulty: 'intermediate',
                duration: { min: 30, max: 60 }
            };
            fetch.mockResolvedValue({
                ok: true,
                json: () => Promise.resolve([])
            });
            await WorkoutService_1.WorkoutService.getWorkouts('user-123', filters);
            const expectedUrl = '/api/workouts/user/user-123?type=strength&difficulty=intermediate&duration=%7B%22min%22%3A30%2C%22max%22%3A60%7D';
            expect(fetch).toHaveBeenCalledWith(expectedUrl);
        });
        it('crÃ©e un nouveau workout', async () => {
            const newWorkoutData = {
                name: 'Test Workout',
                type: 'strength',
                difficulty: 'beginner',
                duration_minutes: 45,
                exercises: []
            };
            const mockCreatedWorkout = { id: 'new-workout-123', ...newWorkoutData };
            fetch.mockResolvedValue({
                ok: true,
                json: () => Promise.resolve(mockCreatedWorkout)
            });
            const result = await WorkoutService_1.WorkoutService.createWorkout('user-123', newWorkoutData);
            expect(fetch).toHaveBeenCalledWith('/api/workouts', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ userId: 'user-123', ...newWorkoutData })
            });
            expect(result).toEqual(mockCreatedWorkout);
        });
    });
    describe('FonctionnalitÃ©s avancÃ©es', () => {
        it('calcule le volume total d\'entraÃ®nement', () => {
            const exercises = [
                { sets: 4, reps: 8, weight: 80 }, // 4 * 8 * 80 = 2560
                { sets: 3, reps: 10, weight: 50 } // 3 * 10 * 50 = 1500
            ];
            const totalVolume = exercises.reduce((sum, ex) => sum + (ex.sets * ex.reps * ex.weight), 0);
            expect(totalVolume).toBe(4060); // 2560 + 1500
        });
        it('dÃ©termine l\'intensitÃ© basÃ©e sur les pourcentages 1RM', () => {
            const exercise1RM = 100; // kg
            const lightLoad = 60; // 60% 1RM
            const moderateLoad = 75; // 75% 1RM  
            const heavyLoad = 90; // 90% 1RM
            const getIntensity = (weight, oneRM) => {
                const percentage = (weight / oneRM) * 100;
                if (percentage < 70)
                    return 'light';
                if (percentage < 85)
                    return 'moderate';
                return 'heavy';
            };
            expect(getIntensity(lightLoad, exercise1RM)).toBe('light');
            expect(getIntensity(moderateLoad, exercise1RM)).toBe('moderate');
            expect(getIntensity(heavyLoad, exercise1RM)).toBe('heavy');
        });
        it('calcule le temps de rÃ©cupÃ©ration optimal', () => {
            const calculateRestTime = (intensity, exerciseType) => {
                if (exerciseType === 'compound') {
                    return intensity === 'heavy' ? 180 : intensity === 'moderate' ? 120 : 90;
                }
                else {
                    return intensity === 'heavy' ? 120 : intensity === 'moderate' ? 90 : 60;
                }
            };
            expect(calculateRestTime('heavy', 'compound')).toBe(180); // 3 minutes
            expect(calculateRestTime('moderate', 'isolation')).toBe(90); // 1.5 minutes
            expect(calculateRestTime('light', 'isolation')).toBe(60); // 1 minute
        });
        it('dÃ©tecte des patterns de progression', () => {
            const sessionHistory = [
                { date: '2024-01-01', benchPress: 80, volume: 2400 },
                { date: '2024-01-03', benchPress: 82.5, volume: 2475 },
                { date: '2024-01-05', benchPress: 85, volume: 2550 }
            ];
            const analyzeProgression = (history) => {
                if (history.length < 2)
                    return 'insufficient_data';
                const latest = history[history.length - 1];
                const previous = history[history.length - 2];
                const strengthImprovement = ((latest.benchPress - previous.benchPress) / previous.benchPress) * 100;
                const volumeImprovement = ((latest.volume - previous.volume) / previous.volume) * 100;
                return {
                    strength: strengthImprovement > 0 ? 'improving' : 'plateauing',
                    volume: volumeImprovement > 0 ? 'improving' : 'plateauing',
                    strengthChange: strengthImprovement,
                    volumeChange: volumeImprovement
                };
            };
            const progression = analyzeProgression(sessionHistory);
            expect(progression.strength).toBe('improving');
            expect(progression.volume).toBe('improving');
            expect(progression.strengthChange).toBeCloseTo(3.03, 1); // ~3% improvement
        });
    });
    describe('Gestion des erreurs et cas limites', () => {
        it('gÃ¨re une session sans exercices', () => {
            const emptySession = {
                ...mockSession,
                exercises: []
            };
            const emptyProps = {
                ...mockProps,
                currentSession: emptySession
            };
            (0, react_1.render)((0, jsx_runtime_1.jsx)(WorkoutSession_1.WorkoutSessionComponent, { ...emptyProps }));
            // Devrait afficher un message appropriÃ© ou un Ã©tat par dÃ©faut
            expect(react_1.screen.getByRole('progressbar')).toHaveAttribute('aria-valuenow', '0');
        });
        it('gÃ¨re des valeurs de timer nÃ©gatives', () => {
            const invalidProps = {
                ...mockProps,
                sessionTimer: -10
            };
            (0, react_1.render)((0, jsx_runtime_1.jsx)(WorkoutSession_1.WorkoutSessionComponent, { ...invalidProps }));
            // Le timer ne devrait pas afficher de valeurs nÃ©gatives
            expect(react_1.screen.queryByText('-')).not.toBeInTheDocument();
        });
        it('gÃ¨re des exercices avec des donnÃ©es manquantes', () => {
            const incompleteSession = {
                ...mockSession,
                exercises: [
                    {
                        id: 'ex-incomplete',
                        name: 'Incomplete Exercise',
                        category: 'unknown'
                        // Manque sets, reps, weight
                    }
                ]
            };
            const incompleteProps = {
                ...mockProps,
                currentSession: incompleteSession
            };
            expect(() => {
                (0, react_1.render)((0, jsx_runtime_1.jsx)(WorkoutSession_1.WorkoutSessionComponent, { ...incompleteProps }));
            }).not.toThrow();
        });
    });
});
// Mock pour WorkoutSessionComponent si le vrai composant n'est pas accessible
const mockSession = {
    id: 'session-123',
    name: 'Push Day - Upper Body',
    description: 'EntraÃ®nement focalisÃ© sur le haut du corps',
    duration_minutes: 75,
    calories_burned: 450,
    difficulty: 'intermediate',
    workout_type: 'strength',
    exercises: []
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,