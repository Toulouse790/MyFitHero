{"file":"/workspaces/MyFitHero/src/__tests__/unit/features/workout-real.test.tsx","mappings":"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","names":[],"sources":["/workspaces/MyFitHero/src/__tests__/unit/features/workout-real.test.tsx"],"sourcesContent":["/**\n * TESTS UNITAIRES EXHAUSTIFS - MODULE WORKOUT (RÉEL)\n * Tests basés sur les composants et services existants\n */\n\nimport { render, screen, fireEvent } from '@testing-library/react';\nimport { WorkoutSessionComponent } from '../../../features/workout/components/WorkoutSession';\nimport { WorkoutService } from '../../../features/workout/services/WorkoutService';\n\njest.mock('../../../features/workout/services/WorkoutService');\n\ndescribe('💪 WORKOUT MODULE - Tests Unitaires Complets', () => {\n  describe('WorkoutSessionComponent', () => {\n    const mockSession = {\n      id: 'session-123',\n      name: 'Push Day - Upper Body',\n      description: 'Entraînement focalisé sur le haut du corps',\n      duration_minutes: 75,\n      calories_burned: 450,\n      difficulty: 'intermediate' as const,\n      workout_type: 'strength' as const,\n      exercises: [\n        {\n          id: 'ex-1',\n          name: 'Bench Press',\n          category: 'chest',\n          sets: 4,\n          reps: 8,\n          weight: 80,\n          rest_seconds: 120,\n          completed: false\n        },\n        {\n          id: 'ex-2',\n          name: 'Overhead Press',\n          category: 'shoulders',\n          sets: 3,\n          reps: 10,\n          weight: 50,\n          rest_seconds: 90,\n          completed: false\n        }\n      ]\n    };\n\n    const mockProps = {\n      currentSession: mockSession,\n      sessionTimer: 0,\n      isSessionActive: false,\n      onStartSession: jest.fn(),\n      onPauseSession: jest.fn(),\n      onEndSession: jest.fn(),\n      onCompleteExercise: jest.fn()\n    };\n\n    beforeEach(() => {\n      jest.clearAllMocks();\n    });\n\n    it('affiche correctement les détails de la session', () => {\n      render(<WorkoutSessionComponent {...mockProps} />);\n      \n      expect(screen.getByText('Push Day - Upper Body')).toBeInTheDocument();\n      expect(screen.getByText(/intermediate/i)).toBeInTheDocument();\n      expect(screen.getByText('Bench Press')).toBeInTheDocument();\n      expect(screen.getByText('Overhead Press')).toBeInTheDocument();\n    });\n\n    it('démarre une session quand le bouton start est cliqué', () => {\n      render(<WorkoutSessionComponent {...mockProps} />);\n      \n      const startButton = screen.getByRole('button', { name: /démarrer/i });\n      fireEvent.click(startButton);\n\n      expect(mockProps.onStartSession).toHaveBeenCalledTimes(1);\n    });\n\n    it('affiche le timer correctement quand la session est active', () => {\n      const activeProps = {\n        ...mockProps,\n        isSessionActive: true,\n        sessionTimer: 300 // 5 minutes = 300 secondes\n      };\n\n      render(<WorkoutSessionComponent {...activeProps} />);\n      \n      expect(screen.getByText('05:00')).toBeInTheDocument();\n    });\n\n    it('calcule la progression correctement', () => {\n      const sessionWithProgress = {\n        ...mockSession,\n        exercises: [\n          { ...mockSession.exercises[0], completed: true },\n          { ...mockSession.exercises[1], completed: false }\n        ]\n      };\n\n      render(<WorkoutSessionComponent \n        {...mockProps} \n        currentSession={sessionWithProgress} \n      />);\n      \n      // 1 exercice sur 2 complété = 50%\n      expect(screen.getByRole('progressbar')).toHaveAttribute('aria-valuenow', '50');\n    });\n\n    it('permet de marquer un exercice comme complété', () => {\n      render(<WorkoutSessionComponent {...mockProps} />);\n      \n      const completeButton = screen.getAllByRole('button')[1]; // Premier exercice\n      fireEvent.click(completeButton);\n\n      expect(mockProps.onCompleteExercise).toHaveBeenCalledWith('ex-1');\n    });\n\n    it('gère le cas où aucune session n\\'est active', () => {\n      const noSessionProps = {\n        ...mockProps,\n        currentSession: null\n      };\n\n      render(<WorkoutSessionComponent {...noSessionProps} />);\n      \n      expect(screen.getByText(/aucune session active/i)).toBeInTheDocument();\n      expect(screen.getByText(/commencez une nouvelle séance/i)).toBeInTheDocument();\n    });\n\n    it('affiche les boutons de contrôle appropriés selon l\\'état', () => {\n      // Session inactive\n      render(<WorkoutSessionComponent {...mockProps} />);\n      expect(screen.getByRole('button', { name: /démarrer/i })).toBeInTheDocument();\n\n      // Session active\n      const activeProps = { ...mockProps, isSessionActive: true };\n      render(<WorkoutSessionComponent {...activeProps} />);\n      expect(screen.getByRole('button', { name: /pause/i })).toBeInTheDocument();\n    });\n  });\n\n  describe('WorkoutService', () => {\n    beforeEach(() => {\n      jest.clearAllMocks();\n      // Setup fetch mock\n      global.fetch = jest.fn();\n    });\n\n    afterEach(() => {\n      jest.restoreAllMocks();\n    });\n\n    it('récupère les workouts d\\'un utilisateur', async () => {\n      const mockWorkouts = [\n        { id: '1', name: 'Workout 1', type: 'strength' },\n        { id: '2', name: 'Workout 2', type: 'cardio' }\n      ];\n\n      (fetch as jest.Mock).mockResolvedValue({\n        ok: true,\n        json: () => Promise.resolve(mockWorkouts)\n      });\n\n      const result = await WorkoutService.getWorkouts('user-123');\n      \n      expect(fetch).toHaveBeenCalledWith('/api/workouts/user/user-123?');\n      expect(result).toEqual(mockWorkouts);\n    });\n\n    it('gère les erreurs de récupération gracieusement', async () => {\n      (fetch as jest.Mock).mockResolvedValue({\n        ok: false,\n        status: 500\n      });\n\n      // Le service devrait retourner des données mock en cas d'erreur\n      const result = await WorkoutService.getWorkouts('user-123');\n      \n      expect(Array.isArray(result)).toBe(true);\n      expect(result.length).toBeGreaterThan(0); // Mock workouts\n    });\n\n    it('applique les filtres correctement', async () => {\n      const filters = {\n        type: 'strength',\n        difficulty: 'intermediate',\n        duration: { min: 30, max: 60 }\n      };\n\n      (fetch as jest.Mock).mockResolvedValue({\n        ok: true,\n        json: () => Promise.resolve([])\n      });\n\n      await WorkoutService.getWorkouts('user-123', filters);\n      \n      const expectedUrl = '/api/workouts/user/user-123?type=strength&difficulty=intermediate&duration=%7B%22min%22%3A30%2C%22max%22%3A60%7D';\n      expect(fetch).toHaveBeenCalledWith(expectedUrl);\n    });\n\n    it('crée un nouveau workout', async () => {\n      const newWorkoutData = {\n        name: 'Test Workout',\n        type: 'strength' as const,\n        difficulty: 'beginner' as const,\n        duration_minutes: 45,\n        exercises: []\n      };\n\n      const mockCreatedWorkout = { id: 'new-workout-123', ...newWorkoutData };\n\n      (fetch as jest.Mock).mockResolvedValue({\n        ok: true,\n        json: () => Promise.resolve(mockCreatedWorkout)\n      });\n\n      const result = await WorkoutService.createWorkout('user-123', newWorkoutData);\n      \n      expect(fetch).toHaveBeenCalledWith('/api/workouts', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ userId: 'user-123', ...newWorkoutData })\n      });\n      expect(result).toEqual(mockCreatedWorkout);\n    });\n  });\n\n  describe('Fonctionnalités avancées', () => {\n    it('calcule le volume total d\\'entraînement', () => {\n      const exercises = [\n        { sets: 4, reps: 8, weight: 80 }, // 4 * 8 * 80 = 2560\n        { sets: 3, reps: 10, weight: 50 } // 3 * 10 * 50 = 1500\n      ];\n\n      const totalVolume = exercises.reduce((sum, ex) => \n        sum + (ex.sets * ex.reps * ex.weight), 0\n      );\n      \n      expect(totalVolume).toBe(4060); // 2560 + 1500\n    });\n\n    it('détermine l\\'intensité basée sur les pourcentages 1RM', () => {\n      const exercise1RM = 100; // kg\n      \n      const lightLoad = 60; // 60% 1RM\n      const moderateLoad = 75; // 75% 1RM  \n      const heavyLoad = 90; // 90% 1RM\n\n      const getIntensity = (weight: number, oneRM: number) => {\n        const percentage = (weight / oneRM) * 100;\n        if (percentage < 70) return 'light';\n        if (percentage < 85) return 'moderate';\n        return 'heavy';\n      };\n\n      expect(getIntensity(lightLoad, exercise1RM)).toBe('light');\n      expect(getIntensity(moderateLoad, exercise1RM)).toBe('moderate');\n      expect(getIntensity(heavyLoad, exercise1RM)).toBe('heavy');\n    });\n\n    it('calcule le temps de récupération optimal', () => {\n      const calculateRestTime = (intensity: string, exerciseType: string) => {\n        if (exerciseType === 'compound') {\n          return intensity === 'heavy' ? 180 : intensity === 'moderate' ? 120 : 90;\n        } else {\n          return intensity === 'heavy' ? 120 : intensity === 'moderate' ? 90 : 60;\n        }\n      };\n\n      expect(calculateRestTime('heavy', 'compound')).toBe(180); // 3 minutes\n      expect(calculateRestTime('moderate', 'isolation')).toBe(90); // 1.5 minutes\n      expect(calculateRestTime('light', 'isolation')).toBe(60); // 1 minute\n    });\n\n    it('détecte des patterns de progression', () => {\n      const sessionHistory = [\n        { date: '2024-01-01', benchPress: 80, volume: 2400 },\n        { date: '2024-01-03', benchPress: 82.5, volume: 2475 },\n        { date: '2024-01-05', benchPress: 85, volume: 2550 }\n      ];\n\n      const analyzeProgression = (history: any[]) => {\n        if (history.length < 2) return 'insufficient_data';\n        \n        const latest = history[history.length - 1];\n        const previous = history[history.length - 2];\n        \n        const strengthImprovement = ((latest.benchPress - previous.benchPress) / previous.benchPress) * 100;\n        const volumeImprovement = ((latest.volume - previous.volume) / previous.volume) * 100;\n        \n        return {\n          strength: strengthImprovement > 0 ? 'improving' : 'plateauing',\n          volume: volumeImprovement > 0 ? 'improving' : 'plateauing',\n          strengthChange: strengthImprovement,\n          volumeChange: volumeImprovement\n        };\n      };\n\n      const progression = analyzeProgression(sessionHistory);\n      expect(progression.strength).toBe('improving');\n      expect(progression.volume).toBe('improving');\n      expect(progression.strengthChange).toBeCloseTo(3.03, 1); // ~3% improvement\n    });\n  });\n\n  describe('Gestion des erreurs et cas limites', () => {\n    it('gère une session sans exercices', () => {\n      const emptySession = {\n        ...mockSession,\n        exercises: []\n      };\n\n      const emptyProps = {\n        ...mockProps,\n        currentSession: emptySession\n      };\n\n      render(<WorkoutSessionComponent {...emptyProps} />);\n      \n      // Devrait afficher un message approprié ou un état par défaut\n      expect(screen.getByRole('progressbar')).toHaveAttribute('aria-valuenow', '0');\n    });\n\n    it('gère des valeurs de timer négatives', () => {\n      const invalidProps = {\n        ...mockProps,\n        sessionTimer: -10\n      };\n\n      render(<WorkoutSessionComponent {...invalidProps} />);\n      \n      // Le timer ne devrait pas afficher de valeurs négatives\n      expect(screen.queryByText('-')).not.toBeInTheDocument();\n    });\n\n    it('gère des exercices avec des données manquantes', () => {\n      const incompleteSession = {\n        ...mockSession,\n        exercises: [\n          {\n            id: 'ex-incomplete',\n            name: 'Incomplete Exercise',\n            category: 'unknown'\n            // Manque sets, reps, weight\n          }\n        ]\n      };\n\n      const incompleteProps = {\n        ...mockProps,\n        currentSession: incompleteSession\n      };\n\n      expect(() => {\n        render(<WorkoutSessionComponent {...incompleteProps} />);\n      }).not.toThrow();\n    });\n  });\n});\n\n// Mock pour WorkoutSessionComponent si le vrai composant n'est pas accessible\nconst mockSession = {\n  id: 'session-123',\n  name: 'Push Day - Upper Body',\n  description: 'Entraînement focalisé sur le haut du corps',\n  duration_minutes: 75,\n  calories_burned: 450,\n  difficulty: 'intermediate' as const,\n  workout_type: 'strength' as const,\n  exercises: []\n};"],"version":3}