e2c9c0dd6ec2230b2a5a2a3b9cf4a0c8
"use strict";

/* istanbul ignore next */
function cov_2a1zum1dqo() {
  var path = "/workspaces/MyFitHero/src/features/nutrition/services/nutrition.service.ts";
  var hash = "6b55585d27b375f49dcd65b860359dcaecce4272";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/MyFitHero/src/features/nutrition/services/nutrition.service.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 34
        }
      },
      "2": {
        start: {
          line: 7,
          column: 8
        },
        end: {
          line: 18,
          column: 9
        }
      },
      "3": {
        start: {
          line: 8,
          column: 29
        },
        end: {
          line: 8,
          column: 84
        }
      },
      "4": {
        start: {
          line: 9,
          column: 12
        },
        end: {
          line: 10,
          column: 94
        }
      },
      "5": {
        start: {
          line: 10,
          column: 16
        },
        end: {
          line: 10,
          column: 94
        }
      },
      "6": {
        start: {
          line: 11,
          column: 12
        },
        end: {
          line: 11,
          column: 41
        }
      },
      "7": {
        start: {
          line: 15,
          column: 12
        },
        end: {
          line: 15,
          column: 58
        }
      },
      "8": {
        start: {
          line: 17,
          column: 12
        },
        end: {
          line: 17,
          column: 59
        }
      },
      "9": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 24,
          column: 51
        }
      },
      "10": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 42,
          column: 9
        }
      },
      "11": {
        start: {
          line: 29,
          column: 29
        },
        end: {
          line: 33,
          column: 14
        }
      },
      "12": {
        start: {
          line: 34,
          column: 12
        },
        end: {
          line: 35,
          column: 67
        }
      },
      "13": {
        start: {
          line: 35,
          column: 16
        },
        end: {
          line: 35,
          column: 67
        }
      },
      "14": {
        start: {
          line: 36,
          column: 12
        },
        end: {
          line: 36,
          column: 41
        }
      },
      "15": {
        start: {
          line: 40,
          column: 12
        },
        end: {
          line: 40,
          column: 56
        }
      },
      "16": {
        start: {
          line: 41,
          column: 12
        },
        end: {
          line: 41,
          column: 24
        }
      },
      "17": {
        start: {
          line: 48,
          column: 8
        },
        end: {
          line: 57,
          column: 9
        }
      },
      "18": {
        start: {
          line: 50,
          column: 27
        },
        end: {
          line: 50,
          column: 41
        }
      },
      "19": {
        start: {
          line: 51,
          column: 12
        },
        end: {
          line: 51,
          column: 52
        }
      },
      "20": {
        start: {
          line: 55,
          column: 12
        },
        end: {
          line: 55,
          column: 78
        }
      },
      "21": {
        start: {
          line: 56,
          column: 12
        },
        end: {
          line: 56,
          column: 24
        }
      },
      "22": {
        start: {
          line: 63,
          column: 8
        },
        end: {
          line: 77,
          column: 9
        }
      },
      "23": {
        start: {
          line: 64,
          column: 29
        },
        end: {
          line: 68,
          column: 14
        }
      },
      "24": {
        start: {
          line: 69,
          column: 12
        },
        end: {
          line: 70,
          column: 74
        }
      },
      "25": {
        start: {
          line: 70,
          column: 16
        },
        end: {
          line: 70,
          column: 74
        }
      },
      "26": {
        start: {
          line: 71,
          column: 12
        },
        end: {
          line: 71,
          column: 41
        }
      },
      "27": {
        start: {
          line: 75,
          column: 12
        },
        end: {
          line: 75,
          column: 62
        }
      },
      "28": {
        start: {
          line: 76,
          column: 12
        },
        end: {
          line: 76,
          column: 24
        }
      },
      "29": {
        start: {
          line: 83,
          column: 8
        },
        end: {
          line: 93,
          column: 9
        }
      },
      "30": {
        start: {
          line: 84,
          column: 29
        },
        end: {
          line: 86,
          column: 14
        }
      },
      "31": {
        start: {
          line: 87,
          column: 12
        },
        end: {
          line: 87,
          column: 31
        }
      },
      "32": {
        start: {
          line: 91,
          column: 12
        },
        end: {
          line: 91,
          column: 62
        }
      },
      "33": {
        start: {
          line: 92,
          column: 12
        },
        end: {
          line: 92,
          column: 25
        }
      },
      "34": {
        start: {
          line: 99,
          column: 8
        },
        end: {
          line: 115,
          column: 9
        }
      },
      "35": {
        start: {
          line: 100,
          column: 34
        },
        end: {
          line: 100,
          column: 90
        }
      },
      "36": {
        start: {
          line: 100,
          column: 62
        },
        end: {
          line: 100,
          column: 86
        }
      },
      "37": {
        start: {
          line: 101,
          column: 32
        },
        end: {
          line: 105,
          column: 59
        }
      },
      "38": {
        start: {
          line: 101,
          column: 61
        },
        end: {
          line: 105,
          column: 13
        }
      },
      "39": {
        start: {
          line: 106,
          column: 12
        },
        end: {
          line: 109,
          column: 14
        }
      },
      "40": {
        start: {
          line: 113,
          column: 12
        },
        end: {
          line: 113,
          column: 58
        }
      },
      "41": {
        start: {
          line: 114,
          column: 12
        },
        end: {
          line: 114,
          column: 24
        }
      },
      "42": {
        start: {
          line: 121,
          column: 8
        },
        end: {
          line: 136,
          column: 9
        }
      },
      "43": {
        start: {
          line: 122,
          column: 29
        },
        end: {
          line: 126,
          column: 14
        }
      },
      "44": {
        start: {
          line: 127,
          column: 12
        },
        end: {
          line: 128,
          column: 77
        }
      },
      "45": {
        start: {
          line: 128,
          column: 16
        },
        end: {
          line: 128,
          column: 77
        }
      },
      "46": {
        start: {
          line: 129,
          column: 12
        },
        end: {
          line: 129,
          column: 41
        }
      },
      "47": {
        start: {
          line: 133,
          column: 12
        },
        end: {
          line: 133,
          column: 60
        }
      },
      "48": {
        start: {
          line: 135,
          column: 12
        },
        end: {
          line: 135,
          column: 63
        }
      },
      "49": {
        start: {
          line: 140,
          column: 8
        },
        end: {
          line: 160,
          column: 9
        }
      },
      "50": {
        start: {
          line: 141,
          column: 27
        },
        end: {
          line: 144,
          column: 14
        }
      },
      "51": {
        start: {
          line: 145,
          column: 12
        },
        end: {
          line: 150,
          column: 13
        }
      },
      "52": {
        start: {
          line: 146,
          column: 16
        },
        end: {
          line: 149,
          column: 19
        }
      },
      "53": {
        start: {
          line: 147,
          column: 20
        },
        end: {
          line: 148,
          column: 61
        }
      },
      "54": {
        start: {
          line: 148,
          column: 24
        },
        end: {
          line: 148,
          column: 61
        }
      },
      "55": {
        start: {
          line: 151,
          column: 29
        },
        end: {
          line: 151,
          column: 83
        }
      },
      "56": {
        start: {
          line: 152,
          column: 12
        },
        end: {
          line: 153,
          column: 74
        }
      },
      "57": {
        start: {
          line: 153,
          column: 16
        },
        end: {
          line: 153,
          column: 74
        }
      },
      "58": {
        start: {
          line: 154,
          column: 12
        },
        end: {
          line: 154,
          column: 41
        }
      },
      "59": {
        start: {
          line: 158,
          column: 12
        },
        end: {
          line: 158,
          column: 63
        }
      },
      "60": {
        start: {
          line: 159,
          column: 12
        },
        end: {
          line: 159,
          column: 62
        }
      },
      "61": {
        start: {
          line: 164,
          column: 8
        },
        end: {
          line: 178,
          column: 9
        }
      },
      "62": {
        start: {
          line: 165,
          column: 29
        },
        end: {
          line: 169,
          column: 14
        }
      },
      "63": {
        start: {
          line: 170,
          column: 12
        },
        end: {
          line: 171,
          column: 79
        }
      },
      "64": {
        start: {
          line: 171,
          column: 16
        },
        end: {
          line: 171,
          column: 79
        }
      },
      "65": {
        start: {
          line: 172,
          column: 12
        },
        end: {
          line: 172,
          column: 41
        }
      },
      "66": {
        start: {
          line: 176,
          column: 12
        },
        end: {
          line: 176,
          column: 66
        }
      },
      "67": {
        start: {
          line: 177,
          column: 12
        },
        end: {
          line: 177,
          column: 24
        }
      },
      "68": {
        start: {
          line: 182,
          column: 8
        },
        end: {
          line: 192,
          column: 9
        }
      },
      "69": {
        start: {
          line: 183,
          column: 29
        },
        end: {
          line: 183,
          column: 113
        }
      },
      "70": {
        start: {
          line: 184,
          column: 12
        },
        end: {
          line: 185,
          column: 75
        }
      },
      "71": {
        start: {
          line: 185,
          column: 16
        },
        end: {
          line: 185,
          column: 75
        }
      },
      "72": {
        start: {
          line: 186,
          column: 12
        },
        end: {
          line: 186,
          column: 41
        }
      },
      "73": {
        start: {
          line: 190,
          column: 12
        },
        end: {
          line: 190,
          column: 67
        }
      },
      "74": {
        start: {
          line: 191,
          column: 12
        },
        end: {
          line: 191,
          column: 51
        }
      },
      "75": {
        start: {
          line: 196,
          column: 8
        },
        end: {
          line: 211,
          column: 9
        }
      },
      "76": {
        start: {
          line: 197,
          column: 27
        },
        end: {
          line: 197,
          column: 48
        }
      },
      "77": {
        start: {
          line: 198,
          column: 12
        },
        end: {
          line: 199,
          column: 62
        }
      },
      "78": {
        start: {
          line: 199,
          column: 16
        },
        end: {
          line: 199,
          column: 62
        }
      },
      "79": {
        start: {
          line: 200,
          column: 12
        },
        end: {
          line: 201,
          column: 64
        }
      },
      "80": {
        start: {
          line: 201,
          column: 16
        },
        end: {
          line: 201,
          column: 64
        }
      },
      "81": {
        start: {
          line: 202,
          column: 29
        },
        end: {
          line: 202,
          column: 78
        }
      },
      "82": {
        start: {
          line: 203,
          column: 12
        },
        end: {
          line: 204,
          column: 79
        }
      },
      "83": {
        start: {
          line: 204,
          column: 16
        },
        end: {
          line: 204,
          column: 79
        }
      },
      "84": {
        start: {
          line: 205,
          column: 12
        },
        end: {
          line: 205,
          column: 41
        }
      },
      "85": {
        start: {
          line: 209,
          column: 12
        },
        end: {
          line: 209,
          column: 66
        }
      },
      "86": {
        start: {
          line: 210,
          column: 12
        },
        end: {
          line: 210,
          column: 41
        }
      },
      "87": {
        start: {
          line: 215,
          column: 8
        },
        end: {
          line: 225,
          column: 9
        }
      },
      "88": {
        start: {
          line: 216,
          column: 29
        },
        end: {
          line: 216,
          column: 81
        }
      },
      "89": {
        start: {
          line: 217,
          column: 12
        },
        end: {
          line: 218,
          column: 85
        }
      },
      "90": {
        start: {
          line: 218,
          column: 16
        },
        end: {
          line: 218,
          column: 85
        }
      },
      "91": {
        start: {
          line: 219,
          column: 12
        },
        end: {
          line: 219,
          column: 41
        }
      },
      "92": {
        start: {
          line: 223,
          column: 12
        },
        end: {
          line: 223,
          column: 59
        }
      },
      "93": {
        start: {
          line: 224,
          column: 12
        },
        end: {
          line: 224,
          column: 43
        }
      },
      "94": {
        start: {
          line: 229,
          column: 8
        },
        end: {
          line: 239,
          column: 9
        }
      },
      "95": {
        start: {
          line: 230,
          column: 29
        },
        end: {
          line: 230,
          column: 87
        }
      },
      "96": {
        start: {
          line: 231,
          column: 12
        },
        end: {
          line: 232,
          column: 80
        }
      },
      "97": {
        start: {
          line: 232,
          column: 16
        },
        end: {
          line: 232,
          column: 80
        }
      },
      "98": {
        start: {
          line: 233,
          column: 12
        },
        end: {
          line: 233,
          column: 41
        }
      },
      "99": {
        start: {
          line: 237,
          column: 12
        },
        end: {
          line: 237,
          column: 70
        }
      },
      "100": {
        start: {
          line: 238,
          column: 12
        },
        end: {
          line: 238,
          column: 55
        }
      },
      "101": {
        start: {
          line: 243,
          column: 8
        },
        end: {
          line: 253,
          column: 9
        }
      },
      "102": {
        start: {
          line: 244,
          column: 29
        },
        end: {
          line: 244,
          column: 79
        }
      },
      "103": {
        start: {
          line: 245,
          column: 12
        },
        end: {
          line: 246,
          column: 79
        }
      },
      "104": {
        start: {
          line: 246,
          column: 16
        },
        end: {
          line: 246,
          column: 79
        }
      },
      "105": {
        start: {
          line: 247,
          column: 12
        },
        end: {
          line: 247,
          column: 41
        }
      },
      "106": {
        start: {
          line: 251,
          column: 12
        },
        end: {
          line: 251,
          column: 67
        }
      },
      "107": {
        start: {
          line: 252,
          column: 12
        },
        end: {
          line: 252,
          column: 51
        }
      },
      "108": {
        start: {
          line: 257,
          column: 72
        },
        end: {
          line: 257,
          column: 76
        }
      },
      "109": {
        start: {
          line: 259,
          column: 29
        },
        end: {
          line: 259,
          column: 84
        }
      },
      "110": {
        start: {
          line: 260,
          column: 29
        },
        end: {
          line: 260,
          column: 102
        }
      },
      "111": {
        start: {
          line: 262,
          column: 29
        },
        end: {
          line: 262,
          column: 84
        }
      },
      "112": {
        start: {
          line: 263,
          column: 26
        },
        end: {
          line: 263,
          column: 91
        }
      },
      "113": {
        start: {
          line: 264,
          column: 25
        },
        end: {
          line: 264,
          column: 72
        }
      },
      "114": {
        start: {
          line: 265,
          column: 27
        },
        end: {
          line: 268,
          column: 15
        }
      },
      "115": {
        start: {
          line: 270,
          column: 31
        },
        end: {
          line: 270,
          column: 84
        }
      },
      "116": {
        start: {
          line: 271,
          column: 8
        },
        end: {
          line: 271,
          column: 88
        }
      },
      "117": {
        start: {
          line: 276,
          column: 20
        },
        end: {
          line: 276,
          column: 85
        }
      },
      "118": {
        start: {
          line: 278,
          column: 32
        },
        end: {
          line: 284,
          column: 9
        }
      },
      "119": {
        start: {
          line: 285,
          column: 31
        },
        end: {
          line: 285,
          column: 76
        }
      },
      "120": {
        start: {
          line: 286,
          column: 28
        },
        end: {
          line: 286,
          column: 48
        }
      },
      "121": {
        start: {
          line: 288,
          column: 8
        },
        end: {
          line: 293,
          column: 9
        }
      },
      "122": {
        start: {
          line: 289,
          column: 12
        },
        end: {
          line: 289,
          column: 33
        }
      },
      "123": {
        start: {
          line: 291,
          column: 13
        },
        end: {
          line: 293,
          column: 9
        }
      },
      "124": {
        start: {
          line: 292,
          column: 12
        },
        end: {
          line: 292,
          column: 33
        }
      },
      "125": {
        start: {
          line: 295,
          column: 25
        },
        end: {
          line: 295,
          column: 50
        }
      },
      "126": {
        start: {
          line: 296,
          column: 30
        },
        end: {
          line: 296,
          column: 55
        }
      },
      "127": {
        start: {
          line: 297,
          column: 21
        },
        end: {
          line: 297,
          column: 46
        }
      },
      "128": {
        start: {
          line: 298,
          column: 8
        },
        end: {
          line: 306,
          column: 10
        }
      },
      "129": {
        start: {
          line: 310,
          column: 8
        },
        end: {
          line: 346,
          column: 10
        }
      },
      "130": {
        start: {
          line: 349,
          column: 22
        },
        end: {
          line: 372,
          column: 9
        }
      },
      "131": {
        start: {
          line: 373,
          column: 8
        },
        end: {
          line: 373,
          column: 91
        }
      },
      "132": {
        start: {
          line: 373,
          column: 36
        },
        end: {
          line: 373,
          column: 89
        }
      },
      "133": {
        start: {
          line: 376,
          column: 22
        },
        end: {
          line: 376,
          column: 60
        }
      },
      "134": {
        start: {
          line: 377,
          column: 8
        },
        end: {
          line: 392,
          column: 10
        }
      },
      "135": {
        start: {
          line: 395,
          column: 8
        },
        end: {
          line: 414,
          column: 10
        }
      },
      "136": {
        start: {
          line: 417,
          column: 8
        },
        end: {
          line: 429,
          column: 10
        }
      },
      "137": {
        start: {
          line: 432,
          column: 8
        },
        end: {
          line: 440,
          column: 10
        }
      },
      "138": {
        start: {
          line: 443,
          column: 8
        },
        end: {
          line: 460,
          column: 10
        }
      },
      "139": {
        start: {
          line: 463,
          column: 0
        },
        end: {
          line: 463,
          column: 44
        }
      },
      "140": {
        start: {
          line: 464,
          column: 0
        },
        end: {
          line: 469,
          column: 3
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 6,
            column: 4
          },
          end: {
            line: 6,
            column: 5
          }
        },
        loc: {
          start: {
            line: 6,
            column: 48
          },
          end: {
            line: 19,
            column: 5
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 23,
            column: 4
          },
          end: {
            line: 23,
            column: 5
          }
        },
        loc: {
          start: {
            line: 23,
            column: 49
          },
          end: {
            line: 25,
            column: 5
          }
        },
        line: 23
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 27,
            column: 4
          },
          end: {
            line: 27,
            column: 5
          }
        },
        loc: {
          start: {
            line: 27,
            column: 43
          },
          end: {
            line: 43,
            column: 5
          }
        },
        line: 27
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 47,
            column: 4
          },
          end: {
            line: 47,
            column: 5
          }
        },
        loc: {
          start: {
            line: 47,
            column: 31
          },
          end: {
            line: 58,
            column: 5
          }
        },
        line: 47
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 62,
            column: 4
          },
          end: {
            line: 62,
            column: 5
          }
        },
        loc: {
          start: {
            line: 62,
            column: 38
          },
          end: {
            line: 78,
            column: 5
          }
        },
        line: 62
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 82,
            column: 4
          },
          end: {
            line: 82,
            column: 5
          }
        },
        loc: {
          start: {
            line: 82,
            column: 32
          },
          end: {
            line: 94,
            column: 5
          }
        },
        line: 82
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 98,
            column: 4
          },
          end: {
            line: 98,
            column: 5
          }
        },
        loc: {
          start: {
            line: 98,
            column: 40
          },
          end: {
            line: 116,
            column: 5
          }
        },
        line: 98
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 100,
            column: 47
          },
          end: {
            line: 100,
            column: 48
          }
        },
        loc: {
          start: {
            line: 100,
            column: 62
          },
          end: {
            line: 100,
            column: 86
          }
        },
        line: 100
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 101,
            column: 45
          },
          end: {
            line: 101,
            column: 46
          }
        },
        loc: {
          start: {
            line: 101,
            column: 61
          },
          end: {
            line: 105,
            column: 13
          }
        },
        line: 101
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 120,
            column: 4
          },
          end: {
            line: 120,
            column: 5
          }
        },
        loc: {
          start: {
            line: 120,
            column: 45
          },
          end: {
            line: 137,
            column: 5
          }
        },
        line: 120
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 139,
            column: 4
          },
          end: {
            line: 139,
            column: 5
          }
        },
        loc: {
          start: {
            line: 139,
            column: 36
          },
          end: {
            line: 161,
            column: 5
          }
        },
        line: 139
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 146,
            column: 54
          },
          end: {
            line: 146,
            column: 55
          }
        },
        loc: {
          start: {
            line: 146,
            column: 72
          },
          end: {
            line: 149,
            column: 17
          }
        },
        line: 146
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 163,
            column: 4
          },
          end: {
            line: 163,
            column: 5
          }
        },
        loc: {
          start: {
            line: 163,
            column: 53
          },
          end: {
            line: 179,
            column: 5
          }
        },
        line: 163
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 181,
            column: 4
          },
          end: {
            line: 181,
            column: 5
          }
        },
        loc: {
          start: {
            line: 181,
            column: 66
          },
          end: {
            line: 193,
            column: 5
          }
        },
        line: 181
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 195,
            column: 4
          },
          end: {
            line: 195,
            column: 5
          }
        },
        loc: {
          start: {
            line: 195,
            column: 46
          },
          end: {
            line: 212,
            column: 5
          }
        },
        line: 195
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 214,
            column: 4
          },
          end: {
            line: 214,
            column: 5
          }
        },
        loc: {
          start: {
            line: 214,
            column: 38
          },
          end: {
            line: 226,
            column: 5
          }
        },
        line: 214
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 228,
            column: 4
          },
          end: {
            line: 228,
            column: 5
          }
        },
        loc: {
          start: {
            line: 228,
            column: 52
          },
          end: {
            line: 240,
            column: 5
          }
        },
        line: 228
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 242,
            column: 4
          },
          end: {
            line: 242,
            column: 5
          }
        },
        loc: {
          start: {
            line: 242,
            column: 46
          },
          end: {
            line: 254,
            column: 5
          }
        },
        line: 242
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 256,
            column: 4
          },
          end: {
            line: 256,
            column: 5
          }
        },
        loc: {
          start: {
            line: 256,
            column: 41
          },
          end: {
            line: 272,
            column: 5
          }
        },
        line: 256
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 274,
            column: 4
          },
          end: {
            line: 274,
            column: 5
          }
        },
        loc: {
          start: {
            line: 274,
            column: 50
          },
          end: {
            line: 307,
            column: 5
          }
        },
        line: 274
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 309,
            column: 4
          },
          end: {
            line: 309,
            column: 5
          }
        },
        loc: {
          start: {
            line: 309,
            column: 46
          },
          end: {
            line: 347,
            column: 5
          }
        },
        line: 309
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 348,
            column: 4
          },
          end: {
            line: 348,
            column: 5
          }
        },
        loc: {
          start: {
            line: 348,
            column: 43
          },
          end: {
            line: 374,
            column: 5
          }
        },
        line: 348
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 373,
            column: 28
          },
          end: {
            line: 373,
            column: 29
          }
        },
        loc: {
          start: {
            line: 373,
            column: 36
          },
          end: {
            line: 373,
            column: 89
          }
        },
        line: 373
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 375,
            column: 4
          },
          end: {
            line: 375,
            column: 5
          }
        },
        loc: {
          start: {
            line: 375,
            column: 38
          },
          end: {
            line: 393,
            column: 5
          }
        },
        line: 375
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 394,
            column: 4
          },
          end: {
            line: 394,
            column: 5
          }
        },
        loc: {
          start: {
            line: 394,
            column: 28
          },
          end: {
            line: 415,
            column: 5
          }
        },
        line: 394
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 416,
            column: 4
          },
          end: {
            line: 416,
            column: 5
          }
        },
        loc: {
          start: {
            line: 416,
            column: 30
          },
          end: {
            line: 430,
            column: 5
          }
        },
        line: 416
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 431,
            column: 4
          },
          end: {
            line: 431,
            column: 5
          }
        },
        loc: {
          start: {
            line: 431,
            column: 42
          },
          end: {
            line: 441,
            column: 5
          }
        },
        line: 431
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 442,
            column: 4
          },
          end: {
            line: 442,
            column: 5
          }
        },
        loc: {
          start: {
            line: 442,
            column: 38
          },
          end: {
            line: 461,
            column: 5
          }
        },
        line: 442
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 9,
            column: 12
          },
          end: {
            line: 10,
            column: 94
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 9,
            column: 12
          },
          end: {
            line: 10,
            column: 94
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 9
      },
      "1": {
        loc: {
          start: {
            line: 34,
            column: 12
          },
          end: {
            line: 35,
            column: 67
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 34,
            column: 12
          },
          end: {
            line: 35,
            column: 67
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 34
      },
      "2": {
        loc: {
          start: {
            line: 69,
            column: 12
          },
          end: {
            line: 70,
            column: 74
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 69,
            column: 12
          },
          end: {
            line: 70,
            column: 74
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 69
      },
      "3": {
        loc: {
          start: {
            line: 127,
            column: 12
          },
          end: {
            line: 128,
            column: 77
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 127,
            column: 12
          },
          end: {
            line: 128,
            column: 77
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 127
      },
      "4": {
        loc: {
          start: {
            line: 143,
            column: 24
          },
          end: {
            line: 143,
            column: 41
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 143,
            column: 24
          },
          end: {
            line: 143,
            column: 35
          }
        }, {
          start: {
            line: 143,
            column: 39
          },
          end: {
            line: 143,
            column: 41
          }
        }],
        line: 143
      },
      "5": {
        loc: {
          start: {
            line: 145,
            column: 12
          },
          end: {
            line: 150,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 145,
            column: 12
          },
          end: {
            line: 150,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 145
      },
      "6": {
        loc: {
          start: {
            line: 147,
            column: 20
          },
          end: {
            line: 148,
            column: 61
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 147,
            column: 20
          },
          end: {
            line: 148,
            column: 61
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 147
      },
      "7": {
        loc: {
          start: {
            line: 152,
            column: 12
          },
          end: {
            line: 153,
            column: 74
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 152,
            column: 12
          },
          end: {
            line: 153,
            column: 74
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 152
      },
      "8": {
        loc: {
          start: {
            line: 170,
            column: 12
          },
          end: {
            line: 171,
            column: 79
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 170,
            column: 12
          },
          end: {
            line: 171,
            column: 79
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 170
      },
      "9": {
        loc: {
          start: {
            line: 184,
            column: 12
          },
          end: {
            line: 185,
            column: 75
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 184,
            column: 12
          },
          end: {
            line: 185,
            column: 75
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 184
      },
      "10": {
        loc: {
          start: {
            line: 198,
            column: 12
          },
          end: {
            line: 199,
            column: 62
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 198,
            column: 12
          },
          end: {
            line: 199,
            column: 62
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 198
      },
      "11": {
        loc: {
          start: {
            line: 200,
            column: 12
          },
          end: {
            line: 201,
            column: 64
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 200,
            column: 12
          },
          end: {
            line: 201,
            column: 64
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 200
      },
      "12": {
        loc: {
          start: {
            line: 203,
            column: 12
          },
          end: {
            line: 204,
            column: 79
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 203,
            column: 12
          },
          end: {
            line: 204,
            column: 79
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 203
      },
      "13": {
        loc: {
          start: {
            line: 217,
            column: 12
          },
          end: {
            line: 218,
            column: 85
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 217,
            column: 12
          },
          end: {
            line: 218,
            column: 85
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 217
      },
      "14": {
        loc: {
          start: {
            line: 231,
            column: 12
          },
          end: {
            line: 232,
            column: 80
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 231,
            column: 12
          },
          end: {
            line: 232,
            column: 80
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 231
      },
      "15": {
        loc: {
          start: {
            line: 245,
            column: 12
          },
          end: {
            line: 246,
            column: 79
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 245,
            column: 12
          },
          end: {
            line: 246,
            column: 79
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 245
      },
      "16": {
        loc: {
          start: {
            line: 260,
            column: 29
          },
          end: {
            line: 260,
            column: 102
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 260,
            column: 51
          },
          end: {
            line: 260,
            column: 54
          }
        }, {
          start: {
            line: 260,
            column: 57
          },
          end: {
            line: 260,
            column: 102
          }
        }],
        line: 260
      },
      "17": {
        loc: {
          start: {
            line: 285,
            column: 31
          },
          end: {
            line: 285,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 285,
            column: 31
          },
          end: {
            line: 285,
            column: 69
          }
        }, {
          start: {
            line: 285,
            column: 73
          },
          end: {
            line: 285,
            column: 76
          }
        }],
        line: 285
      },
      "18": {
        loc: {
          start: {
            line: 288,
            column: 8
          },
          end: {
            line: 293,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 288,
            column: 8
          },
          end: {
            line: 293,
            column: 9
          }
        }, {
          start: {
            line: 291,
            column: 13
          },
          end: {
            line: 293,
            column: 9
          }
        }],
        line: 288
      },
      "19": {
        loc: {
          start: {
            line: 291,
            column: 13
          },
          end: {
            line: 293,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 291,
            column: 13
          },
          end: {
            line: 293,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 291
      },
      "20": {
        loc: {
          start: {
            line: 378,
            column: 18
          },
          end: {
            line: 378,
            column: 29
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 378,
            column: 18
          },
          end: {
            line: 378,
            column: 23
          }
        }, {
          start: {
            line: 378,
            column: 27
          },
          end: {
            line: 378,
            column: 29
          }
        }],
        line: 378
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0]
    },
    inputSourceMap: {
      file: "/workspaces/MyFitHero/src/features/nutrition/services/nutrition.service.ts",
      mappings: ";;;AAgBA,MAAa,gBAAgB;IAG3B,2CAA2C;IAC3C,MAAM,CAAC,KAAK,CAAC,gBAAgB,CAAC,MAAc,EAAE,IAAY;QACxD,IAAI,CAAC;YACH,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,GAAG,IAAI,CAAC,QAAQ,IAAI,MAAM,UAAU,IAAI,EAAE,CAAC,CAAC;YACzE,IAAI,CAAC,QAAQ,CAAC,EAAE;gBACd,MAAM,IAAI,KAAK,CAAC,4DAA4D,CAAC,CAAC;YAChF,OAAO,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;QAC/B,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,qBAAqB;YACrB,OAAO,CAAC,KAAK,CAAC,uBAAuB,EAAE,KAAK,CAAC,CAAC;YAC9C,kCAAkC;YAClC,OAAO,IAAI,CAAC,oBAAoB,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;QACjD,CAAC;IACH,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,KAAK,CAAC,iBAAiB,CAAC,MAAc,EAAE,IAAY;QACzD,OAAO,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;IAC7C,CAAC;IAED,mBAAmB;IACnB,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,MAAc,EAAE,QAAuB;QAC1D,IAAI,CAAC;YACH,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,GAAG,IAAI,CAAC,QAAQ,IAAI,MAAM,QAAQ,EAAE;gBAC/D,MAAM,EAAE,MAAM;gBACd,OAAO,EAAE,EAAE,cAAc,EAAE,kBAAkB,EAAE;gBAC/C,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC;aAC/B,CAAC,CAAC;YACH,IAAI,CAAC,QAAQ,CAAC,EAAE;gBAAE,MAAM,IAAI,KAAK,CAAC,iCAAiC,CAAC,CAAC;YACrE,OAAO,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;QAC/B,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,qBAAqB;YACrB,OAAO,CAAC,KAAK,CAAC,qBAAqB,EAAE,KAAK,CAAC,CAAC;YAC5C,MAAM,KAAK,CAAC;QACd,CAAC;IACH,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,IAAmB;QACtC,IAAI,CAAC;YACH,uEAAuE;YACvE,MAAM,MAAM,GAAG,cAAc,CAAC;YAC9B,OAAO,MAAM,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;QAC1C,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,qBAAqB;YACrB,OAAO,CAAC,KAAK,CAAC,2CAA2C,EAAE,KAAK,CAAC,CAAC;YAClE,OAAO,IAAI,CAAC;QACd,CAAC;IACH,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,EAAU,EAAE,IAA4B;QAC9D,IAAI,CAAC;YACH,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,GAAG,IAAI,CAAC,QAAQ,UAAU,EAAE,EAAE,EAAE;gBAC3D,MAAM,EAAE,KAAK;gBACb,OAAO,EAAE,EAAE,cAAc,EAAE,kBAAkB,EAAE;gBAC/C,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;aAC3B,CAAC,CAAC;YACH,IAAI,CAAC,QAAQ,CAAC,EAAE;gBAAE,MAAM,IAAI,KAAK,CAAC,wCAAwC,CAAC,CAAC;YAC5E,OAAO,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;QAC/B,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,qBAAqB;YACrB,OAAO,CAAC,KAAK,CAAC,2BAA2B,EAAE,KAAK,CAAC,CAAC;YAClD,OAAO,IAAI,CAAC;QACd,CAAC;IACH,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,EAAU;QAChC,IAAI,CAAC;YACH,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,GAAG,IAAI,CAAC,QAAQ,UAAU,EAAE,EAAE,EAAE;gBAC3D,MAAM,EAAE,QAAQ;aACjB,CAAC,CAAC;YACH,OAAO,QAAQ,CAAC,EAAE,CAAC;QACrB,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,qBAAqB;YACrB,OAAO,CAAC,KAAK,CAAC,2BAA2B,EAAE,KAAK,CAAC,CAAC;YAClD,OAAO,KAAK,CAAC;QACf,CAAC;IACH,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,KAAK,CAAC,eAAe,CAAC,KAAa;QAIxC,IAAI,CAAC;YACH,MAAM,aAAa,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE,CAAC,GAAG,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC;YAC/E,MAAM,WAAW,GAAG,KAAK,CAAC,MAAM,CAC9B,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC;gBACd,QAAQ,EAAE,GAAG,CAAC,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ;gBAC7C,aAAa,EAAE,GAAG,CAAC,aAAa,GAAG,IAAI,CAAC,MAAM,CAAC,aAAa;gBAC5D,IAAI,EAAE,GAAG,CAAC,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI;aAClC,CAAC,EACF,EAAE,QAAQ,EAAE,CAAC,EAAE,aAAa,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,CAC3C,CAAC;YAEF,OAAO;gBACL,QAAQ,EAAE,aAAa;gBACvB,MAAM,EAAE,WAAW;aACpB,CAAC;QACJ,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,qBAAqB;YACrB,OAAO,CAAC,KAAK,CAAC,uBAAuB,EAAE,KAAK,CAAC,CAAC;YAC9C,OAAO,IAAI,CAAC;QACd,CAAC;IACH,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,KAAK,CAAC,kBAAkB,CAAC,OAM/B;QACC,IAAI,CAAC;YACH,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,GAAG,IAAI,CAAC,QAAQ,kBAAkB,EAAE;gBAC/D,MAAM,EAAE,MAAM;gBACd,OAAO,EAAE,EAAE,cAAc,EAAE,kBAAkB,EAAE;gBAC/C,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC;aAC9B,CAAC,CAAC;YACH,IAAI,CAAC,QAAQ,CAAC,EAAE;gBAAE,MAAM,IAAI,KAAK,CAAC,2CAA2C,CAAC,CAAC;YAC/E,OAAO,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;QAC/B,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,qBAAqB;YACrB,OAAO,CAAC,KAAK,CAAC,yBAAyB,EAAE,KAAK,CAAC,CAAC;YAChD,iCAAiC;YACjC,OAAO,IAAI,CAAC,6BAA6B,CAAC,OAAO,CAAC,CAAC;QACrD,CAAC;IACH,CAAC;IAED,uBAAuB;IACvB,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,KAAsB;QAC7C,IAAI,CAAC;YACH,MAAM,MAAM,GAAG,IAAI,eAAe,CAAC;gBACjC,CAAC,EAAE,KAAK,CAAC,KAAK;gBACd,KAAK,EAAE,CAAC,KAAK,CAAC,KAAK,IAAI,EAAE,CAAC,CAAC,QAAQ,EAAE;aACtC,CAAC,CAAC;YAEH,IAAI,KAAK,CAAC,OAAO,EAAE,CAAC;gBAClB,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,EAAE,KAAK,CAAC,EAAE,EAAE;oBACrD,IAAI,KAAK,KAAK,SAAS;wBAAE,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;gBAChE,CAAC,CAAC,CAAC;YACL,CAAC;YAED,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,GAAG,IAAI,CAAC,QAAQ,iBAAiB,MAAM,EAAE,CAAC,CAAC;YACxE,IAAI,CAAC,QAAQ,CAAC,EAAE;gBAAE,MAAM,IAAI,KAAK,CAAC,wCAAwC,CAAC,CAAC;YAC5E,OAAO,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;QAC/B,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,qBAAqB;YACrB,OAAO,CAAC,KAAK,CAAC,4BAA4B,EAAE,KAAK,CAAC,CAAC;YACnD,OAAO,IAAI,CAAC,wBAAwB,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QACpD,CAAC;IACH,CAAC;IAED,0CAA0C;IAC1C,MAAM,CAAC,KAAK,CAAC,oBAAoB,CAC/B,MAAc,EACd,KAA8B;QAE9B,IAAI,CAAC;YACH,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,GAAG,IAAI,CAAC,QAAQ,IAAI,MAAM,QAAQ,EAAE;gBAC/D,MAAM,EAAE,KAAK;gBACb,OAAO,EAAE,EAAE,cAAc,EAAE,kBAAkB,EAAE;gBAC/C,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC;aAC5B,CAAC,CAAC;YACH,IAAI,CAAC,QAAQ,CAAC,EAAE;gBAAE,MAAM,IAAI,KAAK,CAAC,6CAA6C,CAAC,CAAC;YACjF,OAAO,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;QAC/B,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,qBAAqB;YACrB,OAAO,CAAC,KAAK,CAAC,+BAA+B,EAAE,KAAK,CAAC,CAAC;YACtD,MAAM,KAAK,CAAC;QACd,CAAC;IACH,CAAC;IAED,yBAAyB;IACzB,MAAM,CAAC,KAAK,CAAC,oBAAoB,CAC/B,MAAc,EACd,SAAiB,EACjB,OAAe;QAEf,IAAI,CAAC;YACH,MAAM,QAAQ,GAAG,MAAM,KAAK,CAC1B,GAAG,IAAI,CAAC,QAAQ,IAAI,MAAM,mBAAmB,SAAS,QAAQ,OAAO,EAAE,CACxE,CAAC;YACF,IAAI,CAAC,QAAQ,CAAC,EAAE;gBAAE,MAAM,IAAI,KAAK,CAAC,yCAAyC,CAAC,CAAC;YAC7E,OAAO,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;QAC/B,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,qBAAqB;YACrB,OAAO,CAAC,KAAK,CAAC,gCAAgC,EAAE,KAAK,CAAC,CAAC;YACvD,OAAO,IAAI,CAAC,wBAAwB,EAAE,CAAC;QACzC,CAAC;IACH,CAAC;IAED,4BAA4B;IAC5B,MAAM,CAAC,KAAK,CAAC,UAAU,CACrB,OAAe,EACf,OAAkD;QAElD,IAAI,CAAC;YACH,MAAM,MAAM,GAAG,IAAI,eAAe,EAAE,CAAC;YACrC,IAAI,OAAO,EAAE,IAAI;gBAAE,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;YACjE,IAAI,OAAO,EAAE,UAAU;gBAAE,MAAM,CAAC,MAAM,CAAC,YAAY,EAAE,OAAO,CAAC,UAAU,CAAC,CAAC;YAEzE,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,GAAG,IAAI,CAAC,QAAQ,YAAY,MAAM,EAAE,CAAC,CAAC;YACnE,IAAI,CAAC,QAAQ,CAAC,EAAE;gBAAE,MAAM,IAAI,KAAK,CAAC,6CAA6C,CAAC,CAAC;YACjF,OAAO,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;QAC/B,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,qBAAqB;YACrB,OAAO,CAAC,KAAK,CAAC,+BAA+B,EAAE,KAAK,CAAC,CAAC;YACtD,OAAO,IAAI,CAAC,cAAc,EAAE,CAAC;QAC/B,CAAC;IACH,CAAC;IAED,gBAAgB;IAChB,MAAM,CAAC,KAAK,CAAC,YAAY,CAAC,MAAc;QACtC,IAAI,CAAC;YACH,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,GAAG,IAAI,CAAC,QAAQ,IAAI,MAAM,aAAa,CAAC,CAAC;YACtE,IAAI,CAAC,QAAQ,CAAC,EAAE;gBAAE,MAAM,IAAI,KAAK,CAAC,mDAAmD,CAAC,CAAC;YACvF,OAAO,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;QAC/B,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,qBAAqB;YACrB,OAAO,CAAC,KAAK,CAAC,wBAAwB,EAAE,KAAK,CAAC,CAAC;YAC/C,OAAO,IAAI,CAAC,gBAAgB,EAAE,CAAC;QACjC,CAAC;IACH,CAAC;IAED,4BAA4B;IAC5B,MAAM,CAAC,KAAK,CAAC,kBAAkB,CAC7B,MAAc,EACd,MAAoC;QAEpC,IAAI,CAAC;YACH,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,GAAG,IAAI,CAAC,QAAQ,IAAI,MAAM,WAAW,MAAM,EAAE,CAAC,CAAC;YAC5E,IAAI,CAAC,QAAQ,CAAC,EAAE;gBAAE,MAAM,IAAI,KAAK,CAAC,8CAA8C,CAAC,CAAC;YAClF,OAAO,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;QAC/B,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,qBAAqB;YACrB,OAAO,CAAC,KAAK,CAAC,mCAAmC,EAAE,KAAK,CAAC,CAAC;YAC1D,OAAO,IAAI,CAAC,sBAAsB,CAAC,MAAM,CAAC,CAAC;QAC7C,CAAC;IACH,CAAC;IAED,yBAAyB;IACzB,MAAM,CAAC,KAAK,CAAC,oBAAoB,CAAC,MAAc;QAC9C,IAAI,CAAC;YACH,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,GAAG,IAAI,CAAC,QAAQ,IAAI,MAAM,WAAW,CAAC,CAAC;YACpE,IAAI,CAAC,QAAQ,CAAC,EAAE;gBAAE,MAAM,IAAI,KAAK,CAAC,6CAA6C,CAAC,CAAC;YACjF,OAAO,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;QAC/B,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,qBAAqB;YACrB,OAAO,CAAC,KAAK,CAAC,gCAAgC,EAAE,KAAK,CAAC,CAAC;YACvD,OAAO,IAAI,CAAC,wBAAwB,EAAE,CAAC;QACzC,CAAC;IACH,CAAC;IAED,+BAA+B;IAC/B,MAAM,CAAC,uBAAuB,CAAC,IAAmB;QAChD,MAAM,EAAE,aAAa,EAAE,WAAW,EAAE,UAAU,EAAE,WAAW,EAAE,GAAG,IAAI,CAAC;QAErE,2BAA2B;QAC3B,MAAM,YAAY,GAAG,IAAI,CAAC,GAAG,CAAC,aAAa,GAAG,UAAU,CAAC,aAAa,EAAE,GAAG,CAAC,CAAC;QAC7E,MAAM,YAAY,GAAG,YAAY,IAAI,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,GAAG,CAAC,YAAY,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC;QAE/F,yBAAyB;QACzB,MAAM,YAAY,GAAG,WAAW,CAAC,QAAQ,GAAG,UAAU,CAAC,YAAY,CAAC,QAAQ,CAAC;QAC7E,MAAM,SAAS,GAAG,WAAW,CAAC,aAAa,GAAG,UAAU,CAAC,YAAY,CAAC,aAAa,CAAC;QACpF,MAAM,QAAQ,GAAG,WAAW,CAAC,IAAI,GAAG,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC;QAEjE,MAAM,UAAU,GACd,CAAC,IAAI,CAAC,GAAG,CAAC,YAAY,EAAE,GAAG,CAAC,GAAG,GAAG;YAChC,IAAI,CAAC,GAAG,CAAC,SAAS,EAAE,GAAG,CAAC,GAAG,GAAG;YAC9B,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,GAAG,CAAC,GAAG,GAAG,CAAC;YAChC,GAAG,CAAC;QAEN,4BAA4B;QAC5B,MAAM,cAAc,GAAG,IAAI,CAAC,GAAG,CAAC,WAAW,GAAG,UAAU,CAAC,SAAS,EAAE,CAAC,CAAC,GAAG,GAAG,CAAC;QAE7E,OAAO,IAAI,CAAC,KAAK,CAAC,YAAY,GAAG,GAAG,GAAG,UAAU,GAAG,GAAG,GAAG,cAAc,GAAG,GAAG,CAAC,CAAC;IAClF,CAAC;IAED,qCAAqC;IAC7B,MAAM,CAAC,6BAA6B,CAAC,OAM5C;QACC,iEAAiE;QACjE,MAAM,GAAG,GAAG,EAAE,GAAG,OAAO,CAAC,MAAM,GAAG,IAAI,GAAG,OAAO,CAAC,MAAM,GAAG,CAAC,GAAG,OAAO,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,kBAAkB;QAEjG,qBAAqB;QACrB,MAAM,eAAe,GAA2B;YAC9C,SAAS,EAAE,GAAG;YACd,KAAK,EAAE,KAAK;YACZ,QAAQ,EAAE,IAAI;YACd,MAAM,EAAE,KAAK;YACb,WAAW,EAAE,GAAG;SACjB,CAAC;QAEF,MAAM,cAAc,GAAG,eAAe,CAAC,OAAO,CAAC,aAAa,CAAC,IAAI,GAAG,CAAC;QACrE,IAAI,aAAa,GAAG,GAAG,GAAG,cAAc,CAAC;QAEzC,8BAA8B;QAC9B,IAAI,OAAO,CAAC,IAAI,KAAK,aAAa,EAAE,CAAC;YACnC,aAAa,IAAI,GAAG,CAAC,CAAC,0BAA0B;QAClD,CAAC;aAAM,IAAI,OAAO,CAAC,IAAI,KAAK,aAAa,EAAE,CAAC;YAC1C,aAAa,IAAI,GAAG,CAAC,CAAC,0BAA0B;QAClD,CAAC;QAED,+DAA+D;QAC/D,MAAM,QAAQ,GAAG,CAAC,aAAa,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,UAAU;QACtD,MAAM,aAAa,GAAG,CAAC,aAAa,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,UAAU;QAC3D,MAAM,IAAI,GAAG,CAAC,aAAa,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,UAAU;QAElD,OAAO;YACL,aAAa,EAAE,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC;YACxC,YAAY,EAAE;gBACZ,QAAQ,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC;gBAC9B,aAAa,EAAE,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC;gBACxC,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;aACvB;YACD,SAAS,EAAE,OAAO,CAAC,MAAM,GAAG,EAAE,EAAE,uBAAuB;SACxD,CAAC;IACJ,CAAC;IAED,0BAA0B;IAClB,MAAM,CAAC,oBAAoB,CAAC,MAAc,EAAE,IAAY;QAC9D,OAAO;YACL,MAAM;YACN,IAAI;YACJ,KAAK,EAAE;gBACL;oBACE,IAAI,EAAE,WAAW;oBACjB,IAAI,EAAE,0BAA0B;oBAChC,SAAS,EAAE,GAAG,IAAI,YAAY;oBAC9B,KAAK,EAAE;wBACL;4BACE,IAAI,EAAE,kBAAkB;4BACxB,QAAQ,EAAE,EAAE;4BACZ,IAAI,EAAE,GAAG;4BACT,QAAQ,EAAE,GAAG;4BACb,MAAM,EAAE,EAAE,QAAQ,EAAE,GAAG,EAAE,aAAa,EAAE,EAAE,EAAE,IAAI,EAAE,GAAG,EAAE;yBACxD;wBACD;4BACE,IAAI,EAAE,QAAQ;4BACd,QAAQ,EAAE,GAAG;4BACb,IAAI,EAAE,GAAG;4BACT,QAAQ,EAAE,GAAG;4BACb,MAAM,EAAE,EAAE,QAAQ,EAAE,GAAG,EAAE,aAAa,EAAE,EAAE,EAAE,IAAI,EAAE,GAAG,EAAE;yBACxD;qBACF;oBACD,aAAa,EAAE,GAAG;oBAClB,MAAM,EAAE,EAAE,QAAQ,EAAE,GAAG,EAAE,aAAa,EAAE,EAAE,EAAE,IAAI,EAAE,GAAG,EAAE;iBACxD;aACF;YACD,aAAa,EAAE,IAAI;YACnB,WAAW,EAAE,EAAE,QAAQ,EAAE,EAAE,EAAE,aAAa,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE,EAAE;YAC3D,WAAW,EAAE,IAAI;YACjB,UAAU,EAAE;gBACV,aAAa,EAAE,IAAI;gBACnB,YAAY,EAAE,EAAE,QAAQ,EAAE,GAAG,EAAE,aAAa,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE,EAAE;gBAC7D,SAAS,EAAE,IAAI;aAChB;SACF,CAAC;IACJ,CAAC;IAEO,MAAM,CAAC,wBAAwB,CAAC,KAAa;QACnD,MAAM,KAAK,GAAG;YACZ;gBACE,IAAI,EAAE,cAAc;gBACpB,KAAK,EAAE,KAAK;gBACZ,QAAQ,EAAE,GAAG;gBACb,IAAI,EAAE,GAAY;gBAClB,QAAQ,EAAE,EAAE;gBACZ,MAAM,EAAE,EAAE,QAAQ,EAAE,GAAG,EAAE,aAAa,EAAE,EAAE,EAAE,IAAI,EAAE,GAAG,EAAE;aACxD;YACD;gBACE,IAAI,EAAE,iBAAiB;gBACvB,QAAQ,EAAE,GAAG;gBACb,IAAI,EAAE,GAAY;gBAClB,QAAQ,EAAE,GAAG;gBACb,MAAM,EAAE,EAAE,QAAQ,EAAE,EAAE,EAAE,aAAa,EAAE,CAAC,EAAE,IAAI,EAAE,GAAG,EAAE;aACtD;YACD;gBACE,IAAI,EAAE,aAAa;gBACnB,QAAQ,EAAE,GAAG;gBACb,IAAI,EAAE,GAAY;gBAClB,QAAQ,EAAE,GAAG;gBACb,MAAM,EAAE,EAAE,QAAQ,EAAE,GAAG,EAAE,aAAa,EAAE,EAAE,EAAE,IAAI,EAAE,GAAG,EAAE;aACxD;SACF,CAAC;QAEF,OAAO,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;IACrF,CAAC;IAEO,MAAM,CAAC,wBAAwB;QACrC,MAAM,KAAK,GAAG,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QACrD,OAAO;YACL,IAAI,EAAE,KAAK,IAAI,EAAE;YACjB,cAAc,EAAE,CAAC,GAAG;YACpB,YAAY,EAAE;gBACZ,QAAQ,EAAE,EAAE;gBACZ,aAAa,EAAE,EAAE;gBACjB,IAAI,EAAE,EAAE;aACT;YACD,eAAe,EAAE,EAAE;YACnB,cAAc,EAAE,EAAE;YAClB,eAAe,EAAE;gBACf,oCAAoC;gBACpC,2CAA2C;gBAC3C,qDAAqD;aACtD;SACF,CAAC;IACJ,CAAC;IAEO,MAAM,CAAC,cAAc;QAC3B,OAAO;YACL;gBACE,EAAE,EAAE,GAAG;gBACP,IAAI,EAAE,8BAA8B;gBACpC,WAAW,EAAE,iCAAiC;gBAC9C,WAAW,EAAE,EAAE;gBACf,YAAY,EAAE,CAAC,iBAAiB,EAAE,oBAAoB,EAAE,8BAA8B,CAAC;gBACvF,QAAQ,EAAE,CAAC;gBACX,QAAQ,EAAE,EAAE;gBACZ,QAAQ,EAAE,EAAE;gBACZ,UAAU,EAAE,MAAM;gBAClB,IAAI,EAAE,CAAC,SAAS,EAAE,YAAY,EAAE,OAAO,CAAC;gBACxC,mBAAmB,EAAE;oBACnB,QAAQ,EAAE,GAAG;oBACb,MAAM,EAAE,EAAE,QAAQ,EAAE,EAAE,EAAE,aAAa,EAAE,EAAE,EAAE,IAAI,EAAE,CAAC,EAAE;iBACrD;gBACD,SAAS,EAAE,cAAc;gBACzB,QAAQ,EAAE,IAAI;aACf;SACF,CAAC;IACJ,CAAC;IAEO,MAAM,CAAC,gBAAgB;QAC7B,OAAO;YACL;gBACE,EAAE,EAAE,GAAG;gBACP,IAAI,EAAE,kCAAkC;gBACxC,WAAW,EAAE,iDAAiD;gBAC9D,QAAQ,EAAE,CAAC;gBACX,cAAc,EAAE,IAAI;gBACpB,YAAY,EAAE,EAAE,QAAQ,EAAE,GAAG,EAAE,aAAa,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE,EAAE;gBAC7D,KAAK,EAAE,EAAE;gBACT,SAAS,EAAE,cAAc;gBACzB,QAAQ,EAAE,IAAI;aACf;SACF,CAAC;IACJ,CAAC;IAEO,MAAM,CAAC,sBAAsB,CAAC,MAAoC;QACxE,OAAO;YACL,MAAM;YACN,eAAe,EAAE,IAAI;YACrB,aAAa,EAAE,EAAE,QAAQ,EAAE,EAAE,EAAE,aAAa,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE,EAAE;YAC7D,gBAAgB,EAAE,IAAI;YACtB,WAAW,EAAE,EAAE;YACf,YAAY,EAAE,CAAC,uBAAuB,EAAE,mCAAmC,CAAC;YAC5E,QAAQ,EAAE,CAAC,uCAAuC,CAAC;SACpD,CAAC;IACJ,CAAC;IAEO,MAAM,CAAC,wBAAwB;QACrC,OAAO;YACL;gBACE,IAAI,EAAE,aAAa;gBACnB,KAAK,EAAE,8BAA8B;gBACrC,WAAW,EAAE,mEAAmE;gBAChF,IAAI,EAAE,EAAE,MAAM,EAAE,CAAC,EAAE,MAAM,EAAE,GAAG,EAAE;gBAChC,cAAc,EAAE,KAAK;gBACrB,QAAQ,EAAE,KAAK;aAChB;YACD;gBACE,IAAI,EAAE,SAAS;gBACf,KAAK,EAAE,0BAA0B;gBACjC,WAAW,EAAE,sEAAsE;gBACnF,IAAI,EAAE,EAAE,aAAa,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,EAAE;gBACzD,cAAc,EAAE,IAAI;gBACpB,QAAQ,EAAE,QAAQ;aACnB;SACF,CAAC;IACJ,CAAC;;AAvfH,4CAwfC;AAvfyB;;;;WAAW,gBAAgB;GAAC",
      names: [],
      sources: ["/workspaces/MyFitHero/src/features/nutrition/services/nutrition.service.ts"],
      sourcesContent: ["import { Search, Target } from 'lucide-react';\nimport {\n  NutritionData,\n  Meal,\n  FoodItem,\n  NutritionGoals,\n  NutritionAnalysis,\n  Recipe,\n  MealPlan,\n  NutritionTrend,\n  CreateMealDTO,\n  UpdateNutritionGoalsDTO,\n  FoodSearchQuery,\n  NutritionInsight,\n} from '@/features/nutrition/types/index';\n\nexport class NutritionService {\n  private static readonly BASE_URL = '/api/nutrition';\n\n  // R\xE9cup\xE9ration des donn\xE9es nutritionnelles\n  static async getNutritionData(userId: string, date: string): Promise<NutritionData> {\n    try {\n      const response = await fetch(`${this.BASE_URL}/${userId}/daily/${date}`);\n      if (!response.ok)\n        throw new Error('Erreur lors de la r\xE9cup\xE9ration des donn\xE9es nutritionnelles');\n      return await response.json();\n    } catch (error: any) {\n      // Erreur silencieuse\n      console.error('Erreur API nutrition:', error);\n      // Donn\xE9es de mock en cas d'erreur\n      return this.getMockNutritionData(userId, date);\n    }\n  }\n\n  /**\n   * R\xE9cup\xE8re la nutrition quotidienne d'un utilisateur\n   */\n  static async getDailyNutrition(userId: string, date: string): Promise<NutritionData | null> {\n    return this.getNutritionData(userId, date);\n  }\n\n  // Ajout d'un repas\n  static async addMeal(userId: string, mealData: CreateMealDTO): Promise<Meal> {\n    try {\n      const response = await fetch(`${this.BASE_URL}/${userId}/meals`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(mealData),\n      });\n      if (!response.ok) throw new Error(\"Erreur lors de l'ajout du repas\");\n      return await response.json();\n    } catch (error: any) {\n      // Erreur silencieuse\n      console.error('Erreur ajout repas:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Enregistre un repas\n   */\n  static async logMeal(data: CreateMealDTO): Promise<Meal | null> {\n    try {\n      // Simulation d'un userId - en r\xE9alit\xE9, il viendrait du contexte d'auth\n      const userId = 'current-user';\n      return await this.addMeal(userId, data);\n    } catch (error: any) {\n      // Erreur silencieuse\n      console.error(\"Erreur lors de l'enregistrement du repas:\", error);\n      return null;\n    }\n  }\n\n  /**\n   * Met \xE0 jour un repas\n   */\n  static async updateMeal(id: string, data: Partial<CreateMealDTO>): Promise<Meal | null> {\n    try {\n      const response = await fetch(`${this.BASE_URL}/meals/${id}`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) throw new Error('Erreur lors de la mise \xE0 jour du repas');\n      return await response.json();\n    } catch (error: any) {\n      // Erreur silencieuse\n      console.error('Erreur mise \xE0 jour repas:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Supprime un repas\n   */\n  static async deleteMeal(id: string): Promise<boolean> {\n    try {\n      const response = await fetch(`${this.BASE_URL}/meals/${id}`, {\n        method: 'DELETE',\n      });\n      return response.ok;\n    } catch (error: any) {\n      // Erreur silencieuse\n      console.error('Erreur suppression repas:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Calcule les macros d'une liste de repas\n   */\n  static async calculateMacros(meals: Meal[]): Promise<{\n    calories: number;\n    macros: { proteins: number; carbohydrates: number; fats: number };\n  } | null> {\n    try {\n      const totalCalories = meals.reduce((sum, meal) => sum + meal.totalCalories, 0);\n      const totalMacros = meals.reduce(\n        (acc, meal) => ({\n          proteins: acc.proteins + meal.macros.proteins,\n          carbohydrates: acc.carbohydrates + meal.macros.carbohydrates,\n          fats: acc.fats + meal.macros.fats,\n        }),\n        { proteins: 0, carbohydrates: 0, fats: 0 }\n      );\n\n      return {\n        calories: totalCalories,\n        macros: totalMacros,\n      };\n    } catch (error: any) {\n      // Erreur silencieuse\n      console.error('Erreur calcul macros:', error);\n      return null;\n    }\n  }\n\n  /**\n   * R\xE9cup\xE8re les recommandations nutritionnelles\n   */\n  static async getRecommendations(profile: {\n    age: number;\n    weight: number;\n    height: number;\n    activityLevel: string;\n    goal: string;\n  }): Promise<NutritionGoals | null> {\n    try {\n      const response = await fetch(`${this.BASE_URL}/recommendations`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(profile),\n      });\n      if (!response.ok) throw new Error('Erreur lors du calcul des recommandations');\n      return await response.json();\n    } catch (error: any) {\n      // Erreur silencieuse\n      console.error('Erreur recommandations:', error);\n      // Calcul basique en cas d'erreur\n      return this.calculateBasicRecommendations(profile);\n    }\n  }\n\n  // Recherche d'aliments\n  static async searchFoods(query: FoodSearchQuery): Promise<FoodItem[]> {\n    try {\n      const params = new URLSearchParams({\n        q: query.query,\n        limit: (query.limit || 20).toString(),\n      });\n\n      if (query.filters) {\n        Object.entries(query.filters).forEach(([key, value]) => {\n          if (value !== undefined) params.append(key, value.toString());\n        });\n      }\n\n      const response = await fetch(`${this.BASE_URL}/foods/search?${params}`);\n      if (!response.ok) throw new Error(\"Erreur lors de la recherche d'aliments\");\n      return await response.json();\n    } catch (error: any) {\n      // Erreur silencieuse\n      console.error('Erreur recherche aliments:', error);\n      return this.getMockFoodSearchResults(query.query);\n    }\n  }\n\n  // Mise \xE0 jour des objectifs nutritionnels\n  static async updateNutritionGoals(\n    userId: string,\n    goals: UpdateNutritionGoalsDTO\n  ): Promise<NutritionGoals> {\n    try {\n      const response = await fetch(`${this.BASE_URL}/${userId}/goals`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(goals),\n      });\n      if (!response.ok) throw new Error('Erreur lors de la mise \xE0 jour des objectifs');\n      return await response.json();\n    } catch (error: any) {\n      // Erreur silencieuse\n      console.error('Erreur mise \xE0 jour objectifs:', error);\n      throw error;\n    }\n  }\n\n  // Analyse nutritionnelle\n  static async getNutritionAnalysis(\n    userId: string,\n    startDate: string,\n    endDate: string\n  ): Promise<NutritionAnalysis> {\n    try {\n      const response = await fetch(\n        `${this.BASE_URL}/${userId}/analysis?start=${startDate}&end=${endDate}`\n      );\n      if (!response.ok) throw new Error(\"Erreur lors de l'analyse nutritionnelle\");\n      return await response.json();\n    } catch (error: any) {\n      // Erreur silencieuse\n      console.error('Erreur analyse nutritionnelle:', error);\n      return this.getMockNutritionAnalysis();\n    }\n  }\n\n  // R\xE9cup\xE9ration des recettes\n  static async getRecipes(\n    _userId: string,\n    filters?: { tags?: string[]; difficulty?: string }\n  ): Promise<Recipe[]> {\n    try {\n      const params = new URLSearchParams();\n      if (filters?.tags) params.append('tags', filters.tags.join(','));\n      if (filters?.difficulty) params.append('difficulty', filters.difficulty);\n\n      const response = await fetch(`${this.BASE_URL}/recipes?${params}`);\n      if (!response.ok) throw new Error('Erreur lors de la r\xE9cup\xE9ration des recettes');\n      return await response.json();\n    } catch (error: any) {\n      // Erreur silencieuse\n      console.error('Erreur r\xE9cup\xE9ration recettes:', error);\n      return this.getMockRecipes();\n    }\n  }\n\n  // Plan de repas\n  static async getMealPlans(userId: string): Promise<MealPlan[]> {\n    try {\n      const response = await fetch(`${this.BASE_URL}/${userId}/meal-plans`);\n      if (!response.ok) throw new Error('Erreur lors de la r\xE9cup\xE9ration des plans de repas');\n      return await response.json();\n    } catch (error: any) {\n      // Erreur silencieuse\n      console.error('Erreur plans de repas:', error);\n      return this.getMockMealPlans();\n    }\n  }\n\n  // Tendances nutritionnelles\n  static async getNutritionTrends(\n    userId: string,\n    period: 'week' | 'month' | 'quarter'\n  ): Promise<NutritionTrend> {\n    try {\n      const response = await fetch(`${this.BASE_URL}/${userId}/trends/${period}`);\n      if (!response.ok) throw new Error('Erreur lors de la r\xE9cup\xE9ration des tendances');\n      return await response.json();\n    } catch (error: any) {\n      // Erreur silencieuse\n      console.error('Erreur tendances nutritionnelles:', error);\n      return this.getMockNutritionTrends(period);\n    }\n  }\n\n  // Insights nutritionnels\n  static async getNutritionInsights(userId: string): Promise<NutritionInsight[]> {\n    try {\n      const response = await fetch(`${this.BASE_URL}/${userId}/insights`);\n      if (!response.ok) throw new Error('Erreur lors de la r\xE9cup\xE9ration des insights');\n      return await response.json();\n    } catch (error: any) {\n      // Erreur silencieuse\n      console.error('Erreur insights nutritionnels:', error);\n      return this.getMockNutritionInsights();\n    }\n  }\n\n  // Calcul du score nutritionnel\n  static calculateNutritionScore(data: NutritionData): number {\n    const { totalCalories, totalMacros, dailyGoals, waterIntake } = data;\n\n    // Score des calories (30%)\n    const calorieRatio = Math.min(totalCalories / dailyGoals.dailyCalories, 1.2);\n    const calorieScore = calorieRatio <= 1.1 ? 100 : Math.max(0, 100 - (calorieRatio - 1.1) * 500);\n\n    // Score des macros (40%)\n    const proteinRatio = totalMacros.proteins / dailyGoals.macroTargets.proteins;\n    const carbRatio = totalMacros.carbohydrates / dailyGoals.macroTargets.carbohydrates;\n    const fatRatio = totalMacros.fats / dailyGoals.macroTargets.fats;\n\n    const macroScore =\n      (Math.min(proteinRatio, 1.2) * 0.4 +\n        Math.min(carbRatio, 1.2) * 0.3 +\n        Math.min(fatRatio, 1.2) * 0.3) *\n      100;\n\n    // Score d'hydratation (30%)\n    const hydrationScore = Math.min(waterIntake / dailyGoals.waterGoal, 1) * 100;\n\n    return Math.round(calorieScore * 0.3 + macroScore * 0.4 + hydrationScore * 0.3);\n  }\n\n  // Calcul de recommandations basiques\n  private static calculateBasicRecommendations(profile: {\n    age: number;\n    weight: number;\n    height: number;\n    activityLevel: string;\n    goal: string;\n  }): NutritionGoals {\n    // Calcul BMR (Basal Metabolic Rate) - formule de Mifflin-St Jeor\n    const bmr = 10 * profile.weight + 6.25 * profile.height - 5 * profile.age + 5; // Pour les hommes\n\n    // Facteur d'activit\xE9\n    const activityFactors: Record<string, number> = {\n      sedentary: 1.2,\n      light: 1.375,\n      moderate: 1.55,\n      active: 1.725,\n      very_active: 1.9,\n    };\n\n    const activityFactor = activityFactors[profile.activityLevel] || 1.2;\n    let dailyCalories = bmr * activityFactor;\n\n    // Ajustement selon l'objectif\n    if (profile.goal === 'weight_loss') {\n      dailyCalories -= 500; // D\xE9ficit de 500 calories\n    } else if (profile.goal === 'weight_gain') {\n      dailyCalories += 500; // Surplus de 500 calories\n    }\n\n    // Calcul des macros (30% prot\xE9ines, 40% glucides, 30% lipides)\n    const proteins = (dailyCalories * 0.3) / 4; // 4 cal/g\n    const carbohydrates = (dailyCalories * 0.4) / 4; // 4 cal/g\n    const fats = (dailyCalories * 0.3) / 9; // 9 cal/g\n\n    return {\n      dailyCalories: Math.round(dailyCalories),\n      macroTargets: {\n        proteins: Math.round(proteins),\n        carbohydrates: Math.round(carbohydrates),\n        fats: Math.round(fats),\n      },\n      waterGoal: profile.weight * 35, // 35ml par kg de poids\n    };\n  }\n\n  // === DONN\xC9ES DE MOCK ===\n  private static getMockNutritionData(userId: string, date: string): NutritionData {\n    return {\n      userId,\n      date,\n      meals: [\n        {\n          type: 'breakfast',\n          name: 'Petit-d\xE9jeuner \xE9quilibr\xE9',\n          timestamp: `${date}T08:00:00Z`,\n          foods: [\n            {\n              name: \"Flocons d'avoine\",\n              quantity: 50,\n              unit: 'g',\n              calories: 185,\n              macros: { proteins: 6.5, carbohydrates: 33, fats: 3.5 },\n            },\n            {\n              name: 'Banane',\n              quantity: 120,\n              unit: 'g',\n              calories: 108,\n              macros: { proteins: 1.3, carbohydrates: 27, fats: 0.4 },\n            },\n          ],\n          totalCalories: 293,\n          macros: { proteins: 7.8, carbohydrates: 60, fats: 3.9 },\n        },\n      ],\n      totalCalories: 1847,\n      totalMacros: { proteins: 95, carbohydrates: 220, fats: 65 },\n      waterIntake: 1800,\n      dailyGoals: {\n        dailyCalories: 2000,\n        macroTargets: { proteins: 100, carbohydrates: 250, fats: 70 },\n        waterGoal: 2500,\n      },\n    };\n  }\n\n  private static getMockFoodSearchResults(query: string): FoodItem[] {\n    const foods = [\n      {\n        name: 'Pomme Golden',\n        brand: 'Bio',\n        quantity: 100,\n        unit: 'g' as const,\n        calories: 52,\n        macros: { proteins: 0.3, carbohydrates: 14, fats: 0.2 },\n      },\n      {\n        name: 'Blanc de poulet',\n        quantity: 100,\n        unit: 'g' as const,\n        calories: 165,\n        macros: { proteins: 31, carbohydrates: 0, fats: 3.6 },\n      },\n      {\n        name: 'Riz basmati',\n        quantity: 100,\n        unit: 'g' as const,\n        calories: 356,\n        macros: { proteins: 8.9, carbohydrates: 78, fats: 0.9 },\n      },\n    ];\n\n    return foods.filter(food => food.name.toLowerCase().includes(query.toLowerCase()));\n  }\n\n  private static getMockNutritionAnalysis(): NutritionAnalysis {\n    const today = new Date().toISOString().split('T')[0];\n    return {\n      date: today || '',\n      calorieBalance: -153,\n      macroBalance: {\n        proteins: 95,\n        carbohydrates: 88,\n        fats: 93,\n      },\n      hydrationStatus: 72,\n      nutritionScore: 78,\n      recommendations: [\n        \"Augmentez votre consommation d'eau\",\n        'Ajoutez plus de l\xE9gumes verts \xE0 vos repas',\n        'Pensez \xE0 inclure des collations riches en prot\xE9ines',\n      ],\n    };\n  }\n\n  private static getMockRecipes(): Recipe[] {\n    return [\n      {\n        id: '1',\n        name: 'Salade de quinoa aux l\xE9gumes',\n        description: 'Une salade nutritive et color\xE9e',\n        ingredients: [],\n        instructions: ['Cuire le quinoa', 'Couper les l\xE9gumes', 'M\xE9langer avec la vinaigrette'],\n        servings: 4,\n        prepTime: 15,\n        cookTime: 20,\n        difficulty: 'easy',\n        tags: ['healthy', 'vegetarian', 'lunch'],\n        nutritionPerServing: {\n          calories: 285,\n          macros: { proteins: 12, carbohydrates: 45, fats: 8 },\n        },\n        createdBy: 'nutritionist',\n        isPublic: true,\n      },\n    ];\n  }\n\n  private static getMockMealPlans(): MealPlan[] {\n    return [\n      {\n        id: '1',\n        name: 'Plan de perte de poids - 7 jours',\n        description: 'Un plan \xE9quilibr\xE9 pour une perte de poids saine',\n        duration: 7,\n        targetCalories: 1800,\n        targetMacros: { proteins: 120, carbohydrates: 180, fats: 60 },\n        meals: [],\n        createdBy: 'nutritionist',\n        isPublic: true,\n      },\n    ];\n  }\n\n  private static getMockNutritionTrends(period: 'week' | 'month' | 'quarter'): NutritionTrend {\n    return {\n      period,\n      averageCalories: 1925,\n      averageMacros: { proteins: 98, carbohydrates: 235, fats: 68 },\n      averageHydration: 2100,\n      consistency: 82,\n      improvements: ['Meilleure hydratation', 'Apport en prot\xE9ines plus r\xE9gulier'],\n      concerns: ['Consommation de sucres ajout\xE9s \xE9lev\xE9e'],\n    };\n  }\n\n  private static getMockNutritionInsights(): NutritionInsight[] {\n    return [\n      {\n        type: 'achievement',\n        title: 'Objectif prot\xE9ines atteint !',\n        description: 'Vous avez atteint votre objectif de prot\xE9ines 5 jours cons\xE9cutifs',\n        data: { streak: 5, target: 100 },\n        actionRequired: false,\n        priority: 'low',\n      },\n      {\n        type: 'warning',\n        title: 'Hydratation insuffisante',\n        description: \"Votre consommation d'eau est en dessous de l'objectif depuis 3 jours\",\n        data: { currentIntake: 1800, target: 2500, deficit: 700 },\n        actionRequired: true,\n        priority: 'medium',\n      },\n    ];\n  }\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "6b55585d27b375f49dcd65b860359dcaecce4272"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2a1zum1dqo = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2a1zum1dqo();
cov_2a1zum1dqo().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2a1zum1dqo().s[1]++;
exports.NutritionService = void 0;
class NutritionService {
  // Récupération des données nutritionnelles
  static async getNutritionData(userId, date) {
    /* istanbul ignore next */
    cov_2a1zum1dqo().f[0]++;
    cov_2a1zum1dqo().s[2]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_2a1zum1dqo().s[3]++, await fetch(`${this.BASE_URL}/${userId}/daily/${date}`));
      /* istanbul ignore next */
      cov_2a1zum1dqo().s[4]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_2a1zum1dqo().b[0][0]++;
        cov_2a1zum1dqo().s[5]++;
        throw new Error('Erreur lors de la récupération des données nutritionnelles');
      } else
      /* istanbul ignore next */
      {
        cov_2a1zum1dqo().b[0][1]++;
      }
      cov_2a1zum1dqo().s[6]++;
      return await response.json();
    } catch (error) {
      /* istanbul ignore next */
      cov_2a1zum1dqo().s[7]++;
      // Erreur silencieuse
      console.error('Erreur API nutrition:', error);
      // Données de mock en cas d'erreur
      /* istanbul ignore next */
      cov_2a1zum1dqo().s[8]++;
      return this.getMockNutritionData(userId, date);
    }
  }
  /**
   * Récupère la nutrition quotidienne d'un utilisateur
   */
  static async getDailyNutrition(userId, date) {
    /* istanbul ignore next */
    cov_2a1zum1dqo().f[1]++;
    cov_2a1zum1dqo().s[9]++;
    return this.getNutritionData(userId, date);
  }
  // Ajout d'un repas
  static async addMeal(userId, mealData) {
    /* istanbul ignore next */
    cov_2a1zum1dqo().f[2]++;
    cov_2a1zum1dqo().s[10]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_2a1zum1dqo().s[11]++, await fetch(`${this.BASE_URL}/${userId}/meals`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(mealData)
      }));
      /* istanbul ignore next */
      cov_2a1zum1dqo().s[12]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_2a1zum1dqo().b[1][0]++;
        cov_2a1zum1dqo().s[13]++;
        throw new Error("Erreur lors de l'ajout du repas");
      } else
      /* istanbul ignore next */
      {
        cov_2a1zum1dqo().b[1][1]++;
      }
      cov_2a1zum1dqo().s[14]++;
      return await response.json();
    } catch (error) {
      /* istanbul ignore next */
      cov_2a1zum1dqo().s[15]++;
      // Erreur silencieuse
      console.error('Erreur ajout repas:', error);
      /* istanbul ignore next */
      cov_2a1zum1dqo().s[16]++;
      throw error;
    }
  }
  /**
   * Enregistre un repas
   */
  static async logMeal(data) {
    /* istanbul ignore next */
    cov_2a1zum1dqo().f[3]++;
    cov_2a1zum1dqo().s[17]++;
    try {
      // Simulation d'un userId - en réalité, il viendrait du contexte d'auth
      const userId =
      /* istanbul ignore next */
      (cov_2a1zum1dqo().s[18]++, 'current-user');
      /* istanbul ignore next */
      cov_2a1zum1dqo().s[19]++;
      return await this.addMeal(userId, data);
    } catch (error) {
      /* istanbul ignore next */
      cov_2a1zum1dqo().s[20]++;
      // Erreur silencieuse
      console.error("Erreur lors de l'enregistrement du repas:", error);
      /* istanbul ignore next */
      cov_2a1zum1dqo().s[21]++;
      return null;
    }
  }
  /**
   * Met à jour un repas
   */
  static async updateMeal(id, data) {
    /* istanbul ignore next */
    cov_2a1zum1dqo().f[4]++;
    cov_2a1zum1dqo().s[22]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_2a1zum1dqo().s[23]++, await fetch(`${this.BASE_URL}/meals/${id}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(data)
      }));
      /* istanbul ignore next */
      cov_2a1zum1dqo().s[24]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_2a1zum1dqo().b[2][0]++;
        cov_2a1zum1dqo().s[25]++;
        throw new Error('Erreur lors de la mise à jour du repas');
      } else
      /* istanbul ignore next */
      {
        cov_2a1zum1dqo().b[2][1]++;
      }
      cov_2a1zum1dqo().s[26]++;
      return await response.json();
    } catch (error) {
      /* istanbul ignore next */
      cov_2a1zum1dqo().s[27]++;
      // Erreur silencieuse
      console.error('Erreur mise à jour repas:', error);
      /* istanbul ignore next */
      cov_2a1zum1dqo().s[28]++;
      return null;
    }
  }
  /**
   * Supprime un repas
   */
  static async deleteMeal(id) {
    /* istanbul ignore next */
    cov_2a1zum1dqo().f[5]++;
    cov_2a1zum1dqo().s[29]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_2a1zum1dqo().s[30]++, await fetch(`${this.BASE_URL}/meals/${id}`, {
        method: 'DELETE'
      }));
      /* istanbul ignore next */
      cov_2a1zum1dqo().s[31]++;
      return response.ok;
    } catch (error) {
      /* istanbul ignore next */
      cov_2a1zum1dqo().s[32]++;
      // Erreur silencieuse
      console.error('Erreur suppression repas:', error);
      /* istanbul ignore next */
      cov_2a1zum1dqo().s[33]++;
      return false;
    }
  }
  /**
   * Calcule les macros d'une liste de repas
   */
  static async calculateMacros(meals) {
    /* istanbul ignore next */
    cov_2a1zum1dqo().f[6]++;
    cov_2a1zum1dqo().s[34]++;
    try {
      const totalCalories =
      /* istanbul ignore next */
      (cov_2a1zum1dqo().s[35]++, meals.reduce((sum, meal) => {
        /* istanbul ignore next */
        cov_2a1zum1dqo().f[7]++;
        cov_2a1zum1dqo().s[36]++;
        return sum + meal.totalCalories;
      }, 0));
      const totalMacros =
      /* istanbul ignore next */
      (cov_2a1zum1dqo().s[37]++, meals.reduce((acc, meal) => {
        /* istanbul ignore next */
        cov_2a1zum1dqo().f[8]++;
        cov_2a1zum1dqo().s[38]++;
        return {
          proteins: acc.proteins + meal.macros.proteins,
          carbohydrates: acc.carbohydrates + meal.macros.carbohydrates,
          fats: acc.fats + meal.macros.fats
        };
      }, {
        proteins: 0,
        carbohydrates: 0,
        fats: 0
      }));
      /* istanbul ignore next */
      cov_2a1zum1dqo().s[39]++;
      return {
        calories: totalCalories,
        macros: totalMacros
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_2a1zum1dqo().s[40]++;
      // Erreur silencieuse
      console.error('Erreur calcul macros:', error);
      /* istanbul ignore next */
      cov_2a1zum1dqo().s[41]++;
      return null;
    }
  }
  /**
   * Récupère les recommandations nutritionnelles
   */
  static async getRecommendations(profile) {
    /* istanbul ignore next */
    cov_2a1zum1dqo().f[9]++;
    cov_2a1zum1dqo().s[42]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_2a1zum1dqo().s[43]++, await fetch(`${this.BASE_URL}/recommendations`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(profile)
      }));
      /* istanbul ignore next */
      cov_2a1zum1dqo().s[44]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_2a1zum1dqo().b[3][0]++;
        cov_2a1zum1dqo().s[45]++;
        throw new Error('Erreur lors du calcul des recommandations');
      } else
      /* istanbul ignore next */
      {
        cov_2a1zum1dqo().b[3][1]++;
      }
      cov_2a1zum1dqo().s[46]++;
      return await response.json();
    } catch (error) {
      /* istanbul ignore next */
      cov_2a1zum1dqo().s[47]++;
      // Erreur silencieuse
      console.error('Erreur recommandations:', error);
      // Calcul basique en cas d'erreur
      /* istanbul ignore next */
      cov_2a1zum1dqo().s[48]++;
      return this.calculateBasicRecommendations(profile);
    }
  }
  // Recherche d'aliments
  static async searchFoods(query) {
    /* istanbul ignore next */
    cov_2a1zum1dqo().f[10]++;
    cov_2a1zum1dqo().s[49]++;
    try {
      const params =
      /* istanbul ignore next */
      (cov_2a1zum1dqo().s[50]++, new URLSearchParams({
        q: query.query,
        limit: (
        /* istanbul ignore next */
        (cov_2a1zum1dqo().b[4][0]++, query.limit) ||
        /* istanbul ignore next */
        (cov_2a1zum1dqo().b[4][1]++, 20)).toString()
      }));
      /* istanbul ignore next */
      cov_2a1zum1dqo().s[51]++;
      if (query.filters) {
        /* istanbul ignore next */
        cov_2a1zum1dqo().b[5][0]++;
        cov_2a1zum1dqo().s[52]++;
        Object.entries(query.filters).forEach(([key, value]) => {
          /* istanbul ignore next */
          cov_2a1zum1dqo().f[11]++;
          cov_2a1zum1dqo().s[53]++;
          if (value !== undefined) {
            /* istanbul ignore next */
            cov_2a1zum1dqo().b[6][0]++;
            cov_2a1zum1dqo().s[54]++;
            params.append(key, value.toString());
          } else
          /* istanbul ignore next */
          {
            cov_2a1zum1dqo().b[6][1]++;
          }
        });
      } else
      /* istanbul ignore next */
      {
        cov_2a1zum1dqo().b[5][1]++;
      }
      const response =
      /* istanbul ignore next */
      (cov_2a1zum1dqo().s[55]++, await fetch(`${this.BASE_URL}/foods/search?${params}`));
      /* istanbul ignore next */
      cov_2a1zum1dqo().s[56]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_2a1zum1dqo().b[7][0]++;
        cov_2a1zum1dqo().s[57]++;
        throw new Error("Erreur lors de la recherche d'aliments");
      } else
      /* istanbul ignore next */
      {
        cov_2a1zum1dqo().b[7][1]++;
      }
      cov_2a1zum1dqo().s[58]++;
      return await response.json();
    } catch (error) {
      /* istanbul ignore next */
      cov_2a1zum1dqo().s[59]++;
      // Erreur silencieuse
      console.error('Erreur recherche aliments:', error);
      /* istanbul ignore next */
      cov_2a1zum1dqo().s[60]++;
      return this.getMockFoodSearchResults(query.query);
    }
  }
  // Mise à jour des objectifs nutritionnels
  static async updateNutritionGoals(userId, goals) {
    /* istanbul ignore next */
    cov_2a1zum1dqo().f[12]++;
    cov_2a1zum1dqo().s[61]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_2a1zum1dqo().s[62]++, await fetch(`${this.BASE_URL}/${userId}/goals`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(goals)
      }));
      /* istanbul ignore next */
      cov_2a1zum1dqo().s[63]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_2a1zum1dqo().b[8][0]++;
        cov_2a1zum1dqo().s[64]++;
        throw new Error('Erreur lors de la mise à jour des objectifs');
      } else
      /* istanbul ignore next */
      {
        cov_2a1zum1dqo().b[8][1]++;
      }
      cov_2a1zum1dqo().s[65]++;
      return await response.json();
    } catch (error) {
      /* istanbul ignore next */
      cov_2a1zum1dqo().s[66]++;
      // Erreur silencieuse
      console.error('Erreur mise à jour objectifs:', error);
      /* istanbul ignore next */
      cov_2a1zum1dqo().s[67]++;
      throw error;
    }
  }
  // Analyse nutritionnelle
  static async getNutritionAnalysis(userId, startDate, endDate) {
    /* istanbul ignore next */
    cov_2a1zum1dqo().f[13]++;
    cov_2a1zum1dqo().s[68]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_2a1zum1dqo().s[69]++, await fetch(`${this.BASE_URL}/${userId}/analysis?start=${startDate}&end=${endDate}`));
      /* istanbul ignore next */
      cov_2a1zum1dqo().s[70]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_2a1zum1dqo().b[9][0]++;
        cov_2a1zum1dqo().s[71]++;
        throw new Error("Erreur lors de l'analyse nutritionnelle");
      } else
      /* istanbul ignore next */
      {
        cov_2a1zum1dqo().b[9][1]++;
      }
      cov_2a1zum1dqo().s[72]++;
      return await response.json();
    } catch (error) {
      /* istanbul ignore next */
      cov_2a1zum1dqo().s[73]++;
      // Erreur silencieuse
      console.error('Erreur analyse nutritionnelle:', error);
      /* istanbul ignore next */
      cov_2a1zum1dqo().s[74]++;
      return this.getMockNutritionAnalysis();
    }
  }
  // Récupération des recettes
  static async getRecipes(_userId, filters) {
    /* istanbul ignore next */
    cov_2a1zum1dqo().f[14]++;
    cov_2a1zum1dqo().s[75]++;
    try {
      const params =
      /* istanbul ignore next */
      (cov_2a1zum1dqo().s[76]++, new URLSearchParams());
      /* istanbul ignore next */
      cov_2a1zum1dqo().s[77]++;
      if (filters?.tags) {
        /* istanbul ignore next */
        cov_2a1zum1dqo().b[10][0]++;
        cov_2a1zum1dqo().s[78]++;
        params.append('tags', filters.tags.join(','));
      } else
      /* istanbul ignore next */
      {
        cov_2a1zum1dqo().b[10][1]++;
      }
      cov_2a1zum1dqo().s[79]++;
      if (filters?.difficulty) {
        /* istanbul ignore next */
        cov_2a1zum1dqo().b[11][0]++;
        cov_2a1zum1dqo().s[80]++;
        params.append('difficulty', filters.difficulty);
      } else
      /* istanbul ignore next */
      {
        cov_2a1zum1dqo().b[11][1]++;
      }
      const response =
      /* istanbul ignore next */
      (cov_2a1zum1dqo().s[81]++, await fetch(`${this.BASE_URL}/recipes?${params}`));
      /* istanbul ignore next */
      cov_2a1zum1dqo().s[82]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_2a1zum1dqo().b[12][0]++;
        cov_2a1zum1dqo().s[83]++;
        throw new Error('Erreur lors de la récupération des recettes');
      } else
      /* istanbul ignore next */
      {
        cov_2a1zum1dqo().b[12][1]++;
      }
      cov_2a1zum1dqo().s[84]++;
      return await response.json();
    } catch (error) {
      /* istanbul ignore next */
      cov_2a1zum1dqo().s[85]++;
      // Erreur silencieuse
      console.error('Erreur récupération recettes:', error);
      /* istanbul ignore next */
      cov_2a1zum1dqo().s[86]++;
      return this.getMockRecipes();
    }
  }
  // Plan de repas
  static async getMealPlans(userId) {
    /* istanbul ignore next */
    cov_2a1zum1dqo().f[15]++;
    cov_2a1zum1dqo().s[87]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_2a1zum1dqo().s[88]++, await fetch(`${this.BASE_URL}/${userId}/meal-plans`));
      /* istanbul ignore next */
      cov_2a1zum1dqo().s[89]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_2a1zum1dqo().b[13][0]++;
        cov_2a1zum1dqo().s[90]++;
        throw new Error('Erreur lors de la récupération des plans de repas');
      } else
      /* istanbul ignore next */
      {
        cov_2a1zum1dqo().b[13][1]++;
      }
      cov_2a1zum1dqo().s[91]++;
      return await response.json();
    } catch (error) {
      /* istanbul ignore next */
      cov_2a1zum1dqo().s[92]++;
      // Erreur silencieuse
      console.error('Erreur plans de repas:', error);
      /* istanbul ignore next */
      cov_2a1zum1dqo().s[93]++;
      return this.getMockMealPlans();
    }
  }
  // Tendances nutritionnelles
  static async getNutritionTrends(userId, period) {
    /* istanbul ignore next */
    cov_2a1zum1dqo().f[16]++;
    cov_2a1zum1dqo().s[94]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_2a1zum1dqo().s[95]++, await fetch(`${this.BASE_URL}/${userId}/trends/${period}`));
      /* istanbul ignore next */
      cov_2a1zum1dqo().s[96]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_2a1zum1dqo().b[14][0]++;
        cov_2a1zum1dqo().s[97]++;
        throw new Error('Erreur lors de la récupération des tendances');
      } else
      /* istanbul ignore next */
      {
        cov_2a1zum1dqo().b[14][1]++;
      }
      cov_2a1zum1dqo().s[98]++;
      return await response.json();
    } catch (error) {
      /* istanbul ignore next */
      cov_2a1zum1dqo().s[99]++;
      // Erreur silencieuse
      console.error('Erreur tendances nutritionnelles:', error);
      /* istanbul ignore next */
      cov_2a1zum1dqo().s[100]++;
      return this.getMockNutritionTrends(period);
    }
  }
  // Insights nutritionnels
  static async getNutritionInsights(userId) {
    /* istanbul ignore next */
    cov_2a1zum1dqo().f[17]++;
    cov_2a1zum1dqo().s[101]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_2a1zum1dqo().s[102]++, await fetch(`${this.BASE_URL}/${userId}/insights`));
      /* istanbul ignore next */
      cov_2a1zum1dqo().s[103]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_2a1zum1dqo().b[15][0]++;
        cov_2a1zum1dqo().s[104]++;
        throw new Error('Erreur lors de la récupération des insights');
      } else
      /* istanbul ignore next */
      {
        cov_2a1zum1dqo().b[15][1]++;
      }
      cov_2a1zum1dqo().s[105]++;
      return await response.json();
    } catch (error) {
      /* istanbul ignore next */
      cov_2a1zum1dqo().s[106]++;
      // Erreur silencieuse
      console.error('Erreur insights nutritionnels:', error);
      /* istanbul ignore next */
      cov_2a1zum1dqo().s[107]++;
      return this.getMockNutritionInsights();
    }
  }
  // Calcul du score nutritionnel
  static calculateNutritionScore(data) {
    /* istanbul ignore next */
    cov_2a1zum1dqo().f[18]++;
    const {
      totalCalories,
      totalMacros,
      dailyGoals,
      waterIntake
    } =
    /* istanbul ignore next */
    (cov_2a1zum1dqo().s[108]++, data);
    // Score des calories (30%)
    const calorieRatio =
    /* istanbul ignore next */
    (cov_2a1zum1dqo().s[109]++, Math.min(totalCalories / dailyGoals.dailyCalories, 1.2));
    const calorieScore =
    /* istanbul ignore next */
    (cov_2a1zum1dqo().s[110]++, calorieRatio <= 1.1 ?
    /* istanbul ignore next */
    (cov_2a1zum1dqo().b[16][0]++, 100) :
    /* istanbul ignore next */
    (cov_2a1zum1dqo().b[16][1]++, Math.max(0, 100 - (calorieRatio - 1.1) * 500)));
    // Score des macros (40%)
    const proteinRatio =
    /* istanbul ignore next */
    (cov_2a1zum1dqo().s[111]++, totalMacros.proteins / dailyGoals.macroTargets.proteins);
    const carbRatio =
    /* istanbul ignore next */
    (cov_2a1zum1dqo().s[112]++, totalMacros.carbohydrates / dailyGoals.macroTargets.carbohydrates);
    const fatRatio =
    /* istanbul ignore next */
    (cov_2a1zum1dqo().s[113]++, totalMacros.fats / dailyGoals.macroTargets.fats);
    const macroScore =
    /* istanbul ignore next */
    (cov_2a1zum1dqo().s[114]++, (Math.min(proteinRatio, 1.2) * 0.4 + Math.min(carbRatio, 1.2) * 0.3 + Math.min(fatRatio, 1.2) * 0.3) * 100);
    // Score d'hydratation (30%)
    const hydrationScore =
    /* istanbul ignore next */
    (cov_2a1zum1dqo().s[115]++, Math.min(waterIntake / dailyGoals.waterGoal, 1) * 100);
    /* istanbul ignore next */
    cov_2a1zum1dqo().s[116]++;
    return Math.round(calorieScore * 0.3 + macroScore * 0.4 + hydrationScore * 0.3);
  }
  // Calcul de recommandations basiques
  static calculateBasicRecommendations(profile) {
    /* istanbul ignore next */
    cov_2a1zum1dqo().f[19]++;
    // Calcul BMR (Basal Metabolic Rate) - formule de Mifflin-St Jeor
    const bmr =
    /* istanbul ignore next */
    (cov_2a1zum1dqo().s[117]++, 10 * profile.weight + 6.25 * profile.height - 5 * profile.age + 5); // Pour les hommes
    // Facteur d'activité
    const activityFactors =
    /* istanbul ignore next */
    (cov_2a1zum1dqo().s[118]++, {
      sedentary: 1.2,
      light: 1.375,
      moderate: 1.55,
      active: 1.725,
      very_active: 1.9
    });
    const activityFactor =
    /* istanbul ignore next */
    (cov_2a1zum1dqo().s[119]++,
    /* istanbul ignore next */
    (cov_2a1zum1dqo().b[17][0]++, activityFactors[profile.activityLevel]) ||
    /* istanbul ignore next */
    (cov_2a1zum1dqo().b[17][1]++, 1.2));
    let dailyCalories =
    /* istanbul ignore next */
    (cov_2a1zum1dqo().s[120]++, bmr * activityFactor);
    // Ajustement selon l'objectif
    /* istanbul ignore next */
    cov_2a1zum1dqo().s[121]++;
    if (profile.goal === 'weight_loss') {
      /* istanbul ignore next */
      cov_2a1zum1dqo().b[18][0]++;
      cov_2a1zum1dqo().s[122]++;
      dailyCalories -= 500; // Déficit de 500 calories
    } else {
      /* istanbul ignore next */
      cov_2a1zum1dqo().b[18][1]++;
      cov_2a1zum1dqo().s[123]++;
      if (profile.goal === 'weight_gain') {
        /* istanbul ignore next */
        cov_2a1zum1dqo().b[19][0]++;
        cov_2a1zum1dqo().s[124]++;
        dailyCalories += 500; // Surplus de 500 calories
      } else
      /* istanbul ignore next */
      {
        cov_2a1zum1dqo().b[19][1]++;
      }
    }
    // Calcul des macros (30% protéines, 40% glucides, 30% lipides)
    const proteins =
    /* istanbul ignore next */
    (cov_2a1zum1dqo().s[125]++, dailyCalories * 0.3 / 4); // 4 cal/g
    const carbohydrates =
    /* istanbul ignore next */
    (cov_2a1zum1dqo().s[126]++, dailyCalories * 0.4 / 4); // 4 cal/g
    const fats =
    /* istanbul ignore next */
    (cov_2a1zum1dqo().s[127]++, dailyCalories * 0.3 / 9); // 9 cal/g
    /* istanbul ignore next */
    cov_2a1zum1dqo().s[128]++;
    return {
      dailyCalories: Math.round(dailyCalories),
      macroTargets: {
        proteins: Math.round(proteins),
        carbohydrates: Math.round(carbohydrates),
        fats: Math.round(fats)
      },
      waterGoal: profile.weight * 35 // 35ml par kg de poids
    };
  }
  // === DONNÉES DE MOCK ===
  static getMockNutritionData(userId, date) {
    /* istanbul ignore next */
    cov_2a1zum1dqo().f[20]++;
    cov_2a1zum1dqo().s[129]++;
    return {
      userId,
      date,
      meals: [{
        type: 'breakfast',
        name: 'Petit-déjeuner équilibré',
        timestamp: `${date}T08:00:00Z`,
        foods: [{
          name: "Flocons d'avoine",
          quantity: 50,
          unit: 'g',
          calories: 185,
          macros: {
            proteins: 6.5,
            carbohydrates: 33,
            fats: 3.5
          }
        }, {
          name: 'Banane',
          quantity: 120,
          unit: 'g',
          calories: 108,
          macros: {
            proteins: 1.3,
            carbohydrates: 27,
            fats: 0.4
          }
        }],
        totalCalories: 293,
        macros: {
          proteins: 7.8,
          carbohydrates: 60,
          fats: 3.9
        }
      }],
      totalCalories: 1847,
      totalMacros: {
        proteins: 95,
        carbohydrates: 220,
        fats: 65
      },
      waterIntake: 1800,
      dailyGoals: {
        dailyCalories: 2000,
        macroTargets: {
          proteins: 100,
          carbohydrates: 250,
          fats: 70
        },
        waterGoal: 2500
      }
    };
  }
  static getMockFoodSearchResults(query) {
    /* istanbul ignore next */
    cov_2a1zum1dqo().f[21]++;
    const foods =
    /* istanbul ignore next */
    (cov_2a1zum1dqo().s[130]++, [{
      name: 'Pomme Golden',
      brand: 'Bio',
      quantity: 100,
      unit: 'g',
      calories: 52,
      macros: {
        proteins: 0.3,
        carbohydrates: 14,
        fats: 0.2
      }
    }, {
      name: 'Blanc de poulet',
      quantity: 100,
      unit: 'g',
      calories: 165,
      macros: {
        proteins: 31,
        carbohydrates: 0,
        fats: 3.6
      }
    }, {
      name: 'Riz basmati',
      quantity: 100,
      unit: 'g',
      calories: 356,
      macros: {
        proteins: 8.9,
        carbohydrates: 78,
        fats: 0.9
      }
    }]);
    /* istanbul ignore next */
    cov_2a1zum1dqo().s[131]++;
    return foods.filter(food => {
      /* istanbul ignore next */
      cov_2a1zum1dqo().f[22]++;
      cov_2a1zum1dqo().s[132]++;
      return food.name.toLowerCase().includes(query.toLowerCase());
    });
  }
  static getMockNutritionAnalysis() {
    /* istanbul ignore next */
    cov_2a1zum1dqo().f[23]++;
    const today =
    /* istanbul ignore next */
    (cov_2a1zum1dqo().s[133]++, new Date().toISOString().split('T')[0]);
    /* istanbul ignore next */
    cov_2a1zum1dqo().s[134]++;
    return {
      date:
      /* istanbul ignore next */
      (cov_2a1zum1dqo().b[20][0]++, today) ||
      /* istanbul ignore next */
      (cov_2a1zum1dqo().b[20][1]++, ''),
      calorieBalance: -153,
      macroBalance: {
        proteins: 95,
        carbohydrates: 88,
        fats: 93
      },
      hydrationStatus: 72,
      nutritionScore: 78,
      recommendations: ["Augmentez votre consommation d'eau", 'Ajoutez plus de légumes verts à vos repas', 'Pensez à inclure des collations riches en protéines']
    };
  }
  static getMockRecipes() {
    /* istanbul ignore next */
    cov_2a1zum1dqo().f[24]++;
    cov_2a1zum1dqo().s[135]++;
    return [{
      id: '1',
      name: 'Salade de quinoa aux légumes',
      description: 'Une salade nutritive et colorée',
      ingredients: [],
      instructions: ['Cuire le quinoa', 'Couper les légumes', 'Mélanger avec la vinaigrette'],
      servings: 4,
      prepTime: 15,
      cookTime: 20,
      difficulty: 'easy',
      tags: ['healthy', 'vegetarian', 'lunch'],
      nutritionPerServing: {
        calories: 285,
        macros: {
          proteins: 12,
          carbohydrates: 45,
          fats: 8
        }
      },
      createdBy: 'nutritionist',
      isPublic: true
    }];
  }
  static getMockMealPlans() {
    /* istanbul ignore next */
    cov_2a1zum1dqo().f[25]++;
    cov_2a1zum1dqo().s[136]++;
    return [{
      id: '1',
      name: 'Plan de perte de poids - 7 jours',
      description: 'Un plan équilibré pour une perte de poids saine',
      duration: 7,
      targetCalories: 1800,
      targetMacros: {
        proteins: 120,
        carbohydrates: 180,
        fats: 60
      },
      meals: [],
      createdBy: 'nutritionist',
      isPublic: true
    }];
  }
  static getMockNutritionTrends(period) {
    /* istanbul ignore next */
    cov_2a1zum1dqo().f[26]++;
    cov_2a1zum1dqo().s[137]++;
    return {
      period,
      averageCalories: 1925,
      averageMacros: {
        proteins: 98,
        carbohydrates: 235,
        fats: 68
      },
      averageHydration: 2100,
      consistency: 82,
      improvements: ['Meilleure hydratation', 'Apport en protéines plus régulier'],
      concerns: ['Consommation de sucres ajoutés élevée']
    };
  }
  static getMockNutritionInsights() {
    /* istanbul ignore next */
    cov_2a1zum1dqo().f[27]++;
    cov_2a1zum1dqo().s[138]++;
    return [{
      type: 'achievement',
      title: 'Objectif protéines atteint !',
      description: 'Vous avez atteint votre objectif de protéines 5 jours consécutifs',
      data: {
        streak: 5,
        target: 100
      },
      actionRequired: false,
      priority: 'low'
    }, {
      type: 'warning',
      title: 'Hydratation insuffisante',
      description: "Votre consommation d'eau est en dessous de l'objectif depuis 3 jours",
      data: {
        currentIntake: 1800,
        target: 2500,
        deficit: 700
      },
      actionRequired: true,
      priority: 'medium'
    }];
  }
}
/* istanbul ignore next */
cov_2a1zum1dqo().s[139]++;
exports.NutritionService = NutritionService;
/* istanbul ignore next */
cov_2a1zum1dqo().s[140]++;
Object.defineProperty(NutritionService, "BASE_URL", {
  enumerable: true,
  configurable: true,
  writable: true,
  value: '/api/nutrition'
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,