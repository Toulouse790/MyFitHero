{"version":3,"names":["cov_2a1zum1dqo","actualCoverage","s","NutritionService","getNutritionData","userId","date","f","response","fetch","BASE_URL","ok","b","Error","json","error","console","getMockNutritionData","getDailyNutrition","addMeal","mealData","method","headers","body","JSON","stringify","logMeal","data","updateMeal","id","deleteMeal","calculateMacros","meals","totalCalories","reduce","sum","meal","totalMacros","acc","proteins","macros","carbohydrates","fats","calories","getRecommendations","profile","calculateBasicRecommendations","searchFoods","query","params","URLSearchParams","q","limit","toString","filters","Object","entries","forEach","key","value","undefined","append","getMockFoodSearchResults","updateNutritionGoals","goals","getNutritionAnalysis","startDate","endDate","getMockNutritionAnalysis","getRecipes","_userId","tags","join","difficulty","getMockRecipes","getMealPlans","getMockMealPlans","getNutritionTrends","period","getMockNutritionTrends","getNutritionInsights","getMockNutritionInsights","calculateNutritionScore","dailyGoals","waterIntake","calorieRatio","Math","min","dailyCalories","calorieScore","max","proteinRatio","macroTargets","carbRatio","fatRatio","macroScore","hydrationScore","waterGoal","round","bmr","weight","height","age","activityFactors","sedentary","light","moderate","active","very_active","activityFactor","activityLevel","goal","type","name","timestamp","foods","quantity","unit","brand","filter","food","toLowerCase","includes","today","Date","toISOString","split","calorieBalance","macroBalance","hydrationStatus","nutritionScore","recommendations","description","ingredients","instructions","servings","prepTime","cookTime","nutritionPerServing","createdBy","isPublic","duration","targetCalories","targetMacros","averageCalories","averageMacros","averageHydration","consistency","improvements","concerns","title","streak","target","actionRequired","priority","currentIntake","deficit","exports","defineProperty"],"sources":["/workspaces/MyFitHero/src/features/nutrition/services/nutrition.service.ts"],"sourcesContent":["import { Search, Target } from 'lucide-react';\nimport {\n  NutritionData,\n  Meal,\n  FoodItem,\n  NutritionGoals,\n  NutritionAnalysis,\n  Recipe,\n  MealPlan,\n  NutritionTrend,\n  CreateMealDTO,\n  UpdateNutritionGoalsDTO,\n  FoodSearchQuery,\n  NutritionInsight,\n} from '@/features/nutrition/types/index';\n\nexport class NutritionService {\n  private static readonly BASE_URL = '/api/nutrition';\n\n  // Récupération des données nutritionnelles\n  static async getNutritionData(userId: string, date: string): Promise<NutritionData> {\n    try {\n      const response = await fetch(`${this.BASE_URL}/${userId}/daily/${date}`);\n      if (!response.ok)\n        throw new Error('Erreur lors de la récupération des données nutritionnelles');\n      return await response.json();\n    } catch (error: any) {\n      // Erreur silencieuse\n      console.error('Erreur API nutrition:', error);\n      // Données de mock en cas d'erreur\n      return this.getMockNutritionData(userId, date);\n    }\n  }\n\n  /**\n   * Récupère la nutrition quotidienne d'un utilisateur\n   */\n  static async getDailyNutrition(userId: string, date: string): Promise<NutritionData | null> {\n    return this.getNutritionData(userId, date);\n  }\n\n  // Ajout d'un repas\n  static async addMeal(userId: string, mealData: CreateMealDTO): Promise<Meal> {\n    try {\n      const response = await fetch(`${this.BASE_URL}/${userId}/meals`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(mealData),\n      });\n      if (!response.ok) throw new Error(\"Erreur lors de l'ajout du repas\");\n      return await response.json();\n    } catch (error: any) {\n      // Erreur silencieuse\n      console.error('Erreur ajout repas:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Enregistre un repas\n   */\n  static async logMeal(data: CreateMealDTO): Promise<Meal | null> {\n    try {\n      // Simulation d'un userId - en réalité, il viendrait du contexte d'auth\n      const userId = 'current-user';\n      return await this.addMeal(userId, data);\n    } catch (error: any) {\n      // Erreur silencieuse\n      console.error(\"Erreur lors de l'enregistrement du repas:\", error);\n      return null;\n    }\n  }\n\n  /**\n   * Met à jour un repas\n   */\n  static async updateMeal(id: string, data: Partial<CreateMealDTO>): Promise<Meal | null> {\n    try {\n      const response = await fetch(`${this.BASE_URL}/meals/${id}`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) throw new Error('Erreur lors de la mise à jour du repas');\n      return await response.json();\n    } catch (error: any) {\n      // Erreur silencieuse\n      console.error('Erreur mise à jour repas:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Supprime un repas\n   */\n  static async deleteMeal(id: string): Promise<boolean> {\n    try {\n      const response = await fetch(`${this.BASE_URL}/meals/${id}`, {\n        method: 'DELETE',\n      });\n      return response.ok;\n    } catch (error: any) {\n      // Erreur silencieuse\n      console.error('Erreur suppression repas:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Calcule les macros d'une liste de repas\n   */\n  static async calculateMacros(meals: Meal[]): Promise<{\n    calories: number;\n    macros: { proteins: number; carbohydrates: number; fats: number };\n  } | null> {\n    try {\n      const totalCalories = meals.reduce((sum, meal) => sum + meal.totalCalories, 0);\n      const totalMacros = meals.reduce(\n        (acc, meal) => ({\n          proteins: acc.proteins + meal.macros.proteins,\n          carbohydrates: acc.carbohydrates + meal.macros.carbohydrates,\n          fats: acc.fats + meal.macros.fats,\n        }),\n        { proteins: 0, carbohydrates: 0, fats: 0 }\n      );\n\n      return {\n        calories: totalCalories,\n        macros: totalMacros,\n      };\n    } catch (error: any) {\n      // Erreur silencieuse\n      console.error('Erreur calcul macros:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Récupère les recommandations nutritionnelles\n   */\n  static async getRecommendations(profile: {\n    age: number;\n    weight: number;\n    height: number;\n    activityLevel: string;\n    goal: string;\n  }): Promise<NutritionGoals | null> {\n    try {\n      const response = await fetch(`${this.BASE_URL}/recommendations`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(profile),\n      });\n      if (!response.ok) throw new Error('Erreur lors du calcul des recommandations');\n      return await response.json();\n    } catch (error: any) {\n      // Erreur silencieuse\n      console.error('Erreur recommandations:', error);\n      // Calcul basique en cas d'erreur\n      return this.calculateBasicRecommendations(profile);\n    }\n  }\n\n  // Recherche d'aliments\n  static async searchFoods(query: FoodSearchQuery): Promise<FoodItem[]> {\n    try {\n      const params = new URLSearchParams({\n        q: query.query,\n        limit: (query.limit || 20).toString(),\n      });\n\n      if (query.filters) {\n        Object.entries(query.filters).forEach(([key, value]) => {\n          if (value !== undefined) params.append(key, value.toString());\n        });\n      }\n\n      const response = await fetch(`${this.BASE_URL}/foods/search?${params}`);\n      if (!response.ok) throw new Error(\"Erreur lors de la recherche d'aliments\");\n      return await response.json();\n    } catch (error: any) {\n      // Erreur silencieuse\n      console.error('Erreur recherche aliments:', error);\n      return this.getMockFoodSearchResults(query.query);\n    }\n  }\n\n  // Mise à jour des objectifs nutritionnels\n  static async updateNutritionGoals(\n    userId: string,\n    goals: UpdateNutritionGoalsDTO\n  ): Promise<NutritionGoals> {\n    try {\n      const response = await fetch(`${this.BASE_URL}/${userId}/goals`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(goals),\n      });\n      if (!response.ok) throw new Error('Erreur lors de la mise à jour des objectifs');\n      return await response.json();\n    } catch (error: any) {\n      // Erreur silencieuse\n      console.error('Erreur mise à jour objectifs:', error);\n      throw error;\n    }\n  }\n\n  // Analyse nutritionnelle\n  static async getNutritionAnalysis(\n    userId: string,\n    startDate: string,\n    endDate: string\n  ): Promise<NutritionAnalysis> {\n    try {\n      const response = await fetch(\n        `${this.BASE_URL}/${userId}/analysis?start=${startDate}&end=${endDate}`\n      );\n      if (!response.ok) throw new Error(\"Erreur lors de l'analyse nutritionnelle\");\n      return await response.json();\n    } catch (error: any) {\n      // Erreur silencieuse\n      console.error('Erreur analyse nutritionnelle:', error);\n      return this.getMockNutritionAnalysis();\n    }\n  }\n\n  // Récupération des recettes\n  static async getRecipes(\n    _userId: string,\n    filters?: { tags?: string[]; difficulty?: string }\n  ): Promise<Recipe[]> {\n    try {\n      const params = new URLSearchParams();\n      if (filters?.tags) params.append('tags', filters.tags.join(','));\n      if (filters?.difficulty) params.append('difficulty', filters.difficulty);\n\n      const response = await fetch(`${this.BASE_URL}/recipes?${params}`);\n      if (!response.ok) throw new Error('Erreur lors de la récupération des recettes');\n      return await response.json();\n    } catch (error: any) {\n      // Erreur silencieuse\n      console.error('Erreur récupération recettes:', error);\n      return this.getMockRecipes();\n    }\n  }\n\n  // Plan de repas\n  static async getMealPlans(userId: string): Promise<MealPlan[]> {\n    try {\n      const response = await fetch(`${this.BASE_URL}/${userId}/meal-plans`);\n      if (!response.ok) throw new Error('Erreur lors de la récupération des plans de repas');\n      return await response.json();\n    } catch (error: any) {\n      // Erreur silencieuse\n      console.error('Erreur plans de repas:', error);\n      return this.getMockMealPlans();\n    }\n  }\n\n  // Tendances nutritionnelles\n  static async getNutritionTrends(\n    userId: string,\n    period: 'week' | 'month' | 'quarter'\n  ): Promise<NutritionTrend> {\n    try {\n      const response = await fetch(`${this.BASE_URL}/${userId}/trends/${period}`);\n      if (!response.ok) throw new Error('Erreur lors de la récupération des tendances');\n      return await response.json();\n    } catch (error: any) {\n      // Erreur silencieuse\n      console.error('Erreur tendances nutritionnelles:', error);\n      return this.getMockNutritionTrends(period);\n    }\n  }\n\n  // Insights nutritionnels\n  static async getNutritionInsights(userId: string): Promise<NutritionInsight[]> {\n    try {\n      const response = await fetch(`${this.BASE_URL}/${userId}/insights`);\n      if (!response.ok) throw new Error('Erreur lors de la récupération des insights');\n      return await response.json();\n    } catch (error: any) {\n      // Erreur silencieuse\n      console.error('Erreur insights nutritionnels:', error);\n      return this.getMockNutritionInsights();\n    }\n  }\n\n  // Calcul du score nutritionnel\n  static calculateNutritionScore(data: NutritionData): number {\n    const { totalCalories, totalMacros, dailyGoals, waterIntake } = data;\n\n    // Score des calories (30%)\n    const calorieRatio = Math.min(totalCalories / dailyGoals.dailyCalories, 1.2);\n    const calorieScore = calorieRatio <= 1.1 ? 100 : Math.max(0, 100 - (calorieRatio - 1.1) * 500);\n\n    // Score des macros (40%)\n    const proteinRatio = totalMacros.proteins / dailyGoals.macroTargets.proteins;\n    const carbRatio = totalMacros.carbohydrates / dailyGoals.macroTargets.carbohydrates;\n    const fatRatio = totalMacros.fats / dailyGoals.macroTargets.fats;\n\n    const macroScore =\n      (Math.min(proteinRatio, 1.2) * 0.4 +\n        Math.min(carbRatio, 1.2) * 0.3 +\n        Math.min(fatRatio, 1.2) * 0.3) *\n      100;\n\n    // Score d'hydratation (30%)\n    const hydrationScore = Math.min(waterIntake / dailyGoals.waterGoal, 1) * 100;\n\n    return Math.round(calorieScore * 0.3 + macroScore * 0.4 + hydrationScore * 0.3);\n  }\n\n  // Calcul de recommandations basiques\n  private static calculateBasicRecommendations(profile: {\n    age: number;\n    weight: number;\n    height: number;\n    activityLevel: string;\n    goal: string;\n  }): NutritionGoals {\n    // Calcul BMR (Basal Metabolic Rate) - formule de Mifflin-St Jeor\n    const bmr = 10 * profile.weight + 6.25 * profile.height - 5 * profile.age + 5; // Pour les hommes\n\n    // Facteur d'activité\n    const activityFactors: Record<string, number> = {\n      sedentary: 1.2,\n      light: 1.375,\n      moderate: 1.55,\n      active: 1.725,\n      very_active: 1.9,\n    };\n\n    const activityFactor = activityFactors[profile.activityLevel] || 1.2;\n    let dailyCalories = bmr * activityFactor;\n\n    // Ajustement selon l'objectif\n    if (profile.goal === 'weight_loss') {\n      dailyCalories -= 500; // Déficit de 500 calories\n    } else if (profile.goal === 'weight_gain') {\n      dailyCalories += 500; // Surplus de 500 calories\n    }\n\n    // Calcul des macros (30% protéines, 40% glucides, 30% lipides)\n    const proteins = (dailyCalories * 0.3) / 4; // 4 cal/g\n    const carbohydrates = (dailyCalories * 0.4) / 4; // 4 cal/g\n    const fats = (dailyCalories * 0.3) / 9; // 9 cal/g\n\n    return {\n      dailyCalories: Math.round(dailyCalories),\n      macroTargets: {\n        proteins: Math.round(proteins),\n        carbohydrates: Math.round(carbohydrates),\n        fats: Math.round(fats),\n      },\n      waterGoal: profile.weight * 35, // 35ml par kg de poids\n    };\n  }\n\n  // === DONNÉES DE MOCK ===\n  private static getMockNutritionData(userId: string, date: string): NutritionData {\n    return {\n      userId,\n      date,\n      meals: [\n        {\n          type: 'breakfast',\n          name: 'Petit-déjeuner équilibré',\n          timestamp: `${date}T08:00:00Z`,\n          foods: [\n            {\n              name: \"Flocons d'avoine\",\n              quantity: 50,\n              unit: 'g',\n              calories: 185,\n              macros: { proteins: 6.5, carbohydrates: 33, fats: 3.5 },\n            },\n            {\n              name: 'Banane',\n              quantity: 120,\n              unit: 'g',\n              calories: 108,\n              macros: { proteins: 1.3, carbohydrates: 27, fats: 0.4 },\n            },\n          ],\n          totalCalories: 293,\n          macros: { proteins: 7.8, carbohydrates: 60, fats: 3.9 },\n        },\n      ],\n      totalCalories: 1847,\n      totalMacros: { proteins: 95, carbohydrates: 220, fats: 65 },\n      waterIntake: 1800,\n      dailyGoals: {\n        dailyCalories: 2000,\n        macroTargets: { proteins: 100, carbohydrates: 250, fats: 70 },\n        waterGoal: 2500,\n      },\n    };\n  }\n\n  private static getMockFoodSearchResults(query: string): FoodItem[] {\n    const foods = [\n      {\n        name: 'Pomme Golden',\n        brand: 'Bio',\n        quantity: 100,\n        unit: 'g' as const,\n        calories: 52,\n        macros: { proteins: 0.3, carbohydrates: 14, fats: 0.2 },\n      },\n      {\n        name: 'Blanc de poulet',\n        quantity: 100,\n        unit: 'g' as const,\n        calories: 165,\n        macros: { proteins: 31, carbohydrates: 0, fats: 3.6 },\n      },\n      {\n        name: 'Riz basmati',\n        quantity: 100,\n        unit: 'g' as const,\n        calories: 356,\n        macros: { proteins: 8.9, carbohydrates: 78, fats: 0.9 },\n      },\n    ];\n\n    return foods.filter(food => food.name.toLowerCase().includes(query.toLowerCase()));\n  }\n\n  private static getMockNutritionAnalysis(): NutritionAnalysis {\n    const today = new Date().toISOString().split('T')[0];\n    return {\n      date: today || '',\n      calorieBalance: -153,\n      macroBalance: {\n        proteins: 95,\n        carbohydrates: 88,\n        fats: 93,\n      },\n      hydrationStatus: 72,\n      nutritionScore: 78,\n      recommendations: [\n        \"Augmentez votre consommation d'eau\",\n        'Ajoutez plus de légumes verts à vos repas',\n        'Pensez à inclure des collations riches en protéines',\n      ],\n    };\n  }\n\n  private static getMockRecipes(): Recipe[] {\n    return [\n      {\n        id: '1',\n        name: 'Salade de quinoa aux légumes',\n        description: 'Une salade nutritive et colorée',\n        ingredients: [],\n        instructions: ['Cuire le quinoa', 'Couper les légumes', 'Mélanger avec la vinaigrette'],\n        servings: 4,\n        prepTime: 15,\n        cookTime: 20,\n        difficulty: 'easy',\n        tags: ['healthy', 'vegetarian', 'lunch'],\n        nutritionPerServing: {\n          calories: 285,\n          macros: { proteins: 12, carbohydrates: 45, fats: 8 },\n        },\n        createdBy: 'nutritionist',\n        isPublic: true,\n      },\n    ];\n  }\n\n  private static getMockMealPlans(): MealPlan[] {\n    return [\n      {\n        id: '1',\n        name: 'Plan de perte de poids - 7 jours',\n        description: 'Un plan équilibré pour une perte de poids saine',\n        duration: 7,\n        targetCalories: 1800,\n        targetMacros: { proteins: 120, carbohydrates: 180, fats: 60 },\n        meals: [],\n        createdBy: 'nutritionist',\n        isPublic: true,\n      },\n    ];\n  }\n\n  private static getMockNutritionTrends(period: 'week' | 'month' | 'quarter'): NutritionTrend {\n    return {\n      period,\n      averageCalories: 1925,\n      averageMacros: { proteins: 98, carbohydrates: 235, fats: 68 },\n      averageHydration: 2100,\n      consistency: 82,\n      improvements: ['Meilleure hydratation', 'Apport en protéines plus régulier'],\n      concerns: ['Consommation de sucres ajoutés élevée'],\n    };\n  }\n\n  private static getMockNutritionInsights(): NutritionInsight[] {\n    return [\n      {\n        type: 'achievement',\n        title: 'Objectif protéines atteint !',\n        description: 'Vous avez atteint votre objectif de protéines 5 jours consécutifs',\n        data: { streak: 5, target: 100 },\n        actionRequired: false,\n        priority: 'low',\n      },\n      {\n        type: 'warning',\n        title: 'Hydratation insuffisante',\n        description: \"Votre consommation d'eau est en dessous de l'objectif depuis 3 jours\",\n        data: { currentIntake: 1800, target: 2500, deficit: 700 },\n        actionRequired: true,\n        priority: 'medium',\n      },\n    ];\n  }\n}\n"],"mappingscAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,cAAA;AAAAA,cAAA,GAAAE,CAAA;;;;;;;AAbN,MAAaC,gBAAgB;EAG3B;EACA,aAAaC,gBAAgBA,CAACC,MAAc,EAAEC,IAAY;IAAA;IAAAN,cAAA,GAAAO,CAAA;IAAAP,cAAA,GAAAE,CAAA;IACxD,IAAI;MACF,MAAMM,QAAQ;MAAA;MAAA,CAAAR,cAAA,GAAAE,CAAA,OAAG,MAAMO,KAAK,CAAC,GAAG,IAAI,CAACC,QAAQ,IAAIL,MAAM,UAAUC,IAAI,EAAE,CAAC;MAAC;MAAAN,cAAA,GAAAE,CAAA;MACzE,IAAI,CAACM,QAAQ,CAACG,EAAE,EACd;QAAA;QAAAX,cAAA,GAAAY,CAAA;QAAAZ,cAAA,GAAAE,CAAA;QAAA,MAAM,IAAIW,KAAK,CAAC,4DAA4D,CAAC;MAAA,CAAC;MAAA;MAAA;QAAAb,cAAA,GAAAY,CAAA;MAAA;MAAAZ,cAAA,GAAAE,CAAA;MAChF,OAAO,MAAMM,QAAQ,CAACM,IAAI,EAAE;IAC9B,CAAC,CAAC,OAAOC,KAAU,EAAE;MAAA;MAAAf,cAAA,GAAAE,CAAA;MACnB;MACAc,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7C;MAAA;MAAAf,cAAA,GAAAE,CAAA;MACA,OAAO,IAAI,CAACe,oBAAoB,CAACZ,MAAM,EAAEC,IAAI,CAAC;IAChD;EACF;EAEA;;;EAGA,aAAaY,iBAAiBA,CAACb,MAAc,EAAEC,IAAY;IAAA;IAAAN,cAAA,GAAAO,CAAA;IAAAP,cAAA,GAAAE,CAAA;IACzD,OAAO,IAAI,CAACE,gBAAgB,CAACC,MAAM,EAAEC,IAAI,CAAC;EAC5C;EAEA;EACA,aAAaa,OAAOA,CAACd,MAAc,EAAEe,QAAuB;IAAA;IAAApB,cAAA,GAAAO,CAAA;IAAAP,cAAA,GAAAE,CAAA;IAC1D,IAAI;MACF,MAAMM,QAAQ;MAAA;MAAA,CAAAR,cAAA,GAAAE,CAAA,QAAG,MAAMO,KAAK,CAAC,GAAG,IAAI,CAACC,QAAQ,IAAIL,MAAM,QAAQ,EAAE;QAC/DgB,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAkB,CAAE;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,QAAQ;OAC9B,CAAC;MAAC;MAAApB,cAAA,GAAAE,CAAA;MACH,IAAI,CAACM,QAAQ,CAACG,EAAE,EAAE;QAAA;QAAAX,cAAA,GAAAY,CAAA;QAAAZ,cAAA,GAAAE,CAAA;QAAA,MAAM,IAAIW,KAAK,CAAC,iCAAiC,CAAC;MAAA,CAAC;MAAA;MAAA;QAAAb,cAAA,GAAAY,CAAA;MAAA;MAAAZ,cAAA,GAAAE,CAAA;MACrE,OAAO,MAAMM,QAAQ,CAACM,IAAI,EAAE;IAC9B,CAAC,CAAC,OAAOC,KAAU,EAAE;MAAA;MAAAf,cAAA,GAAAE,CAAA;MACnB;MACAc,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;MAAC;MAAAf,cAAA,GAAAE,CAAA;MAC5C,MAAMa,KAAK;IACb;EACF;EAEA;;;EAGA,aAAaW,OAAOA,CAACC,IAAmB;IAAA;IAAA3B,cAAA,GAAAO,CAAA;IAAAP,cAAA,GAAAE,CAAA;IACtC,IAAI;MACF;MACA,MAAMG,MAAM;MAAA;MAAA,CAAAL,cAAA,GAAAE,CAAA,QAAG,cAAc;MAAC;MAAAF,cAAA,GAAAE,CAAA;MAC9B,OAAO,MAAM,IAAI,CAACiB,OAAO,CAACd,MAAM,EAAEsB,IAAI,CAAC;IACzC,CAAC,CAAC,OAAOZ,KAAU,EAAE;MAAA;MAAAf,cAAA,GAAAE,CAAA;MACnB;MACAc,OAAO,CAACD,KAAK,CAAC,2CAA2C,EAAEA,KAAK,CAAC;MAAC;MAAAf,cAAA,GAAAE,CAAA;MAClE,OAAO,IAAI;IACb;EACF;EAEA;;;EAGA,aAAa0B,UAAUA,CAACC,EAAU,EAAEF,IAA4B;IAAA;IAAA3B,cAAA,GAAAO,CAAA;IAAAP,cAAA,GAAAE,CAAA;IAC9D,IAAI;MACF,MAAMM,QAAQ;MAAA;MAAA,CAAAR,cAAA,GAAAE,CAAA,QAAG,MAAMO,KAAK,CAAC,GAAG,IAAI,CAACC,QAAQ,UAAUmB,EAAE,EAAE,EAAE;QAC3DR,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAkB,CAAE;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACE,IAAI;OAC1B,CAAC;MAAC;MAAA3B,cAAA,GAAAE,CAAA;MACH,IAAI,CAACM,QAAQ,CAACG,EAAE,EAAE;QAAA;QAAAX,cAAA,GAAAY,CAAA;QAAAZ,cAAA,GAAAE,CAAA;QAAA,MAAM,IAAIW,KAAK,CAAC,wCAAwC,CAAC;MAAA,CAAC;MAAA;MAAA;QAAAb,cAAA,GAAAY,CAAA;MAAA;MAAAZ,cAAA,GAAAE,CAAA;MAC5E,OAAO,MAAMM,QAAQ,CAACM,IAAI,EAAE;IAC9B,CAAC,CAAC,OAAOC,KAAU,EAAE;MAAA;MAAAf,cAAA,GAAAE,CAAA;MACnB;MACAc,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MAAC;MAAAf,cAAA,GAAAE,CAAA;MAClD,OAAO,IAAI;IACb;EACF;EAEA;;;EAGA,aAAa4B,UAAUA,CAACD,EAAU;IAAA;IAAA7B,cAAA,GAAAO,CAAA;IAAAP,cAAA,GAAAE,CAAA;IAChC,IAAI;MACF,MAAMM,QAAQ;MAAA;MAAA,CAAAR,cAAA,GAAAE,CAAA,QAAG,MAAMO,KAAK,CAAC,GAAG,IAAI,CAACC,QAAQ,UAAUmB,EAAE,EAAE,EAAE;QAC3DR,MAAM,EAAE;OACT,CAAC;MAAC;MAAArB,cAAA,GAAAE,CAAA;MACH,OAAOM,QAAQ,CAACG,EAAE;IACpB,CAAC,CAAC,OAAOI,KAAU,EAAE;MAAA;MAAAf,cAAA,GAAAE,CAAA;MACnB;MACAc,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MAAC;MAAAf,cAAA,GAAAE,CAAA;MAClD,OAAO,KAAK;IACd;EACF;EAEA;;;EAGA,aAAa6B,eAAeA,CAACC,KAAa;IAAA;IAAAhC,cAAA,GAAAO,CAAA;IAAAP,cAAA,GAAAE,CAAA;IAIxC,IAAI;MACF,MAAM+B,aAAa;MAAA;MAAA,CAAAjC,cAAA,GAAAE,CAAA,QAAG8B,KAAK,CAACE,MAAM,CAAC,CAACC,GAAG,EAAEC,IAAI,KAAK;QAAA;QAAApC,cAAA,GAAAO,CAAA;QAAAP,cAAA,GAAAE,CAAA;QAAA,OAAAiC,GAAG,GAAGC,IAAI,CAACH,aAAa;MAAb,CAAa,EAAE,CAAC,CAAC;MAC9E,MAAMI,WAAW;MAAA;MAAA,CAAArC,cAAA,GAAAE,CAAA,QAAG8B,KAAK,CAACE,MAAM,CAC9B,CAACI,GAAG,EAAEF,IAAI,KAAM;QAAA;QAAApC,cAAA,GAAAO,CAAA;QAAAP,cAAA,GAAAE,CAAA;QAAA;UACdqC,QAAQ,EAAED,GAAG,CAACC,QAAQ,GAAGH,IAAI,CAACI,MAAM,CAACD,QAAQ;UAC7CE,aAAa,EAAEH,GAAG,CAACG,aAAa,GAAGL,IAAI,CAACI,MAAM,CAACC,aAAa;UAC5DC,IAAI,EAAEJ,GAAG,CAACI,IAAI,GAAGN,IAAI,CAACI,MAAM,CAACE;SAC9B;OAAC,EACF;QAAEH,QAAQ,EAAE,CAAC;QAAEE,aAAa,EAAE,CAAC;QAAEC,IAAI,EAAE;MAAC,CAAE,CAC3C;MAAC;MAAA1C,cAAA,GAAAE,CAAA;MAEF,OAAO;QACLyC,QAAQ,EAAEV,aAAa;QACvBO,MAAM,EAAEH;OACT;IACH,CAAC,CAAC,OAAOtB,KAAU,EAAE;MAAA;MAAAf,cAAA,GAAAE,CAAA;MACnB;MACAc,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAAC;MAAAf,cAAA,GAAAE,CAAA;MAC9C,OAAO,IAAI;IACb;EACF;EAEA;;;EAGA,aAAa0C,kBAAkBA,CAACC,OAM/B;IAAA;IAAA7C,cAAA,GAAAO,CAAA;IAAAP,cAAA,GAAAE,CAAA;IACC,IAAI;MACF,MAAMM,QAAQ;MAAA;MAAA,CAAAR,cAAA,GAAAE,CAAA,QAAG,MAAMO,KAAK,CAAC,GAAG,IAAI,CAACC,QAAQ,kBAAkB,EAAE;QAC/DW,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAkB,CAAE;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACoB,OAAO;OAC7B,CAAC;MAAC;MAAA7C,cAAA,GAAAE,CAAA;MACH,IAAI,CAACM,QAAQ,CAACG,EAAE,EAAE;QAAA;QAAAX,cAAA,GAAAY,CAAA;QAAAZ,cAAA,GAAAE,CAAA;QAAA,MAAM,IAAIW,KAAK,CAAC,2CAA2C,CAAC;MAAA,CAAC;MAAA;MAAA;QAAAb,cAAA,GAAAY,CAAA;MAAA;MAAAZ,cAAA,GAAAE,CAAA;MAC/E,OAAO,MAAMM,QAAQ,CAACM,IAAI,EAAE;IAC9B,CAAC,CAAC,OAAOC,KAAU,EAAE;MAAA;MAAAf,cAAA,GAAAE,CAAA;MACnB;MACAc,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAC/C;MAAA;MAAAf,cAAA,GAAAE,CAAA;MACA,OAAO,IAAI,CAAC4C,6BAA6B,CAACD,OAAO,CAAC;IACpD;EACF;EAEA;EACA,aAAaE,WAAWA,CAACC,KAAsB;IAAA;IAAAhD,cAAA,GAAAO,CAAA;IAAAP,cAAA,GAAAE,CAAA;IAC7C,IAAI;MACF,MAAM+C,MAAM;MAAA;MAAA,CAAAjD,cAAA,GAAAE,CAAA,QAAG,IAAIgD,eAAe,CAAC;QACjCC,CAAC,EAAEH,KAAK,CAACA,KAAK;QACdI,KAAK,EAAE;QAAC;QAAA,CAAApD,cAAA,GAAAY,CAAA,UAAAoC,KAAK,CAACI,KAAK;QAAA;QAAA,CAAApD,cAAA,GAAAY,CAAA,UAAI,EAAE,GAAEyC,QAAQ;OACpC,CAAC;MAAC;MAAArD,cAAA,GAAAE,CAAA;MAEH,IAAI8C,KAAK,CAACM,OAAO,EAAE;QAAA;QAAAtD,cAAA,GAAAY,CAAA;QAAAZ,cAAA,GAAAE,CAAA;QACjBqD,MAAM,CAACC,OAAO,CAACR,KAAK,CAACM,OAAO,CAAC,CAACG,OAAO,CAAC,CAAC,CAACC,GAAG,EAAEC,KAAK,CAAC,KAAI;UAAA;UAAA3D,cAAA,GAAAO,CAAA;UAAAP,cAAA,GAAAE,CAAA;UACrD,IAAIyD,KAAK,KAAKC,SAAS,EAAE;YAAA;YAAA5D,cAAA,GAAAY,CAAA;YAAAZ,cAAA,GAAAE,CAAA;YAAA+C,MAAM,CAACY,MAAM,CAACH,GAAG,EAAEC,KAAK,CAACN,QAAQ,EAAE,CAAC;UAAA,CAAC;UAAA;UAAA;YAAArD,cAAA,GAAAY,CAAA;UAAA;QAChE,CAAC,CAAC;MACJ,CAAC;MAAA;MAAA;QAAAZ,cAAA,GAAAY,CAAA;MAAA;MAED,MAAMJ,QAAQ;MAAA;MAAA,CAAAR,cAAA,GAAAE,CAAA,QAAG,MAAMO,KAAK,CAAC,GAAG,IAAI,CAACC,QAAQ,iBAAiBuC,MAAM,EAAE,CAAC;MAAC;MAAAjD,cAAA,GAAAE,CAAA;MACxE,IAAI,CAACM,QAAQ,CAACG,EAAE,EAAE;QAAA;QAAAX,cAAA,GAAAY,CAAA;QAAAZ,cAAA,GAAAE,CAAA;QAAA,MAAM,IAAIW,KAAK,CAAC,wCAAwC,CAAC;MAAA,CAAC;MAAA;MAAA;QAAAb,cAAA,GAAAY,CAAA;MAAA;MAAAZ,cAAA,GAAAE,CAAA;MAC5E,OAAO,MAAMM,QAAQ,CAACM,IAAI,EAAE;IAC9B,CAAC,CAAC,OAAOC,KAAU,EAAE;MAAA;MAAAf,cAAA,GAAAE,CAAA;MACnB;MACAc,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MAAC;MAAAf,cAAA,GAAAE,CAAA;MACnD,OAAO,IAAI,CAAC4D,wBAAwB,CAACd,KAAK,CAACA,KAAK,CAAC;IACnD;EACF;EAEA;EACA,aAAae,oBAAoBA,CAC/B1D,MAAc,EACd2D,KAA8B;IAAA;IAAAhE,cAAA,GAAAO,CAAA;IAAAP,cAAA,GAAAE,CAAA;IAE9B,IAAI;MACF,MAAMM,QAAQ;MAAA;MAAA,CAAAR,cAAA,GAAAE,CAAA,QAAG,MAAMO,KAAK,CAAC,GAAG,IAAI,CAACC,QAAQ,IAAIL,MAAM,QAAQ,EAAE;QAC/DgB,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAkB,CAAE;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACuC,KAAK;OAC3B,CAAC;MAAC;MAAAhE,cAAA,GAAAE,CAAA;MACH,IAAI,CAACM,QAAQ,CAACG,EAAE,EAAE;QAAA;QAAAX,cAAA,GAAAY,CAAA;QAAAZ,cAAA,GAAAE,CAAA;QAAA,MAAM,IAAIW,KAAK,CAAC,6CAA6C,CAAC;MAAA,CAAC;MAAA;MAAA;QAAAb,cAAA,GAAAY,CAAA;MAAA;MAAAZ,cAAA,GAAAE,CAAA;MACjF,OAAO,MAAMM,QAAQ,CAACM,IAAI,EAAE;IAC9B,CAAC,CAAC,OAAOC,KAAU,EAAE;MAAA;MAAAf,cAAA,GAAAE,CAAA;MACnB;MACAc,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MAAC;MAAAf,cAAA,GAAAE,CAAA;MACtD,MAAMa,KAAK;IACb;EACF;EAEA;EACA,aAAakD,oBAAoBA,CAC/B5D,MAAc,EACd6D,SAAiB,EACjBC,OAAe;IAAA;IAAAnE,cAAA,GAAAO,CAAA;IAAAP,cAAA,GAAAE,CAAA;IAEf,IAAI;MACF,MAAMM,QAAQ;MAAA;MAAA,CAAAR,cAAA,GAAAE,CAAA,QAAG,MAAMO,KAAK,CAC1B,GAAG,IAAI,CAACC,QAAQ,IAAIL,MAAM,mBAAmB6D,SAAS,QAAQC,OAAO,EAAE,CACxE;MAAC;MAAAnE,cAAA,GAAAE,CAAA;MACF,IAAI,CAACM,QAAQ,CAACG,EAAE,EAAE;QAAA;QAAAX,cAAA,GAAAY,CAAA;QAAAZ,cAAA,GAAAE,CAAA;QAAA,MAAM,IAAIW,KAAK,CAAC,yCAAyC,CAAC;MAAA,CAAC;MAAA;MAAA;QAAAb,cAAA,GAAAY,CAAA;MAAA;MAAAZ,cAAA,GAAAE,CAAA;MAC7E,OAAO,MAAMM,QAAQ,CAACM,IAAI,EAAE;IAC9B,CAAC,CAAC,OAAOC,KAAU,EAAE;MAAA;MAAAf,cAAA,GAAAE,CAAA;MACnB;MACAc,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;MAAC;MAAAf,cAAA,GAAAE,CAAA;MACvD,OAAO,IAAI,CAACkE,wBAAwB,EAAE;IACxC;EACF;EAEA;EACA,aAAaC,UAAUA,CACrBC,OAAe,EACfhB,OAAkD;IAAA;IAAAtD,cAAA,GAAAO,CAAA;IAAAP,cAAA,GAAAE,CAAA;IAElD,IAAI;MACF,MAAM+C,MAAM;MAAA;MAAA,CAAAjD,cAAA,GAAAE,CAAA,QAAG,IAAIgD,eAAe,EAAE;MAAC;MAAAlD,cAAA,GAAAE,CAAA;MACrC,IAAIoD,OAAO,EAAEiB,IAAI,EAAE;QAAA;QAAAvE,cAAA,GAAAY,CAAA;QAAAZ,cAAA,GAAAE,CAAA;QAAA+C,MAAM,CAACY,MAAM,CAAC,MAAM,EAAEP,OAAO,CAACiB,IAAI,CAACC,IAAI,CAAC,GAAG,CAAC,CAAC;MAAA,CAAC;MAAA;MAAA;QAAAxE,cAAA,GAAAY,CAAA;MAAA;MAAAZ,cAAA,GAAAE,CAAA;MACjE,IAAIoD,OAAO,EAAEmB,UAAU,EAAE;QAAA;QAAAzE,cAAA,GAAAY,CAAA;QAAAZ,cAAA,GAAAE,CAAA;QAAA+C,MAAM,CAACY,MAAM,CAAC,YAAY,EAAEP,OAAO,CAACmB,UAAU,CAAC;MAAA,CAAC;MAAA;MAAA;QAAAzE,cAAA,GAAAY,CAAA;MAAA;MAEzE,MAAMJ,QAAQ;MAAA;MAAA,CAAAR,cAAA,GAAAE,CAAA,QAAG,MAAMO,KAAK,CAAC,GAAG,IAAI,CAACC,QAAQ,YAAYuC,MAAM,EAAE,CAAC;MAAC;MAAAjD,cAAA,GAAAE,CAAA;MACnE,IAAI,CAACM,QAAQ,CAACG,EAAE,EAAE;QAAA;QAAAX,cAAA,GAAAY,CAAA;QAAAZ,cAAA,GAAAE,CAAA;QAAA,MAAM,IAAIW,KAAK,CAAC,6CAA6C,CAAC;MAAA,CAAC;MAAA;MAAA;QAAAb,cAAA,GAAAY,CAAA;MAAA;MAAAZ,cAAA,GAAAE,CAAA;MACjF,OAAO,MAAMM,QAAQ,CAACM,IAAI,EAAE;IAC9B,CAAC,CAAC,OAAOC,KAAU,EAAE;MAAA;MAAAf,cAAA,GAAAE,CAAA;MACnB;MACAc,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MAAC;MAAAf,cAAA,GAAAE,CAAA;MACtD,OAAO,IAAI,CAACwE,cAAc,EAAE;IAC9B;EACF;EAEA;EACA,aAAaC,YAAYA,CAACtE,MAAc;IAAA;IAAAL,cAAA,GAAAO,CAAA;IAAAP,cAAA,GAAAE,CAAA;IACtC,IAAI;MACF,MAAMM,QAAQ;MAAA;MAAA,CAAAR,cAAA,GAAAE,CAAA,QAAG,MAAMO,KAAK,CAAC,GAAG,IAAI,CAACC,QAAQ,IAAIL,MAAM,aAAa,CAAC;MAAC;MAAAL,cAAA,GAAAE,CAAA;MACtE,IAAI,CAACM,QAAQ,CAACG,EAAE,EAAE;QAAA;QAAAX,cAAA,GAAAY,CAAA;QAAAZ,cAAA,GAAAE,CAAA;QAAA,MAAM,IAAIW,KAAK,CAAC,mDAAmD,CAAC;MAAA,CAAC;MAAA;MAAA;QAAAb,cAAA,GAAAY,CAAA;MAAA;MAAAZ,cAAA,GAAAE,CAAA;MACvF,OAAO,MAAMM,QAAQ,CAACM,IAAI,EAAE;IAC9B,CAAC,CAAC,OAAOC,KAAU,EAAE;MAAA;MAAAf,cAAA,GAAAE,CAAA;MACnB;MACAc,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAAC;MAAAf,cAAA,GAAAE,CAAA;MAC/C,OAAO,IAAI,CAAC0E,gBAAgB,EAAE;IAChC;EACF;EAEA;EACA,aAAaC,kBAAkBA,CAC7BxE,MAAc,EACdyE,MAAoC;IAAA;IAAA9E,cAAA,GAAAO,CAAA;IAAAP,cAAA,GAAAE,CAAA;IAEpC,IAAI;MACF,MAAMM,QAAQ;MAAA;MAAA,CAAAR,cAAA,GAAAE,CAAA,QAAG,MAAMO,KAAK,CAAC,GAAG,IAAI,CAACC,QAAQ,IAAIL,MAAM,WAAWyE,MAAM,EAAE,CAAC;MAAC;MAAA9E,cAAA,GAAAE,CAAA;MAC5E,IAAI,CAACM,QAAQ,CAACG,EAAE,EAAE;QAAA;QAAAX,cAAA,GAAAY,CAAA;QAAAZ,cAAA,GAAAE,CAAA;QAAA,MAAM,IAAIW,KAAK,CAAC,8CAA8C,CAAC;MAAA,CAAC;MAAA;MAAA;QAAAb,cAAA,GAAAY,CAAA;MAAA;MAAAZ,cAAA,GAAAE,CAAA;MAClF,OAAO,MAAMM,QAAQ,CAACM,IAAI,EAAE;IAC9B,CAAC,CAAC,OAAOC,KAAU,EAAE;MAAA;MAAAf,cAAA,GAAAE,CAAA;MACnB;MACAc,OAAO,CAACD,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;MAAC;MAAAf,cAAA,GAAAE,CAAA;MAC1D,OAAO,IAAI,CAAC6E,sBAAsB,CAACD,MAAM,CAAC;IAC5C;EACF;EAEA;EACA,aAAaE,oBAAoBA,CAAC3E,MAAc;IAAA;IAAAL,cAAA,GAAAO,CAAA;IAAAP,cAAA,GAAAE,CAAA;IAC9C,IAAI;MACF,MAAMM,QAAQ;MAAA;MAAA,CAAAR,cAAA,GAAAE,CAAA,SAAG,MAAMO,KAAK,CAAC,GAAG,IAAI,CAACC,QAAQ,IAAIL,MAAM,WAAW,CAAC;MAAC;MAAAL,cAAA,GAAAE,CAAA;MACpE,IAAI,CAACM,QAAQ,CAACG,EAAE,EAAE;QAAA;QAAAX,cAAA,GAAAY,CAAA;QAAAZ,cAAA,GAAAE,CAAA;QAAA,MAAM,IAAIW,KAAK,CAAC,6CAA6C,CAAC;MAAA,CAAC;MAAA;MAAA;QAAAb,cAAA,GAAAY,CAAA;MAAA;MAAAZ,cAAA,GAAAE,CAAA;MACjF,OAAO,MAAMM,QAAQ,CAACM,IAAI,EAAE;IAC9B,CAAC,CAAC,OAAOC,KAAU,EAAE;MAAA;MAAAf,cAAA,GAAAE,CAAA;MACnB;MACAc,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;MAAC;MAAAf,cAAA,GAAAE,CAAA;MACvD,OAAO,IAAI,CAAC+E,wBAAwB,EAAE;IACxC;EACF;EAEA;EACA,OAAOC,uBAAuBA,CAACvD,IAAmB;IAAA;IAAA3B,cAAA,GAAAO,CAAA;IAChD,MAAM;MAAE0B,aAAa;MAAEI,WAAW;MAAE8C,UAAU;MAAEC;IAAW,CAAE;IAAA;IAAA,CAAApF,cAAA,GAAAE,CAAA,SAAGyB,IAAI;IAEpE;IACA,MAAM0D,YAAY;IAAA;IAAA,CAAArF,cAAA,GAAAE,CAAA,SAAGoF,IAAI,CAACC,GAAG,CAACtD,aAAa,GAAGkD,UAAU,CAACK,aAAa,EAAE,GAAG,CAAC;IAC5E,MAAMC,YAAY;IAAA;IAAA,CAAAzF,cAAA,GAAAE,CAAA,SAAGmF,YAAY,IAAI,GAAG;IAAA;IAAA,CAAArF,cAAA,GAAAY,CAAA,WAAG,GAAG;IAAA;IAAA,CAAAZ,cAAA,GAAAY,CAAA,WAAG0E,IAAI,CAACI,GAAG,CAAC,CAAC,EAAE,GAAG,GAAG,CAACL,YAAY,GAAG,GAAG,IAAI,GAAG,CAAC;IAE9F;IACA,MAAMM,YAAY;IAAA;IAAA,CAAA3F,cAAA,GAAAE,CAAA,SAAGmC,WAAW,CAACE,QAAQ,GAAG4C,UAAU,CAACS,YAAY,CAACrD,QAAQ;IAC5E,MAAMsD,SAAS;IAAA;IAAA,CAAA7F,cAAA,GAAAE,CAAA,SAAGmC,WAAW,CAACI,aAAa,GAAG0C,UAAU,CAACS,YAAY,CAACnD,aAAa;IACnF,MAAMqD,QAAQ;IAAA;IAAA,CAAA9F,cAAA,GAAAE,CAAA,SAAGmC,WAAW,CAACK,IAAI,GAAGyC,UAAU,CAACS,YAAY,CAAClD,IAAI;IAEhE,MAAMqD,UAAU;IAAA;IAAA,CAAA/F,cAAA,GAAAE,CAAA,SACd,CAACoF,IAAI,CAACC,GAAG,CAACI,YAAY,EAAE,GAAG,CAAC,GAAG,GAAG,GAChCL,IAAI,CAACC,GAAG,CAACM,SAAS,EAAE,GAAG,CAAC,GAAG,GAAG,GAC9BP,IAAI,CAACC,GAAG,CAACO,QAAQ,EAAE,GAAG,CAAC,GAAG,GAAG,IAC/B,GAAG;IAEL;IACA,MAAME,cAAc;IAAA;IAAA,CAAAhG,cAAA,GAAAE,CAAA,SAAGoF,IAAI,CAACC,GAAG,CAACH,WAAW,GAAGD,UAAU,CAACc,SAAS,EAAE,CAAC,CAAC,GAAG,GAAG;IAAC;IAAAjG,cAAA,GAAAE,CAAA;IAE7E,OAAOoF,IAAI,CAACY,KAAK,CAACT,YAAY,GAAG,GAAG,GAAGM,UAAU,GAAG,GAAG,GAAGC,cAAc,GAAG,GAAG,CAAC;EACjF;EAEA;EACQ,OAAOlD,6BAA6BA,CAACD,OAM5C;IAAA;IAAA7C,cAAA,GAAAO,CAAA;IACC;IACA,MAAM4F,GAAG;IAAA;IAAA,CAAAnG,cAAA,GAAAE,CAAA,SAAG,EAAE,GAAG2C,OAAO,CAACuD,MAAM,GAAG,IAAI,GAAGvD,OAAO,CAACwD,MAAM,GAAG,CAAC,GAAGxD,OAAO,CAACyD,GAAG,GAAG,CAAC,EAAC,CAAC;IAE/E;IACA,MAAMC,eAAe;IAAA;IAAA,CAAAvG,cAAA,GAAAE,CAAA,SAA2B;MAC9CsG,SAAS,EAAE,GAAG;MACdC,KAAK,EAAE,KAAK;MACZC,QAAQ,EAAE,IAAI;MACdC,MAAM,EAAE,KAAK;MACbC,WAAW,EAAE;KACd;IAED,MAAMC,cAAc;IAAA;IAAA,CAAA7G,cAAA,GAAAE,CAAA;IAAG;IAAA,CAAAF,cAAA,GAAAY,CAAA,WAAA2F,eAAe,CAAC1D,OAAO,CAACiE,aAAa,CAAC;IAAA;IAAA,CAAA9G,cAAA,GAAAY,CAAA,WAAI,GAAG;IACpE,IAAI4E,aAAa;IAAA;IAAA,CAAAxF,cAAA,GAAAE,CAAA,SAAGiG,GAAG,GAAGU,cAAc;IAExC;IAAA;IAAA7G,cAAA,GAAAE,CAAA;IACA,IAAI2C,OAAO,CAACkE,IAAI,KAAK,aAAa,EAAE;MAAA;MAAA/G,cAAA,GAAAY,CAAA;MAAAZ,cAAA,GAAAE,CAAA;MAClCsF,aAAa,IAAI,GAAG,CAAC,CAAC;IACxB,CAAC,MAAM;MAAA;MAAAxF,cAAA,GAAAY,CAAA;MAAAZ,cAAA,GAAAE,CAAA;MAAA,IAAI2C,OAAO,CAACkE,IAAI,KAAK,aAAa,EAAE;QAAA;QAAA/G,cAAA,GAAAY,CAAA;QAAAZ,cAAA,GAAAE,CAAA;QACzCsF,aAAa,IAAI,GAAG,CAAC,CAAC;MACxB,CAAC;MAAA;MAAA;QAAAxF,cAAA,GAAAY,CAAA;MAAA;IAAD;IAEA;IACA,MAAM2B,QAAQ;IAAA;IAAA,CAAAvC,cAAA,GAAAE,CAAA,SAAIsF,aAAa,GAAG,GAAG,GAAI,CAAC,EAAC,CAAC;IAC5C,MAAM/C,aAAa;IAAA;IAAA,CAAAzC,cAAA,GAAAE,CAAA,SAAIsF,aAAa,GAAG,GAAG,GAAI,CAAC,EAAC,CAAC;IACjD,MAAM9C,IAAI;IAAA;IAAA,CAAA1C,cAAA,GAAAE,CAAA,SAAIsF,aAAa,GAAG,GAAG,GAAI,CAAC,EAAC,CAAC;IAAA;IAAAxF,cAAA,GAAAE,CAAA;IAExC,OAAO;MACLsF,aAAa,EAAEF,IAAI,CAACY,KAAK,CAACV,aAAa,CAAC;MACxCI,YAAY,EAAE;QACZrD,QAAQ,EAAE+C,IAAI,CAACY,KAAK,CAAC3D,QAAQ,CAAC;QAC9BE,aAAa,EAAE6C,IAAI,CAACY,KAAK,CAACzD,aAAa,CAAC;QACxCC,IAAI,EAAE4C,IAAI,CAACY,KAAK,CAACxD,IAAI;OACtB;MACDuD,SAAS,EAAEpD,OAAO,CAACuD,MAAM,GAAG,EAAE,CAAE;KACjC;EACH;EAEA;EACQ,OAAOnF,oBAAoBA,CAACZ,MAAc,EAAEC,IAAY;IAAA;IAAAN,cAAA,GAAAO,CAAA;IAAAP,cAAA,GAAAE,CAAA;IAC9D,OAAO;MACLG,MAAM;MACNC,IAAI;MACJ0B,KAAK,EAAE,CACL;QACEgF,IAAI,EAAE,WAAW;QACjBC,IAAI,EAAE,0BAA0B;QAChCC,SAAS,EAAE,GAAG5G,IAAI,YAAY;QAC9B6G,KAAK,EAAE,CACL;UACEF,IAAI,EAAE,kBAAkB;UACxBG,QAAQ,EAAE,EAAE;UACZC,IAAI,EAAE,GAAG;UACT1E,QAAQ,EAAE,GAAG;UACbH,MAAM,EAAE;YAAED,QAAQ,EAAE,GAAG;YAAEE,aAAa,EAAE,EAAE;YAAEC,IAAI,EAAE;UAAG;SACtD,EACD;UACEuE,IAAI,EAAE,QAAQ;UACdG,QAAQ,EAAE,GAAG;UACbC,IAAI,EAAE,GAAG;UACT1E,QAAQ,EAAE,GAAG;UACbH,MAAM,EAAE;YAAED,QAAQ,EAAE,GAAG;YAAEE,aAAa,EAAE,EAAE;YAAEC,IAAI,EAAE;UAAG;SACtD,CACF;QACDT,aAAa,EAAE,GAAG;QAClBO,MAAM,EAAE;UAAED,QAAQ,EAAE,GAAG;UAAEE,aAAa,EAAE,EAAE;UAAEC,IAAI,EAAE;QAAG;OACtD,CACF;MACDT,aAAa,EAAE,IAAI;MACnBI,WAAW,EAAE;QAAEE,QAAQ,EAAE,EAAE;QAAEE,aAAa,EAAE,GAAG;QAAEC,IAAI,EAAE;MAAE,CAAE;MAC3D0C,WAAW,EAAE,IAAI;MACjBD,UAAU,EAAE;QACVK,aAAa,EAAE,IAAI;QACnBI,YAAY,EAAE;UAAErD,QAAQ,EAAE,GAAG;UAAEE,aAAa,EAAE,GAAG;UAAEC,IAAI,EAAE;QAAE,CAAE;QAC7DuD,SAAS,EAAE;;KAEd;EACH;EAEQ,OAAOnC,wBAAwBA,CAACd,KAAa;IAAA;IAAAhD,cAAA,GAAAO,CAAA;IACnD,MAAM4G,KAAK;IAAA;IAAA,CAAAnH,cAAA,GAAAE,CAAA,SAAG,CACZ;MACE+G,IAAI,EAAE,cAAc;MACpBK,KAAK,EAAE,KAAK;MACZF,QAAQ,EAAE,GAAG;MACbC,IAAI,EAAE,GAAY;MAClB1E,QAAQ,EAAE,EAAE;MACZH,MAAM,EAAE;QAAED,QAAQ,EAAE,GAAG;QAAEE,aAAa,EAAE,EAAE;QAAEC,IAAI,EAAE;MAAG;KACtD,EACD;MACEuE,IAAI,EAAE,iBAAiB;MACvBG,QAAQ,EAAE,GAAG;MACbC,IAAI,EAAE,GAAY;MAClB1E,QAAQ,EAAE,GAAG;MACbH,MAAM,EAAE;QAAED,QAAQ,EAAE,EAAE;QAAEE,aAAa,EAAE,CAAC;QAAEC,IAAI,EAAE;MAAG;KACpD,EACD;MACEuE,IAAI,EAAE,aAAa;MACnBG,QAAQ,EAAE,GAAG;MACbC,IAAI,EAAE,GAAY;MAClB1E,QAAQ,EAAE,GAAG;MACbH,MAAM,EAAE;QAAED,QAAQ,EAAE,GAAG;QAAEE,aAAa,EAAE,EAAE;QAAEC,IAAI,EAAE;MAAG;KACtD,CACF;IAAC;IAAA1C,cAAA,GAAAE,CAAA;IAEF,OAAOiH,KAAK,CAACI,MAAM,CAACC,IAAI,IAAI;MAAA;MAAAxH,cAAA,GAAAO,CAAA;MAAAP,cAAA,GAAAE,CAAA;MAAA,OAAAsH,IAAI,CAACP,IAAI,CAACQ,WAAW,EAAE,CAACC,QAAQ,CAAC1E,KAAK,CAACyE,WAAW,EAAE,CAAC;IAAD,CAAC,CAAC;EACpF;EAEQ,OAAOrD,wBAAwBA,CAAA;IAAA;IAAApE,cAAA,GAAAO,CAAA;IACrC,MAAMoH,KAAK;IAAA;IAAA,CAAA3H,cAAA,GAAAE,CAAA,SAAG,IAAI0H,IAAI,EAAE,CAACC,WAAW,EAAE,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAAC;IAAA9H,cAAA,GAAAE,CAAA;IACrD,OAAO;MACLI,IAAI;MAAE;MAAA,CAAAN,cAAA,GAAAY,CAAA,WAAA+G,KAAK;MAAA;MAAA,CAAA3H,cAAA,GAAAY,CAAA,WAAI,EAAE;MACjBmH,cAAc,EAAE,CAAC,GAAG;MACpBC,YAAY,EAAE;QACZzF,QAAQ,EAAE,EAAE;QACZE,aAAa,EAAE,EAAE;QACjBC,IAAI,EAAE;OACP;MACDuF,eAAe,EAAE,EAAE;MACnBC,cAAc,EAAE,EAAE;MAClBC,eAAe,EAAE,CACf,oCAAoC,EACpC,2CAA2C,EAC3C,qDAAqD;KAExD;EACH;EAEQ,OAAOzD,cAAcA,CAAA;IAAA;IAAA1E,cAAA,GAAAO,CAAA;IAAAP,cAAA,GAAAE,CAAA;IAC3B,OAAO,CACL;MACE2B,EAAE,EAAE,GAAG;MACPoF,IAAI,EAAE,8BAA8B;MACpCmB,WAAW,EAAE,iCAAiC;MAC9CC,WAAW,EAAE,EAAE;MACfC,YAAY,EAAE,CAAC,iBAAiB,EAAE,oBAAoB,EAAE,8BAA8B,CAAC;MACvFC,QAAQ,EAAE,CAAC;MACXC,QAAQ,EAAE,EAAE;MACZC,QAAQ,EAAE,EAAE;MACZhE,UAAU,EAAE,MAAM;MAClBF,IAAI,EAAE,CAAC,SAAS,EAAE,YAAY,EAAE,OAAO,CAAC;MACxCmE,mBAAmB,EAAE;QACnB/F,QAAQ,EAAE,GAAG;QACbH,MAAM,EAAE;UAAED,QAAQ,EAAE,EAAE;UAAEE,aAAa,EAAE,EAAE;UAAEC,IAAI,EAAE;QAAC;OACnD;MACDiG,SAAS,EAAE,cAAc;MACzBC,QAAQ,EAAE;KACX,CACF;EACH;EAEQ,OAAOhE,gBAAgBA,CAAA;IAAA;IAAA5E,cAAA,GAAAO,CAAA;IAAAP,cAAA,GAAAE,CAAA;IAC7B,OAAO,CACL;MACE2B,EAAE,EAAE,GAAG;MACPoF,IAAI,EAAE,kCAAkC;MACxCmB,WAAW,EAAE,iDAAiD;MAC9DS,QAAQ,EAAE,CAAC;MACXC,cAAc,EAAE,IAAI;MACpBC,YAAY,EAAE;QAAExG,QAAQ,EAAE,GAAG;QAAEE,aAAa,EAAE,GAAG;QAAEC,IAAI,EAAE;MAAE,CAAE;MAC7DV,KAAK,EAAE,EAAE;MACT2G,SAAS,EAAE,cAAc;MACzBC,QAAQ,EAAE;KACX,CACF;EACH;EAEQ,OAAO7D,sBAAsBA,CAACD,MAAoC;IAAA;IAAA9E,cAAA,GAAAO,CAAA;IAAAP,cAAA,GAAAE,CAAA;IACxE,OAAO;MACL4E,MAAM;MACNkE,eAAe,EAAE,IAAI;MACrBC,aAAa,EAAE;QAAE1G,QAAQ,EAAE,EAAE;QAAEE,aAAa,EAAE,GAAG;QAAEC,IAAI,EAAE;MAAE,CAAE;MAC7DwG,gBAAgB,EAAE,IAAI;MACtBC,WAAW,EAAE,EAAE;MACfC,YAAY,EAAE,CAAC,uBAAuB,EAAE,mCAAmC,CAAC;MAC5EC,QAAQ,EAAE,CAAC,uCAAuC;KACnD;EACH;EAEQ,OAAOpE,wBAAwBA,CAAA;IAAA;IAAAjF,cAAA,GAAAO,CAAA;IAAAP,cAAA,GAAAE,CAAA;IACrC,OAAO,CACL;MACE8G,IAAI,EAAE,aAAa;MACnBsC,KAAK,EAAE,8BAA8B;MACrClB,WAAW,EAAE,mEAAmE;MAChFzG,IAAI,EAAE;QAAE4H,MAAM,EAAE,CAAC;QAAEC,MAAM,EAAE;MAAG,CAAE;MAChCC,cAAc,EAAE,KAAK;MACrBC,QAAQ,EAAE;KACX,EACD;MACE1C,IAAI,EAAE,SAAS;MACfsC,KAAK,EAAE,0BAA0B;MACjClB,WAAW,EAAE,sEAAsE;MACnFzG,IAAI,EAAE;QAAEgI,aAAa,EAAE,IAAI;QAAEH,MAAM,EAAE,IAAI;QAAEI,OAAO,EAAE;MAAG,CAAE;MACzDH,cAAc,EAAE,IAAI;MACpBC,QAAQ,EAAE;KACX,CACF;EACH;;;;AAvfFG,OAAA,CAAA1J,gBAAA,GAAAA,gBAAA;AAwfC;AAAAH,cAAA,GAAAE,CAAA;AAvfyBqD,MAAA,CAAAuG,cAAA,CAAA3J,gBAAA;;;;SAAW","ignoreList":[]}