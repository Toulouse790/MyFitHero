4de246e75198c7b586a25981ec1b4095
"use strict";

/* istanbul ignore next */
function cov_1k450f06k7() {
  var path = "/workspaces/MyFitHero/src/features/recovery/services/recovery.service.ts";
  var hash = "09d14ffff6d3f01ac621f8ad98fc655b492f6366";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/MyFitHero/src/features/recovery/services/recovery.service.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 33
        }
      },
      "2": {
        start: {
          line: 9,
          column: 8
        },
        end: {
          line: 19,
          column: 9
        }
      },
      "3": {
        start: {
          line: 10,
          column: 29
        },
        end: {
          line: 10,
          column: 77
        }
      },
      "4": {
        start: {
          line: 11,
          column: 12
        },
        end: {
          line: 12,
          column: 76
        }
      },
      "5": {
        start: {
          line: 12,
          column: 16
        },
        end: {
          line: 12,
          column: 76
        }
      },
      "6": {
        start: {
          line: 13,
          column: 12
        },
        end: {
          line: 13,
          column: 41
        }
      },
      "7": {
        start: {
          line: 18,
          column: 12
        },
        end: {
          line: 18,
          column: 52
        }
      },
      "8": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 34,
          column: 9
        }
      },
      "9": {
        start: {
          line: 26,
          column: 29
        },
        end: {
          line: 26,
          column: 78
        }
      },
      "10": {
        start: {
          line: 27,
          column: 12
        },
        end: {
          line: 28,
          column: 80
        }
      },
      "11": {
        start: {
          line: 28,
          column: 16
        },
        end: {
          line: 28,
          column: 80
        }
      },
      "12": {
        start: {
          line: 29,
          column: 12
        },
        end: {
          line: 29,
          column: 41
        }
      },
      "13": {
        start: {
          line: 33,
          column: 12
        },
        end: {
          line: 33,
          column: 47
        }
      },
      "14": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 54,
          column: 9
        }
      },
      "15": {
        start: {
          line: 41,
          column: 29
        },
        end: {
          line: 45,
          column: 14
        }
      },
      "16": {
        start: {
          line: 46,
          column: 12
        },
        end: {
          line: 47,
          column: 65
        }
      },
      "17": {
        start: {
          line: 47,
          column: 16
        },
        end: {
          line: 47,
          column: 65
        }
      },
      "18": {
        start: {
          line: 48,
          column: 12
        },
        end: {
          line: 48,
          column: 41
        }
      },
      "19": {
        start: {
          line: 53,
          column: 12
        },
        end: {
          line: 53,
          column: 66
        }
      },
      "20": {
        start: {
          line: 60,
          column: 8
        },
        end: {
          line: 72,
          column: 9
        }
      },
      "21": {
        start: {
          line: 61,
          column: 29
        },
        end: {
          line: 65,
          column: 14
        }
      },
      "22": {
        start: {
          line: 66,
          column: 12
        },
        end: {
          line: 67,
          column: 67
        }
      },
      "23": {
        start: {
          line: 67,
          column: 16
        },
        end: {
          line: 67,
          column: 67
        }
      },
      "24": {
        start: {
          line: 78,
          column: 8
        },
        end: {
          line: 87,
          column: 9
        }
      },
      "25": {
        start: {
          line: 79,
          column: 29
        },
        end: {
          line: 79,
          column: 86
        }
      },
      "26": {
        start: {
          line: 80,
          column: 12
        },
        end: {
          line: 81,
          column: 86
        }
      },
      "27": {
        start: {
          line: 81,
          column: 16
        },
        end: {
          line: 81,
          column: 86
        }
      },
      "28": {
        start: {
          line: 82,
          column: 12
        },
        end: {
          line: 82,
          column: 41
        }
      },
      "29": {
        start: {
          line: 86,
          column: 12
        },
        end: {
          line: 86,
          column: 60
        }
      },
      "30": {
        start: {
          line: 93,
          column: 135
        },
        end: {
          line: 93,
          column: 142
        }
      },
      "31": {
        start: {
          line: 95,
          column: 27
        },
        end: {
          line: 95,
          column: 38
        }
      },
      "32": {
        start: {
          line: 96,
          column: 24
        },
        end: {
          line: 96,
          column: 80
        }
      },
      "33": {
        start: {
          line: 97,
          column: 25
        },
        end: {
          line: 97,
          column: 34
        }
      },
      "34": {
        start: {
          line: 98,
          column: 28
        },
        end: {
          line: 98,
          column: 64
        }
      },
      "35": {
        start: {
          line: 99,
          column: 31
        },
        end: {
          line: 99,
          column: 69
        }
      },
      "36": {
        start: {
          line: 100,
          column: 28
        },
        end: {
          line: 100,
          column: 45
        }
      },
      "37": {
        start: {
          line: 101,
          column: 8
        },
        end: {
          line: 106,
          column: 31
        }
      },
      "38": {
        start: {
          line: 112,
          column: 8
        },
        end: {
          line: 121,
          column: 9
        }
      },
      "39": {
        start: {
          line: 113,
          column: 29
        },
        end: {
          line: 113,
          column: 89
        }
      },
      "40": {
        start: {
          line: 114,
          column: 12
        },
        end: {
          line: 115,
          column: 81
        }
      },
      "41": {
        start: {
          line: 115,
          column: 16
        },
        end: {
          line: 115,
          column: 81
        }
      },
      "42": {
        start: {
          line: 116,
          column: 12
        },
        end: {
          line: 116,
          column: 41
        }
      },
      "43": {
        start: {
          line: 120,
          column: 12
        },
        end: {
          line: 120,
          column: 47
        }
      },
      "44": {
        start: {
          line: 124,
          column: 21
        },
        end: {
          line: 124,
          column: 23
        }
      },
      "45": {
        start: {
          line: 125,
          column: 22
        },
        end: {
          line: 125,
          column: 32
        }
      },
      "46": {
        start: {
          line: 126,
          column: 8
        },
        end: {
          line: 137,
          column: 9
        }
      },
      "47": {
        start: {
          line: 126,
          column: 21
        },
        end: {
          line: 126,
          column: 29
        }
      },
      "48": {
        start: {
          line: 127,
          column: 25
        },
        end: {
          line: 127,
          column: 40
        }
      },
      "49": {
        start: {
          line: 128,
          column: 12
        },
        end: {
          line: 128,
          column: 45
        }
      },
      "50": {
        start: {
          line: 129,
          column: 12
        },
        end: {
          line: 136,
          column: 15
        }
      },
      "51": {
        start: {
          line: 138,
          column: 8
        },
        end: {
          line: 138,
          column: 20
        }
      },
      "52": {
        start: {
          line: 147,
          column: 8
        },
        end: {
          line: 155,
          column: 9
        }
      },
      "53": {
        start: {
          line: 148,
          column: 29
        },
        end: {
          line: 148,
          column: 82
        }
      },
      "54": {
        start: {
          line: 149,
          column: 12
        },
        end: {
          line: 150,
          column: 79
        }
      },
      "55": {
        start: {
          line: 150,
          column: 16
        },
        end: {
          line: 150,
          column: 79
        }
      },
      "56": {
        start: {
          line: 151,
          column: 12
        },
        end: {
          line: 151,
          column: 41
        }
      },
      "57": {
        start: {
          line: 154,
          column: 12
        },
        end: {
          line: 154,
          column: 44
        }
      },
      "58": {
        start: {
          line: 161,
          column: 8
        },
        end: {
          line: 169,
          column: 9
        }
      },
      "59": {
        start: {
          line: 162,
          column: 29
        },
        end: {
          line: 162,
          column: 95
        }
      },
      "60": {
        start: {
          line: 163,
          column: 12
        },
        end: {
          line: 164,
          column: 82
        }
      },
      "61": {
        start: {
          line: 164,
          column: 16
        },
        end: {
          line: 164,
          column: 82
        }
      },
      "62": {
        start: {
          line: 165,
          column: 12
        },
        end: {
          line: 165,
          column: 41
        }
      },
      "63": {
        start: {
          line: 168,
          column: 12
        },
        end: {
          line: 168,
          column: 49
        }
      },
      "64": {
        start: {
          line: 175,
          column: 8
        },
        end: {
          line: 183,
          column: 9
        }
      },
      "65": {
        start: {
          line: 176,
          column: 29
        },
        end: {
          line: 176,
          column: 79
        }
      },
      "66": {
        start: {
          line: 177,
          column: 12
        },
        end: {
          line: 178,
          column: 79
        }
      },
      "67": {
        start: {
          line: 178,
          column: 16
        },
        end: {
          line: 178,
          column: 79
        }
      },
      "68": {
        start: {
          line: 179,
          column: 12
        },
        end: {
          line: 179,
          column: 41
        }
      },
      "69": {
        start: {
          line: 182,
          column: 12
        },
        end: {
          line: 182,
          column: 42
        }
      },
      "70": {
        start: {
          line: 189,
          column: 8
        },
        end: {
          line: 197,
          column: 9
        }
      },
      "71": {
        start: {
          line: 190,
          column: 29
        },
        end: {
          line: 190,
          column: 87
        }
      },
      "72": {
        start: {
          line: 191,
          column: 12
        },
        end: {
          line: 192,
          column: 80
        }
      },
      "73": {
        start: {
          line: 192,
          column: 16
        },
        end: {
          line: 192,
          column: 80
        }
      },
      "74": {
        start: {
          line: 193,
          column: 12
        },
        end: {
          line: 193,
          column: 41
        }
      },
      "75": {
        start: {
          line: 196,
          column: 12
        },
        end: {
          line: 196,
          column: 49
        }
      },
      "76": {
        start: {
          line: 203,
          column: 8
        },
        end: {
          line: 215,
          column: 9
        }
      },
      "77": {
        start: {
          line: 204,
          column: 29
        },
        end: {
          line: 208,
          column: 14
        }
      },
      "78": {
        start: {
          line: 209,
          column: 12
        },
        end: {
          line: 210,
          column: 66
        }
      },
      "79": {
        start: {
          line: 210,
          column: 16
        },
        end: {
          line: 210,
          column: 66
        }
      },
      "80": {
        start: {
          line: 211,
          column: 12
        },
        end: {
          line: 211,
          column: 41
        }
      },
      "81": {
        start: {
          line: 214,
          column: 12
        },
        end: {
          line: 214,
          column: 52
        }
      },
      "82": {
        start: {
          line: 221,
          column: 8
        },
        end: {
          line: 237,
          column: 9
        }
      },
      "83": {
        start: {
          line: 222,
          column: 29
        },
        end: {
          line: 222,
          column: 83
        }
      },
      "84": {
        start: {
          line: 223,
          column: 12
        },
        end: {
          line: 224,
          column: 63
        }
      },
      "85": {
        start: {
          line: 224,
          column: 16
        },
        end: {
          line: 224,
          column: 63
        }
      },
      "86": {
        start: {
          line: 225,
          column: 12
        },
        end: {
          line: 225,
          column: 41
        }
      },
      "87": {
        start: {
          line: 228,
          column: 12
        },
        end: {
          line: 236,
          column: 14
        }
      },
      "88": {
        start: {
          line: 243,
          column: 8
        },
        end: {
          line: 251,
          column: 9
        }
      },
      "89": {
        start: {
          line: 244,
          column: 29
        },
        end: {
          line: 244,
          column: 83
        }
      },
      "90": {
        start: {
          line: 245,
          column: 12
        },
        end: {
          line: 246,
          column: 64
        }
      },
      "91": {
        start: {
          line: 246,
          column: 16
        },
        end: {
          line: 246,
          column: 64
        }
      },
      "92": {
        start: {
          line: 247,
          column: 12
        },
        end: {
          line: 247,
          column: 41
        }
      },
      "93": {
        start: {
          line: 250,
          column: 12
        },
        end: {
          line: 250,
          column: 48
        }
      },
      "94": {
        start: {
          line: 257,
          column: 8
        },
        end: {
          line: 265,
          column: 9
        }
      },
      "95": {
        start: {
          line: 258,
          column: 29
        },
        end: {
          line: 258,
          column: 99
        }
      },
      "96": {
        start: {
          line: 259,
          column: 12
        },
        end: {
          line: 260,
          column: 66
        }
      },
      "97": {
        start: {
          line: 260,
          column: 16
        },
        end: {
          line: 260,
          column: 66
        }
      },
      "98": {
        start: {
          line: 261,
          column: 12
        },
        end: {
          line: 261,
          column: 41
        }
      },
      "99": {
        start: {
          line: 264,
          column: 12
        },
        end: {
          line: 264,
          column: 60
        }
      },
      "100": {
        start: {
          line: 271,
          column: 8
        },
        end: {
          line: 302,
          column: 10
        }
      },
      "101": {
        start: {
          line: 305,
          column: 28
        },
        end: {
          line: 305,
          column: 30
        }
      },
      "102": {
        start: {
          line: 306,
          column: 25
        },
        end: {
          line: 306,
          column: 98
        }
      },
      "103": {
        start: {
          line: 307,
          column: 8
        },
        end: {
          line: 327,
          column: 9
        }
      },
      "104": {
        start: {
          line: 307,
          column: 21
        },
        end: {
          line: 307,
          column: 22
        }
      },
      "105": {
        start: {
          line: 308,
          column: 25
        },
        end: {
          line: 308,
          column: 35
        }
      },
      "106": {
        start: {
          line: 309,
          column: 12
        },
        end: {
          line: 309,
          column: 45
        }
      },
      "107": {
        start: {
          line: 310,
          column: 28
        },
        end: {
          line: 310,
          column: 72
        }
      },
      "108": {
        start: {
          line: 311,
          column: 30
        },
        end: {
          line: 311,
          column: 69
        }
      },
      "109": {
        start: {
          line: 312,
          column: 26
        },
        end: {
          line: 312,
          column: 92
        }
      },
      "110": {
        start: {
          line: 313,
          column: 12
        },
        end: {
          line: 326,
          column: 15
        }
      },
      "111": {
        start: {
          line: 328,
          column: 8
        },
        end: {
          line: 328,
          column: 27
        }
      },
      "112": {
        start: {
          line: 331,
          column: 8
        },
        end: {
          line: 353,
          column: 10
        }
      },
      "113": {
        start: {
          line: 356,
          column: 8
        },
        end: {
          line: 389,
          column: 10
        }
      },
      "114": {
        start: {
          line: 392,
          column: 24
        },
        end: {
          line: 423,
          column: 9
        }
      },
      "115": {
        start: {
          line: 424,
          column: 8
        },
        end: {
          line: 424,
          column: 58
        }
      },
      "116": {
        start: {
          line: 424,
          column: 37
        },
        end: {
          line: 424,
          column: 56
        }
      },
      "117": {
        start: {
          line: 427,
          column: 8
        },
        end: {
          line: 434,
          column: 10
        }
      },
      "118": {
        start: {
          line: 437,
          column: 8
        },
        end: {
          line: 449,
          column: 10
        }
      },
      "119": {
        start: {
          line: 452,
          column: 8
        },
        end: {
          line: 479,
          column: 10
        }
      },
      "120": {
        start: {
          line: 482,
          column: 0
        },
        end: {
          line: 482,
          column: 42
        }
      },
      "121": {
        start: {
          line: 483,
          column: 0
        },
        end: {
          line: 488,
          column: 3
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 8,
            column: 4
          },
          end: {
            line: 8,
            column: 5
          }
        },
        loc: {
          start: {
            line: 8,
            column: 43
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 8
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 24,
            column: 4
          },
          end: {
            line: 24,
            column: 5
          }
        },
        loc: {
          start: {
            line: 24,
            column: 44
          },
          end: {
            line: 35,
            column: 5
          }
        },
        line: 24
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 39,
            column: 4
          },
          end: {
            line: 39,
            column: 5
          }
        },
        loc: {
          start: {
            line: 39,
            column: 56
          },
          end: {
            line: 55,
            column: 5
          }
        },
        line: 39
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 59,
            column: 4
          },
          end: {
            line: 59,
            column: 5
          }
        },
        loc: {
          start: {
            line: 59,
            column: 55
          },
          end: {
            line: 73,
            column: 5
          }
        },
        line: 59
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 77,
            column: 4
          },
          end: {
            line: 77,
            column: 5
          }
        },
        loc: {
          start: {
            line: 77,
            column: 52
          },
          end: {
            line: 88,
            column: 5
          }
        },
        line: 77
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 92,
            column: 4
          },
          end: {
            line: 92,
            column: 5
          }
        },
        loc: {
          start: {
            line: 92,
            column: 43
          },
          end: {
            line: 107,
            column: 5
          }
        },
        line: 92
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 111,
            column: 4
          },
          end: {
            line: 111,
            column: 5
          }
        },
        loc: {
          start: {
            line: 111,
            column: 53
          },
          end: {
            line: 122,
            column: 5
          }
        },
        line: 111
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 123,
            column: 4
          },
          end: {
            line: 123,
            column: 5
          }
        },
        loc: {
          start: {
            line: 123,
            column: 34
          },
          end: {
            line: 139,
            column: 5
          }
        },
        line: 123
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 146,
            column: 4
          },
          end: {
            line: 146,
            column: 5
          }
        },
        loc: {
          start: {
            line: 146,
            column: 39
          },
          end: {
            line: 156,
            column: 5
          }
        },
        line: 146
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 160,
            column: 4
          },
          end: {
            line: 160,
            column: 5
          }
        },
        loc: {
          start: {
            line: 160,
            column: 58
          },
          end: {
            line: 170,
            column: 5
          }
        },
        line: 160
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 174,
            column: 4
          },
          end: {
            line: 174,
            column: 5
          }
        },
        loc: {
          start: {
            line: 174,
            column: 45
          },
          end: {
            line: 184,
            column: 5
          }
        },
        line: 174
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 188,
            column: 4
          },
          end: {
            line: 188,
            column: 5
          }
        },
        loc: {
          start: {
            line: 188,
            column: 44
          },
          end: {
            line: 198,
            column: 5
          }
        },
        line: 188
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 202,
            column: 4
          },
          end: {
            line: 202,
            column: 5
          }
        },
        loc: {
          start: {
            line: 202,
            column: 53
          },
          end: {
            line: 216,
            column: 5
          }
        },
        line: 202
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 220,
            column: 4
          },
          end: {
            line: 220,
            column: 5
          }
        },
        loc: {
          start: {
            line: 220,
            column: 44
          },
          end: {
            line: 238,
            column: 5
          }
        },
        line: 220
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 242,
            column: 4
          },
          end: {
            line: 242,
            column: 5
          }
        },
        loc: {
          start: {
            line: 242,
            column: 52
          },
          end: {
            line: 252,
            column: 5
          }
        },
        line: 242
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 256,
            column: 4
          },
          end: {
            line: 256,
            column: 5
          }
        },
        loc: {
          start: {
            line: 256,
            column: 56
          },
          end: {
            line: 266,
            column: 5
          }
        },
        line: 256
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 270,
            column: 4
          },
          end: {
            line: 270,
            column: 5
          }
        },
        loc: {
          start: {
            line: 270,
            column: 31
          },
          end: {
            line: 303,
            column: 5
          }
        },
        line: 270
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 304,
            column: 4
          },
          end: {
            line: 304,
            column: 5
          }
        },
        loc: {
          start: {
            line: 304,
            column: 40
          },
          end: {
            line: 329,
            column: 5
          }
        },
        line: 304
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 330,
            column: 4
          },
          end: {
            line: 330,
            column: 5
          }
        },
        loc: {
          start: {
            line: 330,
            column: 29
          },
          end: {
            line: 354,
            column: 5
          }
        },
        line: 330
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 355,
            column: 4
          },
          end: {
            line: 355,
            column: 5
          }
        },
        loc: {
          start: {
            line: 355,
            column: 36
          },
          end: {
            line: 390,
            column: 5
          }
        },
        line: 355
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 391,
            column: 4
          },
          end: {
            line: 391,
            column: 5
          }
        },
        loc: {
          start: {
            line: 391,
            column: 39
          },
          end: {
            line: 425,
            column: 5
          }
        },
        line: 391
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 424,
            column: 29
          },
          end: {
            line: 424,
            column: 30
          }
        },
        loc: {
          start: {
            line: 424,
            column: 37
          },
          end: {
            line: 424,
            column: 56
          }
        },
        line: 424
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 426,
            column: 4
          },
          end: {
            line: 426,
            column: 5
          }
        },
        loc: {
          start: {
            line: 426,
            column: 39
          },
          end: {
            line: 435,
            column: 5
          }
        },
        line: 426
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 436,
            column: 4
          },
          end: {
            line: 436,
            column: 5
          }
        },
        loc: {
          start: {
            line: 436,
            column: 34
          },
          end: {
            line: 450,
            column: 5
          }
        },
        line: 436
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 451,
            column: 4
          },
          end: {
            line: 451,
            column: 5
          }
        },
        loc: {
          start: {
            line: 451,
            column: 36
          },
          end: {
            line: 480,
            column: 5
          }
        },
        line: 451
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 11,
            column: 12
          },
          end: {
            line: 12,
            column: 76
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 11,
            column: 12
          },
          end: {
            line: 12,
            column: 76
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 11
      },
      "1": {
        loc: {
          start: {
            line: 27,
            column: 12
          },
          end: {
            line: 28,
            column: 80
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 27,
            column: 12
          },
          end: {
            line: 28,
            column: 80
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 27
      },
      "2": {
        loc: {
          start: {
            line: 46,
            column: 12
          },
          end: {
            line: 47,
            column: 65
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 46,
            column: 12
          },
          end: {
            line: 47,
            column: 65
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 46
      },
      "3": {
        loc: {
          start: {
            line: 66,
            column: 12
          },
          end: {
            line: 67,
            column: 67
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 66,
            column: 12
          },
          end: {
            line: 67,
            column: 67
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 66
      },
      "4": {
        loc: {
          start: {
            line: 80,
            column: 12
          },
          end: {
            line: 81,
            column: 86
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 80,
            column: 12
          },
          end: {
            line: 81,
            column: 86
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 80
      },
      "5": {
        loc: {
          start: {
            line: 93,
            column: 16
          },
          end: {
            line: 93,
            column: 32
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 93,
            column: 30
          },
          end: {
            line: 93,
            column: 32
          }
        }],
        line: 93
      },
      "6": {
        loc: {
          start: {
            line: 93,
            column: 34
          },
          end: {
            line: 93,
            column: 57
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 93,
            column: 55
          },
          end: {
            line: 93,
            column: 57
          }
        }],
        line: 93
      },
      "7": {
        loc: {
          start: {
            line: 93,
            column: 59
          },
          end: {
            line: 93,
            column: 73
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 93,
            column: 71
          },
          end: {
            line: 93,
            column: 73
          }
        }],
        line: 93
      },
      "8": {
        loc: {
          start: {
            line: 93,
            column: 75
          },
          end: {
            line: 93,
            column: 91
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 93,
            column: 90
          },
          end: {
            line: 93,
            column: 91
          }
        }],
        line: 93
      },
      "9": {
        loc: {
          start: {
            line: 93,
            column: 93
          },
          end: {
            line: 93,
            column: 111
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 93,
            column: 110
          },
          end: {
            line: 93,
            column: 111
          }
        }],
        line: 93
      },
      "10": {
        loc: {
          start: {
            line: 93,
            column: 113
          },
          end: {
            line: 93,
            column: 129
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 93,
            column: 128
          },
          end: {
            line: 93,
            column: 129
          }
        }],
        line: 93
      },
      "11": {
        loc: {
          start: {
            line: 111,
            column: 42
          },
          end: {
            line: 111,
            column: 51
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 111,
            column: 49
          },
          end: {
            line: 111,
            column: 51
          }
        }],
        line: 111
      },
      "12": {
        loc: {
          start: {
            line: 114,
            column: 12
          },
          end: {
            line: 115,
            column: 81
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 114,
            column: 12
          },
          end: {
            line: 115,
            column: 81
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 114
      },
      "13": {
        loc: {
          start: {
            line: 149,
            column: 12
          },
          end: {
            line: 150,
            column: 79
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 149,
            column: 12
          },
          end: {
            line: 150,
            column: 79
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 149
      },
      "14": {
        loc: {
          start: {
            line: 160,
            column: 48
          },
          end: {
            line: 160,
            column: 56
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 160,
            column: 55
          },
          end: {
            line: 160,
            column: 56
          }
        }],
        line: 160
      },
      "15": {
        loc: {
          start: {
            line: 163,
            column: 12
          },
          end: {
            line: 164,
            column: 82
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 163,
            column: 12
          },
          end: {
            line: 164,
            column: 82
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 163
      },
      "16": {
        loc: {
          start: {
            line: 177,
            column: 12
          },
          end: {
            line: 178,
            column: 79
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 177,
            column: 12
          },
          end: {
            line: 178,
            column: 79
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 177
      },
      "17": {
        loc: {
          start: {
            line: 191,
            column: 12
          },
          end: {
            line: 192,
            column: 80
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 191,
            column: 12
          },
          end: {
            line: 192,
            column: 80
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 191
      },
      "18": {
        loc: {
          start: {
            line: 209,
            column: 12
          },
          end: {
            line: 210,
            column: 66
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 209,
            column: 12
          },
          end: {
            line: 210,
            column: 66
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 209
      },
      "19": {
        loc: {
          start: {
            line: 223,
            column: 12
          },
          end: {
            line: 224,
            column: 63
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 223,
            column: 12
          },
          end: {
            line: 224,
            column: 63
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 223
      },
      "20": {
        loc: {
          start: {
            line: 245,
            column: 12
          },
          end: {
            line: 246,
            column: 64
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 245,
            column: 12
          },
          end: {
            line: 246,
            column: 64
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 245
      },
      "21": {
        loc: {
          start: {
            line: 259,
            column: 12
          },
          end: {
            line: 260,
            column: 66
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 259,
            column: 12
          },
          end: {
            line: 260,
            column: 66
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 259
      },
      "22": {
        loc: {
          start: {
            line: 304,
            column: 30
          },
          end: {
            line: 304,
            column: 38
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 304,
            column: 37
          },
          end: {
            line: 304,
            column: 38
          }
        }],
        line: 304
      },
      "23": {
        loc: {
          start: {
            line: 310,
            column: 28
          },
          end: {
            line: 310,
            column: 72
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 310,
            column: 38
          },
          end: {
            line: 310,
            column: 46
          }
        }, {
          start: {
            line: 310,
            column: 49
          },
          end: {
            line: 310,
            column: 72
          }
        }],
        line: 310
      },
      "24": {
        loc: {
          start: {
            line: 318,
            column: 79
          },
          end: {
            line: 318,
            column: 114
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 318,
            column: 92
          },
          end: {
            line: 318,
            column: 102
          }
        }, {
          start: {
            line: 318,
            column: 105
          },
          end: {
            line: 318,
            column: 114
          }
        }],
        line: 318
      },
      "25": {
        loc: {
          start: {
            line: 319,
            column: 78
          },
          end: {
            line: 319,
            column: 113
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 319,
            column: 91
          },
          end: {
            line: 319,
            column: 101
          }
        }, {
          start: {
            line: 319,
            column: 104
          },
          end: {
            line: 319,
            column: 113
          }
        }],
        line: 319
      },
      "26": {
        loc: {
          start: {
            line: 323,
            column: 32
          },
          end: {
            line: 325,
            column: 53
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 323,
            column: 45
          },
          end: {
            line: 323,
            column: 78
          }
        }, {
          start: {
            line: 324,
            column: 20
          },
          end: {
            line: 325,
            column: 53
          }
        }],
        line: 323
      },
      "27": {
        loc: {
          start: {
            line: 324,
            column: 20
          },
          end: {
            line: 325,
            column: 53
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 324,
            column: 33
          },
          end: {
            line: 324,
            column: 62
          }
        }, {
          start: {
            line: 325,
            column: 24
          },
          end: {
            line: 325,
            column: 53
          }
        }],
        line: 324
      },
      "28": {
        loc: {
          start: {
            line: 424,
            column: 37
          },
          end: {
            line: 424,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 424,
            column: 37
          },
          end: {
            line: 424,
            column: 50
          }
        }, {
          start: {
            line: 424,
            column: 54
          },
          end: {
            line: 424,
            column: 56
          }
        }],
        line: 424
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0],
      "6": [0],
      "7": [0],
      "8": [0],
      "9": [0],
      "10": [0],
      "11": [0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0]
    },
    inputSourceMap: {
      file: "/workspaces/MyFitHero/src/features/recovery/services/recovery.service.ts",
      mappings: "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",
      names: [],
      sources: ["/workspaces/MyFitHero/src/features/recovery/services/recovery.service.ts"],
      sourcesContent: ["import { Activity, Heart } from 'lucide-react';\nimport {\n  RecoveryData,\n  RecoveryMetrics,\n  RecoveryActivity,\n  RecoveryRecommendation,\n  RecoveryTrendData,\n  AIInsight,\n  RecoveryPrediction,\n  RecoveryPattern,\n  BiometricTrend,\n} from '@/features/recovery/types';\n\nexport class RecoveryService {\n  private static readonly BASE_URL = '/api/recovery';\n\n  /**\n   * R\xE9cup\xE8re le statut de r\xE9cup\xE9ration d'un utilisateur\n   */\n  static async getRecoveryStatus(userId: string): Promise<RecoveryData> {\n    try {\n      const response = await fetch(`${this.BASE_URL}/${userId}/status`);\n      if (!response.ok) throw new Error('Erreur lors de la r\xE9cup\xE9ration du statut');\n      return await response.json();\n    } catch (error: any) {\n      // Erreur silencieuse\n      // Mode mock pour le d\xE9veloppement\n      return this.getMockRecoveryData(userId);\n    }\n  }\n\n  /**\n   * R\xE9cup\xE8re les m\xE9triques de r\xE9cup\xE9ration\n   */\n  static async getRecoveryMetrics(userId: string): Promise<RecoveryMetrics> {\n    try {\n      const response = await fetch(`${this.BASE_URL}/${userId}/metrics`);\n      if (!response.ok) throw new Error('Erreur lors de la r\xE9cup\xE9ration des m\xE9triques');\n      return await response.json();\n    } catch (error: any) {\n      // Erreur silencieuse\n      return this.getMockMetrics(userId);\n    }\n  }\n\n  /**\n   * Met \xE0 jour les m\xE9triques de r\xE9cup\xE9ration\n   */\n  static async updateRecoveryMetrics(\n    userId: string,\n    metrics: Partial<RecoveryMetrics>\n  ): Promise<RecoveryMetrics> {\n    try {\n      const response = await fetch(`${this.BASE_URL}/${userId}/metrics`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(metrics),\n      });\n      if (!response.ok) throw new Error('Erreur lors de la mise \xE0 jour');\n      return await response.json();\n    } catch (error: any) {\n      // Erreur silencieuse\n      // Return updated mock data\n      return { ...this.getMockMetrics(userId), ...metrics };\n    }\n  }\n\n  /**\n   * Enregistre une activit\xE9 de r\xE9cup\xE9ration\n   */\n  static async logRecoveryActivity(userId: string, activity: RecoveryActivity): Promise<void> {\n    try {\n      const response = await fetch(`${this.BASE_URL}/${userId}/activities`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(activity),\n      });\n      if (!response.ok) throw new Error(\"Erreur lors de l'enregistrement\");\n    } catch (error: any) {\n      // Erreur silencieuse\n      // Mock success\n    }\n  }\n\n  /**\n   * R\xE9cup\xE8re les recommandations de r\xE9cup\xE9ration\n   */\n  static async getRecoveryRecommendations(userId: string): Promise<RecoveryRecommendation[]> {\n    try {\n      const response = await fetch(`${this.BASE_URL}/${userId}/recommendations`);\n      if (!response.ok) throw new Error('Erreur lors de la r\xE9cup\xE9ration des recommandations');\n      return await response.json();\n    } catch (error: any) {\n      // Erreur silencieuse\n      return RecoveryService.getMockRecommendations();\n    }\n  }\n\n  /**\n   * Calcule le score de r\xE9cup\xE9ration\n   */\n  static calculateRecoveryScore(metrics: RecoveryMetrics): number {\n    const {\n      sleep_score = 75,\n      resting_heart_rate = 60,\n      hrv_score = 30,\n      stress_level = 3,\n      soreness_level = 3,\n      energy_level = 4,\n    } = metrics;\n\n    // Normalisation des scores (0-100)\n    const sleepScore = sleep_score;\n    const hrScore = Math.max(0, 100 - Math.abs(resting_heart_rate - 60) * 2);\n    const hrvScore = hrv_score;\n    const stressScore = Math.max(0, 100 - stress_level * 20); // 1-5 scale\n    const stiffnessScore = Math.max(0, 100 - soreness_level * 20); // 1-5 scale\n    const energyScore = energy_level * 20; // 1-5 scale\n\n    return Math.round(\n      sleepScore * 0.25 +\n        hrScore * 0.2 +\n        hrvScore * 0.2 +\n        stressScore * 0.15 +\n        stiffnessScore * 0.1 +\n        energyScore * 0.1\n    );\n  }\n\n  /**\n   * R\xE9cup\xE8re les donn\xE9es de tendance\n   */\n  static async getRecoveryTrend(userId: string, days: number = 30): Promise<RecoveryTrendData[]> {\n    try {\n      const response = await fetch(`${this.BASE_URL}/${userId}/trend?days=${days}`);\n      if (!response.ok) throw new Error('Erreur lors de la r\xE9cup\xE9ration de la tendance');\n      return await response.json();\n    } catch (error: any) {\n      // Erreur silencieuse\n      return this.getMockTrendData(days);\n    }\n  }\n\n  private static getMockTrendData(days: number): RecoveryTrendData[] {\n    const data: RecoveryTrendData[] = [];\n    const today = new Date();\n\n    for (let i = days - 1; i >= 0; i--) {\n      const date = new Date(today);\n      date.setDate(date.getDate() - i);\n\n      data.push({\n        date: date.toISOString().split('T')[0]!,\n        overall: 60 + Math.random() * 30,\n        sleep: 50 + Math.random() * 40,\n        stress: 40 + Math.random() * 50,\n        energy: 55 + Math.random() * 35,\n        hrv: 20 + Math.random() * 40,\n      });\n    }\n\n    return data;\n  }\n\n  // ========================================\n  // NOUVELLES M\xC9THODES IA AVANC\xC9ES\n  // ========================================\n\n  /**\n   * R\xE9cup\xE8re les insights IA sur la r\xE9cup\xE9ration\n   */\n  static async getAIInsights(userId: string): Promise<AIInsight[]> {\n    try {\n      const response = await fetch(`${this.BASE_URL}/${userId}/ai-insights`);\n      if (!response.ok) throw new Error('Erreur lors de la r\xE9cup\xE9ration des insights');\n      return await response.json();\n    } catch (error: any) {\n      return this.getMockAIInsights();\n    }\n  }\n\n  /**\n   * R\xE9cup\xE8re les pr\xE9dictions de r\xE9cup\xE9ration\n   */\n  static async getRecoveryPredictions(userId: string, days = 7): Promise<RecoveryPrediction[]> {\n    try {\n      const response = await fetch(`${this.BASE_URL}/${userId}/predictions?days=${days}`);\n      if (!response.ok) throw new Error('Erreur lors de la r\xE9cup\xE9ration des pr\xE9dictions');\n      return await response.json();\n    } catch (error: any) {\n      return this.getMockPredictions(days);\n    }\n  }\n\n  /**\n   * Analyse les patterns de r\xE9cup\xE9ration\n   */\n  static async getRecoveryPatterns(userId: string): Promise<RecoveryPattern[]> {\n    try {\n      const response = await fetch(`${this.BASE_URL}/${userId}/patterns`);\n      if (!response.ok) throw new Error('Erreur lors de la r\xE9cup\xE9ration des patterns');\n      return await response.json();\n    } catch (error: any) {\n      return this.getMockPatterns();\n    }\n  }\n\n  /**\n   * R\xE9cup\xE8re les tendances biom\xE9triques\n   */\n  static async getBiometricTrends(userId: string): Promise<BiometricTrend[]> {\n    try {\n      const response = await fetch(`${this.BASE_URL}/${userId}/biometric-trends`);\n      if (!response.ok) throw new Error('Erreur lors de la r\xE9cup\xE9ration des tendances');\n      return await response.json();\n    } catch (error: any) {\n      return this.getMockBiometricTrends();\n    }\n  }\n\n  /**\n   * Optimise le plan de r\xE9cup\xE9ration\n   */\n  static async optimizeRecoveryPlan(userId: string, goals: string[]): Promise<RecoveryRecommendation[]> {\n    try {\n      const response = await fetch(`${this.BASE_URL}/${userId}/optimize`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ goals }),\n      });\n      if (!response.ok) throw new Error('Erreur lors de l\\'optimisation');\n      return await response.json();\n    } catch (error: any) {\n      return this.getMockOptimizedPlan(goals);\n    }\n  }\n\n  /**\n   * D\xE9tecte le surentra\xEEnement\n   */\n  static async detectOvertraining(userId: string): Promise<{ risk: number; recommendations: string[] }> {\n    try {\n      const response = await fetch(`${this.BASE_URL}/${userId}/overtraining`);\n      if (!response.ok) throw new Error('Erreur lors de la d\xE9tection');\n      return await response.json();\n    } catch (error: any) {\n      return {\n        risk: Math.round(Math.random() * 100),\n        recommendations: [\n          'R\xE9duisez l\\'intensit\xE9 des entra\xEEnements',\n          'Augmentez le temps de r\xE9cup\xE9ration',\n          'Privil\xE9giez le sommeil de qualit\xE9',\n          'Int\xE9grez plus d\\'exercices de r\xE9cup\xE9ration active'\n        ]\n      };\n    }\n  }\n\n  /**\n   * Pr\xE9dit les jours optimaux d'entra\xEEnement\n   */\n  static async predictOptimalTrainingDays(userId: string): Promise<string[]> {\n    try {\n      const response = await fetch(`${this.BASE_URL}/${userId}/optimal-days`);\n      if (!response.ok) throw new Error('Erreur lors de la pr\xE9diction');\n      return await response.json();\n    } catch (error: any) {\n      return ['Mardi', 'Jeudi', 'Samedi'];\n    }\n  }\n\n  /**\n   * Recommandations personnalis\xE9es par IA\n   */\n  static async getPersonalizedRecommendations(userId: string): Promise<RecoveryRecommendation[]> {\n    try {\n      const response = await fetch(`${this.BASE_URL}/${userId}/personalized-recommendations`);\n      if (!response.ok) throw new Error('Erreur lors de la r\xE9cup\xE9ration');\n      return await response.json();\n    } catch (error: any) {\n      return RecoveryService.getMockRecommendations();\n    }\n  }\n\n  // ========================================\n  // M\xC9THODES MOCK POUR LES NOUVELLES FONCTIONNALIT\xC9S\n  // ========================================\n\n  static getMockAIInsights(): AIInsight[] {\n    return [\n      {\n        id: '1',\n        type: 'pattern',\n        title: 'Pattern de r\xE9cup\xE9ration hebdomadaire d\xE9tect\xE9',\n        description: 'L\\'IA a identifi\xE9 que votre r\xE9cup\xE9ration est optimale les mardis et jeudis, sugg\xE9rant de programmer vos entra\xEEnements les plus intenses ces jours-l\xE0.',\n        confidence: 0.87,\n        impact: 'high',\n        timeframe: '4 semaines',\n        data_points: 28\n      },\n      {\n        id: '2',\n        type: 'correlation',\n        title: 'Corr\xE9lation sommeil-performance',\n        description: 'Forte corr\xE9lation (r=0.78) entre qualit\xE9 du sommeil et r\xE9cup\xE9ration musculaire. +1h de sommeil = +12% r\xE9cup\xE9ration.',\n        confidence: 0.94,\n        impact: 'high',\n        timeframe: '6 semaines',\n        data_points: 42\n      },\n      {\n        id: '3',\n        type: 'risk',\n        title: 'Zone de risque identifi\xE9e',\n        description: 'Attention : tendance au surentra\xEEnement d\xE9tect\xE9e pour les groupes musculaires du haut du corps. Repos recommand\xE9 48h.',\n        confidence: 0.72,\n        impact: 'medium',\n        timeframe: '2 semaines',\n        data_points: 14\n      }\n    ];\n  }\n\n  static getMockPredictions(days = 7): RecoveryPrediction[] {\n    const predictions: RecoveryPrediction[] = [];\n    const dayNames = ['Dimanche', 'Lundi', 'Mardi', 'Mercredi', 'Jeudi', 'Vendredi', 'Samedi'];\n    \n    for (let i = 1; i <= days; i++) {\n      const date = new Date();\n      date.setDate(date.getDate() + i);\n      const dayName = i === 1 ? 'Demain' : dayNames[date.getDay()];\n      \n      const baseScore = 70 + Math.sin(i / 7 * Math.PI * 2) * 20;\n      const score = Math.max(40, Math.min(95, baseScore + (Math.random() - 0.5) * 10));\n      \n      predictions.push({\n        date: dayName,\n        predicted_score: Math.round(score),\n        confidence: 0.85 + Math.random() * 0.1,\n        factors: [\n          { name: 'Sommeil', impact: 30 + Math.random() * 10, trend: score > 75 ? 'positive' : 'neutral', current_value: 7.5 + Math.random() },\n          { name: 'Stress', impact: 20 + Math.random() * 15, trend: score < 60 ? 'negative' : 'neutral', current_value: 3 + Math.random() * 2 },\n          { name: 'Charge d\\'entra\xEEnement', impact: 15 + Math.random() * 10, trend: 'neutral', current_value: 6 + Math.random() * 2 },\n          { name: 'Nutrition', impact: 10 + Math.random() * 10, trend: 'positive', current_value: 8 + Math.random() }\n        ],\n        recommendation: score > 80 ? 'Entra\xEEnement intense recommand\xE9' : \n                       score > 65 ? 'Entra\xEEnement mod\xE9r\xE9 optimal' : \n                       'Privil\xE9gier la r\xE9cup\xE9ration'\n      });\n    }\n    \n    return predictions;\n  }\n\n  static getMockPatterns(): RecoveryPattern[] {\n    return [\n      {\n        pattern_type: 'weekly',\n        description: 'R\xE9cup\xE9ration optimale en milieu de semaine (mardi-jeudi)',\n        strength: 0.78,\n        detected_at: new Date(),\n        recommendations: [\n          'Programmer les entra\xEEnements intenses mardi/jeudi',\n          'Planifier les repos actifs en fin de semaine',\n          'Optimiser le sommeil dimanche/lundi'\n        ]\n      },\n      {\n        pattern_type: 'monthly',\n        description: 'Variation cyclique de la r\xE9cup\xE9ration li\xE9e aux phases de lune',\n        strength: 0.45,\n        detected_at: new Date(),\n        recommendations: [\n          'Adapter l\\'intensit\xE9 selon les cycles lunaires',\n          'Privil\xE9gier la r\xE9cup\xE9ration en nouvelle lune'\n        ]\n      }\n    ];\n  }\n\n  static getMockBiometricTrends(): BiometricTrend[] {\n    return [\n      {\n        metric: 'VFC (ms)',\n        current_value: 45,\n        trend_7d: 8.5,\n        trend_30d: 12.3,\n        percentile: 78,\n        status: 'improving'\n      },\n      {\n        metric: 'FC Repos (bpm)',\n        current_value: 62,\n        trend_7d: -2.1,\n        trend_30d: -5.8,\n        percentile: 85,\n        status: 'improving'\n      },\n      {\n        metric: 'Score Sommeil',\n        current_value: 78,\n        trend_7d: 3.2,\n        trend_30d: 7.9,\n        percentile: 72,\n        status: 'improving'\n      },\n      {\n        metric: 'Niveau Stress',\n        current_value: 3.2,\n        trend_7d: -0.8,\n        trend_30d: -1.5,\n        percentile: 82,\n        status: 'improving'\n      }\n    ];\n  }\n\n  static getMockOptimizedPlan(goals: string[]): RecoveryRecommendation[] {\n    const planMap: Record<string, RecoveryRecommendation[]> = {\n      'performance': [\n        {\n          id: 'perf1',\n          type: 'ice_bath',\n          title: 'Bain froid post-entra\xEEnement',\n          description: 'Acc\xE9l\xE9rez la r\xE9cup\xE9ration musculaire',\n          action: '10-15 minutes \xE0 10-15\xB0C apr\xE8s l\\'entra\xEEnement',\n          priority: 'high',\n          duration: 15,\n          timeToComplete: 15,\n          estimatedBenefit: '+25% r\xE9cup\xE9ration',\n          difficulty: 'hard',\n          reason: 'Optimisation pour la performance'\n        }\n      ],\n      'health': [\n        {\n          id: 'health1',\n          type: 'meditation',\n          title: 'M\xE9ditation guid\xE9e',\n          description: 'R\xE9duisez le stress et am\xE9liorez la r\xE9cup\xE9ration',\n          action: '20 minutes de m\xE9ditation quotidienne',\n          priority: 'medium',\n          duration: 20,\n          timeToComplete: 20,\n          estimatedBenefit: '+15% bien-\xEAtre',\n          difficulty: 'easy',\n          reason: 'Am\xE9lioration de la sant\xE9 globale'\n        }\n      ]\n    };\n\n    return goals.flatMap(goal => planMap[goal] || []);\n  }\n\n  static getMockRecoveryData(userId: string): RecoveryData {\n    return {\n      user_id: userId,\n      current_metrics: this.getMockMetrics(userId),\n      recent_activities: [],\n      trends: this.getMockTrendData(7),\n      overall_score: 75,\n      last_updated: new Date()\n    };\n  }\n\n  static getMockMetrics(userId: string): RecoveryMetrics {\n    return {\n      user_id: userId,\n      date: new Date(),\n      hrv_score: 45,\n      resting_heart_rate: 62,\n      sleep_score: 78,\n      stress_level: 3,\n      recovery_score: 75,\n      readiness_score: 80,\n      fatigue_level: 2,\n      soreness_level: 3,\n      energy_level: 4,\n    };\n  }\n\n  static getMockRecommendations(): RecoveryRecommendation[] {\n    return [\n      {\n        id: '1',\n        type: 'meditation',\n        title: 'Am\xE9liorer la qualit\xE9 du sommeil',\n        description: 'Votre score de sommeil peut \xEAtre am\xE9lior\xE9',\n        action: 'Essayez de vous coucher 30 minutes plus t\xF4t',\n        priority: 'high',\n        duration: 480,\n        timeToComplete: 30,\n        estimatedBenefit: '+10% r\xE9cup\xE9ration',\n        difficulty: 'easy',\n        reason: 'Analyse des patterns de sommeil'\n      },\n      {\n        id: '2',\n        type: 'stretching',\n        title: 'R\xE9duire le stress',\n        description: 'Niveau de stress l\xE9g\xE8rement \xE9lev\xE9 d\xE9tect\xE9',\n        action: 'Pratiquez 10 minutes de m\xE9ditation',\n        priority: 'medium',\n        duration: 10,\n        timeToComplete: 10,\n        estimatedBenefit: '+5% bien-\xEAtre',\n        difficulty: 'easy',\n        reason: 'Gestion du stress quotidien'\n      }\n    ];\n  }\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "09d14ffff6d3f01ac621f8ad98fc655b492f6366"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1k450f06k7 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1k450f06k7();
cov_1k450f06k7().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1k450f06k7().s[1]++;
exports.RecoveryService = void 0;
class RecoveryService {
  /**
   * Récupère le statut de récupération d'un utilisateur
   */
  static async getRecoveryStatus(userId) {
    /* istanbul ignore next */
    cov_1k450f06k7().f[0]++;
    cov_1k450f06k7().s[2]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_1k450f06k7().s[3]++, await fetch(`${this.BASE_URL}/${userId}/status`));
      /* istanbul ignore next */
      cov_1k450f06k7().s[4]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_1k450f06k7().b[0][0]++;
        cov_1k450f06k7().s[5]++;
        throw new Error('Erreur lors de la récupération du statut');
      } else
      /* istanbul ignore next */
      {
        cov_1k450f06k7().b[0][1]++;
      }
      cov_1k450f06k7().s[6]++;
      return await response.json();
    } catch (error) {
      /* istanbul ignore next */
      cov_1k450f06k7().s[7]++;
      // Erreur silencieuse
      // Mode mock pour le développement
      return this.getMockRecoveryData(userId);
    }
  }
  /**
   * Récupère les métriques de récupération
   */
  static async getRecoveryMetrics(userId) {
    /* istanbul ignore next */
    cov_1k450f06k7().f[1]++;
    cov_1k450f06k7().s[8]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_1k450f06k7().s[9]++, await fetch(`${this.BASE_URL}/${userId}/metrics`));
      /* istanbul ignore next */
      cov_1k450f06k7().s[10]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_1k450f06k7().b[1][0]++;
        cov_1k450f06k7().s[11]++;
        throw new Error('Erreur lors de la récupération des métriques');
      } else
      /* istanbul ignore next */
      {
        cov_1k450f06k7().b[1][1]++;
      }
      cov_1k450f06k7().s[12]++;
      return await response.json();
    } catch (error) {
      /* istanbul ignore next */
      cov_1k450f06k7().s[13]++;
      // Erreur silencieuse
      return this.getMockMetrics(userId);
    }
  }
  /**
   * Met à jour les métriques de récupération
   */
  static async updateRecoveryMetrics(userId, metrics) {
    /* istanbul ignore next */
    cov_1k450f06k7().f[2]++;
    cov_1k450f06k7().s[14]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_1k450f06k7().s[15]++, await fetch(`${this.BASE_URL}/${userId}/metrics`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(metrics)
      }));
      /* istanbul ignore next */
      cov_1k450f06k7().s[16]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_1k450f06k7().b[2][0]++;
        cov_1k450f06k7().s[17]++;
        throw new Error('Erreur lors de la mise à jour');
      } else
      /* istanbul ignore next */
      {
        cov_1k450f06k7().b[2][1]++;
      }
      cov_1k450f06k7().s[18]++;
      return await response.json();
    } catch (error) {
      /* istanbul ignore next */
      cov_1k450f06k7().s[19]++;
      // Erreur silencieuse
      // Return updated mock data
      return {
        ...this.getMockMetrics(userId),
        ...metrics
      };
    }
  }
  /**
   * Enregistre une activité de récupération
   */
  static async logRecoveryActivity(userId, activity) {
    /* istanbul ignore next */
    cov_1k450f06k7().f[3]++;
    cov_1k450f06k7().s[20]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_1k450f06k7().s[21]++, await fetch(`${this.BASE_URL}/${userId}/activities`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(activity)
      }));
      /* istanbul ignore next */
      cov_1k450f06k7().s[22]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_1k450f06k7().b[3][0]++;
        cov_1k450f06k7().s[23]++;
        throw new Error("Erreur lors de l'enregistrement");
      } else
      /* istanbul ignore next */
      {
        cov_1k450f06k7().b[3][1]++;
      }
    } catch (error) {
      // Erreur silencieuse
      // Mock success
    }
  }
  /**
   * Récupère les recommandations de récupération
   */
  static async getRecoveryRecommendations(userId) {
    /* istanbul ignore next */
    cov_1k450f06k7().f[4]++;
    cov_1k450f06k7().s[24]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_1k450f06k7().s[25]++, await fetch(`${this.BASE_URL}/${userId}/recommendations`));
      /* istanbul ignore next */
      cov_1k450f06k7().s[26]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_1k450f06k7().b[4][0]++;
        cov_1k450f06k7().s[27]++;
        throw new Error('Erreur lors de la récupération des recommandations');
      } else
      /* istanbul ignore next */
      {
        cov_1k450f06k7().b[4][1]++;
      }
      cov_1k450f06k7().s[28]++;
      return await response.json();
    } catch (error) {
      /* istanbul ignore next */
      cov_1k450f06k7().s[29]++;
      // Erreur silencieuse
      return RecoveryService.getMockRecommendations();
    }
  }
  /**
   * Calcule le score de récupération
   */
  static calculateRecoveryScore(metrics) {
    /* istanbul ignore next */
    cov_1k450f06k7().f[5]++;
    const {
      sleep_score =
      /* istanbul ignore next */
      (cov_1k450f06k7().b[5][0]++, 75),
      resting_heart_rate =
      /* istanbul ignore next */
      (cov_1k450f06k7().b[6][0]++, 60),
      hrv_score =
      /* istanbul ignore next */
      (cov_1k450f06k7().b[7][0]++, 30),
      stress_level =
      /* istanbul ignore next */
      (cov_1k450f06k7().b[8][0]++, 3),
      soreness_level =
      /* istanbul ignore next */
      (cov_1k450f06k7().b[9][0]++, 3),
      energy_level =
      /* istanbul ignore next */
      (cov_1k450f06k7().b[10][0]++, 4)
    } =
    /* istanbul ignore next */
    (cov_1k450f06k7().s[30]++, metrics);
    // Normalisation des scores (0-100)
    const sleepScore =
    /* istanbul ignore next */
    (cov_1k450f06k7().s[31]++, sleep_score);
    const hrScore =
    /* istanbul ignore next */
    (cov_1k450f06k7().s[32]++, Math.max(0, 100 - Math.abs(resting_heart_rate - 60) * 2));
    const hrvScore =
    /* istanbul ignore next */
    (cov_1k450f06k7().s[33]++, hrv_score);
    const stressScore =
    /* istanbul ignore next */
    (cov_1k450f06k7().s[34]++, Math.max(0, 100 - stress_level * 20)); // 1-5 scale
    const stiffnessScore =
    /* istanbul ignore next */
    (cov_1k450f06k7().s[35]++, Math.max(0, 100 - soreness_level * 20)); // 1-5 scale
    const energyScore =
    /* istanbul ignore next */
    (cov_1k450f06k7().s[36]++, energy_level * 20); // 1-5 scale
    /* istanbul ignore next */
    cov_1k450f06k7().s[37]++;
    return Math.round(sleepScore * 0.25 + hrScore * 0.2 + hrvScore * 0.2 + stressScore * 0.15 + stiffnessScore * 0.1 + energyScore * 0.1);
  }
  /**
   * Récupère les données de tendance
   */
  static async getRecoveryTrend(userId, days =
  /* istanbul ignore next */
  (cov_1k450f06k7().b[11][0]++, 30)) {
    /* istanbul ignore next */
    cov_1k450f06k7().f[6]++;
    cov_1k450f06k7().s[38]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_1k450f06k7().s[39]++, await fetch(`${this.BASE_URL}/${userId}/trend?days=${days}`));
      /* istanbul ignore next */
      cov_1k450f06k7().s[40]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_1k450f06k7().b[12][0]++;
        cov_1k450f06k7().s[41]++;
        throw new Error('Erreur lors de la récupération de la tendance');
      } else
      /* istanbul ignore next */
      {
        cov_1k450f06k7().b[12][1]++;
      }
      cov_1k450f06k7().s[42]++;
      return await response.json();
    } catch (error) {
      /* istanbul ignore next */
      cov_1k450f06k7().s[43]++;
      // Erreur silencieuse
      return this.getMockTrendData(days);
    }
  }
  static getMockTrendData(days) {
    /* istanbul ignore next */
    cov_1k450f06k7().f[7]++;
    const data =
    /* istanbul ignore next */
    (cov_1k450f06k7().s[44]++, []);
    const today =
    /* istanbul ignore next */
    (cov_1k450f06k7().s[45]++, new Date());
    /* istanbul ignore next */
    cov_1k450f06k7().s[46]++;
    for (let i =
    /* istanbul ignore next */
    (cov_1k450f06k7().s[47]++, days - 1); i >= 0; i--) {
      const date =
      /* istanbul ignore next */
      (cov_1k450f06k7().s[48]++, new Date(today));
      /* istanbul ignore next */
      cov_1k450f06k7().s[49]++;
      date.setDate(date.getDate() - i);
      /* istanbul ignore next */
      cov_1k450f06k7().s[50]++;
      data.push({
        date: date.toISOString().split('T')[0],
        overall: 60 + Math.random() * 30,
        sleep: 50 + Math.random() * 40,
        stress: 40 + Math.random() * 50,
        energy: 55 + Math.random() * 35,
        hrv: 20 + Math.random() * 40
      });
    }
    /* istanbul ignore next */
    cov_1k450f06k7().s[51]++;
    return data;
  }
  // ========================================
  // NOUVELLES MÉTHODES IA AVANCÉES
  // ========================================
  /**
   * Récupère les insights IA sur la récupération
   */
  static async getAIInsights(userId) {
    /* istanbul ignore next */
    cov_1k450f06k7().f[8]++;
    cov_1k450f06k7().s[52]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_1k450f06k7().s[53]++, await fetch(`${this.BASE_URL}/${userId}/ai-insights`));
      /* istanbul ignore next */
      cov_1k450f06k7().s[54]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_1k450f06k7().b[13][0]++;
        cov_1k450f06k7().s[55]++;
        throw new Error('Erreur lors de la récupération des insights');
      } else
      /* istanbul ignore next */
      {
        cov_1k450f06k7().b[13][1]++;
      }
      cov_1k450f06k7().s[56]++;
      return await response.json();
    } catch (error) {
      /* istanbul ignore next */
      cov_1k450f06k7().s[57]++;
      return this.getMockAIInsights();
    }
  }
  /**
   * Récupère les prédictions de récupération
   */
  static async getRecoveryPredictions(userId, days =
  /* istanbul ignore next */
  (cov_1k450f06k7().b[14][0]++, 7)) {
    /* istanbul ignore next */
    cov_1k450f06k7().f[9]++;
    cov_1k450f06k7().s[58]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_1k450f06k7().s[59]++, await fetch(`${this.BASE_URL}/${userId}/predictions?days=${days}`));
      /* istanbul ignore next */
      cov_1k450f06k7().s[60]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_1k450f06k7().b[15][0]++;
        cov_1k450f06k7().s[61]++;
        throw new Error('Erreur lors de la récupération des prédictions');
      } else
      /* istanbul ignore next */
      {
        cov_1k450f06k7().b[15][1]++;
      }
      cov_1k450f06k7().s[62]++;
      return await response.json();
    } catch (error) {
      /* istanbul ignore next */
      cov_1k450f06k7().s[63]++;
      return this.getMockPredictions(days);
    }
  }
  /**
   * Analyse les patterns de récupération
   */
  static async getRecoveryPatterns(userId) {
    /* istanbul ignore next */
    cov_1k450f06k7().f[10]++;
    cov_1k450f06k7().s[64]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_1k450f06k7().s[65]++, await fetch(`${this.BASE_URL}/${userId}/patterns`));
      /* istanbul ignore next */
      cov_1k450f06k7().s[66]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_1k450f06k7().b[16][0]++;
        cov_1k450f06k7().s[67]++;
        throw new Error('Erreur lors de la récupération des patterns');
      } else
      /* istanbul ignore next */
      {
        cov_1k450f06k7().b[16][1]++;
      }
      cov_1k450f06k7().s[68]++;
      return await response.json();
    } catch (error) {
      /* istanbul ignore next */
      cov_1k450f06k7().s[69]++;
      return this.getMockPatterns();
    }
  }
  /**
   * Récupère les tendances biométriques
   */
  static async getBiometricTrends(userId) {
    /* istanbul ignore next */
    cov_1k450f06k7().f[11]++;
    cov_1k450f06k7().s[70]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_1k450f06k7().s[71]++, await fetch(`${this.BASE_URL}/${userId}/biometric-trends`));
      /* istanbul ignore next */
      cov_1k450f06k7().s[72]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_1k450f06k7().b[17][0]++;
        cov_1k450f06k7().s[73]++;
        throw new Error('Erreur lors de la récupération des tendances');
      } else
      /* istanbul ignore next */
      {
        cov_1k450f06k7().b[17][1]++;
      }
      cov_1k450f06k7().s[74]++;
      return await response.json();
    } catch (error) {
      /* istanbul ignore next */
      cov_1k450f06k7().s[75]++;
      return this.getMockBiometricTrends();
    }
  }
  /**
   * Optimise le plan de récupération
   */
  static async optimizeRecoveryPlan(userId, goals) {
    /* istanbul ignore next */
    cov_1k450f06k7().f[12]++;
    cov_1k450f06k7().s[76]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_1k450f06k7().s[77]++, await fetch(`${this.BASE_URL}/${userId}/optimize`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          goals
        })
      }));
      /* istanbul ignore next */
      cov_1k450f06k7().s[78]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_1k450f06k7().b[18][0]++;
        cov_1k450f06k7().s[79]++;
        throw new Error('Erreur lors de l\'optimisation');
      } else
      /* istanbul ignore next */
      {
        cov_1k450f06k7().b[18][1]++;
      }
      cov_1k450f06k7().s[80]++;
      return await response.json();
    } catch (error) {
      /* istanbul ignore next */
      cov_1k450f06k7().s[81]++;
      return this.getMockOptimizedPlan(goals);
    }
  }
  /**
   * Détecte le surentraînement
   */
  static async detectOvertraining(userId) {
    /* istanbul ignore next */
    cov_1k450f06k7().f[13]++;
    cov_1k450f06k7().s[82]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_1k450f06k7().s[83]++, await fetch(`${this.BASE_URL}/${userId}/overtraining`));
      /* istanbul ignore next */
      cov_1k450f06k7().s[84]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_1k450f06k7().b[19][0]++;
        cov_1k450f06k7().s[85]++;
        throw new Error('Erreur lors de la détection');
      } else
      /* istanbul ignore next */
      {
        cov_1k450f06k7().b[19][1]++;
      }
      cov_1k450f06k7().s[86]++;
      return await response.json();
    } catch (error) {
      /* istanbul ignore next */
      cov_1k450f06k7().s[87]++;
      return {
        risk: Math.round(Math.random() * 100),
        recommendations: ['Réduisez l\'intensité des entraînements', 'Augmentez le temps de récupération', 'Privilégiez le sommeil de qualité', 'Intégrez plus d\'exercices de récupération active']
      };
    }
  }
  /**
   * Prédit les jours optimaux d'entraînement
   */
  static async predictOptimalTrainingDays(userId) {
    /* istanbul ignore next */
    cov_1k450f06k7().f[14]++;
    cov_1k450f06k7().s[88]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_1k450f06k7().s[89]++, await fetch(`${this.BASE_URL}/${userId}/optimal-days`));
      /* istanbul ignore next */
      cov_1k450f06k7().s[90]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_1k450f06k7().b[20][0]++;
        cov_1k450f06k7().s[91]++;
        throw new Error('Erreur lors de la prédiction');
      } else
      /* istanbul ignore next */
      {
        cov_1k450f06k7().b[20][1]++;
      }
      cov_1k450f06k7().s[92]++;
      return await response.json();
    } catch (error) {
      /* istanbul ignore next */
      cov_1k450f06k7().s[93]++;
      return ['Mardi', 'Jeudi', 'Samedi'];
    }
  }
  /**
   * Recommandations personnalisées par IA
   */
  static async getPersonalizedRecommendations(userId) {
    /* istanbul ignore next */
    cov_1k450f06k7().f[15]++;
    cov_1k450f06k7().s[94]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_1k450f06k7().s[95]++, await fetch(`${this.BASE_URL}/${userId}/personalized-recommendations`));
      /* istanbul ignore next */
      cov_1k450f06k7().s[96]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_1k450f06k7().b[21][0]++;
        cov_1k450f06k7().s[97]++;
        throw new Error('Erreur lors de la récupération');
      } else
      /* istanbul ignore next */
      {
        cov_1k450f06k7().b[21][1]++;
      }
      cov_1k450f06k7().s[98]++;
      return await response.json();
    } catch (error) {
      /* istanbul ignore next */
      cov_1k450f06k7().s[99]++;
      return RecoveryService.getMockRecommendations();
    }
  }
  // ========================================
  // MÉTHODES MOCK POUR LES NOUVELLES FONCTIONNALITÉS
  // ========================================
  static getMockAIInsights() {
    /* istanbul ignore next */
    cov_1k450f06k7().f[16]++;
    cov_1k450f06k7().s[100]++;
    return [{
      id: '1',
      type: 'pattern',
      title: 'Pattern de récupération hebdomadaire détecté',
      description: 'L\'IA a identifié que votre récupération est optimale les mardis et jeudis, suggérant de programmer vos entraînements les plus intenses ces jours-là.',
      confidence: 0.87,
      impact: 'high',
      timeframe: '4 semaines',
      data_points: 28
    }, {
      id: '2',
      type: 'correlation',
      title: 'Corrélation sommeil-performance',
      description: 'Forte corrélation (r=0.78) entre qualité du sommeil et récupération musculaire. +1h de sommeil = +12% récupération.',
      confidence: 0.94,
      impact: 'high',
      timeframe: '6 semaines',
      data_points: 42
    }, {
      id: '3',
      type: 'risk',
      title: 'Zone de risque identifiée',
      description: 'Attention : tendance au surentraînement détectée pour les groupes musculaires du haut du corps. Repos recommandé 48h.',
      confidence: 0.72,
      impact: 'medium',
      timeframe: '2 semaines',
      data_points: 14
    }];
  }
  static getMockPredictions(days =
  /* istanbul ignore next */
  (cov_1k450f06k7().b[22][0]++, 7)) {
    /* istanbul ignore next */
    cov_1k450f06k7().f[17]++;
    const predictions =
    /* istanbul ignore next */
    (cov_1k450f06k7().s[101]++, []);
    const dayNames =
    /* istanbul ignore next */
    (cov_1k450f06k7().s[102]++, ['Dimanche', 'Lundi', 'Mardi', 'Mercredi', 'Jeudi', 'Vendredi', 'Samedi']);
    /* istanbul ignore next */
    cov_1k450f06k7().s[103]++;
    for (let i =
    /* istanbul ignore next */
    (cov_1k450f06k7().s[104]++, 1); i <= days; i++) {
      const date =
      /* istanbul ignore next */
      (cov_1k450f06k7().s[105]++, new Date());
      /* istanbul ignore next */
      cov_1k450f06k7().s[106]++;
      date.setDate(date.getDate() + i);
      const dayName =
      /* istanbul ignore next */
      (cov_1k450f06k7().s[107]++, i === 1 ?
      /* istanbul ignore next */
      (cov_1k450f06k7().b[23][0]++, 'Demain') :
      /* istanbul ignore next */
      (cov_1k450f06k7().b[23][1]++, dayNames[date.getDay()]));
      const baseScore =
      /* istanbul ignore next */
      (cov_1k450f06k7().s[108]++, 70 + Math.sin(i / 7 * Math.PI * 2) * 20);
      const score =
      /* istanbul ignore next */
      (cov_1k450f06k7().s[109]++, Math.max(40, Math.min(95, baseScore + (Math.random() - 0.5) * 10)));
      /* istanbul ignore next */
      cov_1k450f06k7().s[110]++;
      predictions.push({
        date: dayName,
        predicted_score: Math.round(score),
        confidence: 0.85 + Math.random() * 0.1,
        factors: [{
          name: 'Sommeil',
          impact: 30 + Math.random() * 10,
          trend: score > 75 ?
          /* istanbul ignore next */
          (cov_1k450f06k7().b[24][0]++, 'positive') :
          /* istanbul ignore next */
          (cov_1k450f06k7().b[24][1]++, 'neutral'),
          current_value: 7.5 + Math.random()
        }, {
          name: 'Stress',
          impact: 20 + Math.random() * 15,
          trend: score < 60 ?
          /* istanbul ignore next */
          (cov_1k450f06k7().b[25][0]++, 'negative') :
          /* istanbul ignore next */
          (cov_1k450f06k7().b[25][1]++, 'neutral'),
          current_value: 3 + Math.random() * 2
        }, {
          name: 'Charge d\'entraînement',
          impact: 15 + Math.random() * 10,
          trend: 'neutral',
          current_value: 6 + Math.random() * 2
        }, {
          name: 'Nutrition',
          impact: 10 + Math.random() * 10,
          trend: 'positive',
          current_value: 8 + Math.random()
        }],
        recommendation: score > 80 ?
        /* istanbul ignore next */
        (cov_1k450f06k7().b[26][0]++, 'Entraînement intense recommandé') :
        /* istanbul ignore next */
        (cov_1k450f06k7().b[26][1]++, score > 65 ?
        /* istanbul ignore next */
        (cov_1k450f06k7().b[27][0]++, 'Entraînement modéré optimal') :
        /* istanbul ignore next */
        (cov_1k450f06k7().b[27][1]++, 'Privilégier la récupération'))
      });
    }
    /* istanbul ignore next */
    cov_1k450f06k7().s[111]++;
    return predictions;
  }
  static getMockPatterns() {
    /* istanbul ignore next */
    cov_1k450f06k7().f[18]++;
    cov_1k450f06k7().s[112]++;
    return [{
      pattern_type: 'weekly',
      description: 'Récupération optimale en milieu de semaine (mardi-jeudi)',
      strength: 0.78,
      detected_at: new Date(),
      recommendations: ['Programmer les entraînements intenses mardi/jeudi', 'Planifier les repos actifs en fin de semaine', 'Optimiser le sommeil dimanche/lundi']
    }, {
      pattern_type: 'monthly',
      description: 'Variation cyclique de la récupération liée aux phases de lune',
      strength: 0.45,
      detected_at: new Date(),
      recommendations: ['Adapter l\'intensité selon les cycles lunaires', 'Privilégier la récupération en nouvelle lune']
    }];
  }
  static getMockBiometricTrends() {
    /* istanbul ignore next */
    cov_1k450f06k7().f[19]++;
    cov_1k450f06k7().s[113]++;
    return [{
      metric: 'VFC (ms)',
      current_value: 45,
      trend_7d: 8.5,
      trend_30d: 12.3,
      percentile: 78,
      status: 'improving'
    }, {
      metric: 'FC Repos (bpm)',
      current_value: 62,
      trend_7d: -2.1,
      trend_30d: -5.8,
      percentile: 85,
      status: 'improving'
    }, {
      metric: 'Score Sommeil',
      current_value: 78,
      trend_7d: 3.2,
      trend_30d: 7.9,
      percentile: 72,
      status: 'improving'
    }, {
      metric: 'Niveau Stress',
      current_value: 3.2,
      trend_7d: -0.8,
      trend_30d: -1.5,
      percentile: 82,
      status: 'improving'
    }];
  }
  static getMockOptimizedPlan(goals) {
    /* istanbul ignore next */
    cov_1k450f06k7().f[20]++;
    const planMap =
    /* istanbul ignore next */
    (cov_1k450f06k7().s[114]++, {
      'performance': [{
        id: 'perf1',
        type: 'ice_bath',
        title: 'Bain froid post-entraînement',
        description: 'Accélérez la récupération musculaire',
        action: '10-15 minutes à 10-15°C après l\'entraînement',
        priority: 'high',
        duration: 15,
        timeToComplete: 15,
        estimatedBenefit: '+25% récupération',
        difficulty: 'hard',
        reason: 'Optimisation pour la performance'
      }],
      'health': [{
        id: 'health1',
        type: 'meditation',
        title: 'Méditation guidée',
        description: 'Réduisez le stress et améliorez la récupération',
        action: '20 minutes de méditation quotidienne',
        priority: 'medium',
        duration: 20,
        timeToComplete: 20,
        estimatedBenefit: '+15% bien-être',
        difficulty: 'easy',
        reason: 'Amélioration de la santé globale'
      }]
    });
    /* istanbul ignore next */
    cov_1k450f06k7().s[115]++;
    return goals.flatMap(goal => {
      /* istanbul ignore next */
      cov_1k450f06k7().f[21]++;
      cov_1k450f06k7().s[116]++;
      return /* istanbul ignore next */(cov_1k450f06k7().b[28][0]++, planMap[goal]) ||
      /* istanbul ignore next */
      (cov_1k450f06k7().b[28][1]++, []);
    });
  }
  static getMockRecoveryData(userId) {
    /* istanbul ignore next */
    cov_1k450f06k7().f[22]++;
    cov_1k450f06k7().s[117]++;
    return {
      user_id: userId,
      current_metrics: this.getMockMetrics(userId),
      recent_activities: [],
      trends: this.getMockTrendData(7),
      overall_score: 75,
      last_updated: new Date()
    };
  }
  static getMockMetrics(userId) {
    /* istanbul ignore next */
    cov_1k450f06k7().f[23]++;
    cov_1k450f06k7().s[118]++;
    return {
      user_id: userId,
      date: new Date(),
      hrv_score: 45,
      resting_heart_rate: 62,
      sleep_score: 78,
      stress_level: 3,
      recovery_score: 75,
      readiness_score: 80,
      fatigue_level: 2,
      soreness_level: 3,
      energy_level: 4
    };
  }
  static getMockRecommendations() {
    /* istanbul ignore next */
    cov_1k450f06k7().f[24]++;
    cov_1k450f06k7().s[119]++;
    return [{
      id: '1',
      type: 'meditation',
      title: 'Améliorer la qualité du sommeil',
      description: 'Votre score de sommeil peut être amélioré',
      action: 'Essayez de vous coucher 30 minutes plus tôt',
      priority: 'high',
      duration: 480,
      timeToComplete: 30,
      estimatedBenefit: '+10% récupération',
      difficulty: 'easy',
      reason: 'Analyse des patterns de sommeil'
    }, {
      id: '2',
      type: 'stretching',
      title: 'Réduire le stress',
      description: 'Niveau de stress légèrement élevé détecté',
      action: 'Pratiquez 10 minutes de méditation',
      priority: 'medium',
      duration: 10,
      timeToComplete: 10,
      estimatedBenefit: '+5% bien-être',
      difficulty: 'easy',
      reason: 'Gestion du stress quotidien'
    }];
  }
}
/* istanbul ignore next */
cov_1k450f06k7().s[120]++;
exports.RecoveryService = RecoveryService;
/* istanbul ignore next */
cov_1k450f06k7().s[121]++;
Object.defineProperty(RecoveryService, "BASE_URL", {
  enumerable: true,
  configurable: true,
  writable: true,
  value: '/api/recovery'
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,