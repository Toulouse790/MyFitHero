{"version":3,"names":["cov_2djo4gih1j","actualCoverage","s","supabase_1","require","FoodRecognitionService","analyzeImage","imageFile","f","startTime","Date","now","isValidImageFile","b","Error","optimizedImage","optimizeImage","recognitionResult","performFoodRecognition","enrichedFoods","enrichWithNutritionalData","totals","calculateTotals","analysisTime","success","foods","analysis_time","error","console","total_calories","total_protein","total_carbs","total_fat","message","file","allowedTypes","maxSize","includes","type","size","Promise","resolve","reject","canvas","document","createElement","ctx","getContext","img","Image","onload","width","height","drawImage","toBlob","blob","onerror","src","URL","createObjectURL","imageBlob","process","env","NODE_ENV","mockFoodRecognition","formData","FormData","append","response","fetch","API_ENDPOINTS","FOOD_RECOGNITION","method","headers","import","meta","VITE_FOOD_RECOGNITION_API_KEY","body","ok","status","data","json","predictions","mockFoods","name","confidence","numFoods","Math","floor","random","sort","slice","filter","food","recognizedItems","item","foodData","getNutritionData","estimatedQuantity","estimateQuantity","factor","push","estimated_quantity","estimated_calories","calories_per_100g","estimated_protein","protein_per_100g","estimated_carbs","carbs_per_100g","estimated_fat","fat_per_100g","foodName","localFood","supabase","from","select","ilike","limit","single","getMockNutritionData","mockDatabase","id","toLowerCase","replace","quantities","reduce","saveAnalysisToHistory","userId","analysisResult","imageUrl","insert","user_id","image_url","foods_detected","created_at","toISOString","exports","Object","defineProperty","VITE_FOOD_RECOGNITION_API","NUTRITION_API","VITE_NUTRITION_API","default"],"sources":["/workspaces/MyFitHero/src/features/nutrition/services/foodRecognition.ts"],"sourcesContent":["// src/features/nutrition/services/foodRecognition.ts\nimport { supabase } from '@/lib/supabase';\n\nexport interface FoodItem {\n  id: string;\n  name: string;\n  calories_per_100g: number;\n  protein_per_100g: number;\n  carbs_per_100g: number;\n  fat_per_100g: number;\n  fiber_per_100g?: number;\n  sugar_per_100g?: number;\n  sodium_per_100g?: number;\n}\n\nexport interface RecognizedFood {\n  food: FoodItem;\n  confidence: number;\n  estimated_quantity: number; // en grammes\n  estimated_calories: number;\n  estimated_protein: number;\n  estimated_carbs: number;\n  estimated_fat: number;\n}\n\nexport interface FoodAnalysisResult {\n  success: boolean;\n  foods: RecognizedFood[];\n  total_calories: number;\n  total_protein: number;\n  total_carbs: number;\n  total_fat: number;\n  analysis_time: number;\n  error?: string;\n}\n\nexport class FoodRecognitionService {\n  private static readonly API_ENDPOINTS = {\n    // API de reconnaissance d'images (ex: Clarifai, Google Vision, Azure Computer Vision)\n    FOOD_RECOGNITION: import.meta.env.VITE_FOOD_RECOGNITION_API || 'https://api.example-food-recognition.com',\n    // API nutritionnelle (ex: Edamam, Spoonacular, USDA)\n    NUTRITION_API: import.meta.env.VITE_NUTRITION_API || 'https://api.example-nutrition.com'\n  };\n\n  /**\n   * Analyser une image pour reconnaître les aliments\n   */\n  static async analyzeImage(imageFile: File): Promise<FoodAnalysisResult> {\n    const startTime = Date.now();\n    \n    try {\n      // Validation du fichier\n      if (!this.isValidImageFile(imageFile)) {\n        throw new Error('Format de fichier non supporté. Utilisez JPG, PNG ou WebP.');\n      }\n\n      // Redimensionner l'image si nécessaire\n      const optimizedImage = await this.optimizeImage(imageFile);\n      \n      // Reconnaissance des aliments dans l'image\n      const recognitionResult = await this.performFoodRecognition(optimizedImage);\n      \n      // Enrichissement avec les données nutritionnelles\n      const enrichedFoods = await this.enrichWithNutritionalData(recognitionResult);\n      \n      // Calcul des totaux\n      const totals = this.calculateTotals(enrichedFoods);\n      \n      const analysisTime = Date.now() - startTime;\n      \n      return {\n        success: true,\n        foods: enrichedFoods,\n        ...totals,\n        analysis_time: analysisTime\n      };\n      \n    } catch (error: any) {\n      console.error('Erreur lors de l\\'analyse de l\\'image:', error);\n      \n      return {\n        success: false,\n        foods: [],\n        total_calories: 0,\n        total_protein: 0,\n        total_carbs: 0,\n        total_fat: 0,\n        analysis_time: Date.now() - startTime,\n        error: error instanceof Error ? error.message : 'Erreur inconnue'\n      };\n    }\n  }\n\n  /**\n   * Valider le format du fichier image\n   */\n  private static isValidImageFile(file: File): boolean {\n    const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp'];\n    const maxSize = 10 * 1024 * 1024; // 10MB\n    \n    return allowedTypes.includes(file.type) && file.size <= maxSize;\n  }\n\n  /**\n   * Optimiser l'image pour l'analyse (redimensionnement, compression)\n   */\n  private static async optimizeImage(file: File): Promise<Blob> {\n    return new Promise((resolve, reject) => {\n      const canvas = document.createElement('canvas');\n      const ctx = canvas.getContext('2d');\n      const img = new Image();\n      \n      img.onload = () => {\n        // Redimensionner à 1024x1024 max pour optimiser l'analyse\n        const maxSize = 1024;\n        let { width, height } = img;\n        \n        if (width > height) {\n          if (width > maxSize) {\n            height = (height * maxSize) / width;\n            width = maxSize;\n          }\n        } else {\n          if (height > maxSize) {\n            width = (width * maxSize) / height;\n            height = maxSize;\n          }\n        }\n        \n        canvas.width = width;\n        canvas.height = height;\n        \n        ctx?.drawImage(img, 0, 0, width, height);\n        \n        canvas.toBlob((blob) => {\n          if (blob) {\n            resolve(blob);\n          } else {\n            reject(new Error('Impossible d\\'optimiser l\\'image'));\n          }\n        }, 'image/jpeg', 0.8);\n      };\n      \n      img.onerror = () => reject(new Error('Impossible de charger l\\'image'));\n      img.src = URL.createObjectURL(file);\n    });\n  }\n\n  /**\n   * Effectuer la reconnaissance des aliments via API externe\n   */\n  private static async performFoodRecognition(imageBlob: Blob): Promise<Array<{name: string, confidence: number}>> {\n    // Simulation pour le développement - à remplacer par une vraie API\n    if (process.env.NODE_ENV === 'development') {\n      return this.mockFoodRecognition();\n    }\n\n    const formData = new FormData();\n    formData.append('image', imageBlob);\n\n    try {\n      const response = await fetch(`${this.API_ENDPOINTS.FOOD_RECOGNITION}/analyze`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${import.meta.env.VITE_FOOD_RECOGNITION_API_KEY}`,\n        },\n        body: formData\n      });\n\n      if (!response.ok) {\n        throw new Error(`Erreur API: ${response.status}`);\n      }\n\n      const data = await response.json();\n      return data.predictions || [];\n      \n    } catch (error: any) {\n      console.error('Erreur reconnaissance alimentaire:', error);\n      // Fallback sur les données simulées\n      return this.mockFoodRecognition();\n    }\n  }\n\n  /**\n   * Simulation de reconnaissance alimentaire pour le développement\n   */\n  private static mockFoodRecognition(): Array<{name: string, confidence: number}> {\n    const mockFoods = [\n      { name: 'Pomme', confidence: 0.92 },\n      { name: 'Banane', confidence: 0.88 },\n      { name: 'Pain complet', confidence: 0.75 },\n      { name: 'Fromage cheddar', confidence: 0.82 },\n      { name: 'Salade verte', confidence: 0.69 }\n    ];\n\n    // Retourner 1-3 aliments aléatoires\n    const numFoods = Math.floor(Math.random() * 3) + 1;\n    return mockFoods\n      .sort(() => Math.random() - 0.5)\n      .slice(0, numFoods)\n      .filter(food => food.confidence > 0.6);\n  }\n\n  /**\n   * Enrichir avec les données nutritionnelles\n   */\n  private static async enrichWithNutritionalData(\n    recognizedItems: Array<{name: string, confidence: number}>\n  ): Promise<RecognizedFood[]> {\n    const enrichedFoods: RecognizedFood[] = [];\n\n    for (const item of recognizedItems) {\n      try {\n        const foodData = await this.getNutritionData(item.name);\n        const estimatedQuantity = this.estimateQuantity(item.name);\n        \n        if (foodData) {\n          const factor = estimatedQuantity / 100; // conversion pour 100g\n          \n          enrichedFoods.push({\n            food: foodData,\n            confidence: item.confidence,\n            estimated_quantity: estimatedQuantity,\n            estimated_calories: foodData.calories_per_100g * factor,\n            estimated_protein: foodData.protein_per_100g * factor,\n            estimated_carbs: foodData.carbs_per_100g * factor,\n            estimated_fat: foodData.fat_per_100g * factor\n          });\n        }\n      } catch (error: any) {\n        console.error(`Erreur lors de l'enrichissement pour ${item.name}:`, error);\n      }\n    }\n\n    return enrichedFoods;\n  }\n\n  /**\n   * Récupérer les données nutritionnelles d'un aliment\n   */\n  private static async getNutritionData(foodName: string): Promise<FoodItem | null> {\n    try {\n      // Essayer d'abord dans la base locale Supabase\n      const { data: localFood } = await supabase\n        .from('nutrition_foods')\n        .select('*')\n        .ilike('name', `%${foodName}%`)\n        .limit(1)\n        .single();\n\n      if (localFood) {\n        return localFood;\n      }\n\n      // Sinon, utiliser l'API externe (simulation pour le développement)\n      return this.getMockNutritionData(foodName);\n      \n    } catch (error: any) {\n      console.error(`Erreur récupération données nutrition pour ${foodName}:`, error);\n      return this.getMockNutritionData(foodName);\n    }\n  }\n\n  /**\n   * Données nutritionnelles simulées\n   */\n  private static getMockNutritionData(foodName: string): FoodItem {\n    const mockDatabase: Record<string, Omit<FoodItem, 'id' | 'name'>> = {\n      'Pomme': { calories_per_100g: 52, protein_per_100g: 0.3, carbs_per_100g: 14, fat_per_100g: 0.2 },\n      'Banane': { calories_per_100g: 89, protein_per_100g: 1.1, carbs_per_100g: 23, fat_per_100g: 0.3 },\n      'Pain complet': { calories_per_100g: 247, protein_per_100g: 13, carbs_per_100g: 41, fat_per_100g: 4.2 },\n      'Fromage cheddar': { calories_per_100g: 403, protein_per_100g: 25, carbs_per_100g: 1.3, fat_per_100g: 33 },\n      'Salade verte': { calories_per_100g: 15, protein_per_100g: 1.4, carbs_per_100g: 2.9, fat_per_100g: 0.1 }\n    };\n\n    const data = mockDatabase[foodName] || mockDatabase['Pomme'];\n    \n    return {\n      id: `mock-${foodName.toLowerCase().replace(/\\s+/g, '-')}`,\n      name: foodName,\n      ...data\n    };\n  }\n\n  /**\n   * Estimer la quantité d'un aliment (en grammes)\n   */\n  private static estimateQuantity(foodName: string): number {\n    const quantities: Record<string, number> = {\n      'Pomme': 150,\n      'Banane': 120,\n      'Pain complet': 30, // 1 tranche\n      'Fromage cheddar': 25,\n      'Salade verte': 50\n    };\n\n    return quantities[foodName] || 100;\n  }\n\n  /**\n   * Calculer les totaux nutritionnels\n   */\n  private static calculateTotals(foods: RecognizedFood[]): {\n    total_calories: number;\n    total_protein: number;\n    total_carbs: number;\n    total_fat: number;\n  } {\n    return foods.reduce(\n      (totals, food) => ({\n        total_calories: totals.total_calories + food.estimated_calories,\n        total_protein: totals.total_protein + food.estimated_protein,\n        total_carbs: totals.total_carbs + food.estimated_carbs,\n        total_fat: totals.total_fat + food.estimated_fat\n      }),\n      { total_calories: 0, total_protein: 0, total_carbs: 0, total_fat: 0 }\n    );\n  }\n\n  /**\n   * Sauvegarder l'analyse dans l'historique utilisateur\n   */\n  static async saveAnalysisToHistory(\n    userId: string,\n    analysisResult: FoodAnalysisResult,\n    imageUrl: string\n  ): Promise<void> {\n    try {\n      const { error } = await supabase\n        .from('nutrition_photo_analyses')\n        .insert({\n          user_id: userId,\n          image_url: imageUrl,\n          foods_detected: analysisResult.foods,\n          total_calories: analysisResult.total_calories,\n          total_protein: analysisResult.total_protein,\n          total_carbs: analysisResult.total_carbs,\n          total_fat: analysisResult.total_fat,\n          analysis_time: analysisResult.analysis_time,\n          created_at: new Date().toISOString()\n        });\n\n      if (error) {\n        console.error('Erreur sauvegarde analyse:', error);\n      }\n    } catch (error: any) {\n      console.error('Erreur lors de la sauvegarde:', error);\n    }\n  }\n}\n\nexport default FoodRecognitionService;"],"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","ignoreList":[]}